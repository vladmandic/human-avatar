/*
  Human Avatar Demo
  author: <https://github.com/vladmandic>'
*/

var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
}) : x)(function(x) {
  if (typeof require !== "undefined")
    return require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});

// node_modules/.pnpm/@vladmandic+human@3.0.1/node_modules/@vladmandic/human/dist/human.esm.js
var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __require2 = /* @__PURE__ */ ((x) => typeof __require !== "undefined" ? __require : typeof Proxy !== "undefined" ? new Proxy(x, {
  get: (a, b) => (typeof __require !== "undefined" ? __require : a)[b]
}) : x)(function(x) {
  if (typeof __require !== "undefined")
    return __require.apply(this, arguments);
  throw new Error('Dynamic require of "' + x + '" is not supported');
});
var __export = (target, all2) => {
  for (var name in all2)
    __defProp(target, name, { get: all2[name], enumerable: true });
};
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var tfjs_esm_exports = {};
__export(tfjs_esm_exports, {
  Abs: () => gs,
  Acos: () => sa,
  Acosh: () => aa,
  AdadeltaOptimizer: () => Ei,
  AdagradOptimizer: () => $i,
  AdamOptimizer: () => Ai,
  AdamaxOptimizer: () => Ri,
  Add: () => eo,
  AddN: () => Mo,
  All: () => Lo,
  Any: () => Bo,
  ArgMax: () => Vo,
  ArgMin: () => Za,
  Asin: () => ia,
  Asinh: () => ua,
  Atan: () => pa,
  Atan2: () => la,
  Atanh: () => ca,
  AvgPool: () => zo,
  AvgPool3D: () => ip,
  AvgPool3DGrad: () => Im,
  AvgPoolGrad: () => wm,
  BackendWasm: () => Pl,
  BatchMatMul: () => Wo,
  BatchToSpaceND: () => xs,
  Bincount: () => Ja,
  BroadcastArgs: () => up,
  BroadcastTo: () => wne,
  Cast: () => co,
  Ceil: () => Uo,
  ClipByValue: () => lo,
  Complex: () => ei,
  ComplexAbs: () => pp,
  Concat: () => ys,
  Conv2D: () => Go,
  Conv2DBackpropFilter: () => cp,
  Conv2DBackpropInput: () => Ho,
  Conv3D: () => lp,
  Conv3DBackpropFilterV2: () => vm,
  Conv3DBackpropInputV2: () => mp,
  Cos: () => qo,
  Cosh: () => Ko,
  CropAndResize: () => Yo,
  Cumprod: () => jo,
  Cumsum: () => Xo,
  DataStorage: () => Do,
  DenseBincount: () => ti,
  DepthToSpace: () => Qo,
  DepthwiseConv2dNative: () => Zo,
  DepthwiseConv2dNativeBackpropFilter: () => dp,
  DepthwiseConv2dNativeBackpropInput: () => fp,
  Diag: () => hp,
  Dilation2D: () => gp,
  Dilation2DBackpropFilter: () => bb,
  Dilation2DBackpropInput: () => yb,
  ENV: () => hb,
  Einsum: () => ri,
  Elu: () => en,
  EluGrad: () => km,
  Environment: () => Uc,
  Equal: () => tn,
  Erf: () => ma,
  Exp: () => rn,
  ExpandDims: () => bs,
  Expm1: () => da,
  FFT: () => oi,
  Fill: () => Cs,
  FlipLeftRight: () => on,
  Floor: () => nn,
  FloorDiv: () => sn,
  FromPixels: () => Zi,
  FusedBatchNorm: () => an,
  FusedConv2D: () => ho,
  FusedDepthwiseConv2D: () => go,
  GPGPUContext: () => Fu,
  GatherNd: () => un,
  GatherV2: () => Ss,
  GraphModel: () => ll,
  Greater: () => pn,
  GreaterEqual: () => cn,
  IFFT: () => ni,
  Identity: () => mo,
  Imag: () => si,
  IsFinite: () => fa,
  IsInf: () => ha,
  IsNan: () => ln,
  KernelBackend: () => Zr,
  LRN: () => yp,
  LRNGrad: () => Nm,
  LeakyRelu: () => mn,
  Less: () => dn,
  LessEqual: () => fn,
  LinSpace: () => xp,
  Log: () => hn,
  Log1p: () => ga,
  LogSoftmax: () => Ine,
  LogicalAnd: () => gn,
  LogicalNot: () => xn,
  LogicalOr: () => xa,
  LogicalXor: () => GI,
  LowerBound: () => vne,
  MathBackendCPU: () => Oi,
  MathBackendWebGL: () => Bi,
  Max: () => yn,
  MaxPool: () => Cn,
  MaxPool3D: () => bp,
  MaxPool3DGrad: () => _m,
  MaxPoolGrad: () => Tm,
  MaxPoolWithArgmax: () => Cp,
  Maximum: () => bn,
  Mean: () => Sn,
  Min: () => wn,
  Minimum: () => In,
  MirrorPad: () => vn,
  Mod: () => ya,
  MomentumOptimizer: () => Fi,
  Multinomial: () => Sp,
  Multiply: () => kn,
  Neg: () => ws,
  NonMaxSuppressionV3: () => Tn,
  NonMaxSuppressionV4: () => ba,
  NonMaxSuppressionV5: () => _n,
  NotEqual: () => Nn,
  OP_SCOPE_SUFFIX: () => Lb,
  OneHot: () => En,
  OnesLike: () => Is,
  Optimizer: () => wr,
  OptimizerConstructors: () => ns,
  Pack: () => vs,
  PadV2: () => $n,
  Pool: () => kne,
  Pow: () => An,
  Prelu: () => Rn,
  Prod: () => Fn,
  RMSPropOptimizer: () => Di,
  RaggedGather: () => wp,
  RaggedRange: () => Ip,
  RaggedTensorToTensor: () => vp,
  Range: () => ks,
  Rank: () => _b,
  Real: () => ai,
  RealDiv: () => Jo,
  Reciprocal: () => Dn,
  Reduction: () => Et,
  Relu: () => On,
  Relu6: () => Ln,
  Reshape: () => Ns,
  ResizeBilinear: () => Mn,
  ResizeBilinearGrad: () => $m,
  ResizeNearestNeighbor: () => Pn,
  ResizeNearestNeighborGrad: () => Em,
  Reverse: () => Bn,
  RotateWithOffset: () => es,
  Round: () => Ca,
  Rsqrt: () => Vn,
  SGDOptimizer: () => qs,
  ScatterNd: () => zn,
  SearchSorted: () => ii,
  Select: () => Ts,
  Selu: () => Xi,
  Sigmoid: () => Un,
  Sign: () => Yi,
  Sin: () => Wn,
  Sinh: () => Sa,
  Slice: () => _s,
  Softmax: () => qn,
  Softplus: () => Qi,
  SpaceToBatchND: () => Es,
  SparseFillEmptyRows: () => ui,
  SparseReshape: () => wa,
  SparseSegmentMean: () => pi,
  SparseSegmentSum: () => ci,
  SparseToDense: () => li,
  SplitV: () => $s,
  Sqrt: () => Gn,
  Square: () => mi,
  SquaredDifference: () => Kn,
  Step: () => Ds,
  StridedSlice: () => jn,
  StringNGrams: () => As,
  StringSplit: () => di,
  StringToHashBucketFast: () => fi,
  Sub: () => Xn,
  Sum: () => Hn,
  Tan: () => Yn,
  Tanh: () => Qn,
  Tensor: () => it,
  TensorBuffer: () => st,
  Tile: () => to,
  TopK: () => Zn,
  Transform: () => Jn,
  Transpose: () => ro,
  Unique: () => kp,
  Unpack: () => Rs,
  UnsortedSegmentSum: () => Np,
  UpperBound: () => Nne,
  Variable: () => va,
  WebGPUBackend: () => Ui,
  ZerosLike: () => Fs,
  _FusedMatMul: () => fo,
  abs: () => Yt,
  acos: () => fv,
  acosh: () => hv,
  add: () => xe,
  addN: () => gv,
  all: () => xv,
  any: () => yv,
  argMax: () => bv,
  argMin: () => Cv,
  asin: () => Sv,
  asinh: () => wv,
  atan: () => Iv,
  atan2: () => vv,
  atanh: () => kv,
  avgPool: () => td,
  avgPool3d: () => _v,
  backend: () => Oie,
  backend_util: () => S,
  basicLSTMCell: () => Ev,
  batchNorm: () => wi,
  batchNorm2d: () => Av,
  batchNorm3d: () => Rv,
  batchNorm4d: () => Fv,
  batchToSpaceND: () => rd,
  bincount: () => od,
  booleanMaskAsync: () => XG,
  broadcastArgs: () => Dv,
  broadcastTo: () => Ii,
  broadcast_util: () => br,
  browser: () => Q0,
  buffer: () => le,
  cast: () => Ke,
  ceil: () => Ov,
  clipByValue: () => Pv,
  clone: () => Br,
  complex: () => Tr,
  concat: () => gt,
  concat1d: () => Mv,
  concat2d: () => Lv,
  concat3d: () => Bv,
  concat4d: () => Vv,
  conv1d: () => zv,
  conv2d: () => vi,
  conv2dTranspose: () => Wv,
  conv3d: () => Uv,
  conv3dTranspose: () => Hv,
  copyRegisteredKernels: () => Dne,
  cos: () => qv,
  cosh: () => Kv,
  cosineWindow: () => il,
  cumprod: () => jv,
  cumsum: () => Xv,
  customGrad: () => Cr,
  denseBincount: () => Yv,
  deprecationWarn: () => eC,
  depthToSpace: () => Qv,
  depthwiseConv2d: () => Bp,
  deregisterOp: () => xK,
  device_util: () => yi,
  diag: () => Zv,
  dilation2d: () => Jv,
  disableDeprecationWarnings: () => vie,
  dispose: () => Dt,
  disposeVariables: () => kie,
  div: () => Ge,
  divNoNan: () => ek,
  dot: () => tk,
  dropout: () => aH,
  einsum: () => rk,
  elu: () => ad,
  enableDebugMode: () => Iie,
  enableProdMode: () => wie,
  enclosingPowerOfTwo: () => xC,
  engine: () => cr,
  env: () => O,
  equal: () => sd,
  erf: () => ok,
  euclideanNorm: () => ak,
  exp: () => Co,
  expandDims: () => Fa,
  expm1: () => ik,
  eye: () => id,
  fft: () => zp,
  fill: () => Ws,
  findBackend: () => Fie,
  findBackendFactory: () => Die,
  floor: () => ud,
  floorDiv: () => Jm,
  forceHalfFloat: () => L$,
  fused: () => yC,
  gather: () => pd,
  gatherND: () => nH,
  gather_util: () => Ym,
  getBackend: () => Aie,
  getGradient: () => Cb,
  getKernel: () => qc,
  getKernelsForBackend: () => Am,
  getThreadsCount: () => Nee,
  gpgpu_util: () => yw,
  grad: () => l4,
  grads: () => m4,
  greater: () => cu,
  greaterEqual: () => cd,
  ifft: () => hu,
  imag: () => Si,
  image: () => uq,
  inTopKAsync: () => uH,
  io: () => Ea,
  irfft: () => Fd,
  isFinite: () => uk,
  isInf: () => pk,
  isNaN: () => ck,
  keep: () => _r,
  kernel_impls: () => Lt,
  leakyRelu: () => ld,
  less: () => lk,
  lessEqual: () => Vp,
  linalg: () => pq,
  linspace: () => mk,
  loadGraphModel: () => l6,
  loadGraphModelSync: () => m6,
  localResponseNormalization: () => dk,
  log: () => Da,
  log1p: () => md,
  logSigmoid: () => fk,
  logSoftmax: () => hk,
  logSumExp: () => hd,
  logicalAnd: () => lu,
  logicalNot: () => gd,
  logicalOr: () => xd,
  logicalXor: () => gk,
  losses: () => cq,
  lowerBound: () => xk,
  matMul: () => Xe,
  math: () => j0,
  max: () => Us,
  maxPool: () => bd,
  maxPool3d: () => yk,
  maxPoolWithArgmax: () => bk,
  maximum: () => Cd,
  mean: () => mu,
  memory: () => Nie,
  meshgrid: () => Ck,
  min: () => sl,
  minimum: () => Sd,
  mirrorPad: () => Sk,
  mod: () => wk,
  moments: () => Ik,
  movingAverage: () => QG,
  mul: () => ae,
  multiRNNCell: () => vk,
  multinomial: () => kk,
  neg: () => yr,
  nextFrame: () => CC,
  norm: () => pu,
  notEqual: () => wd,
  oneHot: () => tl,
  ones: () => Gs,
  onesLike: () => Nk,
  op: () => N,
  outerProduct: () => Tk,
  pad: () => Hs,
  pad1d: () => _k,
  pad2d: () => Ek,
  pad3d: () => $k,
  pad4d: () => Ak,
  pool: () => Rk,
  pow: () => Ra,
  prelu: () => vd,
  print: () => Gm,
  prod: () => Fk,
  profile: () => Tie,
  raggedGather: () => Dk,
  raggedRange: () => Ok,
  raggedTensorToTensor: () => Pk,
  rand: () => Mk,
  randomGamma: () => e1,
  randomNormal: () => Ed,
  randomStandardNormal: () => t1,
  randomUniform: () => $d,
  range: () => Ni,
  ready: () => $ie,
  real: () => $a,
  reciprocal: () => r1,
  registerBackend: () => Ci,
  registerGradient: () => Ane,
  registerKernel: () => Ia,
  registerOp: () => gK,
  relu: () => Ti,
  relu6: () => Ad,
  removeBackend: () => Rie,
  reshape: () => z,
  reverse: () => no,
  reverse1d: () => o1,
  reverse2d: () => n1,
  reverse3d: () => s1,
  reverse4d: () => a1,
  rfft: () => Wp,
  round: () => Rd,
  rsqrt: () => i1,
  scalar: () => be,
  scatterND: () => JG,
  scatter_util: () => rl,
  searchSorted: () => al,
  selu: () => u1,
  separableConv2d: () => p1,
  serialization: () => pv,
  setBackend: () => Eie,
  setPlatform: () => Pie,
  setThreadsCount: () => kee,
  setWasmPath: () => Iee,
  setWasmPaths: () => vee,
  setWebGLContext: () => RS,
  setdiff1dAsync: () => c1,
  shared: () => Qp,
  sigmoid: () => zs,
  sign: () => l1,
  signal: () => iq,
  sin: () => m1,
  sinh: () => d1,
  slice: () => He,
  slice1d: () => f1,
  slice2d: () => h1,
  slice3d: () => g1,
  slice4d: () => x1,
  slice_util: () => ut,
  softmax: () => y1,
  softplus: () => fd,
  spaceToBatchND: () => Id,
  sparse: () => lq,
  sparseToDense: () => rH,
  spectral: () => aq,
  split: () => Oa,
  sqrt: () => $r,
  square: () => Qt,
  squaredDifference: () => Dd,
  squeeze: () => Up,
  stack: () => Sr,
  step: () => Od,
  stridedSlice: () => b1,
  string: () => mq,
  sub: () => Ne,
  sum: () => et,
  sumOutType: () => ka,
  tan: () => C1,
  tanh: () => nl,
  tensor: () => nr,
  tensor1d: () => mr,
  tensor2d: () => _i,
  tensor3d: () => Xm,
  tensor4d: () => S1,
  tensor5d: () => w1,
  tensor6d: () => I1,
  tensor_util: () => h0,
  test_util: () => dv,
  tidy: () => Ee,
  tile: () => ki,
  time: () => _ie,
  topk: () => v1,
  train: () => hMe,
  transpose: () => Mp,
  truncatedNormal: () => k1,
  unique: () => N1,
  unregisterGradient: () => Fne,
  unregisterKernel: () => Rne,
  unsortedSegmentSum: () => T1,
  unstack: () => so,
  upcastType: () => dt,
  upperBound: () => _1,
  util: () => y,
  valueAndGrad: () => d4,
  valueAndGrads: () => f4,
  variable: () => E1,
  variableGrads: () => pC,
  version: () => gne,
  version_converter: () => f6,
  version_core: () => xW,
  version_cpu: () => U6,
  version_wasm: () => Tee,
  version_webgl: () => L8,
  webgl: () => L9e,
  webgl_util: () => oc,
  webgpu_util: () => nI,
  where: () => os,
  whereAsync: () => Md,
  zeros: () => Vr,
  zerosLike: () => Ut
});
var yV = Object.create;
var ub = Object.defineProperty;
var bV = Object.getOwnPropertyDescriptor;
var CV = Object.getOwnPropertyNames;
var SV = Object.getPrototypeOf;
var wV = Object.prototype.hasOwnProperty;
var bm = ((r) => typeof __require2 != "undefined" ? __require2 : typeof Proxy != "undefined" ? new Proxy(r, { get: (e, t6) => (typeof __require2 != "undefined" ? __require2 : e)[t6] }) : r)(function(r) {
  if (typeof __require2 != "undefined")
    return __require2.apply(this, arguments);
  throw new Error('Dynamic require of "' + r + '" is not supported');
});
var qt = (r, e) => () => (e || r((e = { exports: {} }).exports, e), e.exports);
var Ue = (r, e) => {
  for (var t6 in e)
    ub(r, t6, { get: e[t6], enumerable: true });
};
var IV = (r, e, t6, o) => {
  if (e && typeof e == "object" || typeof e == "function")
    for (let n of CV(e))
      !wV.call(r, n) && n !== t6 && ub(r, n, { get: () => e[n], enumerable: !(o = bV(e, n)) || o.enumerable });
  return r;
};
var rp = (r, e, t6) => (t6 = r != null ? yV(SV(r)) : {}, IV(e || !r || !r.__esModule ? ub(t6, "default", { value: r, enumerable: true }) : t6, r));
var r0 = qt((Pne, t0) => {
  t0.exports = It;
  var xo = null;
  try {
    xo = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;
  } catch (r) {
  }
  function It(r, e, t6) {
    this.low = r | 0, this.high = e | 0, this.unsigned = !!t6;
  }
  It.prototype.__isLong__;
  Object.defineProperty(It.prototype, "__isLong__", { value: true });
  function Lr(r) {
    return (r && r.__isLong__) === true;
  }
  It.isLong = Lr;
  var qI = {}, KI = {};
  function eu(r, e) {
    var t6, o, n;
    return e ? (r >>>= 0, (n = 0 <= r && r < 256) && (o = KI[r], o) ? o : (t6 = vt(r, (r | 0) < 0 ? -1 : 0, true), n && (KI[r] = t6), t6)) : (r |= 0, (n = -128 <= r && r < 128) && (o = qI[r], o) ? o : (t6 = vt(r, r < 0 ? -1 : 0, false), n && (qI[r] = t6), t6));
  }
  It.fromInt = eu;
  function yo(r, e) {
    if (isNaN(r))
      return e ? Ji : bo;
    if (e) {
      if (r < 0)
        return Ji;
      if (r >= QI)
        return e0;
    } else {
      if (r <= -XI)
        return Mr;
      if (r + 1 >= XI)
        return JI;
    }
    return r < 0 ? yo(-r, e).neg() : vt(r % Ep | 0, r / Ep | 0, e);
  }
  It.fromNumber = yo;
  function vt(r, e, t6) {
    return new It(r, e, t6);
  }
  It.fromBits = vt;
  var Rm = Math.pow;
  function Ib(r, e, t6) {
    if (r.length === 0)
      throw Error("empty string");
    if (r === "NaN" || r === "Infinity" || r === "+Infinity" || r === "-Infinity")
      return bo;
    if (typeof e == "number" ? (t6 = e, e = false) : e = !!e, t6 = t6 || 10, t6 < 2 || 36 < t6)
      throw RangeError("radix");
    var o;
    if ((o = r.indexOf("-")) > 0)
      throw Error("interior hyphen");
    if (o === 0)
      return Ib(r.substring(1), e, t6).neg();
    for (var n = yo(Rm(t6, 8)), s = bo, a = 0; a < r.length; a += 8) {
      var i = Math.min(8, r.length - a), p = parseInt(r.substring(a, a + i), t6);
      if (i < 8) {
        var u = yo(Rm(t6, i));
        s = s.mul(u).add(yo(p));
      } else
        s = s.mul(n), s = s.add(yo(p));
    }
    return s.unsigned = e, s;
  }
  It.fromString = Ib;
  function ts(r, e) {
    return typeof r == "number" ? yo(r, e) : typeof r == "string" ? Ib(r, e) : vt(r.low, r.high, typeof e == "boolean" ? e : r.unsigned);
  }
  It.fromValue = ts;
  var jI = 1 << 16, HV = 1 << 24, Ep = jI * jI, QI = Ep * Ep, XI = QI / 2, YI = eu(HV), bo = eu(0);
  It.ZERO = bo;
  var Ji = eu(0, true);
  It.UZERO = Ji;
  var _p = eu(1);
  It.ONE = _p;
  var ZI = eu(1, true);
  It.UONE = ZI;
  var wb = eu(-1);
  It.NEG_ONE = wb;
  var JI = vt(-1, 2147483647, false);
  It.MAX_VALUE = JI;
  var e0 = vt(-1, -1, true);
  It.MAX_UNSIGNED_VALUE = e0;
  var Mr = vt(0, -2147483648, false);
  It.MIN_VALUE = Mr;
  var me = It.prototype;
  me.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  };
  me.toNumber = function() {
    return this.unsigned ? (this.high >>> 0) * Ep + (this.low >>> 0) : this.high * Ep + (this.low >>> 0);
  };
  me.toString = function(e) {
    if (e = e || 10, e < 2 || 36 < e)
      throw RangeError("radix");
    if (this.isZero())
      return "0";
    if (this.isNegative())
      if (this.eq(Mr)) {
        var t6 = yo(e), o = this.div(t6), n = o.mul(t6).sub(this);
        return o.toString(e) + n.toInt().toString(e);
      } else
        return "-" + this.neg().toString(e);
    for (var s = yo(Rm(e, 6), this.unsigned), a = this, i = ""; ; ) {
      var p = a.div(s), u = a.sub(p.mul(s)).toInt() >>> 0, c = u.toString(e);
      if (a = p, a.isZero())
        return c + i;
      for (; c.length < 6; )
        c = "0" + c;
      i = "" + c + i;
    }
  };
  me.getHighBits = function() {
    return this.high;
  };
  me.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  };
  me.getLowBits = function() {
    return this.low;
  };
  me.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  };
  me.getNumBitsAbs = function() {
    if (this.isNegative())
      return this.eq(Mr) ? 64 : this.neg().getNumBitsAbs();
    for (var e = this.high != 0 ? this.high : this.low, t6 = 31; t6 > 0 && (e & 1 << t6) == 0; t6--)
      ;
    return this.high != 0 ? t6 + 33 : t6 + 1;
  };
  me.isZero = function() {
    return this.high === 0 && this.low === 0;
  };
  me.eqz = me.isZero;
  me.isNegative = function() {
    return !this.unsigned && this.high < 0;
  };
  me.isPositive = function() {
    return this.unsigned || this.high >= 0;
  };
  me.isOdd = function() {
    return (this.low & 1) === 1;
  };
  me.isEven = function() {
    return (this.low & 1) === 0;
  };
  me.equals = function(e) {
    return Lr(e) || (e = ts(e)), this.unsigned !== e.unsigned && this.high >>> 31 === 1 && e.high >>> 31 === 1 ? false : this.high === e.high && this.low === e.low;
  };
  me.eq = me.equals;
  me.notEquals = function(e) {
    return !this.eq(e);
  };
  me.neq = me.notEquals;
  me.ne = me.notEquals;
  me.lessThan = function(e) {
    return this.comp(e) < 0;
  };
  me.lt = me.lessThan;
  me.lessThanOrEqual = function(e) {
    return this.comp(e) <= 0;
  };
  me.lte = me.lessThanOrEqual;
  me.le = me.lessThanOrEqual;
  me.greaterThan = function(e) {
    return this.comp(e) > 0;
  };
  me.gt = me.greaterThan;
  me.greaterThanOrEqual = function(e) {
    return this.comp(e) >= 0;
  };
  me.gte = me.greaterThanOrEqual;
  me.ge = me.greaterThanOrEqual;
  me.compare = function(e) {
    if (Lr(e) || (e = ts(e)), this.eq(e))
      return 0;
    var t6 = this.isNegative(), o = e.isNegative();
    return t6 && !o ? -1 : !t6 && o ? 1 : this.unsigned ? e.high >>> 0 > this.high >>> 0 || e.high === this.high && e.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(e).isNegative() ? -1 : 1;
  };
  me.comp = me.compare;
  me.negate = function() {
    return !this.unsigned && this.eq(Mr) ? Mr : this.not().add(_p);
  };
  me.neg = me.negate;
  me.add = function(e) {
    Lr(e) || (e = ts(e));
    var t6 = this.high >>> 16, o = this.high & 65535, n = this.low >>> 16, s = this.low & 65535, a = e.high >>> 16, i = e.high & 65535, p = e.low >>> 16, u = e.low & 65535, c = 0, l = 0, m = 0, d = 0;
    return d += s + u, m += d >>> 16, d &= 65535, m += n + p, l += m >>> 16, m &= 65535, l += o + i, c += l >>> 16, l &= 65535, c += t6 + a, c &= 65535, vt(m << 16 | d, c << 16 | l, this.unsigned);
  };
  me.subtract = function(e) {
    return Lr(e) || (e = ts(e)), this.add(e.neg());
  };
  me.sub = me.subtract;
  me.multiply = function(e) {
    if (this.isZero())
      return bo;
    if (Lr(e) || (e = ts(e)), xo) {
      var t6 = xo.mul(this.low, this.high, e.low, e.high);
      return vt(t6, xo.get_high(), this.unsigned);
    }
    if (e.isZero())
      return bo;
    if (this.eq(Mr))
      return e.isOdd() ? Mr : bo;
    if (e.eq(Mr))
      return this.isOdd() ? Mr : bo;
    if (this.isNegative())
      return e.isNegative() ? this.neg().mul(e.neg()) : this.neg().mul(e).neg();
    if (e.isNegative())
      return this.mul(e.neg()).neg();
    if (this.lt(YI) && e.lt(YI))
      return yo(this.toNumber() * e.toNumber(), this.unsigned);
    var o = this.high >>> 16, n = this.high & 65535, s = this.low >>> 16, a = this.low & 65535, i = e.high >>> 16, p = e.high & 65535, u = e.low >>> 16, c = e.low & 65535, l = 0, m = 0, d = 0, f = 0;
    return f += a * c, d += f >>> 16, f &= 65535, d += s * c, m += d >>> 16, d &= 65535, d += a * u, m += d >>> 16, d &= 65535, m += n * c, l += m >>> 16, m &= 65535, m += s * u, l += m >>> 16, m &= 65535, m += a * p, l += m >>> 16, m &= 65535, l += o * c + n * u + s * p + a * i, l &= 65535, vt(d << 16 | f, l << 16 | m, this.unsigned);
  };
  me.mul = me.multiply;
  me.divide = function(e) {
    if (Lr(e) || (e = ts(e)), e.isZero())
      throw Error("division by zero");
    if (xo) {
      if (!this.unsigned && this.high === -2147483648 && e.low === -1 && e.high === -1)
        return this;
      var t6 = (this.unsigned ? xo.div_u : xo.div_s)(this.low, this.high, e.low, e.high);
      return vt(t6, xo.get_high(), this.unsigned);
    }
    if (this.isZero())
      return this.unsigned ? Ji : bo;
    var o, n, s;
    if (this.unsigned) {
      if (e.unsigned || (e = e.toUnsigned()), e.gt(this))
        return Ji;
      if (e.gt(this.shru(1)))
        return ZI;
      s = Ji;
    } else {
      if (this.eq(Mr)) {
        if (e.eq(_p) || e.eq(wb))
          return Mr;
        if (e.eq(Mr))
          return _p;
        var a = this.shr(1);
        return o = a.div(e).shl(1), o.eq(bo) ? e.isNegative() ? _p : wb : (n = this.sub(e.mul(o)), s = o.add(n.div(e)), s);
      } else if (e.eq(Mr))
        return this.unsigned ? Ji : bo;
      if (this.isNegative())
        return e.isNegative() ? this.neg().div(e.neg()) : this.neg().div(e).neg();
      if (e.isNegative())
        return this.div(e.neg()).neg();
      s = bo;
    }
    for (n = this; n.gte(e); ) {
      o = Math.max(1, Math.floor(n.toNumber() / e.toNumber()));
      for (var i = Math.ceil(Math.log(o) / Math.LN2), p = i <= 48 ? 1 : Rm(2, i - 48), u = yo(o), c = u.mul(e); c.isNegative() || c.gt(n); )
        o -= p, u = yo(o, this.unsigned), c = u.mul(e);
      u.isZero() && (u = _p), s = s.add(u), n = n.sub(c);
    }
    return s;
  };
  me.div = me.divide;
  me.modulo = function(e) {
    if (Lr(e) || (e = ts(e)), xo) {
      var t6 = (this.unsigned ? xo.rem_u : xo.rem_s)(this.low, this.high, e.low, e.high);
      return vt(t6, xo.get_high(), this.unsigned);
    }
    return this.sub(this.div(e).mul(e));
  };
  me.mod = me.modulo;
  me.rem = me.modulo;
  me.not = function() {
    return vt(~this.low, ~this.high, this.unsigned);
  };
  me.and = function(e) {
    return Lr(e) || (e = ts(e)), vt(this.low & e.low, this.high & e.high, this.unsigned);
  };
  me.or = function(e) {
    return Lr(e) || (e = ts(e)), vt(this.low | e.low, this.high | e.high, this.unsigned);
  };
  me.xor = function(e) {
    return Lr(e) || (e = ts(e)), vt(this.low ^ e.low, this.high ^ e.high, this.unsigned);
  };
  me.shiftLeft = function(e) {
    return Lr(e) && (e = e.toInt()), (e &= 63) === 0 ? this : e < 32 ? vt(this.low << e, this.high << e | this.low >>> 32 - e, this.unsigned) : vt(0, this.low << e - 32, this.unsigned);
  };
  me.shl = me.shiftLeft;
  me.shiftRight = function(e) {
    return Lr(e) && (e = e.toInt()), (e &= 63) === 0 ? this : e < 32 ? vt(this.low >>> e | this.high << 32 - e, this.high >> e, this.unsigned) : vt(this.high >> e - 32, this.high >= 0 ? 0 : -1, this.unsigned);
  };
  me.shr = me.shiftRight;
  me.shiftRightUnsigned = function(e) {
    if (Lr(e) && (e = e.toInt()), e &= 63, e === 0)
      return this;
    var t6 = this.high;
    if (e < 32) {
      var o = this.low;
      return vt(o >>> e | t6 << 32 - e, t6 >>> e, this.unsigned);
    } else
      return e === 32 ? vt(t6, 0, this.unsigned) : vt(t6 >>> e - 32, 0, this.unsigned);
  };
  me.shru = me.shiftRightUnsigned;
  me.shr_u = me.shiftRightUnsigned;
  me.toSigned = function() {
    return this.unsigned ? vt(this.low, this.high, false) : this;
  };
  me.toUnsigned = function() {
    return this.unsigned ? this : vt(this.low, this.high, true);
  };
  me.toBytes = function(e) {
    return e ? this.toBytesLE() : this.toBytesBE();
  };
  me.toBytesLE = function() {
    var e = this.high, t6 = this.low;
    return [t6 & 255, t6 >>> 8 & 255, t6 >>> 16 & 255, t6 >>> 24, e & 255, e >>> 8 & 255, e >>> 16 & 255, e >>> 24];
  };
  me.toBytesBE = function() {
    var e = this.high, t6 = this.low;
    return [e >>> 24, e >>> 16 & 255, e >>> 8 & 255, e & 255, t6 >>> 24, t6 >>> 16 & 255, t6 >>> 8 & 255, t6 & 255];
  };
  It.fromBytes = function(e, t6, o) {
    return o ? It.fromBytesLE(e, t6) : It.fromBytesBE(e, t6);
  };
  It.fromBytesLE = function(e, t6) {
    return new It(e[0] | e[1] << 8 | e[2] << 16 | e[3] << 24, e[4] | e[5] << 8 | e[6] << 16 | e[7] << 24, t6);
  };
  It.fromBytesBE = function(e, t6) {
    return new It(e[4] << 24 | e[5] << 16 | e[6] << 8 | e[7], e[0] << 24 | e[1] << 16 | e[2] << 8 | e[3], t6);
  };
});
var M0 = qt(() => {
});
var L0 = qt(() => {
});
var Bk = qt((Lk, cC) => {
  (function(r, e, t6) {
    function o(i) {
      var p = this, u = a();
      p.next = function() {
        var c = 2091639 * p.s0 + p.c * 23283064365386963e-26;
        return p.s0 = p.s1, p.s1 = p.s2, p.s2 = c - (p.c = c | 0);
      }, p.c = 1, p.s0 = u(" "), p.s1 = u(" "), p.s2 = u(" "), p.s0 -= u(i), p.s0 < 0 && (p.s0 += 1), p.s1 -= u(i), p.s1 < 0 && (p.s1 += 1), p.s2 -= u(i), p.s2 < 0 && (p.s2 += 1), u = null;
    }
    function n(i, p) {
      return p.c = i.c, p.s0 = i.s0, p.s1 = i.s1, p.s2 = i.s2, p;
    }
    function s(i, p) {
      var u = new o(i), c = p && p.state, l = u.next;
      return l.int32 = function() {
        return u.next() * 4294967296 | 0;
      }, l.double = function() {
        return l() + (l() * 2097152 | 0) * 11102230246251565e-32;
      }, l.quick = l, c && (typeof c == "object" && n(c, u), l.state = function() {
        return n(u, {});
      }), l;
    }
    function a() {
      var i = 4022871197, p = function(u) {
        u = String(u);
        for (var c = 0; c < u.length; c++) {
          i += u.charCodeAt(c);
          var l = 0.02519603282416938 * i;
          i = l >>> 0, l -= i, l *= i, i = l >>> 0, l -= i, i += l * 4294967296;
        }
        return (i >>> 0) * 23283064365386963e-26;
      };
      return p;
    }
    e && e.exports ? e.exports = s : t6 && t6.amd ? t6(function() {
      return s;
    }) : this.alea = s;
  })(Lk, typeof cC == "object" && cC, typeof define == "function" && define);
});
var zk = qt((Vk, lC) => {
  (function(r, e, t6) {
    function o(a) {
      var i = this, p = "";
      i.x = 0, i.y = 0, i.z = 0, i.w = 0, i.next = function() {
        var c = i.x ^ i.x << 11;
        return i.x = i.y, i.y = i.z, i.z = i.w, i.w ^= i.w >>> 19 ^ c ^ c >>> 8;
      }, a === (a | 0) ? i.x = a : p += a;
      for (var u = 0; u < p.length + 64; u++)
        i.x ^= p.charCodeAt(u) | 0, i.next();
    }
    function n(a, i) {
      return i.x = a.x, i.y = a.y, i.z = a.z, i.w = a.w, i;
    }
    function s(a, i) {
      var p = new o(a), u = i && i.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var l = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, d = (l + m) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = p.next, c.quick = c, u && (typeof u == "object" && n(u, p), c.state = function() {
        return n(p, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t6 && t6.amd ? t6(function() {
      return s;
    }) : this.xor128 = s;
  })(Vk, typeof lC == "object" && lC, typeof define == "function" && define);
});
var Uk = qt((Wk, mC) => {
  (function(r, e, t6) {
    function o(a) {
      var i = this, p = "";
      i.next = function() {
        var c = i.x ^ i.x >>> 2;
        return i.x = i.y, i.y = i.z, i.z = i.w, i.w = i.v, (i.d = i.d + 362437 | 0) + (i.v = i.v ^ i.v << 4 ^ (c ^ c << 1)) | 0;
      }, i.x = 0, i.y = 0, i.z = 0, i.w = 0, i.v = 0, a === (a | 0) ? i.x = a : p += a;
      for (var u = 0; u < p.length + 64; u++)
        i.x ^= p.charCodeAt(u) | 0, u == p.length && (i.d = i.x << 10 ^ i.x >>> 4), i.next();
    }
    function n(a, i) {
      return i.x = a.x, i.y = a.y, i.z = a.z, i.w = a.w, i.v = a.v, i.d = a.d, i;
    }
    function s(a, i) {
      var p = new o(a), u = i && i.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var l = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, d = (l + m) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = p.next, c.quick = c, u && (typeof u == "object" && n(u, p), c.state = function() {
        return n(p, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t6 && t6.amd ? t6(function() {
      return s;
    }) : this.xorwow = s;
  })(Wk, typeof mC == "object" && mC, typeof define == "function" && define);
});
var Hk = qt((Gk, dC) => {
  (function(r, e, t6) {
    function o(a) {
      var i = this;
      i.next = function() {
        var u = i.x, c = i.i, l, m, d;
        return l = u[c], l ^= l >>> 7, m = l ^ l << 24, l = u[c + 1 & 7], m ^= l ^ l >>> 10, l = u[c + 3 & 7], m ^= l ^ l >>> 3, l = u[c + 4 & 7], m ^= l ^ l << 7, l = u[c + 7 & 7], l = l ^ l << 13, m ^= l ^ l << 9, u[c] = m, i.i = c + 1 & 7, m;
      };
      function p(u, c) {
        var l, m, d = [];
        if (c === (c | 0))
          m = d[0] = c;
        else
          for (c = "" + c, l = 0; l < c.length; ++l)
            d[l & 7] = d[l & 7] << 15 ^ c.charCodeAt(l) + d[l + 1 & 7] << 13;
        for (; d.length < 8; )
          d.push(0);
        for (l = 0; l < 8 && d[l] === 0; ++l)
          ;
        for (l == 8 ? m = d[7] = -1 : m = d[l], u.x = d, u.i = 0, l = 256; l > 0; --l)
          u.next();
      }
      p(i, a);
    }
    function n(a, i) {
      return i.x = a.x.slice(), i.i = a.i, i;
    }
    function s(a, i) {
      a == null && (a = +new Date());
      var p = new o(a), u = i && i.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var l = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, d = (l + m) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = p.next, c.quick = c, u && (u.x && n(u, p), c.state = function() {
        return n(p, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t6 && t6.amd ? t6(function() {
      return s;
    }) : this.xorshift7 = s;
  })(Gk, typeof dC == "object" && dC, typeof define == "function" && define);
});
var Kk = qt((qk, fC) => {
  (function(r, e, t6) {
    function o(a) {
      var i = this;
      i.next = function() {
        var u = i.w, c = i.X, l = i.i, m, d;
        return i.w = u = u + 1640531527 | 0, d = c[l + 34 & 127], m = c[l = l + 1 & 127], d ^= d << 13, m ^= m << 17, d ^= d >>> 15, m ^= m >>> 12, d = c[l] = d ^ m, i.i = l, d + (u ^ u >>> 16) | 0;
      };
      function p(u, c) {
        var l, m, d, f, h, g = [], x = 128;
        for (c === (c | 0) ? (m = c, c = null) : (c = c + "\0", m = 0, x = Math.max(x, c.length)), d = 0, f = -32; f < x; ++f)
          c && (m ^= c.charCodeAt((f + 32) % c.length)), f === 0 && (h = m), m ^= m << 10, m ^= m >>> 15, m ^= m << 4, m ^= m >>> 13, f >= 0 && (h = h + 1640531527 | 0, l = g[f & 127] ^= m + h, d = l == 0 ? d + 1 : 0);
        for (d >= 128 && (g[(c && c.length || 0) & 127] = -1), d = 127, f = 4 * 128; f > 0; --f)
          m = g[d + 34 & 127], l = g[d = d + 1 & 127], m ^= m << 13, l ^= l << 17, m ^= m >>> 15, l ^= l >>> 12, g[d] = m ^ l;
        u.w = h, u.X = g, u.i = d;
      }
      p(i, a);
    }
    function n(a, i) {
      return i.i = a.i, i.w = a.w, i.X = a.X.slice(), i;
    }
    function s(a, i) {
      a == null && (a = +new Date());
      var p = new o(a), u = i && i.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var l = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, d = (l + m) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = p.next, c.quick = c, u && (u.X && n(u, p), c.state = function() {
        return n(p, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t6 && t6.amd ? t6(function() {
      return s;
    }) : this.xor4096 = s;
  })(qk, typeof fC == "object" && fC, typeof define == "function" && define);
});
var Xk = qt((jk, hC) => {
  (function(r, e, t6) {
    function o(a) {
      var i = this, p = "";
      i.next = function() {
        var c = i.b, l = i.c, m = i.d, d = i.a;
        return c = c << 25 ^ c >>> 7 ^ l, l = l - m | 0, m = m << 24 ^ m >>> 8 ^ d, d = d - c | 0, i.b = c = c << 20 ^ c >>> 12 ^ l, i.c = l = l - m | 0, i.d = m << 16 ^ l >>> 16 ^ d, i.a = d - c | 0;
      }, i.a = 0, i.b = 0, i.c = -1640531527, i.d = 1367130551, a === Math.floor(a) ? (i.a = a / 4294967296 | 0, i.b = a | 0) : p += a;
      for (var u = 0; u < p.length + 20; u++)
        i.b ^= p.charCodeAt(u) | 0, i.next();
    }
    function n(a, i) {
      return i.a = a.a, i.b = a.b, i.c = a.c, i.d = a.d, i;
    }
    function s(a, i) {
      var p = new o(a), u = i && i.state, c = function() {
        return (p.next() >>> 0) / 4294967296;
      };
      return c.double = function() {
        do
          var l = p.next() >>> 11, m = (p.next() >>> 0) / 4294967296, d = (l + m) / (1 << 21);
        while (d === 0);
        return d;
      }, c.int32 = p.next, c.quick = c, u && (typeof u == "object" && n(u, p), c.state = function() {
        return n(p, {});
      }), c;
    }
    e && e.exports ? e.exports = s : t6 && t6.amd ? t6(function() {
      return s;
    }) : this.tychei = s;
  })(jk, typeof hC == "object" && hC, typeof define == "function" && define);
});
var Yk = qt(() => {
});
var Zk = qt((Qk, kd) => {
  (function(r, e, t6) {
    var o = 256, n = 6, s = 52, a = "random", i = t6.pow(o, n), p = t6.pow(2, s), u = p * 2, c = o - 1, l;
    function m(C, w, k) {
      var _ = [];
      w = w == true ? { entropy: true } : w || {};
      var $ = g(h(w.entropy ? [C, b(e)] : C == null ? x() : C, 3), _), A = new d(_), R = function() {
        for (var D = A.g(n), P = i, M = 0; D < p; )
          D = (D + M) * o, P *= o, M = A.g(1);
        for (; D >= u; )
          D /= 2, P /= 2, M >>>= 1;
        return (D + M) / P;
      };
      return R.int32 = function() {
        return A.g(4) | 0;
      }, R.quick = function() {
        return A.g(4) / 4294967296;
      }, R.double = R, g(b(A.S), e), (w.pass || k || function(D, P, M, L) {
        return L && (L.S && f(L, A), D.state = function() {
          return f(A, {});
        }), M ? (t6[a] = D, P) : D;
      })(R, $, "global" in w ? w.global : this == t6, w.state);
    }
    function d(C) {
      var w, k = C.length, _ = this, $ = 0, A = _.i = _.j = 0, R = _.S = [];
      for (k || (C = [k++]); $ < o; )
        R[$] = $++;
      for ($ = 0; $ < o; $++)
        R[$] = R[A = c & A + C[$ % k] + (w = R[$])], R[A] = w;
      (_.g = function(D) {
        for (var P, M = 0, L = _.i, W = _.j, V = _.S; D--; )
          P = V[L = c & L + 1], M = M * o + V[c & (V[L] = V[W = c & W + P]) + (V[W] = P)];
        return _.i = L, _.j = W, M;
      })(o);
    }
    function f(C, w) {
      return w.i = C.i, w.j = C.j, w.S = C.S.slice(), w;
    }
    function h(C, w) {
      var k = [], _ = typeof C, $;
      if (w && _ == "object")
        for ($ in C)
          try {
            k.push(h(C[$], w - 1));
          } catch (A) {
          }
      return k.length ? k : _ == "string" ? C : C + "\0";
    }
    function g(C, w) {
      for (var k = C + "", _, $ = 0; $ < k.length; )
        w[c & $] = c & (_ ^= w[c & $] * 19) + k.charCodeAt($++);
      return b(w);
    }
    function x() {
      try {
        var C;
        return l && (C = l.randomBytes) ? C = C(o) : (C = new Uint8Array(o), (r.crypto || r.msCrypto).getRandomValues(C)), b(C);
      } catch (_) {
        var w = r.navigator, k = w && w.plugins;
        return [+new Date(), r, k, r.screen, b(e)];
      }
    }
    function b(C) {
      return String.fromCharCode.apply(0, C);
    }
    if (g(t6.random(), e), typeof kd == "object" && kd.exports) {
      kd.exports = m;
      try {
        l = Yk();
      } catch (C) {
      }
    } else
      typeof define == "function" && define.amd ? define(function() {
        return m;
      }) : t6["seed" + a] = m;
  })(typeof self != "undefined" ? self : Qk, [], Math);
});
var gC = qt((_we, Jk) => {
  var eG = Bk(), tG = zk(), rG = Uk(), oG = Hk(), nG = Kk(), sG = Xk(), du = Zk();
  du.alea = eG;
  du.xor128 = tG;
  du.xorwow = rG;
  du.xorshift7 = oG;
  du.xor4096 = nG;
  du.tychei = sG;
  Jk.exports = du;
});
var Rl = qt(() => {
});
var qw = qt(() => {
});
var l3 = qt(() => {
});
var m3 = qt(() => {
});
var d3 = qt(() => {
});
var f3 = qt((wg, jw) => {
  var Kw = (() => {
    var r = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0;
    return typeof __filename != "undefined" && (r = r || __filename), function(e) {
      e = e || {};
      function t6() {
        return J.buffer != Oe && Nt(J.buffer), mt;
      }
      function o() {
        return J.buffer != Oe && Nt(J.buffer), at;
      }
      function n() {
        return J.buffer != Oe && Nt(J.buffer), ft;
      }
      function s() {
        return J.buffer != Oe && Nt(J.buffer), Fr;
      }
      function a() {
        return J.buffer != Oe && Nt(J.buffer), Ot;
      }
      function i() {
        return J.buffer != Oe && Nt(J.buffer), Kr;
      }
      function p() {
        return J.buffer != Oe && Nt(J.buffer), er;
      }
      var u = typeof e != "undefined" ? e : {}, c, l;
      u.ready = new Promise(function(F, B) {
        c = F, l = B;
      });
      var m;
      typeof process != "undefined" && process.listeners && (m = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") });
      var d = Object.assign({}, u), f = [], h = "./this.program", g = (F, B) => {
        throw B;
      }, x = typeof window == "object", b = typeof importScripts == "function", C = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", w = u.ENVIRONMENT_IS_PTHREAD || false, k = "";
      function _(F) {
        return u.locateFile ? u.locateFile(F, k) : k + F;
      }
      var $, A, R, D;
      function P(F) {
        if (F instanceof Hi)
          return;
        q("exiting due to exception: " + F);
      }
      if (C) {
        b ? k = Rl().dirname(k) + "/" : k = __dirname + "/";
        var M, L;
        typeof bm == "function" && (M = qw(), L = Rl()), $ = (B, ne) => (B = L.normalize(B), M.readFileSync(B, ne ? void 0 : "utf8")), R = (B) => {
          var ne = $(B, true);
          return ne.buffer || (ne = new Uint8Array(ne)), ne;
        }, A = (B, ne, fe) => {
          B = L.normalize(B), M.readFile(B, function(Te, Ze) {
            Te ? fe(Te) : ne(Ze.buffer);
          });
        }, process.argv.length > 1 && (h = process.argv[1].replace(/\\/g, "/")), f = process.argv.slice(2), process.on("uncaughtException", function(B) {
          if (!(B instanceof Hi))
            throw B;
        }), process.on("unhandledRejection", function(B) {
          throw B;
        }), g = (B, ne) => {
          if (Fo())
            throw process.exitCode = B, ne;
          P(ne), process.exit(B);
        }, u.inspect = function() {
          return "[Emscripten Module object]";
        };
        let F;
        try {
          F = l3();
        } catch (B) {
          throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), B;
        }
        global.Worker = F.Worker;
      } else
        (x || b) && (b ? k = self.location.href : typeof document != "undefined" && document.currentScript && (k = document.currentScript.src), typeof r != "undefined" && r && (k = r), k.indexOf("blob:") !== 0 ? k = k.substr(0, k.replace(/[?#].*/, "").lastIndexOf("/") + 1) : k = "", C || ($ = (F) => {
          var B = new XMLHttpRequest();
          return B.open("GET", F, false), B.send(null), B.responseText;
        }, b && (R = (F) => {
          var B = new XMLHttpRequest();
          return B.open("GET", F, false), B.responseType = "arraybuffer", B.send(null), new Uint8Array(B.response);
        }), A = (F, B, ne) => {
          var fe = new XMLHttpRequest();
          fe.open("GET", F, true), fe.responseType = "arraybuffer", fe.onload = () => {
            if (fe.status == 200 || fe.status == 0 && fe.response) {
              B(fe.response);
              return;
            }
            ne();
          }, fe.onerror = ne, fe.send(null);
        }), D = (F) => document.title = F);
      C && typeof performance == "undefined" && (global.performance = m3().performance);
      var W = console.log.bind(console), V = console.warn.bind(console);
      C && (W = (F) => M.writeSync(1, F + `
`), V = (F) => M.writeSync(2, F + `
`));
      var U = u.print || W, q = u.printErr || V;
      Object.assign(u, d), d = null, u.arguments && (f = u.arguments), u.thisProgram && (h = u.thisProgram), u.quit && (g = u.quit);
      var H = 4, j = Atomics.load, X = Atomics.store, Z = Atomics.compareExchange, ee;
      u.wasmBinary && (ee = u.wasmBinary);
      var Y = u.noExitRuntime || true;
      typeof WebAssembly != "object" && Xu("no native wasm support detected");
      var J, ie, pe = false, he;
      function we(F, B) {
        F || Xu(B);
      }
      var ve = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
      function $e(F, B, ne) {
        for (var fe = B + ne, Te = B; F[Te] && !(Te >= fe); )
          ++Te;
        if (Te - B > 16 && F.buffer && ve)
          return ve.decode(F.buffer instanceof SharedArrayBuffer ? F.slice(B, Te) : F.subarray(B, Te));
        for (var Ze = ""; B < Te; ) {
          var Ae = F[B++];
          if (!(Ae & 128)) {
            Ze += String.fromCharCode(Ae);
            continue;
          }
          var Pe = F[B++] & 63;
          if ((Ae & 224) == 192) {
            Ze += String.fromCharCode((Ae & 31) << 6 | Pe);
            continue;
          }
          var zt = F[B++] & 63;
          if ((Ae & 240) == 224 ? Ae = (Ae & 15) << 12 | Pe << 6 | zt : Ae = (Ae & 7) << 18 | Pe << 12 | zt << 6 | F[B++] & 63, Ae < 65536)
            Ze += String.fromCharCode(Ae);
          else {
            var Qr = Ae - 65536;
            Ze += String.fromCharCode(55296 | Qr >> 10, 56320 | Qr & 1023);
          }
        }
        return Ze;
      }
      function Le(F, B) {
        return F ? $e(o(), F, B) : "";
      }
      function nt(F, B, ne, fe) {
        if (!(fe > 0))
          return 0;
        for (var Te = ne, Ze = ne + fe - 1, Ae = 0; Ae < F.length; ++Ae) {
          var Pe = F.charCodeAt(Ae);
          if (Pe >= 55296 && Pe <= 57343) {
            var zt = F.charCodeAt(++Ae);
            Pe = 65536 + ((Pe & 1023) << 10) | zt & 1023;
          }
          if (Pe <= 127) {
            if (ne >= Ze)
              break;
            B[ne++] = Pe;
          } else if (Pe <= 2047) {
            if (ne + 1 >= Ze)
              break;
            B[ne++] = 192 | Pe >> 6, B[ne++] = 128 | Pe & 63;
          } else if (Pe <= 65535) {
            if (ne + 2 >= Ze)
              break;
            B[ne++] = 224 | Pe >> 12, B[ne++] = 128 | Pe >> 6 & 63, B[ne++] = 128 | Pe & 63;
          } else {
            if (ne + 3 >= Ze)
              break;
            B[ne++] = 240 | Pe >> 18, B[ne++] = 128 | Pe >> 12 & 63, B[ne++] = 128 | Pe >> 6 & 63, B[ne++] = 128 | Pe & 63;
          }
        }
        return B[ne] = 0, ne - Te;
      }
      function pt(F, B, ne) {
        return nt(F, o(), B, ne);
      }
      var Oe, mt, at, ft, wt, Fr, Ot, Kr, er;
      w && (Oe = u.buffer);
      function Nt(F) {
        Oe = F, u.HEAP8 = mt = new Int8Array(F), u.HEAP16 = ft = new Int16Array(F), u.HEAP32 = Fr = new Int32Array(F), u.HEAPU8 = at = new Uint8Array(F), u.HEAPU16 = wt = new Uint16Array(F), u.HEAPU32 = Ot = new Uint32Array(F), u.HEAPF32 = Kr = new Float32Array(F), u.HEAPF64 = er = new Float64Array(F);
      }
      var tr = u.INITIAL_MEMORY || 16777216;
      if (w)
        J = u.wasmMemory, Oe = u.buffer;
      else if (u.wasmMemory)
        J = u.wasmMemory;
      else if (J = new WebAssembly.Memory({ initial: tr / 65536, maximum: 32768, shared: true }), !(J.buffer instanceof SharedArrayBuffer))
        throw q("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), C && console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"), Error("bad memory");
      J && (Oe = J.buffer), tr = Oe.byteLength, Nt(Oe);
      var rr, jr = [], Xr = [], pr = [], Js = false;
      function Fo() {
        return Y;
      }
      function Ka() {
        if (u.preRun)
          for (typeof u.preRun == "function" && (u.preRun = [u.preRun]); u.preRun.length; )
            Ac(u.preRun.shift());
        Pc(jr);
      }
      function Kt() {
        Js = true, !w && Pc(Xr);
      }
      function ea() {
        if (!w) {
          if (u.postRun)
            for (typeof u.postRun == "function" && (u.postRun = [u.postRun]); u.postRun.length; )
              SI(u.postRun.shift());
          Pc(pr);
        }
      }
      function Ac(F) {
        jr.unshift(F);
      }
      function Rc(F) {
        Xr.unshift(F);
      }
      function SI(F) {
        pr.unshift(F);
      }
      var ja = 0, ju = null, ta = null;
      function wI(F) {
        ja++, u.monitorRunDependencies && u.monitorRunDependencies(ja);
      }
      function II(F) {
        if (ja--, u.monitorRunDependencies && u.monitorRunDependencies(ja), ja == 0 && (ju !== null && (clearInterval(ju), ju = null), ta)) {
          var B = ta;
          ta = null, B();
        }
      }
      function Xu(F) {
        w ? postMessage({ cmd: "onAbort", arg: F }) : u.onAbort && u.onAbort(F), F = "Aborted(" + F + ")", q(F), pe = true, he = 1, F += ". Build with -sASSERTIONS for more info.";
        var B = new WebAssembly.RuntimeError(F);
        throw l(B), B;
      }
      var Ix = "data:application/octet-stream;base64,";
      function jl(F) {
        return F.startsWith(Ix);
      }
      function Fc(F) {
        return F.startsWith("file://");
      }
      var fr;
      fr = "tfjs-backend-wasm-threaded-simd.wasm", jl(fr) || (fr = _(fr));
      function Xl(F) {
        try {
          if (F == fr && ee)
            return new Uint8Array(ee);
          if (R)
            return R(F);
          throw "both async and sync fetching of the wasm failed";
        } catch (B) {
          Xu(B);
        }
      }
      function vx() {
        if (!ee && (x || b)) {
          if (typeof fetch == "function" && !Fc(fr))
            return fetch(fr, { credentials: "same-origin" }).then(function(F) {
              if (!F.ok)
                throw "failed to load wasm binary file at '" + fr + "'";
              return F.arrayBuffer();
            }).catch(function() {
              return Xl(fr);
            });
          if (A)
            return new Promise(function(F, B) {
              A(fr, function(ne) {
                F(new Uint8Array(ne));
              }, B);
            });
        }
        return Promise.resolve().then(function() {
          return Xl(fr);
        });
      }
      function kx() {
        var F = { env: im, wasi_snapshot_preview1: im };
        function B(Ae, Pe) {
          var zt = Ae.exports;
          if (u.asm = zt, Ox(u.asm._emscripten_tls_init), rr = u.asm.__indirect_function_table, Rc(u.asm.__wasm_call_ctors), ie = Pe, !w) {
            var Qr = De.unusedWorkers.length;
            De.unusedWorkers.forEach(function(oa) {
              De.loadWasmModuleToWorker(oa, function() {
                --Qr || II("wasm-instantiate");
              });
            });
          }
        }
        w || wI("wasm-instantiate");
        function ne(Ae) {
          B(Ae.instance, Ae.module);
        }
        function fe(Ae) {
          return vx().then(function(Pe) {
            return WebAssembly.instantiate(Pe, F);
          }).then(function(Pe) {
            return Pe;
          }).then(Ae, function(Pe) {
            q("failed to asynchronously prepare wasm: " + Pe), Xu(Pe);
          });
        }
        function Te() {
          return !ee && typeof WebAssembly.instantiateStreaming == "function" && !jl(fr) && !Fc(fr) && !C && typeof fetch == "function" ? fetch(fr, { credentials: "same-origin" }).then(function(Ae) {
            var Pe = WebAssembly.instantiateStreaming(Ae, F);
            return Pe.then(ne, function(zt) {
              return q("wasm streaming compile failed: " + zt), q("falling back to ArrayBuffer instantiation"), fe(ne);
            });
          }) : fe(ne);
        }
        if (u.instantiateWasm)
          try {
            var Ze = u.instantiateWasm(F, B);
            return Ze;
          } catch (Ae) {
            q("Module.instantiateWasm callback failed with error: " + Ae), l(Ae);
          }
        return Te().catch(l), {};
      }
      var Nx, vI, Tx = {};
      function Hi(F) {
        this.name = "ExitStatus", this.message = "Program terminated with exit(" + F + ")", this.status = F;
      }
      function _x(F) {
        var B = De.pthreads[F];
        delete De.pthreads[F], B.terminate(), sb(F), De.runningWorkers.splice(De.runningWorkers.indexOf(B), 1), B.pthread_ptr = 0;
      }
      function Ex(F) {
        var B = De.pthreads[F];
        B.postMessage({ cmd: "cancel" });
      }
      function Dc(F) {
        var B = De.pthreads[F];
        we(B), De.returnWorkerToPool(B);
      }
      function Yl(F) {
        var B = De.getNewWorker();
        if (!B)
          return 6;
        De.runningWorkers.push(B), De.pthreads[F.pthread_ptr] = B, B.pthread_ptr = F.pthread_ptr;
        var ne = { cmd: "run", start_routine: F.startRoutine, arg: F.arg, pthread_ptr: F.pthread_ptr };
        return B.runPthread = () => {
          ne.time = performance.now(), B.postMessage(ne, F.transferList);
        }, B.loaded && (B.runPthread(), delete B.runPthread), 0;
      }
      var Ql = { varargs: void 0, get: function() {
        Ql.varargs += 4;
        var F = s()[Ql.varargs - 4 >> 2];
        return F;
      }, getStr: function(F) {
        var B = Le(F);
        return B;
      } };
      function Oc(F) {
        if (w)
          return Xa(1, 1, F);
        he = F, Fo() || (De.terminateAllThreads(), u.onExit && u.onExit(F), pe = true), g(F, new Hi(F));
      }
      function kI(F, B) {
        if (he = F, !B && w)
          throw Jl(F), "unwind";
        Oc(F);
      }
      var Zl = kI;
      function $x(F) {
        if (F instanceof Hi || F == "unwind")
          return he;
        g(1, F);
      }
      var De = { unusedWorkers: [], runningWorkers: [], tlsInitFunctions: [], pthreads: {}, init: function() {
        w ? De.initWorker() : De.initMainThread();
      }, initMainThread: function() {
        for (var F = 8; F--; )
          De.allocateUnusedWorker();
      }, initWorker: function() {
        Y = false;
      }, setExitStatus: function(F) {
        he = F;
      }, terminateAllThreads: function() {
        for (var F of Object.values(De.pthreads))
          De.returnWorkerToPool(F);
        for (var F of De.unusedWorkers)
          F.terminate();
        De.unusedWorkers = [];
      }, returnWorkerToPool: function(F) {
        var B = F.pthread_ptr;
        delete De.pthreads[B], De.unusedWorkers.push(F), De.runningWorkers.splice(De.runningWorkers.indexOf(F), 1), F.pthread_ptr = 0, sb(B);
      }, receiveObjectTransfer: function(F) {
      }, threadInitTLS: function() {
        De.tlsInitFunctions.forEach((F) => F());
      }, loadWasmModuleToWorker: function(F, B) {
        F.onmessage = (ne) => {
          var fe = ne.data, Te = fe.cmd;
          if (F.pthread_ptr && (De.currentProxiedOperationCallerThread = F.pthread_ptr), fe.targetThread && fe.targetThread != dm()) {
            var Ze = De.pthreads[fe.targetThread];
            Ze ? Ze.postMessage(fe, fe.transferList) : q('Internal error! Worker sent a message "' + Te + '" to target pthread ' + fe.targetThread + ", but that thread no longer exists!"), De.currentProxiedOperationCallerThread = void 0;
            return;
          }
          Te === "processProxyingQueue" ? Mc(fe.queue) : Te === "spawnThread" ? Yl(fe) : Te === "cleanupThread" ? Dc(fe.thread) : Te === "killThread" ? _x(fe.thread) : Te === "cancelThread" ? Ex(fe.thread) : Te === "loaded" ? (F.loaded = true, B && B(F), F.runPthread && (F.runPthread(), delete F.runPthread)) : Te === "print" ? U("Thread " + fe.threadId + ": " + fe.text) : Te === "printErr" ? q("Thread " + fe.threadId + ": " + fe.text) : Te === "alert" ? alert("Thread " + fe.threadId + ": " + fe.text) : fe.target === "setimmediate" ? F.postMessage(fe) : Te === "onAbort" ? u.onAbort && u.onAbort(fe.arg) : Te && q("worker sent an unknown command " + Te), De.currentProxiedOperationCallerThread = void 0;
        }, F.onerror = (ne) => {
          var fe = "worker sent an error!";
          throw q(fe + " " + ne.filename + ":" + ne.lineno + ": " + ne.message), ne;
        }, C && (F.on("message", function(ne) {
          F.onmessage({ data: ne });
        }), F.on("error", function(ne) {
          F.onerror(ne);
        }), F.on("detachedExit", function() {
        })), F.postMessage({ cmd: "load", urlOrBlob: u.mainScriptUrlOrBlob || r, wasmMemory: J, wasmModule: ie });
      }, allocateUnusedWorker: function() {
        var F = _("tfjs-backend-wasm-threaded-simd.worker.js");
        De.unusedWorkers.push(new Worker(F));
      }, getNewWorker: function() {
        return De.unusedWorkers.length == 0 && (De.allocateUnusedWorker(), De.loadWasmModuleToWorker(De.unusedWorkers[0])), De.unusedWorkers.pop();
      } };
      u.PThread = De;
      function Pc(F) {
        for (; F.length > 0; )
          F.shift()(u);
      }
      function Ax(F) {
        var B = ab(), ne = F();
        return fm(B), ne;
      }
      function NI(F) {
        return F;
      }
      function TI(F) {
        var B = /\b_Z[\w\d_]+/g;
        return F.replace(B, function(ne) {
          var fe = ne;
          return ne === fe ? ne : fe + " [" + ne + "]";
        });
      }
      function Rx() {
        var F = dm(), B = s()[F + 44 >> 2], ne = s()[F + 48 >> 2], fe = B - ne;
        DI(B, fe), fm(B);
      }
      u.establishStackSpace = Rx;
      function Jl(F) {
        if (w)
          return Xa(2, 0, F);
        try {
          Zl(F);
        } catch (B) {
          $x(B);
        }
      }
      var Yu = [];
      function Fx(F) {
        var B = Yu[F];
        return B || (F >= Yu.length && (Yu.length = F + 1), Yu[F] = B = rr.get(F)), B;
      }
      function Dx(F, B) {
        var ne = Fx(F)(B);
        Fo() ? De.setExitStatus(ne) : FI(ne);
      }
      u.invokeEntryPoint = Dx;
      function _I() {
        var F = new Error();
        if (!F.stack) {
          try {
            throw new Error();
          } catch (B) {
            F = B;
          }
          if (!F.stack)
            return "(no stack trace available)";
        }
        return F.stack.toString();
      }
      function Ox(F) {
        De.tlsInitFunctions.push(F);
      }
      function Px(F, B) {
        t6().set(F, B);
      }
      function Mx(F) {
        $I(F, !b, 1, !x), De.threadInitTLS();
      }
      function Lx(F) {
        w ? postMessage({ cmd: "cleanupThread", thread: F }) : Dc(F);
      }
      function em(F, B, ne, fe) {
        return w ? Xa(3, 1, F, B, ne, fe) : tm(F, B, ne, fe);
      }
      function tm(F, B, ne, fe) {
        if (typeof SharedArrayBuffer == "undefined")
          return q("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
        var Te = [], Ze = 0;
        if (w && (Te.length === 0 || Ze))
          return em(F, B, ne, fe);
        if (Ze)
          return Ze;
        var Ae = { startRoutine: ne, pthread_ptr: F, arg: fe, transferList: Te };
        return w ? (Ae.cmd = "spawnThread", postMessage(Ae, Te), 0) : Yl(Ae);
      }
      function Bx() {
        return 2097152;
      }
      var Vx = true;
      function zx() {
        return Vx;
      }
      function Mc(F) {
        Atomics.store(s(), F >> 2, 1), dm() && RI(F), Atomics.compareExchange(s(), F >> 2, 1, 0);
      }
      u.executeNotifiedProxyingQueue = Mc;
      function Wx(F, B, ne, fe) {
        if (F == B)
          setTimeout(() => Mc(fe));
        else if (w)
          postMessage({ targetThread: F, cmd: "processProxyingQueue", queue: fe });
        else {
          var Te = De.pthreads[F];
          if (!Te)
            return;
          Te.postMessage({ cmd: "processProxyingQueue", queue: fe });
        }
        return 1;
      }
      function Ux(F, B, ne) {
        return -1;
      }
      function Gx() {
        Xu("");
      }
      function qi(F) {
        qi.shown || (qi.shown = {}), qi.shown[F] || (qi.shown[F] = 1, C && (F = "warning: " + F), q(F));
      }
      function Hx() {
        C || b || qi("Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread");
      }
      function qx() {
        return Date.now();
      }
      function rm() {
        return 2147483648;
      }
      function Kx() {
        return rm();
      }
      var Qu;
      C ? Qu = () => {
        var F = process.hrtime();
        return F[0] * 1e3 + F[1] / 1e6;
      } : w ? Qu = () => performance.now() - u.__performance_now_clock_drift : Qu = () => performance.now();
      function jx(F, B, ne) {
        o().copyWithin(F, B, B + ne);
      }
      function Xx() {
        return C ? d3().cpus().length : navigator.hardwareConcurrency;
      }
      function Xa(F, B) {
        var ne = arguments.length - 2, fe = arguments;
        return Ax(() => {
          for (var Te = ne, Ze = hm(Te * 8), Ae = Ze >> 3, Pe = 0; Pe < ne; Pe++) {
            var zt = fe[2 + Pe];
            p()[Ae + Pe] = zt;
          }
          return AI(F, Te, Ze, B);
        });
      }
      var Lc = [];
      function Yx(F, B, ne) {
        Lc.length = B;
        for (var fe = ne >> 3, Te = 0; Te < B; Te++)
          Lc[Te] = p()[fe + Te];
        var Ze = F < 0, Ae = Ze ? Tx[-F - 1] : ny[F];
        return Ae.apply(null, Lc);
      }
      function Qx(F) {
        try {
          return J.grow(F - Oe.byteLength + 65535 >>> 16), Nt(J.buffer), 1;
        } catch (B) {
        }
      }
      function Zx(F) {
        var B = o().length;
        if (F = F >>> 0, F <= B)
          return false;
        var ne = rm();
        if (F > ne)
          return false;
        let fe = (zt, Qr) => zt + (Qr - zt % Qr) % Qr;
        for (var Te = 1; Te <= 4; Te *= 2) {
          var Ze = B * (1 + 0.2 / Te);
          Ze = Math.min(Ze, F + 100663296);
          var Ae = Math.min(ne, fe(Math.max(F, Ze), 65536)), Pe = Qx(Ae);
          if (Pe)
            return true;
        }
        return false;
      }
      function Jx() {
        throw "unwind";
      }
      function om(F) {
        return w ? Xa(4, 1, F) : 52;
      }
      function nm(F, B, ne, fe, Te) {
        return w ? Xa(5, 1, F, B, ne, fe, Te) : 70;
      }
      var ey = [null, [], []];
      function ty(F, B) {
        var ne = ey[F];
        B === 0 || B === 10 ? ((F === 1 ? U : q)($e(ne, 0)), ne.length = 0) : ne.push(B);
      }
      function sm(F, B, ne, fe) {
        if (w)
          return Xa(6, 1, F, B, ne, fe);
        for (var Te = 0, Ze = 0; Ze < ne; Ze++) {
          var Ae = a()[B >> 2], Pe = a()[B + 4 >> 2];
          B += 8;
          for (var zt = 0; zt < Pe; zt++)
            ty(F, o()[Ae + zt]);
          Te += Pe;
        }
        return a()[fe >> 2] = Te, 0;
      }
      function am(F) {
        var B = u["_" + F];
        return B;
      }
      function ry(F, B, ne, fe, Te) {
        var Ze = { string: (Dr) => {
          var tp = 0;
          if (Dr != null && Dr !== 0) {
            var MI = (Dr.length << 2) + 1;
            tp = hm(MI), pt(Dr, tp, MI);
          }
          return tp;
        }, array: (Dr) => {
          var tp = hm(Dr.length);
          return Px(Dr, tp), tp;
        } };
        function Ae(Dr) {
          return B === "string" ? Le(Dr) : B === "boolean" ? Boolean(Dr) : Dr;
        }
        var Pe = am(F), zt = [], Qr = 0;
        if (fe)
          for (var oa = 0; oa < fe.length; oa++) {
            var PI = Ze[ne[oa]];
            PI ? (Qr === 0 && (Qr = ab()), zt[oa] = PI(fe[oa])) : zt[oa] = fe[oa];
          }
        var ib = Pe.apply(null, zt);
        function xV(Dr) {
          return Qr !== 0 && fm(Qr), Ae(Dr);
        }
        return ib = xV(ib), ib;
      }
      function oy(F, B, ne, fe) {
        ne = ne || [];
        var Te = ne.every((Ae) => Ae === "number" || Ae === "boolean"), Ze = B !== "string";
        return Ze && Te && !fe ? am(F) : function() {
          return ry(F, B, ne, arguments, fe);
        };
      }
      De.init();
      var ny = [null, Oc, Jl, em, om, nm, sm], im = { __emscripten_init_main_thread_js: Mx, __emscripten_thread_cleanup: Lx, __pthread_create_js: tm, _emscripten_default_pthread_stack_size: Bx, _emscripten_get_now_is_monotonic: zx, _emscripten_notify_task_queue: Wx, _emscripten_set_offscreencanvas_size: Ux, abort: Gx, emscripten_check_blocking_allowed: Hx, emscripten_date_now: qx, emscripten_get_heap_max: Kx, emscripten_get_now: Qu, emscripten_memcpy_big: jx, emscripten_num_logical_cores: Xx, emscripten_receive_on_main_thread_js: Yx, emscripten_resize_heap: Zx, emscripten_unwind_to_js_event_loop: Jx, exit: Zl, fd_close: om, fd_seek: nm, fd_write: sm, memory: J || u.wasmMemory }, EI = kx(), sy = u.___wasm_call_ctors = function() {
        return (sy = u.___wasm_call_ctors = u.asm.__wasm_call_ctors).apply(null, arguments);
      }, ay = u._init = function() {
        return (ay = u._init = u.asm.init).apply(null, arguments);
      }, iy = u._init_with_threads_count = function() {
        return (iy = u._init_with_threads_count = u.asm.init_with_threads_count).apply(null, arguments);
      }, uy = u._get_threads_count = function() {
        return (uy = u._get_threads_count = u.asm.get_threads_count).apply(null, arguments);
      }, py = u._register_tensor = function() {
        return (py = u._register_tensor = u.asm.register_tensor).apply(null, arguments);
      }, cy = u._dispose_data = function() {
        return (cy = u._dispose_data = u.asm.dispose_data).apply(null, arguments);
      }, ly = u._dispose = function() {
        return (ly = u._dispose = u.asm.dispose).apply(null, arguments);
      }, my = u._Abs = function() {
        return (my = u._Abs = u.asm.Abs).apply(null, arguments);
      }, dy = u._Add = function() {
        return (dy = u._Add = u.asm.Add).apply(null, arguments);
      }, fy = u._AddN = function() {
        return (fy = u._AddN = u.asm.AddN).apply(null, arguments);
      }, hy = u._All = function() {
        return (hy = u._All = u.asm.All).apply(null, arguments);
      }, gy = u._Any = function() {
        return (gy = u._Any = u.asm.Any).apply(null, arguments);
      }, xy = u._ArgMax = function() {
        return (xy = u._ArgMax = u.asm.ArgMax).apply(null, arguments);
      }, yy = u._AvgPool = function() {
        return (yy = u._AvgPool = u.asm.AvgPool).apply(null, arguments);
      }, by = u._BatchMatMul = function() {
        return (by = u._BatchMatMul = u.asm.BatchMatMul).apply(null, arguments);
      }, Cy = u._Ceil = function() {
        return (Cy = u._Ceil = u.asm.Ceil).apply(null, arguments);
      }, Sy = u._ClipByValue = function() {
        return (Sy = u._ClipByValue = u.asm.ClipByValue).apply(null, arguments);
      }, wy = u._Conv2D = function() {
        return (wy = u._Conv2D = u.asm.Conv2D).apply(null, arguments);
      }, Iy = u._Conv2DBackpropInput = function() {
        return (Iy = u._Conv2DBackpropInput = u.asm.Conv2DBackpropInput).apply(null, arguments);
      }, vy = u._Cos = function() {
        return (vy = u._Cos = u.asm.Cos).apply(null, arguments);
      }, ky = u._Cosh = function() {
        return (ky = u._Cosh = u.asm.Cosh).apply(null, arguments);
      }, Ny = u._CropAndResize = function() {
        return (Ny = u._CropAndResize = u.asm.CropAndResize).apply(null, arguments);
      }, Ty = u._Cumprod = function() {
        return (Ty = u._Cumprod = u.asm.Cumprod).apply(null, arguments);
      }, _y = u._Cumsum = function() {
        return (_y = u._Cumsum = u.asm.Cumsum).apply(null, arguments);
      }, Ey = u._DepthToSpace = function() {
        return (Ey = u._DepthToSpace = u.asm.DepthToSpace).apply(null, arguments);
      }, $y = u._DepthwiseConv2dNative = function() {
        return ($y = u._DepthwiseConv2dNative = u.asm.DepthwiseConv2dNative).apply(null, arguments);
      }, Ay = u._Elu = function() {
        return (Ay = u._Elu = u.asm.Elu).apply(null, arguments);
      }, Ry = u._Equal = function() {
        return (Ry = u._Equal = u.asm.Equal).apply(null, arguments);
      }, Fy = u._Exp = function() {
        return (Fy = u._Exp = u.asm.Exp).apply(null, arguments);
      }, Dy = u._FlipLeftRight = function() {
        return (Dy = u._FlipLeftRight = u.asm.FlipLeftRight).apply(null, arguments);
      }, Oy = u._Floor = function() {
        return (Oy = u._Floor = u.asm.Floor).apply(null, arguments);
      }, Py = u._FloorDiv = function() {
        return (Py = u._FloorDiv = u.asm.FloorDiv).apply(null, arguments);
      }, My = u._FusedBatchNorm = function() {
        return (My = u._FusedBatchNorm = u.asm.FusedBatchNorm).apply(null, arguments);
      }, Ly = u._FusedConv2D = function() {
        return (Ly = u._FusedConv2D = u.asm.FusedConv2D).apply(null, arguments);
      }, By = u._FusedDepthwiseConv2D = function() {
        return (By = u._FusedDepthwiseConv2D = u.asm.FusedDepthwiseConv2D).apply(null, arguments);
      }, Vy = u._Gather = function() {
        return (Vy = u._Gather = u.asm.Gather).apply(null, arguments);
      }, zy = u._GatherNd = function() {
        return (zy = u._GatherNd = u.asm.GatherNd).apply(null, arguments);
      }, Wy = u._Greater = function() {
        return (Wy = u._Greater = u.asm.Greater).apply(null, arguments);
      }, Uy = u._GreaterEqual = function() {
        return (Uy = u._GreaterEqual = u.asm.GreaterEqual).apply(null, arguments);
      }, Gy = u._IsNan = function() {
        return (Gy = u._IsNan = u.asm.IsNan).apply(null, arguments);
      }, Hy = u._LeakyRelu = function() {
        return (Hy = u._LeakyRelu = u.asm.LeakyRelu).apply(null, arguments);
      }, qy = u._Less = function() {
        return (qy = u._Less = u.asm.Less).apply(null, arguments);
      }, Ky = u._LessEqual = function() {
        return (Ky = u._LessEqual = u.asm.LessEqual).apply(null, arguments);
      }, jy = u._Log = function() {
        return (jy = u._Log = u.asm.Log).apply(null, arguments);
      }, Xy = u._LogicalAnd = function() {
        return (Xy = u._LogicalAnd = u.asm.LogicalAnd).apply(null, arguments);
      }, Yy = u._LogicalNot = function() {
        return (Yy = u._LogicalNot = u.asm.LogicalNot).apply(null, arguments);
      }, Qy = u._LogicalOr = function() {
        return (Qy = u._LogicalOr = u.asm.LogicalOr).apply(null, arguments);
      }, Zy = u._LogicalXor = function() {
        return (Zy = u._LogicalXor = u.asm.LogicalXor).apply(null, arguments);
      }, Jy = u._Max = function() {
        return (Jy = u._Max = u.asm.Max).apply(null, arguments);
      }, eb = u._MaxPool = function() {
        return (eb = u._MaxPool = u.asm.MaxPool).apply(null, arguments);
      }, um = u._Maximum = function() {
        return (um = u._Maximum = u.asm.Maximum).apply(null, arguments);
      }, pm = u._Mean = function() {
        return (pm = u._Mean = u.asm.Mean).apply(null, arguments);
      }, Bc = u._Min = function() {
        return (Bc = u._Min = u.asm.Min).apply(null, arguments);
      }, tb = u._Minimum = function() {
        return (tb = u._Minimum = u.asm.Minimum).apply(null, arguments);
      }, rb = u._MirrorPad = function() {
        return (rb = u._MirrorPad = u.asm.MirrorPad).apply(null, arguments);
      }, Zu = u._Multiply = function() {
        return (Zu = u._Multiply = u.asm.Multiply).apply(null, arguments);
      }, cm = u._Neg = function() {
        return (cm = u._Neg = u.asm.Neg).apply(null, arguments);
      }, Ju = u._NonMaxSuppressionV3 = function() {
        return (Ju = u._NonMaxSuppressionV3 = u.asm.NonMaxSuppressionV3).apply(null, arguments);
      }, ep = u._NonMaxSuppressionV4 = function() {
        return (ep = u._NonMaxSuppressionV4 = u.asm.NonMaxSuppressionV4).apply(null, arguments);
      }, ob = u._NonMaxSuppressionV5 = function() {
        return (ob = u._NonMaxSuppressionV5 = u.asm.NonMaxSuppressionV5).apply(null, arguments);
      }, G = u._NotEqual = function() {
        return (G = u._NotEqual = u.asm.NotEqual).apply(null, arguments);
      }, oe = u._OneHot = function() {
        return (oe = u._OneHot = u.asm.OneHot).apply(null, arguments);
      }, ke = u._PadV2 = function() {
        return (ke = u._PadV2 = u.asm.PadV2).apply(null, arguments);
      }, je = u._Pow = function() {
        return (je = u._Pow = u.asm.Pow).apply(null, arguments);
      }, Tt = u._Prelu = function() {
        return (Tt = u._Prelu = u.asm.Prelu).apply(null, arguments);
      }, _t = u._Prod = function() {
        return (_t = u._Prod = u.asm.Prod).apply(null, arguments);
      }, qe = u._RealDiv = function() {
        return (qe = u._RealDiv = u.asm.RealDiv).apply(null, arguments);
      }, We = u._Reciprocal = function() {
        return (We = u._Reciprocal = u.asm.Reciprocal).apply(null, arguments);
      }, Vt = u._Relu = function() {
        return (Vt = u._Relu = u.asm.Relu).apply(null, arguments);
      }, Yr = u._Relu6 = function() {
        return (Yr = u._Relu6 = u.asm.Relu6).apply(null, arguments);
      }, ra = u._ResizeBilinear = function() {
        return (ra = u._ResizeBilinear = u.asm.ResizeBilinear).apply(null, arguments);
      }, lm = u._ResizeNearestNeighbor = function() {
        return (lm = u._ResizeNearestNeighbor = u.asm.ResizeNearestNeighbor).apply(null, arguments);
      }, Vc = u._Reverse = function() {
        return (Vc = u._Reverse = u.asm.Reverse).apply(null, arguments);
      }, nb = u._RotateWithOffset = function() {
        return (nb = u._RotateWithOffset = u.asm.RotateWithOffset).apply(null, arguments);
      }, hr = u._Round = function() {
        return (hr = u._Round = u.asm.Round).apply(null, arguments);
      }, Ya = u._Rsqrt = function() {
        return (Ya = u._Rsqrt = u.asm.Rsqrt).apply(null, arguments);
      }, mm = u._ScatterNd = function() {
        return (mm = u._ScatterNd = u.asm.ScatterNd).apply(null, arguments);
      }, BB = u._SelectV2 = function() {
        return (BB = u._SelectV2 = u.asm.SelectV2).apply(null, arguments);
      }, VB = u._Sigmoid = function() {
        return (VB = u._Sigmoid = u.asm.Sigmoid).apply(null, arguments);
      }, zB = u._Sin = function() {
        return (zB = u._Sin = u.asm.Sin).apply(null, arguments);
      }, WB = u._Softmax = function() {
        return (WB = u._Softmax = u.asm.Softmax).apply(null, arguments);
      }, UB = u._SparseFillEmptyRows = function() {
        return (UB = u._SparseFillEmptyRows = u.asm.SparseFillEmptyRows).apply(null, arguments);
      }, GB = u._SparseReshape = function() {
        return (GB = u._SparseReshape = u.asm.SparseReshape).apply(null, arguments);
      }, HB = u._SparseSegmentReduction = function() {
        return (HB = u._SparseSegmentReduction = u.asm.SparseSegmentReduction).apply(null, arguments);
      }, qB = u._Sqrt = function() {
        return (qB = u._Sqrt = u.asm.Sqrt).apply(null, arguments);
      }, KB = u._Square = function() {
        return (KB = u._Square = u.asm.Square).apply(null, arguments);
      }, jB = u._SquaredDifference = function() {
        return (jB = u._SquaredDifference = u.asm.SquaredDifference).apply(null, arguments);
      }, XB = u._Step = function() {
        return (XB = u._Step = u.asm.Step).apply(null, arguments);
      }, YB = u._StridedSlice = function() {
        return (YB = u._StridedSlice = u.asm.StridedSlice).apply(null, arguments);
      }, QB = u._Sub = function() {
        return (QB = u._Sub = u.asm.Sub).apply(null, arguments);
      }, ZB = u._Sum = function() {
        return (ZB = u._Sum = u.asm.Sum).apply(null, arguments);
      }, JB = u._Tan = function() {
        return (JB = u._Tan = u.asm.Tan).apply(null, arguments);
      }, eV = u._Tanh = function() {
        return (eV = u._Tanh = u.asm.Tanh).apply(null, arguments);
      }, tV = u._Tile = function() {
        return (tV = u._Tile = u.asm.Tile).apply(null, arguments);
      }, rV = u._TopK = function() {
        return (rV = u._TopK = u.asm.TopK).apply(null, arguments);
      }, oV = u._Transform = function() {
        return (oV = u._Transform = u.asm.Transform).apply(null, arguments);
      }, nV = u._Transpose = function() {
        return (nV = u._Transpose = u.asm.Transpose).apply(null, arguments);
      }, sV = u.__FusedMatMul = function() {
        return (sV = u.__FusedMatMul = u.asm._FusedMatMul).apply(null, arguments);
      }, aV = u._malloc = function() {
        return (aV = u._malloc = u.asm.malloc).apply(null, arguments);
      }, iV = u._free = function() {
        return (iV = u._free = u.asm.free).apply(null, arguments);
      }, uV = u.__emscripten_tls_init = function() {
        return (uV = u.__emscripten_tls_init = u.asm._emscripten_tls_init).apply(null, arguments);
      }, dm = u._pthread_self = function() {
        return (dm = u._pthread_self = u.asm.pthread_self).apply(null, arguments);
      }, pV = u.___errno_location = function() {
        return (pV = u.___errno_location = u.asm.__errno_location).apply(null, arguments);
      }, $I = u.__emscripten_thread_init = function() {
        return ($I = u.__emscripten_thread_init = u.asm._emscripten_thread_init).apply(null, arguments);
      }, cV = u.__emscripten_thread_crashed = function() {
        return (cV = u.__emscripten_thread_crashed = u.asm._emscripten_thread_crashed).apply(null, arguments);
      }, lV = u._emscripten_main_thread_process_queued_calls = function() {
        return (lV = u._emscripten_main_thread_process_queued_calls = u.asm.emscripten_main_thread_process_queued_calls).apply(null, arguments);
      }, mV = u._emscripten_main_browser_thread_id = function() {
        return (mV = u._emscripten_main_browser_thread_id = u.asm.emscripten_main_browser_thread_id).apply(null, arguments);
      }, AI = u._emscripten_run_in_main_runtime_thread_js = function() {
        return (AI = u._emscripten_run_in_main_runtime_thread_js = u.asm.emscripten_run_in_main_runtime_thread_js).apply(null, arguments);
      }, dV = u._emscripten_dispatch_to_thread_ = function() {
        return (dV = u._emscripten_dispatch_to_thread_ = u.asm.emscripten_dispatch_to_thread_).apply(null, arguments);
      }, RI = u.__emscripten_proxy_execute_task_queue = function() {
        return (RI = u.__emscripten_proxy_execute_task_queue = u.asm._emscripten_proxy_execute_task_queue).apply(null, arguments);
      }, sb = u.__emscripten_thread_free_data = function() {
        return (sb = u.__emscripten_thread_free_data = u.asm._emscripten_thread_free_data).apply(null, arguments);
      }, FI = u.__emscripten_thread_exit = function() {
        return (FI = u.__emscripten_thread_exit = u.asm._emscripten_thread_exit).apply(null, arguments);
      }, DI = u._emscripten_stack_set_limits = function() {
        return (DI = u._emscripten_stack_set_limits = u.asm.emscripten_stack_set_limits).apply(null, arguments);
      }, ab = u.stackSave = function() {
        return (ab = u.stackSave = u.asm.stackSave).apply(null, arguments);
      }, fm = u.stackRestore = function() {
        return (fm = u.stackRestore = u.asm.stackRestore).apply(null, arguments);
      }, hm = u.stackAlloc = function() {
        return (hm = u.stackAlloc = u.asm.stackAlloc).apply(null, arguments);
      }, fV = u.dynCall_iijjiiii = function() {
        return (fV = u.dynCall_iijjiiii = u.asm.dynCall_iijjiiii).apply(null, arguments);
      }, hV = u.dynCall_jiji = function() {
        return (hV = u.dynCall_jiji = u.asm.dynCall_jiji).apply(null, arguments);
      };
      u.keepRuntimeAlive = Fo, u.wasmMemory = J, u.cwrap = oy, u.ExitStatus = Hi, u.PThread = De;
      var gm;
      ta = function F() {
        gm || OI(), gm || (ta = F);
      };
      function OI(F) {
        if (F = F || f, ja > 0)
          return;
        if (w) {
          c(u), Kt(), postMessage({ cmd: "loaded" });
          return;
        }
        if (Ka(), ja > 0)
          return;
        function B() {
          gm || (gm = true, u.calledRun = true, !pe && (Kt(), c(u), u.onRuntimeInitialized && u.onRuntimeInitialized(), ea()));
        }
        u.setStatus ? (u.setStatus("Running..."), setTimeout(function() {
          setTimeout(function() {
            u.setStatus("");
          }, 1), B();
        }, 1)) : B();
      }
      if (u.preInit)
        for (typeof u.preInit == "function" && (u.preInit = [u.preInit]); u.preInit.length > 0; )
          u.preInit.pop()();
      OI();
      var xm;
      m && (xm = { uncaughtException: process.listeners("uncaughtException").filter(function(F) {
        return !m.uncaughtException.indexOf(F) > -1;
      }), unhandledRejection: process.listeners("unhandledRejection").filter(function(F) {
        return !m.unhandledRejection.indexOf(F) > -1;
      }) });
      var ym;
      if (typeof WasmBackendModule != "undefined")
        ym = WasmBackendModule;
      else if (typeof e != "undefined")
        ym = e;
      else
        throw new Error("Could not find wasm module in post.js");
      if (xm) {
        var gV = ym._dispose;
        ym._dispose = function() {
          gV(), xm.uncaughtException.forEach(function(F) {
            process.removeListener("uncaughtException", F);
          }), xm.unhandledRejection.forEach(function(F) {
            process.removeListener("unhandledRejection", F);
          });
        };
      }
      return e.ready;
    };
  })();
  typeof wg == "object" && typeof jw == "object" ? jw.exports = Kw : typeof define == "function" && define.amd ? define([], function() {
    return Kw;
  }) : typeof wg == "object" && (wg.WasmBackendModuleThreadedSimd = Kw);
});
var g3 = qt((kkt, h3) => {
  h3.exports.wasmWorkerContents = `"use strict";var Module={};var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";if(ENVIRONMENT_IS_NODE){var nodeWorkerThreads=require("worker_threads");var parentPort=nodeWorkerThreads.parentPort;parentPort.on("message",data=>onmessage({data:data}));var fs=require("fs");Object.assign(global,{self:global,require:require,Module:Module,location:{href:__filename},Worker:nodeWorkerThreads.Worker,importScripts:function(f){(0,eval)(fs.readFileSync(f,"utf8"))},postMessage:function(msg){parentPort.postMessage(msg)},performance:global.performance||{now:function(){return Date.now()}}})}var initializedJS=false;var pendingNotifiedProxyingQueues=[];function threadPrintErr(){var text=Array.prototype.slice.call(arguments).join(" ");if(ENVIRONMENT_IS_NODE){fs.writeSync(2,text+"
");return}console.error(text)}function threadAlert(){var text=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:text,threadId:Module["_pthread_self"]()})}var err=threadPrintErr;self.alert=threadAlert;Module["instantiateWasm"]=(info,receiveInstance)=>{var instance=new WebAssembly.Instance(Module["wasmModule"],info);receiveInstance(instance);Module["wasmModule"]=null;return instance.exports};self.onunhandledrejection=e=>{throw e.reason??e};self.onmessage=e=>{try{if(e.data.cmd==="load"){Module["wasmModule"]=e.data.wasmModule;Module["wasmMemory"]=e.data.wasmMemory;Module["buffer"]=Module["wasmMemory"].buffer;Module["ENVIRONMENT_IS_PTHREAD"]=true;if(typeof e.data.urlOrBlob=="string"){importScripts(e.data.urlOrBlob)}else{var objectUrl=URL.createObjectURL(e.data.urlOrBlob);importScripts(objectUrl);URL.revokeObjectURL(objectUrl)}WasmBackendModuleThreadedSimd(Module).then(function(instance){Module=instance})}else if(e.data.cmd==="run"){Module["__performance_now_clock_drift"]=performance.now()-e.data.time;Module["__emscripten_thread_init"](e.data.pthread_ptr,0,0,1);Module["establishStackSpace"]();Module["PThread"].receiveObjectTransfer(e.data);Module["PThread"].threadInitTLS();if(!initializedJS){pendingNotifiedProxyingQueues.forEach(queue=>{Module["executeNotifiedProxyingQueue"](queue)});pendingNotifiedProxyingQueues=[];initializedJS=true}try{Module["invokeEntryPoint"](e.data.start_routine,e.data.arg)}catch(ex){if(ex!="unwind"){if(ex instanceof Module["ExitStatus"]){if(Module["keepRuntimeAlive"]()){}else{Module["__emscripten_thread_exit"](ex.status)}}else{throw ex}}}}else if(e.data.cmd==="cancel"){if(Module["_pthread_self"]()){Module["__emscripten_thread_exit"](-1)}}else if(e.data.target==="setimmediate"){}else if(e.data.cmd==="processProxyingQueue"){if(initializedJS){Module["executeNotifiedProxyingQueue"](e.data.queue)}else{pendingNotifiedProxyingQueues.push(e.data.queue)}}else if(e.data.cmd){err("worker.js received unknown command "+e.data.cmd);err(e.data)}}catch(ex){if(Module["__emscripten_thread_crashed"]){Module["__emscripten_thread_crashed"]()}throw ex}};`;
});
var x3 = qt((Ig, Yw) => {
  var Xw = (() => {
    var r = typeof document != "undefined" && document.currentScript ? document.currentScript.src : void 0;
    return typeof __filename != "undefined" && (r = r || __filename), function(e) {
      e = e || {};
      var t6 = typeof e != "undefined" ? e : {}, o, n;
      t6.ready = new Promise(function(G, oe) {
        o = G, n = oe;
      });
      var s;
      typeof process != "undefined" && process.listeners && (s = { uncaughtException: process.listeners("uncaughtException"), unhandledRejection: process.listeners("unhandledRejection") });
      var a = Object.assign({}, t6), i = [], p = "./this.program", u = (G, oe) => {
        throw oe;
      }, c = typeof window == "object", l = typeof importScripts == "function", m = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", d = "";
      function f(G) {
        return t6.locateFile ? t6.locateFile(G, d) : d + G;
      }
      var h, g, x, b;
      function C(G) {
        if (G instanceof ju)
          return;
        $("exiting due to exception: " + G);
      }
      if (m) {
        l ? d = Rl().dirname(d) + "/" : d = __dirname + "/";
        var w, k;
        typeof bm == "function" && (w = qw(), k = Rl()), h = (G, oe) => (G = k.normalize(G), w.readFileSync(G, oe ? void 0 : "utf8")), x = (G) => {
          var oe = h(G, true);
          return oe.buffer || (oe = new Uint8Array(oe)), oe;
        }, g = (G, oe, ke) => {
          G = k.normalize(G), w.readFile(G, function(je, Tt) {
            je ? ke(je) : oe(Tt.buffer);
          });
        }, process.argv.length > 1 && (p = process.argv[1].replace(/\\/g, "/")), i = process.argv.slice(2), process.on("uncaughtException", function(G) {
          if (!(G instanceof ju))
            throw G;
        }), process.on("unhandledRejection", function(G) {
          throw G;
        }), u = (G, oe) => {
          if (at())
            throw process.exitCode = G, oe;
          C(oe), process.exit(G);
        }, t6.inspect = function() {
          return "[Emscripten Module object]";
        };
      } else
        (c || l) && (l ? d = self.location.href : typeof document != "undefined" && document.currentScript && (d = document.currentScript.src), r && (d = r), d.indexOf("blob:") !== 0 ? d = d.substr(0, d.replace(/[?#].*/, "").lastIndexOf("/") + 1) : d = "", h = (G) => {
          var oe = new XMLHttpRequest();
          return oe.open("GET", G, false), oe.send(null), oe.responseText;
        }, l && (x = (G) => {
          var oe = new XMLHttpRequest();
          return oe.open("GET", G, false), oe.responseType = "arraybuffer", oe.send(null), new Uint8Array(oe.response);
        }), g = (G, oe, ke) => {
          var je = new XMLHttpRequest();
          je.open("GET", G, true), je.responseType = "arraybuffer", je.onload = () => {
            if (je.status == 200 || je.status == 0 && je.response) {
              oe(je.response);
              return;
            }
            ke();
          }, je.onerror = ke, je.send(null);
        }, b = (G) => document.title = G);
      var _ = t6.print || console.log.bind(console), $ = t6.printErr || console.warn.bind(console);
      Object.assign(t6, a), a = null, t6.arguments && (i = t6.arguments), t6.thisProgram && (p = t6.thisProgram), t6.quit && (u = t6.quit);
      var A = 4, R;
      t6.wasmBinary && (R = t6.wasmBinary);
      var D = t6.noExitRuntime || true;
      typeof WebAssembly != "object" && pr("no native wasm support detected");
      var P, M = false, L;
      function W(G, oe) {
        G || pr(oe);
      }
      var V = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : void 0;
      function U(G, oe, ke) {
        for (var je = oe + ke, Tt = oe; G[Tt] && !(Tt >= je); )
          ++Tt;
        if (Tt - oe > 16 && G.buffer && V)
          return V.decode(G.subarray(oe, Tt));
        for (var _t = ""; oe < Tt; ) {
          var qe = G[oe++];
          if (!(qe & 128)) {
            _t += String.fromCharCode(qe);
            continue;
          }
          var We = G[oe++] & 63;
          if ((qe & 224) == 192) {
            _t += String.fromCharCode((qe & 31) << 6 | We);
            continue;
          }
          var Vt = G[oe++] & 63;
          if ((qe & 240) == 224 ? qe = (qe & 15) << 12 | We << 6 | Vt : qe = (qe & 7) << 18 | We << 12 | Vt << 6 | G[oe++] & 63, qe < 65536)
            _t += String.fromCharCode(qe);
          else {
            var Yr = qe - 65536;
            _t += String.fromCharCode(55296 | Yr >> 10, 56320 | Yr & 1023);
          }
        }
        return _t;
      }
      function q(G, oe) {
        return G ? U(ee, G, oe) : "";
      }
      function H(G, oe, ke, je) {
        if (!(je > 0))
          return 0;
        for (var Tt = ke, _t = ke + je - 1, qe = 0; qe < G.length; ++qe) {
          var We = G.charCodeAt(qe);
          if (We >= 55296 && We <= 57343) {
            var Vt = G.charCodeAt(++qe);
            We = 65536 + ((We & 1023) << 10) | Vt & 1023;
          }
          if (We <= 127) {
            if (ke >= _t)
              break;
            oe[ke++] = We;
          } else if (We <= 2047) {
            if (ke + 1 >= _t)
              break;
            oe[ke++] = 192 | We >> 6, oe[ke++] = 128 | We & 63;
          } else if (We <= 65535) {
            if (ke + 2 >= _t)
              break;
            oe[ke++] = 224 | We >> 12, oe[ke++] = 128 | We >> 6 & 63, oe[ke++] = 128 | We & 63;
          } else {
            if (ke + 3 >= _t)
              break;
            oe[ke++] = 240 | We >> 18, oe[ke++] = 128 | We >> 12 & 63, oe[ke++] = 128 | We >> 6 & 63, oe[ke++] = 128 | We & 63;
          }
        }
        return oe[ke] = 0, ke - Tt;
      }
      function j(G, oe, ke) {
        return H(G, ee, oe, ke);
      }
      var X, Z, ee, Y, J, ie, pe, he, we;
      function ve(G) {
        X = G, t6.HEAP8 = Z = new Int8Array(G), t6.HEAP16 = Y = new Int16Array(G), t6.HEAP32 = ie = new Int32Array(G), t6.HEAPU8 = ee = new Uint8Array(G), t6.HEAPU16 = J = new Uint16Array(G), t6.HEAPU32 = pe = new Uint32Array(G), t6.HEAPF32 = he = new Float32Array(G), t6.HEAPF64 = we = new Float64Array(G);
      }
      var $e = t6.INITIAL_MEMORY || 16777216, Le, nt = [], pt = [], Oe = [], mt = false;
      function at() {
        return D;
      }
      function ft() {
        if (t6.preRun)
          for (typeof t6.preRun == "function" && (t6.preRun = [t6.preRun]); t6.preRun.length; )
            Ot(t6.preRun.shift());
        ta(nt);
      }
      function wt() {
        mt = true, ta(pt);
      }
      function Fr() {
        if (t6.postRun)
          for (typeof t6.postRun == "function" && (t6.postRun = [t6.postRun]); t6.postRun.length; )
            er(t6.postRun.shift());
        ta(Oe);
      }
      function Ot(G) {
        nt.unshift(G);
      }
      function Kr(G) {
        pt.unshift(G);
      }
      function er(G) {
        Oe.unshift(G);
      }
      var Nt = 0, tr = null, rr = null;
      function jr(G) {
        Nt++, t6.monitorRunDependencies && t6.monitorRunDependencies(Nt);
      }
      function Xr(G) {
        if (Nt--, t6.monitorRunDependencies && t6.monitorRunDependencies(Nt), Nt == 0 && (tr !== null && (clearInterval(tr), tr = null), rr)) {
          var oe = rr;
          rr = null, oe();
        }
      }
      function pr(G) {
        t6.onAbort && t6.onAbort(G), G = "Aborted(" + G + ")", $(G), M = true, L = 1, G += ". Build with -sASSERTIONS for more info.";
        var oe = new WebAssembly.RuntimeError(G);
        throw n(oe), oe;
      }
      var Js = "data:application/octet-stream;base64,";
      function Fo(G) {
        return G.startsWith(Js);
      }
      function Ka(G) {
        return G.startsWith("file://");
      }
      var Kt;
      Kt = "tfjs-backend-wasm.wasm", Fo(Kt) || (Kt = f(Kt));
      function ea(G) {
        try {
          if (G == Kt && R)
            return new Uint8Array(R);
          if (x)
            return x(G);
          throw "both async and sync fetching of the wasm failed";
        } catch (oe) {
          pr(oe);
        }
      }
      function Ac() {
        if (!R && (c || l)) {
          if (typeof fetch == "function" && !Ka(Kt))
            return fetch(Kt, { credentials: "same-origin" }).then(function(G) {
              if (!G.ok)
                throw "failed to load wasm binary file at '" + Kt + "'";
              return G.arrayBuffer();
            }).catch(function() {
              return ea(Kt);
            });
          if (g)
            return new Promise(function(G, oe) {
              g(Kt, function(ke) {
                G(new Uint8Array(ke));
              }, oe);
            });
        }
        return Promise.resolve().then(function() {
          return ea(Kt);
        });
      }
      function Rc() {
        var G = { env: Oc, wasi_snapshot_preview1: Oc };
        function oe(qe, We) {
          var Vt = qe.exports;
          t6.asm = Vt, P = t6.asm.memory, ve(P.buffer), Le = t6.asm.__indirect_function_table, Kr(t6.asm.__wasm_call_ctors), Xr("wasm-instantiate");
        }
        jr("wasm-instantiate");
        function ke(qe) {
          oe(qe.instance);
        }
        function je(qe) {
          return Ac().then(function(We) {
            return WebAssembly.instantiate(We, G);
          }).then(function(We) {
            return We;
          }).then(qe, function(We) {
            $("failed to asynchronously prepare wasm: " + We), pr(We);
          });
        }
        function Tt() {
          return !R && typeof WebAssembly.instantiateStreaming == "function" && !Fo(Kt) && !Ka(Kt) && !m && typeof fetch == "function" ? fetch(Kt, { credentials: "same-origin" }).then(function(qe) {
            var We = WebAssembly.instantiateStreaming(qe, G);
            return We.then(ke, function(Vt) {
              return $("wasm streaming compile failed: " + Vt), $("falling back to ArrayBuffer instantiation"), je(ke);
            });
          }) : je(ke);
        }
        if (t6.instantiateWasm)
          try {
            var _t = t6.instantiateWasm(G, oe);
            return _t;
          } catch (qe) {
            $("Module.instantiateWasm callback failed with error: " + qe), n(qe);
          }
        return Tt().catch(n), {};
      }
      var SI, ja;
      function ju(G) {
        this.name = "ExitStatus", this.message = "Program terminated with exit(" + G + ")", this.status = G;
      }
      function ta(G) {
        for (; G.length > 0; )
          G.shift()(t6);
      }
      function wI(G) {
        return G;
      }
      function II(G) {
        var oe = /\b_Z[\w\d_]+/g;
        return G.replace(oe, function(ke) {
          var je = ke;
          return ke === je ? ke : je + " [" + ke + "]";
        });
      }
      function Xu() {
        var G = new Error();
        if (!G.stack) {
          try {
            throw new Error();
          } catch (oe) {
            G = oe;
          }
          if (!G.stack)
            return "(no stack trace available)";
        }
        return G.stack.toString();
      }
      function Ix(G, oe) {
        Z.set(G, oe);
      }
      function jl() {
        pr("");
      }
      function Fc() {
        return 2147483648;
      }
      function fr() {
        return Fc();
      }
      function Xl(G, oe, ke) {
        ee.copyWithin(G, oe, oe + ke);
      }
      function vx(G) {
        try {
          return P.grow(G - X.byteLength + 65535 >>> 16), ve(P.buffer), 1;
        } catch (oe) {
        }
      }
      function kx(G) {
        var oe = ee.length;
        G = G >>> 0;
        var ke = Fc();
        if (G > ke)
          return false;
        let je = (Vt, Yr) => Vt + (Yr - Vt % Yr) % Yr;
        for (var Tt = 1; Tt <= 4; Tt *= 2) {
          var _t = oe * (1 + 0.2 / Tt);
          _t = Math.min(_t, G + 100663296);
          var qe = Math.min(ke, je(Math.max(G, _t), 65536)), We = vx(qe);
          if (We)
            return true;
        }
        return false;
      }
      var Nx = { varargs: void 0, get: function() {
        Nx.varargs += 4;
        var G = ie[Nx.varargs - 4 >> 2];
        return G;
      }, getStr: function(G) {
        var oe = q(G);
        return oe;
      } };
      function vI(G) {
        return 52;
      }
      function Tx(G, oe, ke, je, Tt) {
        return 70;
      }
      var Hi = [null, [], []];
      function _x(G, oe) {
        var ke = Hi[G];
        oe === 0 || oe === 10 ? ((G === 1 ? _ : $)(U(ke, 0)), ke.length = 0) : ke.push(oe);
      }
      function Ex(G, oe, ke, je) {
        for (var Tt = 0, _t = 0; _t < ke; _t++) {
          var qe = pe[oe >> 2], We = pe[oe + 4 >> 2];
          oe += 8;
          for (var Vt = 0; Vt < We; Vt++)
            _x(G, ee[qe + Vt]);
          Tt += We;
        }
        return pe[je >> 2] = Tt, 0;
      }
      function Dc(G) {
        var oe = t6["_" + G];
        return oe;
      }
      function Yl(G, oe, ke, je, Tt) {
        var _t = { string: (hr) => {
          var Ya = 0;
          if (hr != null && hr !== 0) {
            var mm = (hr.length << 2) + 1;
            Ya = Bc(mm), j(hr, Ya, mm);
          }
          return Ya;
        }, array: (hr) => {
          var Ya = Bc(hr.length);
          return Ix(hr, Ya), Ya;
        } };
        function qe(hr) {
          return oe === "string" ? q(hr) : oe === "boolean" ? Boolean(hr) : hr;
        }
        var We = Dc(G), Vt = [], Yr = 0;
        if (je)
          for (var ra = 0; ra < je.length; ra++) {
            var lm = _t[ke[ra]];
            lm ? (Yr === 0 && (Yr = um()), Vt[ra] = lm(je[ra])) : Vt[ra] = je[ra];
          }
        var Vc = We.apply(null, Vt);
        function nb(hr) {
          return Yr !== 0 && pm(Yr), qe(hr);
        }
        return Vc = nb(Vc), Vc;
      }
      function Ql(G, oe, ke, je) {
        ke = ke || [];
        var Tt = ke.every((qe) => qe === "number" || qe === "boolean"), _t = oe !== "string";
        return _t && Tt && !je ? Dc(G) : function() {
          return Yl(G, oe, ke, arguments, je);
        };
      }
      var Oc = { abort: jl, emscripten_get_heap_max: fr, emscripten_memcpy_big: Xl, emscripten_resize_heap: kx, fd_close: vI, fd_seek: Tx, fd_write: Ex }, kI = Rc(), Zl = t6.___wasm_call_ctors = function() {
        return (Zl = t6.___wasm_call_ctors = t6.asm.__wasm_call_ctors).apply(null, arguments);
      }, $x = t6._init = function() {
        return ($x = t6._init = t6.asm.init).apply(null, arguments);
      }, De = t6._init_with_threads_count = function() {
        return (De = t6._init_with_threads_count = t6.asm.init_with_threads_count).apply(null, arguments);
      }, Pc = t6._get_threads_count = function() {
        return (Pc = t6._get_threads_count = t6.asm.get_threads_count).apply(null, arguments);
      }, Ax = t6._register_tensor = function() {
        return (Ax = t6._register_tensor = t6.asm.register_tensor).apply(null, arguments);
      }, NI = t6._dispose_data = function() {
        return (NI = t6._dispose_data = t6.asm.dispose_data).apply(null, arguments);
      }, TI = t6._dispose = function() {
        return (TI = t6._dispose = t6.asm.dispose).apply(null, arguments);
      }, Rx = t6._Abs = function() {
        return (Rx = t6._Abs = t6.asm.Abs).apply(null, arguments);
      }, Jl = t6._Add = function() {
        return (Jl = t6._Add = t6.asm.Add).apply(null, arguments);
      }, Yu = t6._AddN = function() {
        return (Yu = t6._AddN = t6.asm.AddN).apply(null, arguments);
      }, Fx = t6._All = function() {
        return (Fx = t6._All = t6.asm.All).apply(null, arguments);
      }, Dx = t6._Any = function() {
        return (Dx = t6._Any = t6.asm.Any).apply(null, arguments);
      }, _I = t6._ArgMax = function() {
        return (_I = t6._ArgMax = t6.asm.ArgMax).apply(null, arguments);
      }, Ox = t6._AvgPool = function() {
        return (Ox = t6._AvgPool = t6.asm.AvgPool).apply(null, arguments);
      }, Px = t6._BatchMatMul = function() {
        return (Px = t6._BatchMatMul = t6.asm.BatchMatMul).apply(null, arguments);
      }, Mx = t6._Ceil = function() {
        return (Mx = t6._Ceil = t6.asm.Ceil).apply(null, arguments);
      }, Lx = t6._ClipByValue = function() {
        return (Lx = t6._ClipByValue = t6.asm.ClipByValue).apply(null, arguments);
      }, em = t6._Conv2D = function() {
        return (em = t6._Conv2D = t6.asm.Conv2D).apply(null, arguments);
      }, tm = t6._Conv2DBackpropInput = function() {
        return (tm = t6._Conv2DBackpropInput = t6.asm.Conv2DBackpropInput).apply(null, arguments);
      }, Bx = t6._Cos = function() {
        return (Bx = t6._Cos = t6.asm.Cos).apply(null, arguments);
      }, Vx = t6._Cosh = function() {
        return (Vx = t6._Cosh = t6.asm.Cosh).apply(null, arguments);
      }, zx = t6._CropAndResize = function() {
        return (zx = t6._CropAndResize = t6.asm.CropAndResize).apply(null, arguments);
      }, Mc = t6._Cumprod = function() {
        return (Mc = t6._Cumprod = t6.asm.Cumprod).apply(null, arguments);
      }, Wx = t6._Cumsum = function() {
        return (Wx = t6._Cumsum = t6.asm.Cumsum).apply(null, arguments);
      }, Ux = t6._DepthToSpace = function() {
        return (Ux = t6._DepthToSpace = t6.asm.DepthToSpace).apply(null, arguments);
      }, Gx = t6._DepthwiseConv2dNative = function() {
        return (Gx = t6._DepthwiseConv2dNative = t6.asm.DepthwiseConv2dNative).apply(null, arguments);
      }, qi = t6._Elu = function() {
        return (qi = t6._Elu = t6.asm.Elu).apply(null, arguments);
      }, Hx = t6._Equal = function() {
        return (Hx = t6._Equal = t6.asm.Equal).apply(null, arguments);
      }, qx = t6._Exp = function() {
        return (qx = t6._Exp = t6.asm.Exp).apply(null, arguments);
      }, rm = t6._FlipLeftRight = function() {
        return (rm = t6._FlipLeftRight = t6.asm.FlipLeftRight).apply(null, arguments);
      }, Kx = t6._Floor = function() {
        return (Kx = t6._Floor = t6.asm.Floor).apply(null, arguments);
      }, Qu = t6._FloorDiv = function() {
        return (Qu = t6._FloorDiv = t6.asm.FloorDiv).apply(null, arguments);
      }, jx = t6._FusedBatchNorm = function() {
        return (jx = t6._FusedBatchNorm = t6.asm.FusedBatchNorm).apply(null, arguments);
      }, Xx = t6._FusedConv2D = function() {
        return (Xx = t6._FusedConv2D = t6.asm.FusedConv2D).apply(null, arguments);
      }, Xa = t6._FusedDepthwiseConv2D = function() {
        return (Xa = t6._FusedDepthwiseConv2D = t6.asm.FusedDepthwiseConv2D).apply(null, arguments);
      }, Lc = t6._Gather = function() {
        return (Lc = t6._Gather = t6.asm.Gather).apply(null, arguments);
      }, Yx = t6._GatherNd = function() {
        return (Yx = t6._GatherNd = t6.asm.GatherNd).apply(null, arguments);
      }, Qx = t6._Greater = function() {
        return (Qx = t6._Greater = t6.asm.Greater).apply(null, arguments);
      }, Zx = t6._GreaterEqual = function() {
        return (Zx = t6._GreaterEqual = t6.asm.GreaterEqual).apply(null, arguments);
      }, Jx = t6._IsNan = function() {
        return (Jx = t6._IsNan = t6.asm.IsNan).apply(null, arguments);
      }, om = t6._LeakyRelu = function() {
        return (om = t6._LeakyRelu = t6.asm.LeakyRelu).apply(null, arguments);
      }, nm = t6._Less = function() {
        return (nm = t6._Less = t6.asm.Less).apply(null, arguments);
      }, ey = t6._LessEqual = function() {
        return (ey = t6._LessEqual = t6.asm.LessEqual).apply(null, arguments);
      }, ty = t6._Log = function() {
        return (ty = t6._Log = t6.asm.Log).apply(null, arguments);
      }, sm = t6._LogicalAnd = function() {
        return (sm = t6._LogicalAnd = t6.asm.LogicalAnd).apply(null, arguments);
      }, am = t6._LogicalNot = function() {
        return (am = t6._LogicalNot = t6.asm.LogicalNot).apply(null, arguments);
      }, ry = t6._LogicalOr = function() {
        return (ry = t6._LogicalOr = t6.asm.LogicalOr).apply(null, arguments);
      }, oy = t6._LogicalXor = function() {
        return (oy = t6._LogicalXor = t6.asm.LogicalXor).apply(null, arguments);
      }, ny = t6._Max = function() {
        return (ny = t6._Max = t6.asm.Max).apply(null, arguments);
      }, im = t6._MaxPool = function() {
        return (im = t6._MaxPool = t6.asm.MaxPool).apply(null, arguments);
      }, EI = t6._Maximum = function() {
        return (EI = t6._Maximum = t6.asm.Maximum).apply(null, arguments);
      }, sy = t6._Mean = function() {
        return (sy = t6._Mean = t6.asm.Mean).apply(null, arguments);
      }, ay = t6._Min = function() {
        return (ay = t6._Min = t6.asm.Min).apply(null, arguments);
      }, iy = t6._Minimum = function() {
        return (iy = t6._Minimum = t6.asm.Minimum).apply(null, arguments);
      }, uy = t6._MirrorPad = function() {
        return (uy = t6._MirrorPad = t6.asm.MirrorPad).apply(null, arguments);
      }, py = t6._Multiply = function() {
        return (py = t6._Multiply = t6.asm.Multiply).apply(null, arguments);
      }, cy = t6._Neg = function() {
        return (cy = t6._Neg = t6.asm.Neg).apply(null, arguments);
      }, ly = t6._NonMaxSuppressionV3 = function() {
        return (ly = t6._NonMaxSuppressionV3 = t6.asm.NonMaxSuppressionV3).apply(null, arguments);
      }, my = t6._NonMaxSuppressionV4 = function() {
        return (my = t6._NonMaxSuppressionV4 = t6.asm.NonMaxSuppressionV4).apply(null, arguments);
      }, dy = t6._NonMaxSuppressionV5 = function() {
        return (dy = t6._NonMaxSuppressionV5 = t6.asm.NonMaxSuppressionV5).apply(null, arguments);
      }, fy = t6._NotEqual = function() {
        return (fy = t6._NotEqual = t6.asm.NotEqual).apply(null, arguments);
      }, hy = t6._OneHot = function() {
        return (hy = t6._OneHot = t6.asm.OneHot).apply(null, arguments);
      }, gy = t6._PadV2 = function() {
        return (gy = t6._PadV2 = t6.asm.PadV2).apply(null, arguments);
      }, xy = t6._Pow = function() {
        return (xy = t6._Pow = t6.asm.Pow).apply(null, arguments);
      }, yy = t6._Prelu = function() {
        return (yy = t6._Prelu = t6.asm.Prelu).apply(null, arguments);
      }, by = t6._Prod = function() {
        return (by = t6._Prod = t6.asm.Prod).apply(null, arguments);
      }, Cy = t6._RealDiv = function() {
        return (Cy = t6._RealDiv = t6.asm.RealDiv).apply(null, arguments);
      }, Sy = t6._Reciprocal = function() {
        return (Sy = t6._Reciprocal = t6.asm.Reciprocal).apply(null, arguments);
      }, wy = t6._Relu = function() {
        return (wy = t6._Relu = t6.asm.Relu).apply(null, arguments);
      }, Iy = t6._Relu6 = function() {
        return (Iy = t6._Relu6 = t6.asm.Relu6).apply(null, arguments);
      }, vy = t6._ResizeBilinear = function() {
        return (vy = t6._ResizeBilinear = t6.asm.ResizeBilinear).apply(null, arguments);
      }, ky = t6._ResizeNearestNeighbor = function() {
        return (ky = t6._ResizeNearestNeighbor = t6.asm.ResizeNearestNeighbor).apply(null, arguments);
      }, Ny = t6._Reverse = function() {
        return (Ny = t6._Reverse = t6.asm.Reverse).apply(null, arguments);
      }, Ty = t6._RotateWithOffset = function() {
        return (Ty = t6._RotateWithOffset = t6.asm.RotateWithOffset).apply(null, arguments);
      }, _y = t6._Round = function() {
        return (_y = t6._Round = t6.asm.Round).apply(null, arguments);
      }, Ey = t6._Rsqrt = function() {
        return (Ey = t6._Rsqrt = t6.asm.Rsqrt).apply(null, arguments);
      }, $y = t6._ScatterNd = function() {
        return ($y = t6._ScatterNd = t6.asm.ScatterNd).apply(null, arguments);
      }, Ay = t6._SelectV2 = function() {
        return (Ay = t6._SelectV2 = t6.asm.SelectV2).apply(null, arguments);
      }, Ry = t6._Sigmoid = function() {
        return (Ry = t6._Sigmoid = t6.asm.Sigmoid).apply(null, arguments);
      }, Fy = t6._Sin = function() {
        return (Fy = t6._Sin = t6.asm.Sin).apply(null, arguments);
      }, Dy = t6._Softmax = function() {
        return (Dy = t6._Softmax = t6.asm.Softmax).apply(null, arguments);
      }, Oy = t6._SparseFillEmptyRows = function() {
        return (Oy = t6._SparseFillEmptyRows = t6.asm.SparseFillEmptyRows).apply(null, arguments);
      }, Py = t6._SparseReshape = function() {
        return (Py = t6._SparseReshape = t6.asm.SparseReshape).apply(null, arguments);
      }, My = t6._SparseSegmentReduction = function() {
        return (My = t6._SparseSegmentReduction = t6.asm.SparseSegmentReduction).apply(null, arguments);
      }, Ly = t6._Sqrt = function() {
        return (Ly = t6._Sqrt = t6.asm.Sqrt).apply(null, arguments);
      }, By = t6._Square = function() {
        return (By = t6._Square = t6.asm.Square).apply(null, arguments);
      }, Vy = t6._SquaredDifference = function() {
        return (Vy = t6._SquaredDifference = t6.asm.SquaredDifference).apply(null, arguments);
      }, zy = t6._Step = function() {
        return (zy = t6._Step = t6.asm.Step).apply(null, arguments);
      }, Wy = t6._StridedSlice = function() {
        return (Wy = t6._StridedSlice = t6.asm.StridedSlice).apply(null, arguments);
      }, Uy = t6._Sub = function() {
        return (Uy = t6._Sub = t6.asm.Sub).apply(null, arguments);
      }, Gy = t6._Sum = function() {
        return (Gy = t6._Sum = t6.asm.Sum).apply(null, arguments);
      }, Hy = t6._Tan = function() {
        return (Hy = t6._Tan = t6.asm.Tan).apply(null, arguments);
      }, qy = t6._Tanh = function() {
        return (qy = t6._Tanh = t6.asm.Tanh).apply(null, arguments);
      }, Ky = t6._Tile = function() {
        return (Ky = t6._Tile = t6.asm.Tile).apply(null, arguments);
      }, jy = t6._TopK = function() {
        return (jy = t6._TopK = t6.asm.TopK).apply(null, arguments);
      }, Xy = t6._Transform = function() {
        return (Xy = t6._Transform = t6.asm.Transform).apply(null, arguments);
      }, Yy = t6._Transpose = function() {
        return (Yy = t6._Transpose = t6.asm.Transpose).apply(null, arguments);
      }, Qy = t6.__FusedMatMul = function() {
        return (Qy = t6.__FusedMatMul = t6.asm._FusedMatMul).apply(null, arguments);
      }, Zy = t6._malloc = function() {
        return (Zy = t6._malloc = t6.asm.malloc).apply(null, arguments);
      }, Jy = t6._free = function() {
        return (Jy = t6._free = t6.asm.free).apply(null, arguments);
      }, eb = t6.___errno_location = function() {
        return (eb = t6.___errno_location = t6.asm.__errno_location).apply(null, arguments);
      }, um = t6.stackSave = function() {
        return (um = t6.stackSave = t6.asm.stackSave).apply(null, arguments);
      }, pm = t6.stackRestore = function() {
        return (pm = t6.stackRestore = t6.asm.stackRestore).apply(null, arguments);
      }, Bc = t6.stackAlloc = function() {
        return (Bc = t6.stackAlloc = t6.asm.stackAlloc).apply(null, arguments);
      }, tb = t6.dynCall_iijjiiii = function() {
        return (tb = t6.dynCall_iijjiiii = t6.asm.dynCall_iijjiiii).apply(null, arguments);
      }, rb = t6.dynCall_jiji = function() {
        return (rb = t6.dynCall_jiji = t6.asm.dynCall_jiji).apply(null, arguments);
      };
      t6.cwrap = Ql;
      var Zu;
      rr = function G() {
        Zu || cm(), Zu || (rr = G);
      };
      function cm(G) {
        if (G = G || i, Nt > 0 || (ft(), Nt > 0))
          return;
        function oe() {
          Zu || (Zu = true, t6.calledRun = true, !M && (wt(), o(t6), t6.onRuntimeInitialized && t6.onRuntimeInitialized(), Fr()));
        }
        t6.setStatus ? (t6.setStatus("Running..."), setTimeout(function() {
          setTimeout(function() {
            t6.setStatus("");
          }, 1), oe();
        }, 1)) : oe();
      }
      if (t6.preInit)
        for (typeof t6.preInit == "function" && (t6.preInit = [t6.preInit]); t6.preInit.length > 0; )
          t6.preInit.pop()();
      cm();
      var Ju;
      s && (Ju = { uncaughtException: process.listeners("uncaughtException").filter(function(G) {
        return !s.uncaughtException.indexOf(G) > -1;
      }), unhandledRejection: process.listeners("unhandledRejection").filter(function(G) {
        return !s.unhandledRejection.indexOf(G) > -1;
      }) });
      var ep;
      if (typeof e != "undefined")
        ep = e;
      else if (typeof WasmBackendModuleThreadedSimd != "undefined")
        ep = WasmBackendModuleThreadedSimd;
      else
        throw new Error("Could not find wasm module in post.js");
      if (Ju) {
        var ob = ep._dispose;
        ep._dispose = function() {
          ob(), Ju.uncaughtException.forEach(function(G) {
            process.removeListener("uncaughtException", G);
          }), Ju.unhandledRejection.forEach(function(G) {
            process.removeListener("unhandledRejection", G);
          });
        };
      }
      return e.ready;
    };
  })();
  typeof Ig == "object" && typeof Yw == "object" ? Yw.exports = Xw : typeof define == "function" && define.amd ? define([], function() {
    return Xw;
  }) : typeof Ig == "object" && (Ig.WasmBackendModule = Xw);
});
var Do = class {
  constructor(e, t6) {
    this.backend = e, this.dataMover = t6, this.data = /* @__PURE__ */ new WeakMap(), this.dataIdsCount = 0;
  }
  get(e) {
    return this.data.has(e) || this.dataMover.moveData(this.backend, e), this.data.get(e);
  }
  set(e, t6) {
    this.dataIdsCount++, this.data.set(e, t6);
  }
  has(e) {
    return this.data.has(e);
  }
  delete(e) {
    return this.dataIdsCount--, this.data.delete(e);
  }
  numDataIds() {
    return this.dataIdsCount;
  }
};
var Zr = class {
  refCount(e) {
    return Or("refCount");
  }
  incRef(e) {
    return Or("incRef");
  }
  timerAvailable() {
    return true;
  }
  time(e) {
    return Or("time");
  }
  read(e) {
    return Or("read");
  }
  readSync(e) {
    return Or("readSync");
  }
  readToGPU(e, t6) {
    return Or("readToGPU");
  }
  numDataIds() {
    return Or("numDataIds");
  }
  disposeData(e, t6) {
    return Or("disposeData");
  }
  write(e, t6, o) {
    return Or("write");
  }
  move(e, t6, o, n, s) {
    return Or("move");
  }
  createTensorFromTexture(e, t6, o) {
    return Or("createTensorFromTexture");
  }
  memory() {
    return Or("memory");
  }
  floatPrecision() {
    return Or("floatPrecision");
  }
  epsilon() {
    return this.floatPrecision() === 32 ? 1e-7 : 1e-4;
  }
  dispose() {
    return Or("dispose");
  }
};
function Or(r) {
  throw new Error(`'${r}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`);
}
function LI(r) {
  let e = r.length, t6 = 0;
  for (; e > 0; )
    t6 = Math.random() * e | 0, e--, Cm(r, e, t6);
}
function vV(r, e) {
  if (r.length !== e.length)
    throw new Error(`Array sizes must match to be shuffled together First array length was ${r.length}Second array length was ${e.length}`);
  let t6 = r.length, o = 0;
  for (; t6 > 0; )
    o = Math.random() * t6 | 0, t6--, Cm(r, t6, o), Cm(e, t6, o);
}
function op(r, e, t6) {
  return Math.max(r, Math.min(e, t6));
}
function kV(r) {
  return r % 2 === 0 ? r : r + 1;
}
function Cm(r, e, t6) {
  let o = r[e];
  r[e] = r[t6], r[t6] = o;
}
function NV(r) {
  let e = 0;
  for (let t6 = 0; t6 < r.length; t6++)
    e += r[t6];
  return e;
}
function TV(r, e) {
  let t6 = Math.random();
  return e * t6 + (1 - t6) * r;
}
function _V(r, e) {
  let t6 = 0;
  for (let o = 0; o < r.length; o++) {
    let n = Number(r[o]) - Number(e[o]);
    t6 += n * n;
  }
  return t6;
}
function E(r, e) {
  if (!r)
    throw new Error(typeof e == "string" ? e : e());
}
function ht(r, e, t6 = "") {
  E(Pr(r, e), () => t6 + ` Shapes ${r} and ${e} must match`);
}
function Jr(r) {
  E(r != null, () => "The input to the tensor constructor must be a non-null value.");
}
function Oo(r, e = [], t6 = false) {
  if (e == null && (e = []), Array.isArray(r) || Wt(r) && !t6)
    for (let o = 0; o < r.length; ++o)
      Oo(r[o], e, t6);
  else
    e.push(r);
  return e;
}
function ze(r) {
  if (r.length === 0)
    return 1;
  let e = r[0];
  for (let t6 = 1; t6 < r.length; t6++)
    e *= r[t6];
  return e;
}
function EV(r) {
  return r.length === 0;
}
function Pr(r, e) {
  if (r === e)
    return true;
  if (r == null || e == null || r.length !== e.length)
    return false;
  for (let t6 = 0; t6 < r.length; t6++)
    if (r[t6] !== e[t6])
      return false;
  return true;
}
function na(r) {
  return r % 1 === 0;
}
function $V(r) {
  if (Math.tanh != null)
    return Math.tanh(r);
  if (r === 1 / 0)
    return 1;
  if (r === -1 / 0)
    return -1;
  {
    let e = Math.exp(2 * r);
    return (e - 1) / (e + 1);
  }
}
function AV(r) {
  let e = Math.ceil(Math.sqrt(r));
  return [e, Math.ceil(r / e)];
}
function RV(r) {
  let e = new Uint32Array(r);
  for (let t6 = 0; t6 < r; ++t6)
    e[t6] = t6;
  return LI(e), e;
}
function ji(r, e) {
  return e <= r.length ? r : r + " ".repeat(e - r.length);
}
function FV(r, e = (n) => 0, t6, o) {
  return new Promise((n, s) => {
    let a = 0, i = () => {
      if (r()) {
        n();
        return;
      }
      a++;
      let p = e(a);
      if (t6 != null && a >= t6) {
        s();
        return;
      }
      o != null ? o(i, p) : setTimeout(i, p);
    };
    i();
  });
}
function DV(r, e) {
  let t6 = 1, o = -1;
  for (let s = 0; s < r.length; ++s)
    if (r[s] >= 0)
      t6 *= r[s];
    else if (r[s] === -1) {
      if (o !== -1)
        throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${o} and dim ${s}`);
      o = s;
    } else if (r[s] < 0)
      throw Error(`Shapes can not be < 0. Found ${r[s]} at dim ${s}`);
  if (o === -1) {
    if (e > 0 && e !== t6)
      throw Error(`Size(${e}) must match the product of shape ${r}`);
    return r;
  }
  if (t6 === 0)
    throw Error(`Cannot infer the missing size in [${r}] when there are 0 elements`);
  if (e % t6 !== 0)
    throw Error(`The implicit shape can't be a fractional number. Got ${e} / ${t6}`);
  let n = r.slice();
  return n[o] = e / t6, n;
}
function Qa(r, e) {
  let t6 = e.length;
  return r = r == null ? e.map((o, n) => n) : [].concat(r), E(r.every((o) => o >= -t6 && o < t6), () => `All values in axis param must be in range [-${t6}, ${t6}) but got axis ${r}`), E(r.every((o) => na(o)), () => `All values in axis param must be integers but got axis ${r}`), r.map((o) => o < 0 ? t6 + o : o);
}
function pb(r, e) {
  let t6 = [], o = [], n = e != null && Array.isArray(e) && e.length === 0, s = e == null || n ? null : Qa(e, r).sort(), a = 0;
  for (let i = 0; i < r.length; ++i) {
    if (s != null) {
      if (s[a] === i && r[i] !== 1)
        throw new Error(`Can't squeeze axis ${i} since its dim '${r[i]}' is not 1`);
      (s[a] == null || s[a] > i) && r[i] === 1 && (t6.push(r[i]), o.push(i)), s[a] <= i && a++;
    }
    r[i] !== 1 && (t6.push(r[i]), o.push(i));
  }
  return { newShape: t6, keptDims: o };
}
function cb(r, e) {
  let t6 = null;
  if (r == null || r === "float32")
    t6 = new Float32Array(e);
  else if (r === "int32")
    t6 = new Int32Array(e);
  else if (r === "bool")
    t6 = new Uint8Array(e);
  else
    throw new Error(`Unknown data type ${r}`);
  return t6;
}
function lb(r, e) {
  let t6 = null;
  if (r == null || r === "float32")
    t6 = new Float32Array(e);
  else if (r === "int32")
    t6 = new Int32Array(e);
  else if (r === "bool")
    t6 = new Uint8Array(e);
  else if (r === "string")
    t6 = new Array(e);
  else
    throw new Error(`Unknown data type ${r}`);
  return t6;
}
function mb(r, e) {
  for (let t6 = 0; t6 < r.length; t6++) {
    let o = r[t6];
    if (isNaN(o) || !isFinite(o))
      throw Error(`A tensor of type ${e} being uploaded contains ${o}.`);
  }
}
function db(r) {
  return r === "bool" || r === "complex64" || r === "float32" || r === "int32" || r === "string";
}
function OV(r, e) {
  return !(e === "complex64" || e === "float32" && r !== "complex64" || e === "int32" && r !== "float32" && r !== "complex64" || e === "bool" && r === "bool");
}
function Wt(r) {
  return r instanceof Float32Array || r instanceof Int32Array || r instanceof Uint8Array || r instanceof Uint8ClampedArray;
}
function Sm(r) {
  if (r === "float32" || r === "int32")
    return 4;
  if (r === "complex64")
    return 8;
  if (r === "bool")
    return 1;
  throw new Error(`Unknown dtype ${r}`);
}
function fb(r) {
  if (r == null)
    return 0;
  let e = 0;
  return r.forEach((t6) => e += t6.length), e;
}
function Po(r) {
  return typeof r == "string" || r instanceof String;
}
function BI(r) {
  return typeof r == "boolean";
}
function VI(r) {
  return typeof r == "number";
}
function np(r) {
  return Array.isArray(r) ? np(r[0]) : r instanceof Float32Array ? "float32" : r instanceof Int32Array || r instanceof Uint8Array || r instanceof Uint8ClampedArray ? "int32" : VI(r) ? "float32" : Po(r) ? "string" : BI(r) ? "bool" : "float32";
}
function fs(r) {
  return !!(r && r.constructor && r.call && r.apply);
}
function sp(r, e) {
  for (let t6 = e; t6 < r; ++t6)
    if (r % t6 === 0)
      return t6;
  return r;
}
function hs(r) {
  let e = r.length;
  if (e < 2)
    return [];
  let t6 = new Array(e - 1);
  t6[e - 2] = r[e - 1];
  for (let o = e - 3; o >= 0; --o)
    t6[o] = t6[o + 1] * r[o + 1];
  return t6;
}
function zI(r, e, t6, o = false) {
  let n = new Array();
  if (e.length === 1) {
    let s = e[0] * (o ? 2 : 1);
    for (let a = 0; a < s; a++)
      n[a] = t6[r + a];
  } else {
    let s = e[0], a = e.slice(1), i = a.reduce((p, u) => p * u) * (o ? 2 : 1);
    for (let p = 0; p < s; p++)
      n[p] = zI(r + p * i, a, t6, o);
  }
  return n;
}
function Ki(r, e, t6 = false) {
  if (r.length === 0)
    return e[0];
  let o = r.reduce((n, s) => n * s) * (t6 ? 2 : 1);
  if (o === 0)
    return [];
  if (o !== e.length)
    throw new Error(`[${r}] does not match the input size ${e.length}${t6 ? " for a complex tensor" : ""}.`);
  return zI(0, r, e, t6);
}
function zc(r, e) {
  let t6 = ap(r, e);
  for (let o = 0; o < t6.length; o++)
    t6[o] = 1;
  return t6;
}
function ap(r, e) {
  if (e == null || e === "float32" || e === "complex64")
    return new Float32Array(r);
  if (e === "int32")
    return new Int32Array(r);
  if (e === "bool")
    return new Uint8Array(r);
  throw new Error(`Unknown data type ${e}`);
}
function PV(r, e) {
  let t6 = r.reduce((o, n) => o * n, 1);
  if (e == null || e === "float32")
    return Ki(r, new Float32Array(t6));
  if (e === "int32")
    return Ki(r, new Int32Array(t6));
  if (e === "bool")
    return Ki(r, new Uint8Array(t6));
  throw new Error(`Unknown data type ${e}`);
}
function yt(r) {
  r.forEach((e) => {
    E(Number.isInteger(e) && e >= 0, () => `Tensor must have a shape comprised of positive integers but got shape [${r}].`);
  });
}
function MV(r, e, t6) {
  if (e === 0)
    return 0;
  if (e === 1)
    return r[0];
  let o = r[r.length - 1];
  for (let n = 0; n < r.length - 1; ++n)
    o += t6[n] * r[n];
  return o;
}
function LV(r, e, t6) {
  if (e === 0)
    return [];
  if (e === 1)
    return [r];
  let o = new Array(e);
  for (let n = 0; n < o.length - 1; ++n)
    o[n] = Math.floor(r / t6[n]), r -= o[n] * t6[n];
  return o[o.length - 1] = r, o;
}
function Wc(r) {
  return r && r.then && typeof r.then == "function";
}
var WI = "tfjsflags";
var Uc = class {
  constructor(e) {
    this.global = e, this.flags = {}, this.flagRegistry = {}, this.urlFlags = {}, this.getQueryParams = VV, this.populateURLFlags();
  }
  setPlatform(e, t6) {
    this.platform != null && (O().getBool("IS_TEST") || O().getBool("PROD") || console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)), this.platformName = e, this.platform = t6;
  }
  registerFlag(e, t6, o) {
    if (this.flagRegistry[e] = { evaluationFn: t6, setHook: o }, this.urlFlags[e] != null) {
      let n = this.urlFlags[e];
      O().getBool("IS_TEST") || O().getBool("PROD") || console.warn(`Setting feature override from URL ${e}: ${n}.`), this.set(e, n);
    }
  }
  async getAsync(e) {
    return e in this.flags ? this.flags[e] : (this.flags[e] = await this.evaluateFlag(e), this.flags[e]);
  }
  get(e) {
    if (e in this.flags)
      return this.flags[e];
    let t6 = this.evaluateFlag(e);
    if (Wc(t6))
      throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);
    return this.flags[e] = t6, this.flags[e];
  }
  getNumber(e) {
    return this.get(e);
  }
  getBool(e) {
    return this.get(e);
  }
  getFlags() {
    return this.flags;
  }
  get features() {
    return this.flags;
  }
  set(e, t6) {
    if (this.flagRegistry[e] == null)
      throw new Error(`Cannot set flag ${e} as it has not been registered.`);
    this.flags[e] = t6, this.flagRegistry[e].setHook != null && this.flagRegistry[e].setHook(t6);
  }
  evaluateFlag(e) {
    if (this.flagRegistry[e] == null)
      throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);
    return this.flagRegistry[e].evaluationFn();
  }
  setFlags(e) {
    this.flags = Object.assign({}, e);
  }
  reset() {
    this.flags = {}, this.urlFlags = {}, this.populateURLFlags();
  }
  populateURLFlags() {
    if (typeof this.global == "undefined" || typeof this.global.location == "undefined" || typeof this.global.location.search == "undefined")
      return;
    let e = this.getQueryParams(this.global.location.search);
    WI in e && e[WI].split(",").forEach((o) => {
      let [n, s] = o.split(":");
      this.urlFlags[n] = WV(n, s);
    });
  }
};
function VV(r) {
  let e = {};
  return r.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (t6, ...o) => (zV(e, o[0], o[1]), o.join("="))), e;
}
function zV(r, e, t6) {
  r[decodeURIComponent(e)] = decodeURIComponent(t6 || "");
}
function WV(r, e) {
  if (e = e.toLowerCase(), e === "true" || e === "false")
    return e === "true";
  if (`${+e}` === e)
    return +e;
  throw new Error(`Could not parse value flag value ${e} for flag ${r}.`);
}
function O() {
  return hb;
}
var hb = null;
function UI(r) {
  hb = r;
}
var gb;
function xb() {
  if (gb == null) {
    let r;
    if (typeof window != "undefined")
      r = window;
    else if (typeof global != "undefined")
      r = global;
    else if (typeof process != "undefined")
      r = process;
    else if (typeof self != "undefined")
      r = self;
    else
      throw new Error("Could not find a global object");
    gb = r;
  }
  return gb;
}
function UV() {
  let r = xb();
  return r._tfGlobals == null && (r._tfGlobals = /* @__PURE__ */ new Map()), r._tfGlobals;
}
function Gc(r, e) {
  let t6 = UV();
  if (t6.has(r))
    return t6.get(r);
  {
    let o = e();
    return t6.set(r, o), t6.get(r);
  }
}
var gs = "Abs";
var sa = "Acos";
var aa = "Acosh";
var eo = "Add";
var Mo = "AddN";
var Lo = "All";
var Bo = "Any";
var Vo = "ArgMax";
var Za = "ArgMin";
var ia = "Asin";
var ua = "Asinh";
var pa = "Atan";
var ca = "Atanh";
var la = "Atan2";
var zo = "AvgPool";
var wm = "AvgPoolGrad";
var ip = "AvgPool3D";
var Im = "AvgPool3DGrad";
var Wo = "BatchMatMul";
var xs = "BatchToSpaceND";
var Ja = "Bincount";
var wne = "BroadcastTo";
var up = "BroadcastArgs";
var co = "Cast";
var Uo = "Ceil";
var lo = "ClipByValue";
var ei = "Complex";
var pp = "ComplexAbs";
var ys = "Concat";
var Go = "Conv2D";
var cp = "Conv2DBackpropFilter";
var Ho = "Conv2DBackpropInput";
var lp = "Conv3D";
var vm = "Conv3DBackpropFilterV2";
var mp = "Conv3DBackpropInputV2";
var qo = "Cos";
var Ko = "Cosh";
var jo = "Cumprod";
var Xo = "Cumsum";
var Yo = "CropAndResize";
var ti = "DenseBincount";
var Qo = "DepthToSpace";
var Zo = "DepthwiseConv2dNative";
var dp = "DepthwiseConv2dNativeBackpropFilter";
var fp = "DepthwiseConv2dNativeBackpropInput";
var hp = "Diag";
var gp = "Dilation2D";
var yb = "Dilation2DBackpropInput";
var bb = "Dilation2DBackpropFilter";
var Jo = "RealDiv";
var ri = "Einsum";
var en = "Elu";
var km = "EluGrad";
var ma = "Erf";
var tn = "Equal";
var rn = "Exp";
var bs = "ExpandDims";
var da = "Expm1";
var oi = "FFT";
var Cs = "Fill";
var on = "FlipLeftRight";
var nn = "Floor";
var sn = "FloorDiv";
var an = "FusedBatchNorm";
var Ss = "GatherV2";
var un = "GatherNd";
var pn = "Greater";
var cn = "GreaterEqual";
var mo = "Identity";
var ni = "IFFT";
var si = "Imag";
var fa = "IsFinite";
var ha = "IsInf";
var ln = "IsNan";
var mn = "LeakyRelu";
var dn = "Less";
var fn = "LessEqual";
var xp = "LinSpace";
var hn = "Log";
var ga = "Log1p";
var gn = "LogicalAnd";
var xn = "LogicalNot";
var xa = "LogicalOr";
var GI = "LogicalXor";
var Ine = "LogSoftmax";
var vne = "LowerBound";
var yp = "LRN";
var Nm = "LRNGrad";
var yn = "Max";
var bn = "Maximum";
var Cn = "MaxPool";
var Tm = "MaxPoolGrad";
var bp = "MaxPool3D";
var _m = "MaxPool3DGrad";
var Cp = "MaxPoolWithArgmax";
var Sn = "Mean";
var wn = "Min";
var In = "Minimum";
var vn = "MirrorPad";
var ya = "Mod";
var Sp = "Multinomial";
var kn = "Multiply";
var ws = "Neg";
var Nn = "NotEqual";
var Tn = "NonMaxSuppressionV3";
var ba = "NonMaxSuppressionV4";
var _n = "NonMaxSuppressionV5";
var Is = "OnesLike";
var En = "OneHot";
var vs = "Pack";
var $n = "PadV2";
var kne = "Pool";
var An = "Pow";
var Rn = "Prelu";
var Fn = "Prod";
var wp = "RaggedGather";
var Ip = "RaggedRange";
var vp = "RaggedTensorToTensor";
var ks = "Range";
var ai = "Real";
var Dn = "Reciprocal";
var On = "Relu";
var Ns = "Reshape";
var Pn = "ResizeNearestNeighbor";
var Em = "ResizeNearestNeighborGrad";
var Mn = "ResizeBilinear";
var $m = "ResizeBilinearGrad";
var Ln = "Relu6";
var Bn = "Reverse";
var Ca = "Round";
var Vn = "Rsqrt";
var zn = "ScatterNd";
var ii = "SearchSorted";
var Ts = "Select";
var Xi = "Selu";
var _s = "Slice";
var Wn = "Sin";
var Sa = "Sinh";
var Yi = "Sign";
var Un = "Sigmoid";
var Qi = "Softplus";
var Gn = "Sqrt";
var Hn = "Sum";
var Es = "SpaceToBatchND";
var $s = "SplitV";
var qn = "Softmax";
var ui = "SparseFillEmptyRows";
var wa = "SparseReshape";
var pi = "SparseSegmentMean";
var ci = "SparseSegmentSum";
var li = "SparseToDense";
var Kn = "SquaredDifference";
var mi = "Square";
var jn = "StridedSlice";
var As = "StringNGrams";
var di = "StringSplit";
var fi = "StringToHashBucketFast";
var Xn = "Sub";
var Yn = "Tan";
var Qn = "Tanh";
var to = "Tile";
var Zn = "TopK";
var Jn = "Transform";
var ro = "Transpose";
var kp = "Unique";
var Rs = "Unpack";
var Np = "UnsortedSegmentSum";
var Nne = "UpperBound";
var Fs = "ZerosLike";
var Ds = "Step";
var Zi = "FromPixels";
var es = "RotateWithOffset";
var fo = "_FusedMatMul";
var ho = "FusedConv2D";
var go = "FusedDepthwiseConv2D";
function Os(...r) {
  O().getBool("IS_TEST") || O().getBool("PROD") || console.warn(...r);
}
function GV(...r) {
  O().getBool("IS_TEST") || O().getBool("PROD") || console.log(...r);
}
var Tp = Gc("kernelRegistry", () => /* @__PURE__ */ new Map());
var Hc = Gc("gradRegistry", () => /* @__PURE__ */ new Map());
function qc(r, e) {
  let t6 = Sb(r, e);
  return Tp.get(t6);
}
function Cb(r) {
  return Hc.get(r);
}
function Am(r) {
  let e = Tp.entries(), t6 = [];
  for (; ; ) {
    let { done: o, value: n } = e.next();
    if (o)
      break;
    let [s, a] = n, [i] = s.split("_");
    i === r && t6.push(a);
  }
  return t6;
}
function Ia(r) {
  let { kernelName: e, backendName: t6 } = r, o = Sb(e, t6);
  Tp.has(o) && Os(`The kernel '${e}' for backend '${t6}' is already registered`), Tp.set(o, r);
}
function Ane(r) {
  let { kernelName: e } = r;
  Hc.has(e) && O().getBool("DEBUG") && Os(`Overriding the gradient for '${e}'`), Hc.set(e, r);
}
function Rne(r, e) {
  let t6 = Sb(r, e);
  if (!Tp.has(t6))
    throw new Error(`The kernel '${r}' for backend '${e}' is not registered`);
  Tp.delete(t6);
}
function Fne(r) {
  if (!Hc.has(r))
    throw new Error(`The gradient '${r}' for backend is not registered`);
  Hc.delete(r);
}
function Dne(r, e) {
  Am(r).forEach((o) => {
    let n = Object.assign({}, o, { backendName: e });
    Ia(n);
  });
}
function Sb(r, e) {
  return `${e}_${r}`;
}
var y = {};
Ue(y, { arraysEqual: () => Pr, assert: () => E, assertNonNegativeIntegerDimensions: () => yt, assertNonNull: () => Jr, assertShapesMatch: () => ht, bytesFromStringArray: () => fb, bytesPerElement: () => Sm, checkConversionForErrors: () => mb, clamp: () => op, computeStrides: () => hs, createScalarValue: () => QV, createShuffledIndices: () => RV, decodeString: () => Ap, distSquared: () => _V, encodeString: () => gi, fetch: () => JV, fingerPrint64: () => YV, flatten: () => Oo, getArrayFromDType: () => lb, getTypedArrayFromDType: () => cb, hasEncodingLoss: () => OV, hexToLong: () => Kc, indexToLoc: () => LV, inferDtype: () => np, inferFromImplicitShape: () => DV, isBoolean: () => BI, isFunction: () => fs, isInt: () => na, isNumber: () => VI, isPromise: () => Wc, isScalarShape: () => EV, isString: () => Po, isTypedArray: () => Wt, isValidDtype: () => db, locToIndex: () => MV, makeOnesTypedArray: () => zc, makeZerosNestedTypedArray: () => PV, makeZerosTypedArray: () => ap, nearestDivisor: () => sp, nearestLargerEven: () => kV, now: () => ou, parseAxisParam: () => Qa, randUniform: () => TV, repeatedTry: () => FV, rightPad: () => ji, shuffle: () => LI, shuffleCombo: () => vV, sizeFromShape: () => ze, sizeToSquarishShape: () => AV, squeezeShape: () => pb, sum: () => NV, swap: () => Cm, tanh: () => $V, toNestedArray: () => Ki, toTypedArray: () => $p });
var kb = rp(r0());
var ru = kb.default || kb;
function Kc(r) {
  return ru.fromString(r, true, 16);
}
var n0 = Kc("c3a5c85c97cb3127");
var tu = Kc("b492b66fbe98f273");
var gr = Kc("9ae16a3b2f90404f");
function vb(r) {
  return r.xor(r.shru(47));
}
function s0(r, e, t6) {
  let o = r.slice(e, e + t6);
  return ru.fromBytes(Array.from(o), true, true);
}
function bt(r, e) {
  return s0(r, e, 8);
}
function o0(r, e) {
  return s0(r, e, 4);
}
function jt(r, e) {
  return e === 0 ? r : r.shru(e).or(r.shl(64 - e));
}
function hi(r, e, t6 = Kc("9ddfea08eb382d69")) {
  let o = r.xor(e).mul(t6);
  o = o.xor(o.shru(47));
  let n = e.xor(o).mul(t6);
  return n = n.xor(n.shru(47)), n = n.mul(t6), n;
}
function qV(r, e, t6, o, n, s) {
  n = n.add(r), s = jt(s.add(n).add(o), 21);
  let a = n;
  return n = n.add(e), n = n.add(t6), s = s.add(jt(n, 44)), [n.add(o), s.add(a)];
}
function Fm(r, e, t6, o) {
  return qV(bt(r, e), bt(r, e + 8), bt(r, e + 16), bt(r, e + 24), t6, o);
}
function KV(r, e = r.length) {
  if (e >= 8) {
    let t6 = gr.add(e * 2), o = bt(r, 0).add(gr), n = bt(r, e - 8), s = jt(n, 37).mul(t6).add(o), a = jt(o, 25).add(n).mul(t6);
    return hi(s, a, t6);
  }
  if (e >= 4) {
    let t6 = gr.add(e * 2), o = o0(r, 0);
    return hi(o.shl(3).add(e), o0(r, e - 4), t6);
  }
  if (e > 0) {
    let t6 = r[0], o = r[e >> 1], n = r[e - 1], s = t6 + (o << 8), a = e + (n << 2);
    return vb(gr.mul(s).xor(n0.mul(a))).mul(gr);
  }
  return gr;
}
function jV(r, e = r.length) {
  let t6 = gr.add(e * 2), o = bt(r, 0).mul(tu), n = bt(r, 8), s = bt(r, e - 8).mul(t6), a = bt(r, e - 16).mul(gr);
  return hi(jt(o.add(n), 43).add(jt(s, 30)).add(a), o.add(jt(n.add(gr), 18)).add(s), t6);
}
function XV(r, e = r.length) {
  let t6 = gr.add(e * 2), o = bt(r, 0).mul(gr), n = bt(r, 8), s = bt(r, e - 8).mul(t6), a = bt(r, e - 16).mul(gr), i = jt(o.add(n), 43).add(jt(s, 30)).add(a), p = hi(i, o.add(jt(n.add(gr), 18)).add(s), t6), u = bt(r, 16).mul(t6), c = bt(r, 24), l = i.add(bt(r, e - 32)).mul(t6), m = p.add(bt(r, e - 24)).mul(t6);
  return hi(jt(u.add(c), 43).add(jt(l, 30)).add(m), u.add(jt(c.add(o), 18)).add(l), t6);
}
function YV(r, e = r.length) {
  let t6 = ru.fromNumber(81, true);
  if (e <= 32)
    return e <= 16 ? KV(r, e) : jV(r, e);
  if (e <= 64)
    return XV(r, e);
  let o = t6, n = t6.mul(tu).add(113), s = vb(n.mul(gr).add(113)).mul(gr), a = [ru.UZERO, ru.UZERO], i = [ru.UZERO, ru.UZERO];
  o = o.mul(gr).add(bt(r, 0));
  let p = 0, u = (e - 1 >> 6) * 64, c = u + (e - 1 & 63) - 63;
  do
    o = jt(o.add(n).add(a[0]).add(bt(r, p + 8)), 37).mul(tu), n = jt(n.add(a[1]).add(bt(r, p + 48)), 42).mul(tu), o = o.xor(i[1]), n = n.add(a[0]).add(bt(r, p + 40)), s = jt(s.add(i[0]), 33).mul(tu), a = Fm(r, p, a[1].mul(tu), o.add(i[0])), i = Fm(r, p + 32, s.add(i[1]), n.add(bt(r, p + 16))), [s, o] = [o, s], p += 64;
  while (p !== u);
  let l = tu.add(s.and(255).shl(1));
  return p = c, i[0] = i[0].add(e - 1 & 63), a[0] = a[0].add(i[0]), i[0] = i[0].add(a[0]), o = jt(o.add(n).add(a[0]).add(bt(r, p + 8)), 37).mul(l), n = jt(n.add(a[1]).add(bt(r, p + 48)), 42).mul(l), o = o.xor(i[1].mul(9)), n = n.add(a[0].mul(9).add(bt(r, p + 40))), s = jt(s.add(i[0]), 33).mul(l), a = Fm(r, p, a[1].mul(l), o.add(i[0])), i = Fm(r, p + 32, s.add(i[1]), n.add(bt(r, p + 16))), [s, o] = [o, s], hi(hi(a[0], i[0], l).add(vb(n).mul(n0)).add(s), hi(a[1], i[1], l).add(o), l);
}
function QV(r, e) {
  return e === "string" ? gi(r) : $p([r], e);
}
function ZV(r, e) {
  return r instanceof Float32Array && e === "float32" || r instanceof Int32Array && e === "int32" || r instanceof Uint8Array && e === "bool";
}
function $p(r, e) {
  if (e === "string")
    throw new Error("Cannot convert a string[] to a TypedArray");
  if (Array.isArray(r) && (r = Oo(r)), O().getBool("DEBUG") && mb(r, e), ZV(r, e))
    return r;
  if (e == null || e === "float32" || e === "complex64")
    return new Float32Array(r);
  if (e === "int32")
    return new Int32Array(r);
  if (e === "bool") {
    let t6 = new Uint8Array(r.length);
    for (let o = 0; o < t6.length; ++o)
      Math.round(r[o]) !== 0 && (t6[o] = 1);
    return t6;
  } else
    throw new Error(`Unknown data type ${e}`);
}
function ou() {
  return O().platform.now();
}
function JV(r, e) {
  return O().platform.fetch(r, e);
}
function gi(r, e = "utf-8") {
  return e = e || "utf-8", O().platform.encode(r, e);
}
function Ap(r, e = "utf-8") {
  return e = e || "utf-8", O().platform.decode(r, e);
}
var Dm = class {
  constructor(e, t6) {
    this.backendTimer = e, this.logger = t6, t6 == null && (this.logger = new Nb());
  }
  profileKernel(e, t6, o) {
    let n, s = () => {
      n = o();
    }, a, i = ou();
    if (this.backendTimer.timerAvailable())
      a = this.backendTimer.time(s);
    else {
      s();
      for (let u of n)
        u.dataSync();
      a = Promise.resolve({ kernelMs: ou() - i });
    }
    if (O().getBool("CHECK_COMPUTATION_FOR_ERRORS"))
      for (let u = 0; u < n.length; u++) {
        let c = n[u];
        c.data().then((l) => {
          ez(l, c.dtype, e);
        });
      }
    return { kernelName: e, outputs: n, inputs: t6, timeMs: a.then((u) => u.kernelMs), extraInfo: a.then((u) => u.getExtraProfileInfo != null ? u.getExtraProfileInfo() : "") };
  }
  logKernelProfile(e) {
    let { kernelName: t6, outputs: o, timeMs: n, inputs: s, extraInfo: a } = e;
    o.forEach((i) => {
      Promise.all([i.data(), n, a]).then((p) => {
        this.logger.logKernelProfile(t6, i, p[0], p[1], s, p[2]);
      });
    });
  }
};
function ez(r, e, t6) {
  if (e !== "float32")
    return false;
  for (let o = 0; o < r.length; o++) {
    let n = r[o];
    if (isNaN(n) || !isFinite(n))
      return console.warn(`Found ${n} in the result of '${t6}'`), true;
  }
  return false;
}
var Nb = class {
  logKernelProfile(e, t6, o, n, s, a) {
    let i = typeof n == "number" ? ji(`${n}ms`, 9) : n.error, p = ji(e, 25), u = t6.rank, c = t6.size, l = ji(t6.shape.toString(), 14), m = "";
    for (let d in s) {
      let f = s[d];
      if (f != null) {
        let h = f.shape || t6.shape, g = h.length;
        m += `${d}: ${g}D ${g > 0 ? h : ""} `;
      }
    }
    console.log(`%c${p}	%c${i}	%c${u}D ${l}	%c${c}	%c${m}	%c${a}`, "font-weight:bold", "color:red", "color:blue", "color: orange", "color: green", "color: steelblue");
  }
};
function a0(r, e, t6) {
  let o = {}, n = {};
  for (let p = 0; p < e.length; p++)
    o[e[p].id] = true;
  for (let p = 0; p < r.length; p++) {
    let u = r[p], c = u.inputs;
    for (let l in c) {
      let m = c[l], d = false;
      for (let f = 0; f < e.length; f++)
        if (o[m.id]) {
          u.outputs.forEach((h) => o[h.id] = true), d = true, n[u.id] = true;
          break;
        }
      if (d)
        break;
    }
  }
  let s = {};
  s[t6.id] = true;
  let a = {};
  for (let p = r.length - 1; p >= 0; p--) {
    let u = r[p], c = u.inputs;
    for (let l = 0; l < u.outputs.length; l++)
      if (s[u.outputs[l].id]) {
        for (let m in c)
          s[c[m].id] = true, a[u.id] = true;
        break;
      }
  }
  let i = [];
  for (let p = 0; p < r.length; p++) {
    let u = r[p];
    if (n[u.id] && a[u.id]) {
      let c = {};
      for (let m in u.inputs) {
        let d = u.inputs[m];
        o[d.id] && (c[m] = d);
      }
      let l = Object.assign({}, u);
      l.inputs = c, l.outputs = u.outputs, i.push(l);
    }
  }
  return i;
}
function i0(r, e, t6, o) {
  for (let n = e.length - 1; n >= 0; n--) {
    let s = e[n], a = [];
    if (s.outputs.forEach((p) => {
      let u = r[p.id];
      u != null ? a.push(u) : a.push(null);
    }), s.gradient == null)
      throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);
    let i = s.gradient(a);
    for (let p in s.inputs) {
      if (!(p in i))
        throw new Error(`Cannot backprop through input ${p}. Available gradients found: ${Object.keys(i)}.`);
      let u = t6(() => i[p]());
      if (u.dtype !== "float32")
        throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${p} must have 'float32' dtype, but has '${u.dtype}'`);
      let c = s.inputs[p];
      if (!Pr(u.shape, c.shape))
        throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${p}' has shape '${u.shape}', which does not match the shape of the input '${c.shape}'`);
      if (r[c.id] == null)
        r[c.id] = u;
      else {
        let l = r[c.id];
        r[c.id] = o(l, u), l.dispose();
      }
    }
  }
}
var u0 = 20;
var jc = 3;
var Tb = 7;
function p0(r, e, t6, o) {
  let n = hs(e), s = tz(r, e, t6, n), a = e.length, i = Om(r, e, t6, n, s), p = ["Tensor"];
  return o && (p.push(`  dtype: ${t6}`), p.push(`  rank: ${a}`), p.push(`  shape: [${e}]`), p.push("  values:")), p.push(i.map((u) => "    " + u).join(`
`)), p.join(`
`);
}
function tz(r, e, t6, o) {
  let n = ze(e), s = o[o.length - 1], a = new Array(s).fill(0), i = e.length, p = t6 === "complex64" ? Yc(r) : r;
  if (i > 1)
    for (let u = 0; u < n / s; u++) {
      let c = u * s;
      for (let l = 0; l < s; l++)
        a[l] = Math.max(a[l], Xc(p[c + l], 0, t6).length);
    }
  return a;
}
function Xc(r, e, t6) {
  let o;
  return Array.isArray(r) ? o = `${parseFloat(r[0].toFixed(Tb))} + ${parseFloat(r[1].toFixed(Tb))}j` : Po(r) ? o = `'${r}'` : t6 === "bool" ? o = c0(r) : o = parseFloat(r.toFixed(Tb)).toString(), ji(o, e);
}
function c0(r) {
  return r === 0 ? "false" : "true";
}
function Om(r, e, t6, o, n, s = true) {
  let a = t6 === "complex64" ? 2 : 1, i = e[0], p = e.length;
  if (p === 0) {
    if (t6 === "complex64") {
      let h = Yc(r);
      return [Xc(h[0], 0, t6)];
    }
    return t6 === "bool" ? [c0(r[0])] : [r[0].toString()];
  }
  if (p === 1) {
    if (i > u0) {
      let g = jc * a, x = Array.from(r.slice(0, g)), b = Array.from(r.slice((i - jc) * a, i * a));
      return t6 === "complex64" && (x = Yc(x), b = Yc(b)), ["[" + x.map((C, w) => Xc(C, n[w], t6)).join(", ") + ", ..., " + b.map((C, w) => Xc(C, n[i - jc + w], t6)).join(", ") + "]"];
    }
    return ["[" + (t6 === "complex64" ? Yc(r) : Array.from(r)).map((g, x) => Xc(g, n[x], t6)).join(", ") + "]"];
  }
  let u = e.slice(1), c = o.slice(1), l = o[0] * a, m = [];
  if (i > u0) {
    for (let h = 0; h < jc; h++) {
      let g = h * l, x = g + l;
      m.push(...Om(r.slice(g, x), u, t6, c, n, false));
    }
    m.push("...");
    for (let h = i - jc; h < i; h++) {
      let g = h * l, x = g + l;
      m.push(...Om(r.slice(g, x), u, t6, c, n, h === i - 1));
    }
  } else
    for (let h = 0; h < i; h++) {
      let g = h * l, x = g + l;
      m.push(...Om(r.slice(g, x), u, t6, c, n, h === i - 1));
    }
  let d = p === 2 ? "," : "";
  m[0] = "[" + m[0] + d;
  for (let h = 1; h < m.length - 1; h++)
    m[h] = " " + m[h] + d;
  let f = `,
`;
  for (let h = 2; h < p; h++)
    f += `
`;
  return m[m.length - 1] = " " + m[m.length - 1] + "]" + (s ? "" : f), m;
}
function Yc(r) {
  let e = [];
  for (let t6 = 0; t6 < r.length; t6 += 2)
    e.push([r[t6], r[t6 + 1]]);
  return e;
}
var st = class {
  constructor(e, t6, o) {
    if (this.dtype = t6, this.shape = e.slice(), this.size = ze(e), o != null) {
      let n = o.length;
      E(n === this.size, () => `Length of values '${n}' does not match the size inferred by the shape '${this.size}'.`);
    }
    if (t6 === "complex64")
      throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");
    this.values = o || lb(t6, this.size), this.strides = hs(e);
  }
  set(e, ...t6) {
    t6.length === 0 && (t6 = [0]), E(t6.length === this.rank, () => `The number of provided coordinates (${t6.length}) must match the rank (${this.rank})`);
    let o = this.locToIndex(t6);
    this.values[o] = e;
  }
  get(...e) {
    e.length === 0 && (e = [0]);
    let t6 = 0;
    for (let n of e) {
      if (n < 0 || n >= this.shape[t6]) {
        let s = `Requested out of range element at ${e}.   Buffer shape=${this.shape}`;
        throw new Error(s);
      }
      t6++;
    }
    let o = e[e.length - 1];
    for (let n = 0; n < e.length - 1; ++n)
      o += this.strides[n] * e[n];
    return this.values[o];
  }
  locToIndex(e) {
    if (this.rank === 0)
      return 0;
    if (this.rank === 1)
      return e[0];
    let t6 = e[e.length - 1];
    for (let o = 0; o < e.length - 1; ++o)
      t6 += this.strides[o] * e[o];
    return t6;
  }
  indexToLoc(e) {
    if (this.rank === 0)
      return [];
    if (this.rank === 1)
      return [e];
    let t6 = new Array(this.shape.length);
    for (let o = 0; o < t6.length - 1; ++o)
      t6[o] = Math.floor(e / this.strides[o]), e -= t6[o] * this.strides[o];
    return t6[t6.length - 1] = e, t6;
  }
  get rank() {
    return this.shape.length;
  }
  toTensor() {
    return rs().makeTensor(this.values, this.shape, this.dtype);
  }
};
var rs = null;
var Rp = null;
var rz = null;
function l0(r) {
  rs = r;
}
function m0(r) {
  Rp = r;
}
function d0(r) {
  rz = r;
}
var it = class {
  constructor(e, t6, o, n) {
    this.kept = false, this.isDisposedInternal = false, this.shape = e.slice(), this.dtype = t6 || "float32", this.size = ze(e), this.strides = hs(e), this.dataId = o, this.id = n, this.rankType = this.rank < 5 ? this.rank.toString() : "higher";
  }
  get rank() {
    return this.shape.length;
  }
  async buffer() {
    let e = await this.data();
    return Rp.buffer(this.shape, this.dtype, e);
  }
  bufferSync() {
    return Rp.buffer(this.shape, this.dtype, this.dataSync());
  }
  async array() {
    let e = await this.data();
    return Ki(this.shape, e, this.dtype === "complex64");
  }
  arraySync() {
    return Ki(this.shape, this.dataSync(), this.dtype === "complex64");
  }
  async data() {
    this.throwIfDisposed();
    let e = rs().read(this.dataId);
    if (this.dtype === "string") {
      let t6 = await e;
      try {
        return t6.map((o) => Ap(o));
      } catch (o) {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    }
    return e;
  }
  dataToGPU(e) {
    return this.throwIfDisposed(), rs().readToGPU(this.dataId, e);
  }
  dataSync() {
    this.throwIfDisposed();
    let e = rs().readSync(this.dataId);
    if (this.dtype === "string")
      try {
        return e.map((t6) => Ap(t6));
      } catch (t6) {
        throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().");
      }
    return e;
  }
  async bytes() {
    this.throwIfDisposed();
    let e = await rs().read(this.dataId);
    return this.dtype === "string" ? e : new Uint8Array(e.buffer);
  }
  dispose() {
    this.isDisposed || (rs().disposeTensor(this), this.isDisposedInternal = true);
  }
  get isDisposed() {
    return this.isDisposedInternal;
  }
  throwIfDisposed() {
    if (this.isDisposed)
      throw new Error("Tensor is disposed.");
  }
  print(e = false) {
    return Rp.print(this, e);
  }
  clone() {
    return this.throwIfDisposed(), Rp.clone(this);
  }
  toString(e = false) {
    let t6 = this.dataSync();
    return p0(t6, this.shape, this.dtype, e);
  }
  cast(e) {
    return this.throwIfDisposed(), Rp.cast(this, e);
  }
  variable(e = true, t6, o) {
    return this.throwIfDisposed(), rs().makeVariable(this, e, t6, o);
  }
};
Object.defineProperty(it, Symbol.hasInstance, { value: (r) => !!r && r.data != null && r.dataSync != null && r.throwIfDisposed != null });
function oz() {
  return Gc("Tensor", () => it);
}
oz();
var va = class extends it {
  constructor(e, t6, o, n) {
    super(e.shape, e.dtype, e.dataId, n), this.trainable = t6, this.name = o;
  }
  assign(e) {
    if (e.dtype !== this.dtype)
      throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);
    if (!Pr(e.shape, this.shape))
      throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);
    rs().disposeTensor(this), this.dataId = e.dataId, rs().incRef(this, null);
  }
  dispose() {
    rs().disposeVariable(this), this.isDisposedInternal = true;
  }
};
Object.defineProperty(va, Symbol.hasInstance, { value: (r) => r instanceof it && r.assign != null && r.assign instanceof Function });
var h0 = {};
Ue(h0, { assertTypesMatch: () => Fb, getTensorsInContainer: () => Qc, isTensorInList: () => sz, makeTypesMatch: () => Re });
var _b;
(function(r) {
  r.R0 = "R0", r.R1 = "R1", r.R2 = "R2", r.R3 = "R3", r.R4 = "R4", r.R5 = "R5", r.R6 = "R6";
})(_b || (_b = {}));
var Eb;
(function(r) {
  r.float32 = "float32", r.int32 = "int32", r.bool = "int32", r.complex64 = "complex64";
})(Eb || (Eb = {}));
var $b;
(function(r) {
  r.float32 = "float32", r.int32 = "int32", r.bool = "bool", r.complex64 = "complex64";
})($b || ($b = {}));
var Ab;
(function(r) {
  r.float32 = "float32", r.int32 = "float32", r.bool = "float32", r.complex64 = "complex64";
})(Ab || (Ab = {}));
var Rb;
(function(r) {
  r.float32 = "complex64", r.int32 = "complex64", r.bool = "complex64", r.complex64 = "complex64";
})(Rb || (Rb = {}));
var nz = { float32: Ab, int32: Eb, bool: $b, complex64: Rb };
function dt(r, e) {
  if (r === "string" || e === "string") {
    if (r === "string" && e === "string")
      return "string";
    throw new Error(`Can not upcast ${r} with ${e}`);
  }
  return nz[r][e];
}
function ka(r) {
  return dt(r, "int32");
}
function Re(r, e) {
  if (r.dtype === e.dtype)
    return [r, e];
  let t6 = dt(r.dtype, e.dtype);
  return [r.cast(t6), e.cast(t6)];
}
function Fb(r, e) {
  E(r.dtype === e.dtype, () => `The dtypes of the first(${r.dtype}) and second(${e.dtype}) input must match`);
}
function sz(r, e) {
  return e.some((t6) => t6.id === r.id);
}
function Qc(r) {
  let e = [];
  return f0(r, e, /* @__PURE__ */ new Set()), e;
}
function f0(r, e, t6) {
  if (r == null)
    return;
  if (r instanceof it) {
    e.push(r);
    return;
  }
  if (!az(r))
    return;
  let o = r;
  for (let n in o) {
    let s = o[n];
    t6.has(s) || (t6.add(s), f0(s, e, t6));
  }
}
function az(r) {
  return Array.isArray(r) || typeof r == "object";
}
function Db(r) {
  return r.kernelName != null;
}
var Pm = class {
  constructor() {
    this.registeredVariables = {}, this.nextTapeNodeId = 0, this.numBytes = 0, this.numTensors = 0, this.numStringTensors = 0, this.numDataBuffers = 0, this.gradientDepth = 0, this.kernelDepth = 0, this.scopeStack = [], this.numDataMovesStack = [], this.nextScopeId = 0, this.tensorInfo = /* @__PURE__ */ new WeakMap(), this.profiling = false, this.activeProfile = { newBytes: 0, newTensors: 0, peakBytes: 0, kernels: [], result: null, get kernelNames() {
      return Array.from(new Set(this.kernels.map((e) => e.name)));
    } };
  }
  dispose() {
    for (let e in this.registeredVariables)
      this.registeredVariables[e].dispose();
  }
};
var xi = class {
  constructor(e) {
    this.ENV = e, this.registry = {}, this.registryFactory = {}, this.pendingBackendInitId = 0, this.state = new Pm();
  }
  async ready() {
    if (this.pendingBackendInit != null)
      return this.pendingBackendInit.then(() => {
      });
    if (this.backendInstance != null)
      return;
    let e = this.getSortedBackends();
    for (let t6 = 0; t6 < e.length; t6++) {
      let o = e[t6];
      if (await this.initializeBackend(o).success) {
        await this.setBackend(o);
        return;
      }
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  get backend() {
    if (this.pendingBackendInit != null)
      throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
    if (this.backendInstance == null) {
      let { name: e, asyncInit: t6 } = this.initializeBackendsAndReturnBest();
      if (t6)
        throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);
      this.setBackend(e);
    }
    return this.backendInstance;
  }
  backendNames() {
    return Object.keys(this.registryFactory);
  }
  findBackend(e) {
    if (!(e in this.registry))
      if (e in this.registryFactory) {
        let { asyncInit: t6 } = this.initializeBackend(e);
        if (t6)
          return null;
      } else
        return null;
    return this.registry[e];
  }
  findBackendFactory(e) {
    return e in this.registryFactory ? this.registryFactory[e].factory : null;
  }
  registerBackend(e, t6, o = 1) {
    return e in this.registryFactory ? (Os(`${e} backend was already registered. Reusing existing backend factory.`), false) : (this.registryFactory[e] = { factory: t6, priority: o }, true);
  }
  async setBackend(e) {
    if (this.registryFactory[e] == null)
      throw new Error(`Backend name '${e}' not found in registry`);
    if (this.backendName = e, this.registry[e] == null) {
      this.backendInstance = null;
      let { success: t6, asyncInit: o } = this.initializeBackend(e);
      if (!(o ? await t6 : t6))
        return false;
    }
    return this.backendInstance = this.registry[e], this.setupRegisteredKernels(), this.profiler = new Dm(this.backendInstance), true;
  }
  setupRegisteredKernels() {
    Am(this.backendName).forEach((t6) => {
      t6.setupFunc != null && t6.setupFunc(this.backendInstance);
    });
  }
  disposeRegisteredKernels(e) {
    Am(e).forEach((o) => {
      o.disposeFunc != null && o.disposeFunc(this.registry[e]);
    });
  }
  initializeBackend(e) {
    let t6 = this.registryFactory[e];
    if (t6 == null)
      throw new Error(`Cannot initialize backend ${e}, no registration found.`);
    try {
      let o = t6.factory();
      if (o && !(o instanceof Zr) && typeof o.then == "function") {
        let n = ++this.pendingBackendInitId, s = o.then((a) => n < this.pendingBackendInitId ? false : (this.registry[e] = a, this.pendingBackendInit = null, true)).catch((a) => (n < this.pendingBackendInitId || (this.pendingBackendInit = null, Os(`Initialization of backend ${e} failed`), Os(a.stack || a.message)), false));
        return this.pendingBackendInit = s, { success: s, asyncInit: true };
      } else
        return this.registry[e] = o, { success: true, asyncInit: false };
    } catch (o) {
      return Os(`Initialization of backend ${e} failed`), Os(o.stack || o.message), { success: false, asyncInit: false };
    }
  }
  removeBackend(e) {
    if (!(e in this.registryFactory))
      throw new Error(`${e} backend not found in registry`);
    this.backendName === e && this.pendingBackendInit != null && this.pendingBackendInitId++, e in this.registry && (this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e]), delete this.registryFactory[e], this.backendName === e && (this.pendingBackendInit = null, this.backendName = null, this.backendInstance = null);
  }
  getSortedBackends() {
    if (Object.keys(this.registryFactory).length === 0)
      throw new Error("No backend found in registry.");
    return Object.keys(this.registryFactory).sort((e, t6) => this.registryFactory[t6].priority - this.registryFactory[e].priority);
  }
  initializeBackendsAndReturnBest() {
    let e = this.getSortedBackends();
    for (let t6 = 0; t6 < e.length; t6++) {
      let o = e[t6], { success: n, asyncInit: s } = this.initializeBackend(o);
      if (s || n)
        return { name: o, asyncInit: s };
    }
    throw new Error("Could not initialize any backends, all backend initializations failed.");
  }
  moveData(e, t6) {
    let o = this.state.tensorInfo.get(t6), n = o.backend, s = this.readSync(t6), a = n.refCount(t6);
    n.disposeData(t6, true), o.backend = e, e.move(t6, s, o.shape, o.dtype, a), this.shouldCheckForMemLeaks() && this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;
  }
  tidy(e, t6) {
    let o = null;
    if (t6 == null) {
      if (typeof e != "function")
        throw new Error("Please provide a function to tidy()");
      t6 = e;
    } else {
      if (typeof e != "string" && !(e instanceof String))
        throw new Error("When calling with two arguments, the first argument to tidy() must be a string");
      if (typeof t6 != "function")
        throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");
      o = e;
    }
    let n;
    return this.scopedRun(() => this.startScope(o), () => this.endScope(n), () => (n = t6(), n instanceof Promise && console.error("Cannot return a Promise inside of tidy."), n));
  }
  scopedRun(e, t6, o) {
    e();
    try {
      let n = o();
      return t6(), n;
    } catch (n) {
      throw t6(), n;
    }
  }
  nextTensorId() {
    return xi.nextTensorId++;
  }
  nextVariableId() {
    return xi.nextVariableId++;
  }
  clone(e) {
    let t6 = T.runKernel(mo, { x: e }), o = { x: e }, n = (a) => ({ x: () => {
      let i = "float32", p = { x: a }, u = { dtype: i };
      return T.runKernel(co, p, u);
    } }), s = [];
    return this.addTapeNode(this.state.activeScope.name, o, [t6], n, s, {}), t6;
  }
  runKernel(e, t6, o) {
    if (this.backendName == null && this.backend, !(qc(e, this.backendName) != null))
      throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);
    return this.runKernelFunc({ kernelName: e, inputs: t6, attrs: o });
  }
  shouldCheckForMemLeaks() {
    return this.ENV.getBool("IS_TEST");
  }
  checkKernelForMemLeak(e, t6, o) {
    let n = this.backend.numDataIds(), s = 0;
    o.forEach((p) => {
      s += p.dtype === "complex64" ? 3 : 1;
    });
    let a = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1], i = n - t6 - s - a;
    if (i > 0)
      throw new Error(`Backend '${this.backendName}' has an internal memory leak (${i} data ids) after running '${e}'`);
  }
  runKernelFunc(e) {
    let t6, o = [], n = this.isTapeOn(), s = this.state.numBytes, a = this.state.numTensors;
    this.shouldCheckForMemLeaks() && this.state.numDataMovesStack.push(0);
    let i;
    this.backendName == null && this.backend;
    let p, u = Db(e) ? e.kernelName : this.state.activeScope != null ? this.state.activeScope.name : "";
    if (Db(e)) {
      let { kernelName: f, inputs: h, attrs: g } = e;
      this.backendName == null && this.backend;
      let x = qc(f, this.backendName);
      E(x != null, () => `Cannot find registered kernel '${f}' for backend '${this.backendName}'`), i = () => {
        let b = this.backend.numDataIds();
        p = x.kernelFunc({ inputs: h, attrs: g, backend: this.backend });
        let C = Array.isArray(p) ? p : [p];
        this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(f, b, C);
        let w = C.map((k) => k.rank != null ? k : this.makeTensorFromTensorInfo(k));
        if (n) {
          let k = this.getTensorsForGradient(f, h, w);
          o = this.saveTensorsForBackwardMode(k);
        }
        return w;
      };
    } else {
      let { forwardFunc: f } = e, h = (g) => {
        !n || (o = g.map((x) => this.keep(this.clone(x))));
      };
      i = () => {
        let g = this.backend.numDataIds();
        p = this.tidy(() => f(this.backend, h));
        let x = Array.isArray(p) ? p : [p];
        return this.shouldCheckForMemLeaks() && this.checkKernelForMemLeak(u, g, x), x;
      };
    }
    let { inputs: c, attrs: l } = e, m = Db(e) ? null : e.backwardsFunc, d;
    return this.scopedRun(() => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {
      !this.ENV.getBool("DEBUG") && !this.state.profiling ? t6 = i() : (d = this.profiler.profileKernel(u, c, () => i()), this.ENV.getBool("DEBUG") && this.profiler.logKernelProfile(d), t6 = d.outputs);
    }), n && this.addTapeNode(u, c, t6, m, o, l), this.state.profiling && this.state.activeProfile.kernels.push({ name: u, bytesAdded: this.state.numBytes - s, totalBytesSnapshot: this.state.numBytes, tensorsAdded: this.state.numTensors - a, totalTensorsSnapshot: this.state.numTensors, inputShapes: Object.keys(c).map((f) => c[f] != null ? c[f].shape : null), outputShapes: t6.map((f) => f.shape), kernelTimeMs: d.timeMs, extraInfo: d.extraInfo }), Array.isArray(p) ? t6 : t6[0];
  }
  saveTensorsForBackwardMode(e) {
    return e.map((o) => this.keep(this.clone(o)));
  }
  getTensorsForGradient(e, t6, o) {
    let n = Cb(e);
    if (n != null) {
      let s = n.inputsToSave || [], a = n.outputsToSave || [], i;
      n.saveAllInputs ? (E(Array.isArray(t6), () => "saveAllInputs is true, expected inputs to be an array."), i = Object.keys(t6).map((u) => t6[u])) : i = s.map((u) => t6[u]);
      let p = o.filter((u, c) => a[c]);
      return i.concat(p);
    }
    return [];
  }
  makeTensor(e, t6, o, n) {
    if (e == null)
      throw new Error("Values passed to engine.makeTensor() are null");
    o = o || "float32", n = n || this.backend;
    let s = e;
    o === "string" && Po(e[0]) && (s = e.map((p) => gi(p)));
    let a = n.write(s, t6, o), i = new it(t6, o, a, this.nextTensorId());
    if (this.trackTensor(i, n), o === "string") {
      let p = this.state.tensorInfo.get(a), u = fb(s);
      this.state.numBytes += u - p.bytes, p.bytes = u;
    }
    return i;
  }
  makeTensorFromDataId(e, t6, o, n) {
    o = o || "float32";
    let s = { dataId: e, shape: t6, dtype: o };
    return this.makeTensorFromTensorInfo(s, n);
  }
  makeTensorFromTensorInfo(e, t6) {
    let { dataId: o, shape: n, dtype: s } = e, a = new it(n, s, o, this.nextTensorId());
    return this.trackTensor(a, t6), a;
  }
  makeVariable(e, t6 = true, o, n) {
    o = o || this.nextVariableId().toString(), n != null && n !== e.dtype && (e = e.cast(n));
    let s = new va(e, t6, o, this.nextTensorId());
    if (this.state.registeredVariables[s.name] != null)
      throw new Error(`Variable with name ${s.name} was already registered`);
    return this.state.registeredVariables[s.name] = s, this.incRef(s, this.backend), s;
  }
  trackTensor(e, t6) {
    this.state.numTensors++, e.dtype === "string" && this.state.numStringTensors++;
    let o = 0;
    e.dtype !== "complex64" && e.dtype !== "string" && (o = e.size * Sm(e.dtype)), this.state.numBytes += o, this.state.tensorInfo.has(e.dataId) || (this.state.numDataBuffers++, this.state.tensorInfo.set(e.dataId, { backend: t6 || this.backend, dtype: e.dtype, shape: e.shape, bytes: o })), e instanceof va || this.track(e);
  }
  incRef(e, t6) {
    this.trackTensor(e, t6), this.backend.incRef(e.dataId);
  }
  removeDataId(e, t6) {
    this.state.tensorInfo.has(e) && this.state.tensorInfo.get(e).backend === t6 && (this.state.tensorInfo.delete(e), this.state.numDataBuffers--);
  }
  disposeTensor(e) {
    if (!this.state.tensorInfo.has(e.dataId))
      return;
    let t6 = this.state.tensorInfo.get(e.dataId);
    if (this.state.numTensors--, e.dtype === "string" && (this.state.numStringTensors--, this.state.numBytes -= t6.bytes), e.dtype !== "complex64" && e.dtype !== "string") {
      let o = e.size * Sm(e.dtype);
      this.state.numBytes -= o;
    }
    t6.backend.disposeData(e.dataId) && this.removeDataId(e.dataId, t6.backend);
  }
  disposeVariables() {
    for (let e in this.state.registeredVariables) {
      let t6 = this.state.registeredVariables[e];
      this.disposeVariable(t6);
    }
  }
  disposeVariable(e) {
    this.disposeTensor(e), this.state.registeredVariables[e.name] != null && delete this.state.registeredVariables[e.name];
  }
  memory() {
    let e = this.backend.memory();
    return e.numTensors = this.state.numTensors, e.numDataBuffers = this.state.numDataBuffers, e.numBytes = this.state.numBytes, this.state.numStringTensors > 0 && (e.unreliable = true, e.reasons == null && (e.reasons = []), e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")), e;
  }
  async profile(e) {
    this.state.profiling = true;
    let t6 = this.state.numBytes, o = this.state.numTensors;
    this.state.activeProfile.kernels = [], this.state.activeProfile.result = await e(), this.state.profiling = false, this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map((n) => n.totalBytesSnapshot)), this.state.activeProfile.newBytes = this.state.numBytes - t6, this.state.activeProfile.newTensors = this.state.numTensors - o;
    for (let n of this.state.activeProfile.kernels)
      n.kernelTimeMs = await n.kernelTimeMs, n.extraInfo = await n.extraInfo;
    return this.state.activeProfile;
  }
  isTapeOn() {
    return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;
  }
  addTapeNode(e, t6, o, n, s, a) {
    let i = { id: this.state.nextTapeNodeId++, kernelName: e, inputs: t6, outputs: o, saved: s }, p = Cb(e);
    p != null && (n = p.gradFunc), n != null && (i.gradient = (u) => (u = u.map((c, l) => {
      if (c == null) {
        let m = o[l], d = ap(m.size, m.dtype);
        return this.makeTensor(d, m.shape, m.dtype);
      }
      return c;
    }), n(u.length > 1 ? u : u[0], s, a))), this.state.activeTape.push(i);
  }
  keep(e) {
    return e.kept = true, e;
  }
  startTape() {
    this.state.gradientDepth === 0 && (this.state.activeTape = []), this.state.gradientDepth++;
  }
  endTape() {
    this.state.gradientDepth--;
  }
  startScope(e) {
    let t6 = { track: [], name: "unnamed scope", id: this.state.nextScopeId++ };
    e && (t6.name = e), this.state.scopeStack.push(t6), this.state.activeScope = t6;
  }
  endScope(e) {
    let t6 = Qc(e), o = new Set(t6.map((s) => s.id));
    for (let s = 0; s < this.state.activeScope.track.length; s++) {
      let a = this.state.activeScope.track[s];
      !a.kept && !o.has(a.id) && a.dispose();
    }
    let n = this.state.scopeStack.pop();
    this.state.activeScope = this.state.scopeStack.length === 0 ? null : this.state.scopeStack[this.state.scopeStack.length - 1], t6.forEach((s) => {
      !s.kept && s.scopeId === n.id && this.track(s);
    });
  }
  gradients(e, t6, o, n = false) {
    if (E(t6.length > 0, () => "gradients() received an empty list of xs."), o != null && o.dtype !== "float32")
      throw new Error(`dy must have 'float32' dtype, but has '${o.dtype}'`);
    let s = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy("forward", e));
    E(s instanceof it, () => "The result y returned by f() must be a tensor.");
    let a = a0(this.state.activeTape, t6, s);
    if (!n && a.length === 0 && t6.length > 0)
      throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");
    return this.tidy("backward", () => {
      let i = {};
      i[s.id] = o == null ? iz(s.shape) : o, i0(i, a, (u) => this.tidy(u), uz);
      let p = t6.map((u) => i[u.id]);
      return this.state.gradientDepth === 0 && (this.state.activeTape.forEach((u) => {
        for (let c of u.saved)
          c.dispose();
      }), this.state.activeTape = null), { value: s, grads: p };
    });
  }
  customGrad(e) {
    return E(fs(e), () => "The f passed in customGrad(f) must be a function."), (...t6) => {
      E(t6.every((i) => i instanceof it), () => "The args passed in customGrad(f)(x1, x2,...) must all be tensors");
      let o, n = {};
      t6.forEach((i, p) => {
        n[p] = i;
      });
      let s = (i, p) => (o = e(...t6, p), E(o.value instanceof it, () => "The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"), E(fs(o.gradFunc), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."), o.value), a = (i, p) => {
        let u = o.gradFunc(i, p), c = Array.isArray(u) ? u : [u];
        E(c.length === t6.length, () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."), E(c.every((m) => m instanceof it), () => "The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");
        let l = {};
        return c.forEach((m, d) => {
          l[d] = () => m;
        }), l;
      };
      return this.runKernelFunc({ forwardFunc: s, backwardsFunc: a, inputs: n });
    };
  }
  readSync(e) {
    return this.state.tensorInfo.get(e).backend.readSync(e);
  }
  read(e) {
    return this.state.tensorInfo.get(e).backend.read(e);
  }
  readToGPU(e, t6) {
    return this.state.tensorInfo.get(e).backend.readToGPU(e, t6);
  }
  async time(e) {
    let t6 = ou(), o = await this.backend.time(e);
    return o.wallMs = ou() - t6, o;
  }
  track(e) {
    return this.state.activeScope != null && (e.scopeId = this.state.activeScope.id, this.state.activeScope.track.push(e)), e;
  }
  get registeredVariables() {
    return this.state.registeredVariables;
  }
  reset() {
    this.pendingBackendInitId++, this.state.dispose(), this.ENV.reset(), this.state = new Pm();
    for (let e in this.registry)
      this.disposeRegisteredKernels(e), this.registry[e].dispose(), delete this.registry[e];
    this.backendName = null, this.backendInstance = null, this.pendingBackendInit = null;
  }
};
xi.nextTensorId = 0;
xi.nextVariableId = 0;
function iz(r) {
  let e = zc(ze(r), "float32");
  return T.makeTensor(e, r, "float32");
}
function Ob() {
  let r = xb();
  if (r._tfengine == null) {
    let e = new Uc(r);
    r._tfengine = new xi(e);
  }
  return UI(r._tfengine.ENV), l0(() => r._tfengine), r._tfengine;
}
var T = Ob();
function uz(r, e) {
  let t6 = { a: r, b: e };
  return T.runKernel(eo, t6);
}
var yi = {};
Ue(yi, { isBrowser: () => Mb, isMobile: () => lz, mockIsMobile: () => cz });
function pz() {
  return typeof navigator != "undefined" && navigator != null;
}
var Pb;
function cz(r) {
  Pb = r;
}
function lz(r) {
  if (Pb !== void 0)
    return Pb;
  if (r || pz()) {
    if (r || (r = navigator), r.product === "ReactNative")
      return true;
    let e = r.userAgent || r.vendor || (typeof window != "undefined" ? window.opera : "");
    if (!e) {
      let t6 = r;
      return t6.userAgentData && t6.userAgentData.mobile;
    }
    return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4));
  }
  return false;
}
function Mb() {
  return typeof window != "undefined" && window.document != null || typeof WorkerGlobalScope != "undefined";
}
var oo = O();
oo.registerFlag("DEBUG", () => false, (r) => {
  r && console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.");
});
oo.registerFlag("IS_BROWSER", () => Mb());
oo.registerFlag("IS_NODE", () => typeof process != "undefined" && typeof process.versions != "undefined" && typeof process.versions.node != "undefined");
oo.registerFlag("IS_CHROME", () => typeof navigator != "undefined" && navigator != null && navigator.userAgent != null && /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor));
oo.registerFlag("PROD", () => false);
oo.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY", () => oo.getBool("DEBUG"));
oo.registerFlag("DEPRECATION_WARNINGS_ENABLED", () => true);
oo.registerFlag("IS_TEST", () => false);
oo.registerFlag("CHECK_COMPUTATION_FOR_ERRORS", () => true);
oo.registerFlag("WRAP_TO_IMAGEBITMAP", () => false);
oo.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU", () => false);
oo.registerFlag("USE_SETTIMEOUTCUSTOM", () => false);
function or(r, e) {
  let t6 = r;
  if (Wt(r))
    return e === "string" ? [] : [r.length];
  if (typeof r == "object" && "texture" in r) {
    let n = r.channels || "RGBA";
    return [r.height, r.width * n.length];
  }
  if (!Array.isArray(r))
    return [];
  let o = [];
  for (; Array.isArray(t6) || Wt(t6) && e !== "string"; )
    o.push(t6.length), t6 = t6[0];
  return Array.isArray(r) && O().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY") && x0(r, o, []), o;
}
function x0(r, e, t6) {
  if (t6 = t6 || [], !Array.isArray(r) && !Wt(r)) {
    E(e.length === 0, () => `Element arr[${t6.join("][")}] is a primitive, but should be an array/TypedArray of ${e[0]} elements`);
    return;
  }
  E(e.length > 0, () => `Element arr[${t6.join("][")}] should be a primitive, but is an array of ${r.length} elements`), E(r.length === e[0], () => `Element arr[${t6.join("][")}] should have ${e[0]} elements, but has ${r.length} elements`);
  let o = e.slice(1);
  for (let n = 0; n < r.length; ++n)
    x0(r[n], o, t6.concat(n));
}
function g0(r, e, t6, o) {
  if (r !== "string_or_numeric") {
    if (r == null)
      throw new Error("Expected dtype cannot be null.");
    if (r !== "numeric" && r !== e || r === "numeric" && e === "string")
      throw new Error(`Argument '${t6}' passed to '${o}' must be ${r} tensor, but got ${e} tensor`);
  }
}
function v(r, e, t6, o = "numeric") {
  if (r instanceof it)
    return g0(o, r.dtype, e, t6), r;
  let n = np(r);
  if (n !== "string" && ["bool", "int32", "float32"].indexOf(o) >= 0 && (n = o), g0(o, n, e, t6), r == null || !Wt(r) && !Array.isArray(r) && typeof r != "number" && typeof r != "boolean" && typeof r != "string") {
    let p = r == null ? "null" : r.constructor.name;
    throw new Error(`Argument '${e}' passed to '${t6}' must be a Tensor or TensorLike, but got '${p}'`);
  }
  let s = or(r, n);
  !Wt(r) && !Array.isArray(r) && (r = [r]);
  let i = n !== "string" ? $p(r, n) : Oo(r, [], true);
  return T.makeTensor(i, s, n);
}
function Na(r, e, t6, o = "numeric") {
  if (!Array.isArray(r))
    throw new Error(`Argument ${e} passed to ${t6} must be a \`Tensor[]\` or \`TensorLike[]\``);
  return r.map((s, a) => v(s, `${e}[${a}]`, t6, o));
}
var Lb = "__op";
function N(r) {
  let e = Object.keys(r);
  if (e.length !== 1)
    throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${e.length} keys.`);
  let t6 = e[0], o = r[t6];
  t6.endsWith("_") && (t6 = t6.substring(0, t6.length - 1)), t6 = t6 + Lb;
  let n = (...s) => {
    T.startScope(t6);
    try {
      let a = o(...s);
      return Wc(a) && console.error("Cannot return a Promise inside of tidy."), T.endScope(a), a;
    } catch (a) {
      throw T.endScope(null), a;
    }
  };
  return Object.defineProperty(n, "name", { value: t6, configurable: true }), n;
}
function mz(r, e) {
  let t6 = v(r, "real", "complex"), o = v(e, "imag", "complex");
  ht(t6.shape, o.shape, `real and imag shapes, ${t6.shape} and ${o.shape}, must match in call to tf.complex().`);
  let n = { real: t6, imag: o };
  return T.runKernel(ei, n);
}
var Tr = N({ complex_: mz });
function xr(r, e, t6, o) {
  if (o == null && (o = np(r)), o === "complex64")
    throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");
  if (typeof r == "object" && "texture" in r) {
    if (o !== "float32" && o !== "int32")
      throw new Error(`Creating tensor from texture only supports 'float32'|'int32' dtype, while the dtype is ${o}.`);
    return r.channels = r.channels || "RGBA", T.backend.createTensorFromTexture(r, e || t6, o);
  }
  if (!Wt(r) && !Array.isArray(r) && typeof r != "number" && typeof r != "boolean" && typeof r != "string")
    throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");
  if (e != null) {
    yt(e);
    let n = ze(e), s = ze(t6);
    E(n === s, () => `Based on the provided shape, [${e}], the tensor should have ${n} values but has ${s}`);
    for (let a = 0; a < t6.length; ++a) {
      let i = t6[a], p = a === t6.length - 1 ? i !== ze(e.slice(a)) : true;
      E(t6[a] === e[a] || !p, () => `Error creating a new Tensor. Inferred shape (${t6}) does not match the provided shape (${e}). `);
    }
  }
  return !Wt(r) && !Array.isArray(r) && (r = [r]), e = e || t6, r = o !== "string" ? $p(r, o) : Oo(r, [], true), T.makeTensor(r, e, o);
}
function nr(r, e, t6) {
  let o = or(r, t6);
  return xr(r, e, o, t6);
}
var Zc = { float32: 4, float16: 2, int32: 4, uint16: 2, uint8: 1, bool: 1, complex64: 8 };
var Mm = 4;
async function b0(r, e) {
  let t6 = [], o = [], n = Array.isArray(r) ? r.map((a) => a.name) : Object.keys(r);
  for (let a = 0; a < n.length; ++a) {
    let i = n[a], p = Array.isArray(r) ? r[a].tensor : r[i];
    if (p.dtype !== "float32" && p.dtype !== "int32" && p.dtype !== "bool" && p.dtype !== "string" && p.dtype !== "complex64")
      throw new Error(`Unsupported dtype in weight '${i}': ${p.dtype}`);
    let u = { name: i, shape: p.shape, dtype: p.dtype };
    if (p.dtype === "string") {
      let c = new Promise(async (l) => {
        let m = await p.bytes(), d = m.reduce((g, x) => g + x.length, 0) + Mm * m.length, f = new Uint8Array(d), h = 0;
        for (let g = 0; g < m.length; g++) {
          let x = m[g], b = new Uint8Array(new Uint32Array([x.length]).buffer);
          f.set(b, h), h += Mm, f.set(x, h), h += x.length;
        }
        l(f);
      });
      o.push(c);
    } else
      o.push(p.data());
    e != null && (u.group = e), t6.push(u);
  }
  let s = await Promise.all(o);
  return { data: dz(s), specs: t6 };
}
function Lm(r, e) {
  let t6 = {}, o, n = 0;
  for (let s of e) {
    let a = s.name, i = s.dtype, p = s.shape, u = ze(p), c;
    if ("quantization" in s) {
      let l = s.quantization;
      if (l.dtype === "uint8" || l.dtype === "uint16") {
        if (!("min" in l && "scale" in l))
          throw new Error(`Weight ${s.name} with quantization ${l.dtype} doesn't have corresponding metadata min and scale.`);
      } else if (l.dtype === "float16") {
        if (i !== "float32")
          throw new Error(`Weight ${s.name} is quantized with ${l.dtype} which only supports weights of type float32 not ${i}.`);
      } else
        throw new Error(`Weight ${s.name} has unknown quantization dtype ${l.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);
      let m = Zc[l.dtype], d = r.slice(n, n + u * m), f = l.dtype === "uint8" ? new Uint8Array(d) : new Uint16Array(d);
      if (i === "float32")
        if (l.dtype === "uint8" || l.dtype === "uint16") {
          c = new Float32Array(f.length);
          for (let h = 0; h < f.length; h++) {
            let g = f[h];
            c[h] = g * l.scale + l.min;
          }
        } else if (l.dtype === "float16")
          o === void 0 && (o = xz()), c = o(f);
        else
          throw new Error(`Unsupported quantization type ${l.dtype} for weight type float32.`);
      else if (i === "int32") {
        if (l.dtype !== "uint8" && l.dtype !== "uint16")
          throw new Error(`Unsupported quantization type ${l.dtype} for weight type int32.`);
        c = new Int32Array(f.length);
        for (let h = 0; h < f.length; h++) {
          let g = f[h];
          c[h] = Math.round(g * l.scale + l.min);
        }
      } else
        throw new Error(`Unsupported dtype in weight '${a}': ${i}`);
      n += u * m;
    } else if (i === "string") {
      let l = ze(s.shape);
      c = [];
      for (let m = 0; m < l; m++) {
        let d = new Uint32Array(r.slice(n, n + Mm))[0];
        n += Mm;
        let f = new Uint8Array(r.slice(n, n + d));
        c.push(f), n += d;
      }
    } else {
      let l = Zc[i], m = r.slice(n, n + u * l);
      if (i === "float32")
        c = new Float32Array(m);
      else if (i === "int32")
        c = new Int32Array(m);
      else if (i === "bool")
        c = new Uint8Array(m);
      else if (i === "complex64") {
        c = new Float32Array(m);
        let d = new Float32Array(c.length / 2), f = new Float32Array(c.length / 2);
        for (let x = 0; x < d.length; x++)
          d[x] = c[x * 2], f[x] = c[x * 2 + 1];
        let h = nr(d, p, "float32"), g = nr(f, p, "float32");
        t6[a] = Tr(h, g), h.dispose(), g.dispose();
      } else
        throw new Error(`Unsupported dtype in weight '${a}': ${i}`);
      n += u * l;
    }
    i !== "complex64" && (t6[a] = nr(c, p, i));
  }
  return t6;
}
function dz(r) {
  if (r === null)
    throw new Error(`Invalid input value: ${JSON.stringify(r)}`);
  let e = 0, t6 = [];
  r.forEach((s) => {
    if (e += s.byteLength, t6.push(s.byteLength === s.buffer.byteLength ? s : new s.constructor(s)), !(s instanceof Float32Array || s instanceof Int32Array || s instanceof Uint8Array))
      throw new Error(`Unsupported TypedArray subtype: ${s.constructor.name}`);
  });
  let o = new Uint8Array(e), n = 0;
  return t6.forEach((s) => {
    o.set(new Uint8Array(s.buffer), n), n += s.byteLength;
  }), o.buffer;
}
var Bb = typeof Buffer != "undefined" && (typeof Blob == "undefined" || typeof atob == "undefined" || typeof btoa == "undefined");
function y0(r) {
  return Bb ? Buffer.byteLength(r) : new Blob([r]).size;
}
function C0(r) {
  if (Bb)
    return Buffer.from(r).toString("base64");
  let e = new Uint8Array(r), t6 = "";
  for (let o = 0, n = e.length; o < n; o++)
    t6 += String.fromCharCode(e[o]);
  return btoa(t6);
}
function S0(r) {
  if (Bb) {
    let o = Buffer.from(r, "base64");
    return o.buffer.slice(o.byteOffset, o.byteOffset + o.byteLength);
  }
  let e = atob(r), t6 = new Uint8Array(e.length);
  for (let o = 0; o < e.length; ++o)
    t6.set([e.charCodeAt(o)], o);
  return t6.buffer;
}
function Fp(r) {
  if (r.length === 1)
    return r[0];
  let e = 0;
  r.forEach((n) => {
    e += n.byteLength;
  });
  let t6 = new Uint8Array(e), o = 0;
  return r.forEach((n) => {
    t6.set(new Uint8Array(n), o), o += n.byteLength;
  }), t6.buffer;
}
function Vb(r) {
  let e = "/";
  for (r = r.trim(); r.endsWith(e); )
    r = r.slice(0, r.length - 1);
  let t6 = r.split(e);
  return t6[t6.length - 1];
}
function Bm(r, e) {
  let t6 = { modelTopology: r.modelTopology, format: r.format, generatedBy: r.generatedBy, convertedBy: r.convertedBy, weightsManifest: e };
  return r.signature != null && (t6.signature = r.signature), r.userDefinedMetadata != null && (t6.userDefinedMetadata = r.userDefinedMetadata), r.modelInitializer != null && (t6.modelInitializer = r.modelInitializer), r.initializerSignature != null && (t6.initializerSignature = r.initializerSignature), r.trainingConfig != null && (t6.trainingConfig = r.trainingConfig), t6;
}
function zb(r, e, t6) {
  let o = { modelTopology: r.modelTopology, format: r.format, generatedBy: r.generatedBy, convertedBy: r.convertedBy };
  if (r.trainingConfig != null && (o.trainingConfig = r.trainingConfig), r.weightsManifest != null) {
    if (!e)
      throw new Error("modelJSON has weightsManifest but weightSpecs is null");
    if (!t6)
      throw new Error("modelJSON has weightsManifest but weightData is null");
    o.weightSpecs = e, o.weightData = t6;
  }
  return r.signature != null && (o.signature = r.signature), r.userDefinedMetadata != null && (o.userDefinedMetadata = r.userDefinedMetadata), r.modelInitializer != null && (o.modelInitializer = r.modelInitializer), r.initializerSignature != null && (o.initializerSignature = r.initializerSignature), o;
}
async function Dp(r, e) {
  let t6, o;
  return r.weightsManifest != null && ([t6, o] = await e(r.weightsManifest)), zb(r, t6, o);
}
function Ps(r) {
  if (r.modelTopology instanceof ArrayBuffer)
    throw new Error("Expected JSON model topology, received ArrayBuffer.");
  return { dateSaved: new Date(), modelTopologyType: "JSON", modelTopologyBytes: r.modelTopology == null ? 0 : y0(JSON.stringify(r.modelTopology)), weightSpecsBytes: r.weightSpecs == null ? 0 : y0(JSON.stringify(r.weightSpecs)), weightDataBytes: r.weightData == null ? 0 : r.weightData.byteLength };
}
function Vm(r) {
  let e = [];
  for (let t6 of r)
    e.push(...t6.weights);
  return e;
}
function fz() {
  let r = (t6) => {
    let o = t6 << 13, n = 0;
    for (; (o & 8388608) === 0; )
      n -= 8388608, o <<= 1;
    return o &= -8388609, n += 947912704, o | n;
  }, e = new Uint32Array(2048);
  e[0] = 0;
  for (let t6 = 1; t6 < 1024; t6++)
    e[t6] = r(t6);
  for (let t6 = 1024; t6 < 2048; t6++)
    e[t6] = 939524096 + (t6 - 1024 << 13);
  return e;
}
function hz() {
  let r = new Uint32Array(64);
  r[0] = 0, r[31] = 1199570944, r[32] = 2147483648, r[63] = 3347054592;
  for (let e = 1; e < 31; e++)
    r[e] = e << 23;
  for (let e = 33; e < 63; e++)
    r[e] = 2147483648 + (e - 32 << 23);
  return r;
}
function gz() {
  let r = new Uint32Array(64);
  for (let e = 0; e < 64; e++)
    r[e] = 1024;
  return r[0] = r[32] = 0, r;
}
function xz() {
  let r = fz(), e = hz(), t6 = gz();
  return (o) => {
    let n = new ArrayBuffer(4 * o.length), s = new Uint32Array(n);
    for (let a = 0; a < o.length; a++) {
      let i = o[a], p = r[t6[i >> 10] + (i & 1023)] + e[i >> 10];
      s[a] = p;
    }
    return new Float32Array(n);
  };
}
var lt = class {
  constructor() {
    this.saveRouters = [], this.loadRouters = [];
  }
  static getInstance() {
    return lt.instance == null && (lt.instance = new lt()), lt.instance;
  }
  static registerSaveRouter(e) {
    lt.getInstance().saveRouters.push(e);
  }
  static registerLoadRouter(e) {
    lt.getInstance().loadRouters.push(e);
  }
  static getSaveHandlers(e) {
    return lt.getHandlers(e, "save");
  }
  static getLoadHandlers(e, t6) {
    return lt.getHandlers(e, "load", t6);
  }
  static getHandlers(e, t6, o) {
    let n = [];
    return (t6 === "load" ? lt.getInstance().loadRouters : lt.getInstance().saveRouters).forEach((a) => {
      let i = a(e, o);
      i !== null && n.push(i);
    }), n;
  }
};
var w0 = (r) => lt.registerSaveRouter(r);
var I0 = (r) => lt.registerLoadRouter(r);
var v0 = (r) => lt.getSaveHandlers(r);
var k0 = (r, e) => lt.getLoadHandlers(r, e);
var Wb = "tensorflowjs";
var Ub = 1;
var nu = "models_store";
var bi = "model_info_store";
function N0() {
  if (!O().getBool("IS_BROWSER"))
    throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");
  let r = typeof window == "undefined" ? self : window, e = r.indexedDB || r.mozIndexedDB || r.webkitIndexedDB || r.msIndexedDB || r.shimIndexedDB;
  if (e == null)
    throw new Error("The current browser does not appear to support IndexedDB.");
  return e;
}
function Gb(r) {
  let e = r.result;
  e.createObjectStore(nu, { keyPath: "modelPath" }), e.createObjectStore(bi, { keyPath: "modelPath" });
}
var Ms = class {
  constructor(e) {
    if (this.indexedDB = N0(), e == null || !e)
      throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");
    this.modelPath = e;
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    return this.databaseAction(this.modelPath, e);
  }
  async load() {
    return this.databaseAction(this.modelPath);
  }
  databaseAction(e, t6) {
    return new Promise((o, n) => {
      let s = this.indexedDB.open(Wb, Ub);
      s.onupgradeneeded = () => Gb(s), s.onsuccess = () => {
        let a = s.result;
        if (t6 == null) {
          let i = a.transaction(nu, "readonly"), u = i.objectStore(nu).get(this.modelPath);
          u.onsuccess = () => {
            if (u.result == null)
              return a.close(), n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));
            o(u.result.modelArtifacts);
          }, u.onerror = (c) => (a.close(), n(u.error)), i.oncomplete = () => a.close();
        } else {
          let i = Ps(t6), p = a.transaction(bi, "readwrite"), u = p.objectStore(bi), c = u.put({ modelPath: this.modelPath, modelArtifactsInfo: i }), l;
          c.onsuccess = () => {
            l = a.transaction(nu, "readwrite");
            let d = l.objectStore(nu).put({ modelPath: this.modelPath, modelArtifacts: t6, modelArtifactsInfo: i });
            d.onsuccess = () => o({ modelArtifactsInfo: i }), d.onerror = (f) => {
              u = p.objectStore(bi);
              let h = u.delete(this.modelPath);
              h.onsuccess = () => (a.close(), n(d.error)), h.onerror = (g) => (a.close(), n(d.error));
            };
          }, c.onerror = (m) => (a.close(), n(c.error)), p.oncomplete = () => {
            l == null ? a.close() : l.oncomplete = () => a.close();
          };
        }
      }, s.onerror = (a) => n(s.error);
    });
  }
};
Ms.URL_SCHEME = "indexeddb://";
var T0 = (r) => O().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(Ms.URL_SCHEME) ? yz(r.slice(Ms.URL_SCHEME.length)) : null;
lt.registerSaveRouter(T0);
lt.registerLoadRouter(T0);
function yz(r) {
  return new Ms(r);
}
function bz(r) {
  return r.startsWith(Ms.URL_SCHEME) ? r.slice(Ms.URL_SCHEME.length) : r;
}
var zm = class {
  constructor() {
    this.indexedDB = N0();
  }
  async listModels() {
    return new Promise((e, t6) => {
      let o = this.indexedDB.open(Wb, Ub);
      o.onupgradeneeded = () => Gb(o), o.onsuccess = () => {
        let n = o.result, s = n.transaction(bi, "readonly"), i = s.objectStore(bi).getAll();
        i.onsuccess = () => {
          let p = {};
          for (let u of i.result)
            p[u.modelPath] = u.modelArtifactsInfo;
          e(p);
        }, i.onerror = (p) => (n.close(), t6(i.error)), s.oncomplete = () => n.close();
      }, o.onerror = (n) => t6(o.error);
    });
  }
  async removeModel(e) {
    return e = bz(e), new Promise((t6, o) => {
      let n = this.indexedDB.open(Wb, Ub);
      n.onupgradeneeded = () => Gb(n), n.onsuccess = () => {
        let s = n.result, a = s.transaction(bi, "readwrite"), i = a.objectStore(bi), p = i.get(e), u;
        p.onsuccess = () => {
          if (p.result == null)
            return s.close(), o(new Error(`Cannot find model with path '${e}' in IndexedDB.`));
          {
            let c = i.delete(e), l = () => {
              u = s.transaction(nu, "readwrite");
              let d = u.objectStore(nu).delete(e);
              d.onsuccess = () => t6(p.result.modelArtifactsInfo), d.onerror = (f) => o(p.error);
            };
            c.onsuccess = l, c.onerror = (m) => (l(), s.close(), o(p.error));
          }
        }, p.onerror = (c) => (s.close(), o(p.error)), a.oncomplete = () => {
          u == null ? s.close() : u.oncomplete = () => s.close();
        };
      }, n.onerror = (s) => o(n.error);
    });
  }
};
var Ta = "/";
var Op = "tensorflowjs_models";
var _0 = "info";
var Cz = "model_topology";
var Sz = "weight_specs";
var wz = "weight_data";
var Iz = "model_metadata";
function E0(r) {
  return { info: [Op, r, _0].join(Ta), topology: [Op, r, Cz].join(Ta), weightSpecs: [Op, r, Sz].join(Ta), weightData: [Op, r, wz].join(Ta), modelMetadata: [Op, r, Iz].join(Ta) };
}
function $0(r) {
  for (let e of Object.values(r))
    window.localStorage.removeItem(e);
}
function vz(r) {
  let e = r.split(Ta);
  if (e.length < 3)
    throw new Error(`Invalid key format: ${r}`);
  return e.slice(1, e.length - 1).join(Ta);
}
function kz(r) {
  return r.startsWith(Ls.URL_SCHEME) ? r.slice(Ls.URL_SCHEME.length) : r;
}
var Ls = class {
  constructor(e) {
    if (!O().getBool("IS_BROWSER") || typeof window == "undefined" || typeof window.localStorage == "undefined")
      throw new Error("The current environment does not support local storage.");
    if (this.LS = window.localStorage, e == null || !e)
      throw new Error("For local storage, modelPath must not be null, undefined or empty.");
    this.modelPath = e, this.keys = E0(this.modelPath);
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");
    {
      let t6 = JSON.stringify(e.modelTopology), o = JSON.stringify(e.weightSpecs), n = Ps(e);
      try {
        this.LS.setItem(this.keys.info, JSON.stringify(n)), this.LS.setItem(this.keys.topology, t6), this.LS.setItem(this.keys.weightSpecs, o), this.LS.setItem(this.keys.weightData, C0(e.weightData));
        let s = { format: e.format, generatedBy: e.generatedBy, convertedBy: e.convertedBy, signature: e.signature != null ? e.signature : void 0, userDefinedMetadata: e.userDefinedMetadata != null ? e.userDefinedMetadata : void 0, modelInitializer: e.modelInitializer != null ? e.modelInitializer : void 0, initializerSignature: e.initializerSignature != null ? e.initializerSignature : void 0, trainingConfig: e.trainingConfig != null ? e.trainingConfig : void 0 };
        return this.LS.setItem(this.keys.modelMetadata, JSON.stringify(s)), { modelArtifactsInfo: n };
      } catch (s) {
        throw $0(this.keys), new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${n.modelTopologyBytes}, weightSpecsBytes=${n.weightSpecsBytes}, weightDataBytes=${n.weightDataBytes}.`);
      }
    }
  }
  async load() {
    let e = JSON.parse(this.LS.getItem(this.keys.info));
    if (e == null)
      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);
    if (e.modelTopologyType !== "JSON")
      throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");
    let t6 = {}, o = JSON.parse(this.LS.getItem(this.keys.topology));
    if (o == null)
      throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);
    t6.modelTopology = o;
    let n = JSON.parse(this.LS.getItem(this.keys.weightSpecs));
    if (n == null)
      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);
    t6.weightSpecs = n;
    let s = this.LS.getItem(this.keys.modelMetadata);
    if (s != null) {
      let i = JSON.parse(s);
      t6.format = i.format, t6.generatedBy = i.generatedBy, t6.convertedBy = i.convertedBy, i.signature != null && (t6.signature = i.signature), i.userDefinedMetadata != null && (t6.userDefinedMetadata = i.userDefinedMetadata), i.modelInitializer != null && (t6.modelInitializer = i.modelInitializer), i.initializerSignature != null && (t6.initializerSignature = i.initializerSignature), i.trainingConfig != null && (t6.trainingConfig = i.trainingConfig);
    }
    let a = this.LS.getItem(this.keys.weightData);
    if (a == null)
      throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);
    return t6.weightData = S0(a), t6;
  }
};
Ls.URL_SCHEME = "localstorage://";
var A0 = (r) => O().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(Ls.URL_SCHEME) ? Nz(r.slice(Ls.URL_SCHEME.length)) : null;
lt.registerSaveRouter(A0);
lt.registerLoadRouter(A0);
function Nz(r) {
  return new Ls(r);
}
var Wm = class {
  constructor() {
    E(O().getBool("IS_BROWSER"), () => "Current environment is not a web browser"), E(typeof window == "undefined" || typeof window.localStorage != "undefined", () => "Current browser does not appear to support localStorage"), this.LS = window.localStorage;
  }
  async listModels() {
    let e = {}, t6 = Op + Ta, o = Ta + _0;
    for (let n = 0; n < this.LS.length; ++n) {
      let s = this.LS.key(n);
      if (s.startsWith(t6) && s.endsWith(o)) {
        let a = vz(s);
        e[a] = JSON.parse(this.LS.getItem(s));
      }
    }
    return e;
  }
  async removeModel(e) {
    e = kz(e);
    let t6 = E0(e);
    if (this.LS.getItem(t6.info) == null)
      throw new Error(`Cannot find model at path '${e}'`);
    let o = JSON.parse(this.LS.getItem(t6.info));
    return $0(t6), o;
  }
};
var Pp = "://";
var Xt = class {
  constructor() {
    this.managers = {};
  }
  static getInstance() {
    return Xt.instance == null && (Xt.instance = new Xt()), Xt.instance;
  }
  static registerManager(e, t6) {
    E(e != null, () => "scheme must not be undefined or null."), e.endsWith(Pp) && (e = e.slice(0, e.indexOf(Pp))), E(e.length > 0, () => "scheme must not be an empty string.");
    let o = Xt.getInstance();
    E(o.managers[e] == null, () => `A model store manager is already registered for scheme '${e}'.`), o.managers[e] = t6;
  }
  static getManager(e) {
    let t6 = Xt.getInstance().managers[e];
    if (t6 == null)
      throw new Error(`Cannot find model manager for scheme '${e}'`);
    return t6;
  }
  static getSchemes() {
    return Object.keys(Xt.getInstance().managers);
  }
};
function Um(r) {
  if (r.indexOf(Pp) === -1)
    throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Xt.getSchemes().join(",")}`);
  return { scheme: r.split(Pp)[0], path: r.split(Pp)[1] };
}
async function R0(r, e, t6 = false) {
  E(r !== e, () => `Old path and new path are the same: '${r}'`);
  let o = lt.getLoadHandlers(r);
  E(o.length > 0, () => `Copying failed because no load handler is found for source URL ${r}.`), E(o.length < 2, () => `Copying failed because more than one (${o.length}) load handlers for source URL ${r}.`);
  let n = o[0], s = lt.getSaveHandlers(e);
  E(s.length > 0, () => `Copying failed because no save handler is found for destination URL ${e}.`), E(s.length < 2, () => `Copying failed because more than one (${o.length}) save handlers for destination URL ${e}.`);
  let a = s[0], i = Um(r).scheme, p = Um(r).path, u = i === Um(r).scheme, c = await n.load();
  t6 && u && await Xt.getManager(i).removeModel(p);
  let l = await a.save(c);
  return t6 && !u && await Xt.getManager(i).removeModel(p), l.modelArtifactsInfo;
}
async function F0() {
  let r = Xt.getSchemes(), e = {};
  for (let t6 of r) {
    let o = await Xt.getManager(t6).listModels();
    for (let n in o) {
      let s = t6 + Pp + n;
      e[s] = o[n];
    }
  }
  return e;
}
async function D0(r) {
  let e = Um(r);
  return Xt.getManager(e.scheme).removeModel(e.path);
}
async function O0(r, e) {
  return R0(r, e, false);
}
async function P0(r, e) {
  return R0(r, e, true);
}
var Hb = class {
  constructor() {
    this.messageName = "setTimeoutCustom", this.functionRefs = [], this.handledMessageCount = 0, this.hasEventListener = false;
  }
  fetch(e, t6) {
    return fetch(e, t6);
  }
  now() {
    return performance.now();
  }
  encode(e, t6) {
    if (t6 !== "utf-8" && t6 !== "utf8")
      throw new Error(`Browser's encoder only supports utf-8, but got ${t6}`);
    return this.textEncoder == null && (this.textEncoder = new TextEncoder()), this.textEncoder.encode(e);
  }
  decode(e, t6) {
    return new TextDecoder(t6).decode(e);
  }
  setTimeoutCustom(e, t6) {
    if (typeof window == "undefined" || !O().getBool("USE_SETTIMEOUTCUSTOM")) {
      setTimeout(e, t6);
      return;
    }
    this.functionRefs.push(e), setTimeout(() => {
      window.postMessage({ name: this.messageName, index: this.functionRefs.length - 1 }, "*");
    }, t6), this.hasEventListener || (this.hasEventListener = true, window.addEventListener("message", (o) => {
      if (o.source === window && o.data.name === this.messageName) {
        o.stopPropagation();
        let n = this.functionRefs[o.data.index];
        n(), this.handledMessageCount++, this.handledMessageCount === this.functionRefs.length && (this.functionRefs = [], this.handledMessageCount = 0);
      }
    }, true));
  }
};
if (O().get("IS_BROWSER")) {
  O().setPlatform("browser", new Hb());
  try {
    Xt.registerManager(Ls.URL_SCHEME, new Wm());
  } catch (r) {
  }
  try {
    Xt.registerManager(Ms.URL_SCHEME, new zm());
  } catch (r) {
  }
}
var Tz = { importFetch: () => M0() };
var qb;
var Kb = class {
  constructor() {
    this.util = L0(), this.textEncoder = new this.util.TextEncoder();
  }
  fetch(e, t6) {
    return O().global.fetch != null ? O().global.fetch(e, t6) : (qb == null && (qb = Tz.importFetch()), qb(e, t6));
  }
  now() {
    let e = process.hrtime();
    return e[0] * 1e3 + e[1] / 1e6;
  }
  encode(e, t6) {
    if (t6 !== "utf-8" && t6 !== "utf8")
      throw new Error(`Node built-in encoder only supports utf-8, but got ${t6}`);
    return this.textEncoder.encode(e);
  }
  decode(e, t6) {
    return e.length === 0 ? "" : new this.util.TextDecoder(t6).decode(e);
  }
};
O().get("IS_NODE") && !O().get("IS_BROWSER") && O().setPlatform("node", new Kb());
function le(r, e = "float32", t6) {
  return e = e || "float32", yt(r), new st(r, e, t6);
}
function _z(r, e) {
  let t6 = v(r, "x", "cast");
  if (!db(e))
    throw new Error(`Failed to cast to unknown dtype ${e}`);
  if (e === "string" && t6.dtype !== "string" || e !== "string" && t6.dtype === "string")
    throw new Error("Only strings can be casted to strings");
  let o = { x: t6 }, n = { dtype: e };
  return T.runKernel(co, o, n);
}
var Ke = N({ cast_: _z });
function Ez(r) {
  let t6 = { x: v(r, "x", "clone", "string_or_numeric") };
  return T.runKernel(mo, t6);
}
var Br = N({ clone_: Ez });
function Gm(r, e = false) {
  console.log(r.toString(e));
}
Ob();
var $z = { buffer: le, cast: Ke, clone: Br, print: Gm };
m0($z);
var Ea = {};
Ue(Ea, { browserFiles: () => V0, browserHTTPRequest: () => U0, concatenateArrayBuffers: () => Fp, copyModel: () => O0, decodeWeights: () => Lm, encodeWeights: () => b0, fromMemory: () => G0, fromMemorySync: () => Jb, getLoadHandlers: () => k0, getModelArtifactsForJSON: () => Dp, getModelArtifactsForJSONSync: () => zb, getModelArtifactsInfoForJSON: () => Ps, getSaveHandlers: () => v0, getWeightSpecs: () => Vm, http: () => qm, isHTTPScheme: () => Hm, listModels: () => F0, loadWeights: () => z0, moveModel: () => P0, registerLoadRouter: () => I0, registerSaveRouter: () => w0, removeModel: () => D0, weightsLoaderFactory: () => Qb, withSaveHandler: () => H0, withSaveHandlerSync: () => q0 });
var Az = "model";
var Rz = ".json";
var Fz = ".weights.bin";
function B0(r) {
  return new Promise((e) => setTimeout(e)).then(r);
}
var _a = class {
  constructor(e) {
    if (!O().getBool("IS_BROWSER"))
      throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");
    e.startsWith(_a.URL_SCHEME) && (e = e.slice(_a.URL_SCHEME.length)), (e == null || e.length === 0) && (e = Az), this.modelJsonFileName = e + Rz, this.weightDataFileName = e + Fz;
  }
  async save(e) {
    if (typeof document == "undefined")
      throw new Error("Browser downloads are not supported in this environment since `document` is not present");
    let t6 = window.URL.createObjectURL(new Blob([e.weightData], { type: "application/octet-stream" }));
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");
    {
      let o = [{ paths: ["./" + this.weightDataFileName], weights: e.weightSpecs }], n = Bm(e, o), s = window.URL.createObjectURL(new Blob([JSON.stringify(n)], { type: "application/json" })), a = this.modelJsonAnchor == null ? document.createElement("a") : this.modelJsonAnchor;
      if (a.download = this.modelJsonFileName, a.href = s, await B0(() => a.dispatchEvent(new MouseEvent("click"))), e.weightData != null) {
        let i = this.weightDataAnchor == null ? document.createElement("a") : this.weightDataAnchor;
        i.download = this.weightDataFileName, i.href = t6, await B0(() => i.dispatchEvent(new MouseEvent("click")));
      }
      return { modelArtifactsInfo: Ps(e) };
    }
  }
};
_a.URL_SCHEME = "downloads://";
var jb = class {
  constructor(e) {
    if (e == null || e.length < 1)
      throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);
    this.jsonFile = e[0], this.weightsFiles = e.slice(1);
  }
  async load() {
    return new Promise((e, t6) => {
      let o = new FileReader();
      o.onload = (n) => {
        let s = JSON.parse(n.target.result), a = s.modelTopology;
        if (a == null) {
          t6(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (s.weightsManifest == null) {
          t6(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));
          return;
        }
        if (this.weightsFiles.length === 0) {
          e({ modelTopology: a });
          return;
        }
        let p = Dp(s, (u) => this.loadWeights(u));
        e(p);
      }, o.onerror = (n) => t6(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`), o.readAsText(this.jsonFile);
    });
  }
  loadWeights(e) {
    let t6 = [], o = [];
    for (let a of e)
      t6.push(...a.weights), o.push(...a.paths);
    let n = this.checkManifestAndWeightFiles(e), s = o.map((a) => this.loadWeightsFile(a, n[a]));
    return Promise.all(s).then((a) => [t6, Fp(a)]);
  }
  loadWeightsFile(e, t6) {
    return new Promise((o, n) => {
      let s = new FileReader();
      s.onload = (a) => {
        let i = a.target.result;
        o(i);
      }, s.onerror = (a) => n(`Failed to weights data from file of path '${e}'.`), s.readAsArrayBuffer(t6);
    });
  }
  checkManifestAndWeightFiles(e) {
    let t6 = [], o = this.weightsFiles.map((s) => Vb(s.name)), n = {};
    for (let s of e)
      s.paths.forEach((a) => {
        let i = Vb(a);
        if (t6.indexOf(i) !== -1)
          throw new Error(`Duplicate file basename found in weights manifest: '${i}'`);
        if (t6.push(i), o.indexOf(i) === -1)
          throw new Error(`Weight file with basename '${i}' is not provided.`);
        n[a] = this.weightsFiles[o.indexOf(i)];
      });
    if (t6.length !== this.weightsFiles.length)
      throw new Error(`Mismatch in the number of files in weights manifest (${t6.length}) and the number of weight files provided (${this.weightsFiles.length}).`);
    return n;
  }
};
var Dz = (r) => O().getBool("IS_BROWSER") && !Array.isArray(r) && r.startsWith(_a.URL_SCHEME) ? Oz(r.slice(_a.URL_SCHEME.length)) : null;
lt.registerSaveRouter(Dz);
function Oz(r = "model") {
  return new _a(r);
}
function V0(r) {
  return new jb(r);
}
function Xb(r, e, t6, o) {
  a(r), t6 = t6 == null ? 0 : t6, o = o == null ? 1 : o, i(t6, o);
  let n = 0, s = (p) => (p.then((u) => {
    let c = t6 + ++n / r.length * (o - t6);
    return e(c), u;
  }), p);
  function a(p) {
    E(p != null && Array.isArray(p) && p.length > 0, () => "promises must be a none empty array");
  }
  function i(p, u) {
    E(p >= 0 && p <= 1, () => `Progress fraction must be in range [0, 1], but got startFraction ${p}`), E(u >= 0 && u <= 1, () => `Progress fraction must be in range [0, 1], but got endFraction ${u}`), E(u >= p, () => `startFraction must be no more than endFraction, but got startFraction ${p} and endFraction ${u}`);
  }
  return Promise.all(r.map(s));
}
async function Yb(r, e) {
  e == null && (e = {});
  let t6 = e.fetchFunc == null ? O().platform.fetch : e.fetchFunc, o = r.map((l) => t6(l, e.requestInit, { isBinary: true })), n = 0, s = 0.5, i = (e.onProgress == null ? await Promise.all(o) : await Xb(o, e.onProgress, n, s)).map((l) => l.arrayBuffer()), p = 0.5, u = 1;
  return e.onProgress == null ? await Promise.all(i) : await Xb(i, e.onProgress, p, u);
}
async function z0(r, e = "", t6, o) {
  return Qb((a) => Yb(a, { requestInit: o }))(r, e, t6);
}
function Qb(r) {
  return async (e, t6 = "", o) => {
    let n = e.map(() => false), s = {}, a = o != null ? o.map(() => false) : [], i = [];
    if (e.forEach((d, f) => {
      let h = 0;
      d.weights.forEach((g) => {
        let x = "quantization" in g ? g.quantization.dtype : g.dtype, b = Zc[x] * ze(g.shape), C = () => {
          n[f] = true, s[f] == null && (s[f] = []), s[f].push({ manifestEntry: g, groupOffset: h, sizeBytes: b });
        };
        o != null ? o.forEach((w, k) => {
          w === g.name && (C(), a[k] = true);
        }) : C(), i.push(g.name), h += b;
      });
    }), !a.every((d) => d)) {
      let d = o.filter((f, h) => !a[h]);
      throw new Error(`Could not find weights in manifest with names: ${d.join(", ")}. 
Manifest JSON has weights with names: ${i.join(", ")}.`);
    }
    let p = n.reduce((d, f, h) => (f && d.push(h), d), []), u = [];
    p.forEach((d) => {
      e[d].paths.forEach((f) => {
        let h = t6 + (t6.endsWith("/") ? "" : "/") + f;
        u.push(h);
      });
    });
    let c = await r(u), l = {}, m = 0;
    return p.forEach((d) => {
      let f = e[d].paths.length, h = 0;
      for (let w = 0; w < f; w++)
        h += c[m + w].byteLength;
      let g = new ArrayBuffer(h), x = new Uint8Array(g), b = 0;
      for (let w = 0; w < f; w++) {
        let k = new Uint8Array(c[m + w]);
        x.set(k, b), b += k.byteLength;
      }
      s[d].forEach((w) => {
        let k = g.slice(w.groupOffset, w.groupOffset + w.sizeBytes), _ = Lm(k, [w.manifestEntry]);
        for (let $ in _)
          l[$] = _[$];
      }), m += f;
    }), l;
  };
}
var Pz = "application/octet-stream";
var Mz = "application/json";
var Jc = class {
  constructor(e, t6) {
    if (this.DEFAULT_METHOD = "POST", t6 == null && (t6 = {}), this.weightPathPrefix = t6.weightPathPrefix, this.onProgress = t6.onProgress, this.weightUrlConverter = t6.weightUrlConverter, t6.fetchFunc != null ? (E(typeof t6.fetchFunc == "function", () => "Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"), this.fetch = t6.fetchFunc) : this.fetch = O().platform.fetch, E(e != null && e.length > 0, () => "URL path for http must not be null, undefined or empty."), Array.isArray(e) && E(e.length === 2, () => `URL paths for http must have a length of 2, (actual length is ${e.length}).`), this.path = e, t6.requestInit != null && t6.requestInit.body != null)
      throw new Error("requestInit is expected to have no pre-existing body, but has one.");
    this.requestInit = t6.requestInit || {};
  }
  async save(e) {
    if (e.modelTopology instanceof ArrayBuffer)
      throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");
    let t6 = Object.assign({ method: this.DEFAULT_METHOD }, this.requestInit);
    t6.body = new FormData();
    let o = [{ paths: ["./model.weights.bin"], weights: e.weightSpecs }], n = Bm(e, o);
    t6.body.append("model.json", new Blob([JSON.stringify(n)], { type: Mz }), "model.json"), e.weightData != null && t6.body.append("model.weights.bin", new Blob([e.weightData], { type: Pz }), "model.weights.bin");
    let s = await this.fetch(this.path, t6);
    if (s.ok)
      return { modelArtifactsInfo: Ps(e), responses: [s] };
    throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${s.status}.`);
  }
  async load() {
    let e = await this.fetch(this.path, this.requestInit);
    if (!e.ok)
      throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);
    let t6;
    try {
      t6 = await e.json();
    } catch (s) {
      let a = `Failed to parse model JSON of response from ${this.path}.`;
      throw this.path.endsWith(".pb") ? a += " Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository." : a += " Please make sure the server is serving valid JSON for this request.", new Error(a);
    }
    let o = t6.modelTopology, n = t6.weightsManifest;
    if (o == null && n == null)
      throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);
    return Dp(t6, (s) => this.loadWeights(s));
  }
  async loadWeights(e) {
    let t6 = Array.isArray(this.path) ? this.path[1] : this.path, [o, n] = Lz(t6), s = this.weightPathPrefix || o, a = Vm(e), i = [], p = [];
    for (let c of e)
      for (let l of c.paths)
        this.weightUrlConverter != null ? p.push(this.weightUrlConverter(l)) : i.push(s + l + n);
    this.weightUrlConverter && i.push(...await Promise.all(p));
    let u = await Yb(i, { requestInit: this.requestInit, fetchFunc: this.fetch, onProgress: this.onProgress });
    return [a, Fp(u)];
  }
};
Jc.URL_SCHEME_REGEX = /^https?:\/\//;
function Lz(r) {
  let e = r.lastIndexOf("/"), t6 = r.lastIndexOf("?"), o = r.substring(0, e), n = t6 > e ? r.substring(t6) : "";
  return [o + "/", n];
}
function Hm(r) {
  return r.match(Jc.URL_SCHEME_REGEX) != null;
}
var W0 = (r, e) => {
  if (typeof fetch == "undefined" && (e == null || e.fetchFunc == null))
    return null;
  {
    let t6 = true;
    if (Array.isArray(r) ? t6 = r.every((o) => Hm(o)) : t6 = Hm(r), t6)
      return qm(r, e);
  }
  return null;
};
lt.registerSaveRouter(W0);
lt.registerLoadRouter(W0);
function qm(r, e) {
  return new Jc(r, e);
}
function U0(r, e) {
  return qm(r, e);
}
var el = class {
  constructor(e) {
    this.modelArtifacts = e;
  }
  load() {
    return this.modelArtifacts;
  }
};
var Km = class {
  constructor(e) {
    this.saveHandler = e;
  }
  save(e) {
    return this.saveHandler(e);
  }
};
var Zb = class {
  constructor(e) {
    e.load && (this.load = () => Promise.resolve(e.load())), e.save && (this.save = (t6) => Promise.resolve(e.save(t6)));
  }
};
function G0(r, e, t6, o) {
  let n = arguments;
  return new Zb(Jb(...n));
}
function Jb(r, e, t6, o) {
  return arguments.length === 1 ? r.modelTopology != null || r.weightSpecs != null ? new el(r) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new el({ modelTopology: r })) : (console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."), new el({ modelTopology: r, weightSpecs: e, weightData: t6, trainingConfig: o }));
}
function H0(r) {
  return new Km(r);
}
function q0(r) {
  return new Km(r);
}
var j0 = {};
Ue(j0, { confusionMatrix: () => K0 });
function Bz(r, e, t6 = false, o = false) {
  let n = v(r, "a", "matMul"), s = v(e, "b", "matMul");
  [n, s] = Re(n, s);
  let a = { a: n, b: s }, i = { transposeA: t6, transposeB: o };
  return T.runKernel(Wo, a, i);
}
var Xe = N({ matMul_: Bz });
function Vz(r, e, t6 = 1, o = 0, n = "int32") {
  if (e < 2)
    throw new Error(`Error in oneHot: depth must be >=2, but it is ${e}`);
  let a = { indices: v(r, "indices", "oneHot", "int32") }, i = { dtype: n, depth: e, onValue: t6, offValue: o };
  return T.runKernel(En, a, i);
}
var tl = N({ oneHot_: Vz });
function wie() {
  O().set("PROD", true);
}
function Iie() {
  O().set("DEBUG", true);
}
function vie() {
  O().set("DEPRECATION_WARNINGS_ENABLED", false), console.warn("TensorFlow.js deprecation warnings have been disabled.");
}
function eC(r) {
  O().getBool("DEPRECATION_WARNINGS_ENABLED") && console.warn(r + " You can disable deprecation warnings with tf.disableDeprecationWarnings().");
}
d0(eC);
function kie() {
  T.disposeVariables();
}
function cr() {
  return T;
}
function Nie() {
  return T.memory();
}
function Tie(r) {
  return T.profile(r);
}
function Ee(r, e) {
  return T.tidy(r, e);
}
function Dt(r) {
  Qc(r).forEach((t6) => t6.dispose());
}
function _r(r) {
  return T.keep(r);
}
function _ie(r) {
  return T.time(r);
}
function Eie(r) {
  return T.setBackend(r);
}
function $ie() {
  return T.ready();
}
function Aie() {
  return T.backendName;
}
function Rie(r) {
  T.removeBackend(r);
}
function Fie(r) {
  return T.findBackend(r);
}
function Die(r) {
  return T.findBackendFactory(r);
}
function Ci(r, e, t6 = 1) {
  return T.registerBackend(r, e, t6);
}
function Oie() {
  return T.backend;
}
function Pie(r, e) {
  O().setPlatform(r, e);
}
function zz(r) {
  let t6 = { input: v(r, "input", "imag") };
  return T.runKernel(si, t6);
}
var Si = N({ imag_: zz });
function Wz(r) {
  let t6 = { x: v(r, "x", "neg") };
  return T.runKernel(ws, t6);
}
var yr = N({ neg_: Wz });
function Uz(r) {
  let t6 = { input: v(r, "input", "real") };
  return T.runKernel(ai, t6);
}
var $a = N({ real_: Uz });
function Gz(r, e, t6) {
  let o = v(r, "x", "transpose");
  if (e == null && (e = o.shape.map((a, i) => i).reverse()), E(o.rank === e.length, () => `Error in transpose: rank of input ${o.rank} must match length of perm ${e}.`), e.forEach((a) => {
    E(a >= 0 && a < o.rank, () => `All entries in 'perm' must be between 0 and ${o.rank - 1} but got ${e}`);
  }), o.rank <= 1)
    return o.clone();
  let n = { x: o }, s = { perm: e };
  return o.dtype === "complex64" ? Ee(() => {
    let a = $a(o), i = Si(o);
    return a = T.runKernel(ro, { x: a }, s), i = T.runKernel(ro, { x: i }, s), t6 && (i = yr(i)), Tr(a, i);
  }) : T.runKernel(ro, n, s);
}
var Mp = N({ transpose_: Gz });
function Hz(r, e, t6) {
  let o = v(r, "labels", "confusionMatrix"), n = v(e, "predictions", "confusionMatrix");
  E(t6 == null || t6 > 0 && Number.isInteger(t6), () => `If provided, numClasses must be a positive integer, but got ${t6}`), E(o.rank === 1, () => `Expected the rank of labels to be 1, but got ${o.rank}`), E(n.rank === 1, () => `Expected the rank of predictions to be 1, but got ${n.rank}`), E(o.shape[0] === n.shape[0], () => `Mismatch in the number of examples: ${o.shape[0]} vs. ${n.shape[0]}. Labels and predictions should have the same number of elements.`), E(t6 > 0 && Number.isInteger(t6), () => `numClasses is required to be a positive integer, but got ${t6}`);
  let s = tl(Ke(o, "int32"), t6), a = tl(Ke(n, "int32"), t6), i = Mp(s), p = Xe(i, a);
  return Ke(p, "int32");
}
var K0 = N({ confusionMatrix_: Hz });
var br = {};
Ue(br, { assertAndGetBroadcastShape: () => Je, getBroadcastDims: () => X0, getReductionAxes: () => jm });
function X0(r, e) {
  let t6 = r.length, o = [];
  for (let n = 0; n < t6; n++) {
    let s = t6 - 1 - n, a = r[s] || 1;
    (e[e.length - 1 - n] || 1) > 1 && a === 1 && o.unshift(s);
  }
  return o;
}
function jm(r, e) {
  let t6 = [];
  for (let o = 0; o < e.length; o++) {
    let n = r[r.length - o - 1], s = e.length - o - 1, a = e[s];
    (n == null || n === 1 && a > 1) && t6.unshift(s);
  }
  return t6;
}
function Je(r, e) {
  let t6 = [], o = Math.max(r.length, e.length);
  for (let n = 0; n < o; n++) {
    let s = r[r.length - n - 1];
    s == null && (s = 1);
    let a = e[e.length - n - 1];
    if (a == null && (a = 1), s === 1)
      t6.unshift(a);
    else if (a === 1)
      t6.unshift(s);
    else if (s !== a) {
      let i = `Operands could not be broadcast together with shapes ${r} and ${e}.`;
      throw Error(i);
    } else
      t6.unshift(s);
  }
  return t6;
}
var Q0 = {};
Ue(Q0, { fromPixels: () => Zz, fromPixelsAsync: () => Yz, toPixels: () => Qz });
function Xm(r, e, t6) {
  if (Jr(r), e != null && e.length !== 3)
    throw new Error("tensor3d() requires shape to have three numbers");
  let o = or(r, t6);
  if (o.length !== 3 && o.length !== 1)
    throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");
  if (o.length === 1 && e == null)
    throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");
  return xr(r, e, o, t6);
}
var su;
function Y0(r, e = 3) {
  if (e > 4)
    throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");
  if (r == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let t6 = false, o = false, n = false, s = false, a = false, i = false;
  if (r.data instanceof Uint8Array)
    t6 = true;
  else if (typeof ImageData != "undefined" && r instanceof ImageData)
    o = true;
  else if (typeof HTMLVideoElement != "undefined" && r instanceof HTMLVideoElement)
    n = true;
  else if (typeof HTMLImageElement != "undefined" && r instanceof HTMLImageElement)
    s = true;
  else if (r.getContext != null)
    a = true;
  else if (typeof ImageBitmap != "undefined" && r instanceof ImageBitmap)
    i = true;
  else
    throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${r.constructor.name}`);
  if (qc(Zi, T.backendName) != null) {
    let f = { pixels: r }, h = { numChannels: e };
    return T.runKernel(Zi, f, h);
  }
  let [u, c] = n ? [r.videoWidth, r.videoHeight] : [r.width, r.height], l;
  if (a)
    l = r.getContext("2d").getImageData(0, 0, u, c).data;
  else if (o || t6)
    l = r.data;
  else if (s || n || i) {
    if (su == null)
      if (typeof document == "undefined")
        if (typeof OffscreenCanvas != "undefined" && typeof OffscreenCanvasRenderingContext2D != "undefined")
          su = new OffscreenCanvas(1, 1).getContext("2d");
        else
          throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");
      else
        su = document.createElement("canvas").getContext("2d", { willReadFrequently: true });
    su.canvas.width = u, su.canvas.height = c, su.drawImage(r, 0, 0, u, c), l = su.getImageData(0, 0, u, c).data;
  }
  let m;
  if (e === 4)
    m = new Int32Array(l);
  else {
    let f = u * c;
    m = new Int32Array(f * e);
    for (let h = 0; h < f; h++)
      for (let g = 0; g < e; ++g)
        m[h * e + g] = l[h * 4 + g];
  }
  return Xm(m, [c, u, e], "int32");
}
function qz(r) {
  return r != null && r.data instanceof Uint8Array;
}
function Kz() {
  return typeof window != "undefined" && typeof ImageBitmap != "undefined" && window.hasOwnProperty("createImageBitmap");
}
function jz(r) {
  return r != null && r.width !== 0 && r.height !== 0;
}
function Xz(r) {
  return Kz() && !(r instanceof ImageBitmap) && jz(r) && !qz(r);
}
async function Yz(r, e = 3) {
  let t6 = null;
  if (O().getBool("WRAP_TO_IMAGEBITMAP") && Xz(r)) {
    let o;
    try {
      o = await createImageBitmap(r, { premultiplyAlpha: "none" });
    } catch (n) {
      o = null;
    }
    o != null && o.width === r.width && o.height === r.height ? t6 = o : t6 = r;
  } else
    t6 = r;
  return Y0(t6, e);
}
async function Qz(r, e) {
  let t6 = v(r, "img", "toPixels");
  if (!(r instanceof it)) {
    let u = t6;
    t6 = Ke(u, "int32"), u.dispose();
  }
  if (t6.rank !== 2 && t6.rank !== 3)
    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${t6.rank}.`);
  let [o, n] = t6.shape.slice(0, 2), s = t6.rank === 2 ? 1 : t6.shape[2];
  if (s > 4 || s === 2)
    throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);
  if (t6.dtype !== "float32" && t6.dtype !== "int32")
    throw new Error(`Unsupported type for toPixels: ${t6.dtype}. Please use float32 or int32 tensors.`);
  let a = await t6.data(), i = t6.dtype === "float32" ? 255 : 1, p = new Uint8ClampedArray(n * o * 4);
  for (let u = 0; u < o * n; ++u) {
    let c = [0, 0, 0, 255];
    for (let m = 0; m < s; m++) {
      let d = a[u * s + m];
      if (t6.dtype === "float32") {
        if (d < 0 || d > 1)
          throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${d}.`);
      } else if (t6.dtype === "int32" && (d < 0 || d > 255))
        throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${d}.`);
      s === 1 ? (c[0] = d * i, c[1] = d * i, c[2] = d * i) : c[m] = d * i;
    }
    let l = u * 4;
    p[l + 0] = Math.round(c[0]), p[l + 1] = Math.round(c[1]), p[l + 2] = Math.round(c[2]), p[l + 3] = Math.round(c[3]);
  }
  if (e != null) {
    e.width = n, e.height = o;
    let u = e.getContext("2d"), c = new ImageData(p, n, o);
    u.putImageData(c, 0, 0);
  }
  return t6 !== r && t6.dispose(), p;
}
var Zz = N({ fromPixels_: Y0 });
var Ym = {};
Ue(Ym, { prepareAndValidate: () => Z0 });
function Z0(r, e) {
  let t6 = r.shape.length, o = e.shape.length;
  if (t6 < 1)
    throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${t6}.`);
  if (o < 1)
    throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${o}.`);
  if (e.dtype !== "int32")
    throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);
  if (e.shape[o - 1] > t6)
    throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${e.shape[o - 1]} vs. ${t6}`);
  if (ze(r.shape) === 0)
    throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${r.shape}.`);
  let n = e.shape, s = n[n.length - 1], a = 1;
  for (let l = 0; l < n.length - 1; ++l)
    a *= n[l];
  let i = r.shape, p = n.slice();
  p.pop();
  let u = 1;
  for (let l = s; l < t6; ++l)
    u *= i[l], p.push(i[l]);
  let c = [...hs(r.shape).map((l) => l / u), 1].slice(0, s);
  return [p, a, u, c];
}
var rl = {};
Ue(rl, { calculateShapes: () => J0, validateInput: () => Qm, validateUpdateShape: () => tC });
function tC(r, e, t6) {
  let o = e.rank > 1 ? e.shape[e.rank - 1] : 1, n = e.rank > 1 ? e.rank - 1 : 1, s = `Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${t6.shape}, indices.shape: ${e.shape}, shape: ${r}, sliceDim: ${o}, and batchDim: ${n}.`;
  if (t6.rank < n)
    throw new Error(s + ` update.rank < ${n}. `);
  if (r.length < o + (t6.rank - n))
    throw new Error(s + ` Output shape length < ${o + (t6.rank - n)}`);
  if (t6.rank !== n + r.length - o)
    throw new Error(s + ` update.rank != ${n + r.length - o}`);
  for (let a = 0; a < n; ++a)
    if (t6.shape[a] !== e.shape[a])
      throw new Error(s + ` updates.shape[${a}] (${t6.shape[a]}) != indices.shape[${a}] (${e.shape[a]}).`);
  for (let a = 0; a < t6.rank - n; ++a)
    if (t6.shape[a + n] !== r[a + o])
      throw new Error(s + ` updates.shape[${a + n}] (${t6.shape[a + n]}) != shape[${a + n}] (${r[a + n]})`);
}
function Qm(r, e, t6) {
  if (e.rank < 1)
    throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${e.rank}.`);
  if (r.rank < 1)
    throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${r.rank}.`);
  if (e.dtype !== "int32")
    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${e.dtype}`);
  if (t6.length < 1)
    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${t6}`);
  if (t6.length === 0) {
    if (e.size === 0)
      throw new Error(`Indices specified for empty output. indices shape: ${e.shape}`);
    if (r.size === 0)
      throw new Error(`Updates specified for empty output. updates shape: ${r.shape}`);
  }
  tC(t6, e, r);
}
function J0(r, e, t6) {
  let o = e.shape.length, n = o > 1 ? e.shape[o - 1] : 1, s = t6.length, a = 1;
  for (let l = n; l < s; ++l)
    a *= t6[l];
  let i = n < 1 ? 1 : n, p = ze(e.shape) / i, u = [...hs(t6.slice(0, n)), 1], c = ze(t6);
  return { sliceRank: n, numUpdates: p, sliceSize: a, strides: u, outputSize: c };
}
var ut = {};
Ue(ut, { assertParamsValid: () => eW, computeFlatOffset: () => sW, computeOutShape: () => rW, getNormalizedAxes: () => oW, isSliceContinous: () => nW, maskToAxes: () => tW, parseSliceParams: () => aW, sliceInfo: () => iW, startForAxis: () => iv, startIndicesWithElidedDims: () => nv, stopForAxis: () => uv, stopIndicesWithElidedDims: () => sv, stridesForAxis: () => av, stridesWithElidedDims: () => tv });
var rC = -2;
var Jz = -1;
function eW(r, e, t6) {
  let o = r.shape.length;
  E(o === e.length, () => `Error in slice${o}D: Length of begin ${e} must match the rank of the array (${o}).`), E(o === t6.length, () => `Error in slice${o}D: Length of size ${t6} must match the rank of the array (${o}).`);
  for (let n = 0; n < o; ++n)
    E(e[n] + t6[n] <= r.shape[n], () => `Error in slice${o}D: begin[${n}] + size[${n}] (${e[n] + t6[n]}) would overflow input.shape[${n}] (${r.shape[n]})`);
}
function tW(r) {
  let e = [], t6 = 0;
  for (; r > 0; )
    r & 1 && e.push(t6), r /= 2, t6++;
  return e;
}
function rW(r, e, t6) {
  let o = [];
  for (let n = 0; n < r.length; n++)
    o[n] = Math.ceil((e[n] - r[n]) / t6[n]);
  return o;
}
function tv(r, e, t6, o) {
  let n = [...r];
  for (let s = n.length; s < o.length; s++)
    n.push(1);
  for (let s = 0; s < t6; s++)
    s === 0 ? n[e] = 1 : (n.splice(e, 0, 1), n.pop());
  return n;
}
function rv(r, e, t6) {
  return t6 <= r ? t6 : t6 - (e - 1);
}
function ov(r, e) {
  let t6 = [];
  for (let o = 0; o < r; o++)
    t6.push(e + o);
  return t6;
}
function oW(r, e, t6, o, n, s, a, i, p) {
  let u = r.length, c = new Array(u), l = new Array(u), m = new Array(u);
  if (e.length && t6 > 0) {
    let d = e[0], f = t6 + 1;
    c = nv(a, d, f, o, r), l = sv(i, d, f, n, r), m = tv(s, d, f, r);
  } else
    for (let d = 0; d < u; d++)
      c[d] = iv(a, o, s, r, d, p), l[d] = uv(i, n, s, r, d, p), m[d] = av(s, d, p);
  return { begin: c, end: l, strides: m };
}
function nv(r, e, t6, o, n) {
  let s = [...n], a = ov(t6, e);
  for (let i = 0; i < s.length; i++)
    if (a.indexOf(i) > -1)
      s[i] = 0;
    else {
      let p = rv(e, t6, i), u = o[p];
      r & 1 << p && (u = 0), s[i] = u;
    }
  return s;
}
function sv(r, e, t6, o, n) {
  let s = [...n], a = ov(t6, e);
  for (let i = 0; i < s.length; i++)
    if (a.indexOf(i) > -1)
      s[i] = Number.MAX_SAFE_INTEGER;
    else {
      let p = rv(e, t6, i), u = o[p];
      r & 1 << p && (u = Number.MAX_SAFE_INTEGER), s[i] = u;
    }
  for (let i = 0; i < s.length; i++) {
    let p = n[i];
    s[i] < 0 && (s[i] += p), s[i] = op(0, s[i], n[i]);
  }
  return s;
}
function av(r, e, t6) {
  let o = r[e];
  return (t6 & 1 << e || o == null) && (o = 1), o;
}
function iv(r, e, t6, o, n, s) {
  let a = e[n], i = t6[n] || 1;
  (r & 1 << n || s & 1 << n || a == null) && (i > 0 ? a = Number.MIN_SAFE_INTEGER : a = Number.MAX_SAFE_INTEGER);
  let p = o[n];
  return a < 0 && (a += p), a = op(0, a, p - 1), a;
}
function uv(r, e, t6, o, n, s) {
  let a = e[n], i = t6[n] || 1;
  (r & 1 << n || s & 1 << n || a == null) && (i > 0 ? a = Number.MAX_SAFE_INTEGER : a = Number.MIN_SAFE_INTEGER);
  let p = o[n];
  return a < 0 && (a += p), i > 0 ? a = op(0, a, p) : a = op(-1, a, p - 1), a;
}
function nW(r, e, t6) {
  let o = t6.length;
  for (let n = 0; n < t6.length; n++)
    if (t6[n] > 1) {
      o = n;
      break;
    }
  for (let n = o + 1; n < t6.length; n++)
    if (e[n] > 0 || t6[n] !== r[n])
      return false;
  return true;
}
function sW(r, e) {
  let t6 = r.length > 0 ? r[r.length - 1] : 1;
  for (let o = 0; o < r.length - 1; o++)
    t6 += r[o] * e[o];
  return t6;
}
function aW(r, e, t6) {
  let o, n = r.shape.length;
  typeof e == "number" ? o = [e, ...new Array(n - 1).fill(0)] : e.length < n ? o = e.concat(new Array(n - e.length).fill(0)) : o = e.slice(), o.forEach((a) => {
    E(a !== -1, () => "slice() does not support negative begin indexing.");
  });
  let s;
  return t6 == null ? s = new Array(n).fill(-1) : typeof t6 == "number" ? s = [t6, ...new Array(n - 1).fill(-1)] : t6.length < n ? s = t6.concat(new Array(n - t6.length).fill(-1)) : s = t6, s = s.map((a, i) => a >= 0 ? a : (E(a === -1, () => `Negative size values should be exactly -1 but got ${a} for the slice() size at index ${i}.`), r.shape[i] - o[i])), [o, s];
}
function iW(r, e, t6, o, n, s, a, i, p) {
  let u;
  if (o == null ? (u = new Array(e.length), u.fill(1)) : u = o, a != null && (a & a - 1) !== 0)
    throw new Error("Multiple ellipses in slice is not allowed.");
  let c = false, l = { dims: u.length, numAddAxisAfterEllipsis: 0, begin: e.slice(), end: t6.slice(), strides: u.slice(), beginMask: n, endMask: s, ellipsisMask: a, newAxisMask: i, shrinkAxisMask: p };
  for (let C = 0; C < l.dims; C++)
    c && (1 << C & i) !== 0 && l.numAddAxisAfterEllipsis++, 1 << C & a && (c = true);
  c || (l.ellipsisMask |= 1 << l.dims, l.dims++);
  let m = { dims: r.length, beginMask: 0, endMask: 0, beginValid: false, endValid: false };
  uW(l, m);
  let d = true, f = true, h = true, g = [], x = [];
  for (let C = 0; C < r.length; ++C) {
    if (m.strides[C] === 0)
      throw Error(`strides[${C}] must be non-zero`);
    let w = !!(m.shrinkAxisMask & 1 << C), k = r[C];
    if (k === -1) {
      g.push(w ? 1 : -1);
      continue;
    }
    let _ = [m.beginMask & 1 << C, m.endMask & 1 << C], $ = [m.strides[C] > 0 ? 0 : -1, m.strides[C] > 0 ? k : k - 1];
    if (w && m.strides[C] <= 0)
      throw Error("only stride 1 allowed on non-range indexing.");
    h = h && m.strides[C] === 1;
    let A = !!(m.beginMask & 1 << C && m.endMask & 1 << C);
    if (m.beginValid && m.endValid) {
      if (w) {
        let M = m.begin[C] < 0 ? k + m.begin[C] : m.begin[C];
        if (m.begin[C] = M, m.end[C] = m.begin[C] + 1, M < 0 || M >= k)
          throw Error(`slice index ${m.begin[C]} of dimension ${C} out of bounds.`);
      } else
        m.begin[C] = ev(m.begin[C], 0, m.strides[C], k, _, $), m.end[C] = ev(m.end[C], 1, m.strides[C], k, _, $);
      let P = m.strides[C] === 1 && m.begin[C] === 0 && m.end[C] === k;
      d = d && P, f = f && (C === 0 && m.strides[C] === 1 || P);
    } else
      d = d && m.strides[C] === 1 && A, f = f && (C === 0 && m.strides[C] === 1 || A);
    let R, D = false;
    if (m.beginValid && m.endValid ? (R = m.end[C] - m.begin[C], D = true) : w ? (R = 1, D = true) : A && k >= 0 && (m.strides[C] < 0 ? R = -k : R = k, D = true), D) {
      let P;
      R === 0 || R < 0 != m.strides[C] < 0 ? P = 0 : P = Math.trunc(R / m.strides[C]) + (R % m.strides[C] !== 0 ? 1 : 0), g.push(P);
    } else
      g.push(-1);
  }
  for (let C = 0; C < m.finalShapeGatherIndices.length; ++C) {
    let w = m.finalShapeGatherIndices[C];
    w >= 0 ? x.push(g[w]) : w === rC && x.push(1);
  }
  return { finalShapeSparse: x.filter((C, w) => m.finalShapeGatherIndices[w] !== rC), finalShape: x, isIdentity: d, sliceDim0: f, isSimpleSlice: h, begin: m.begin, end: m.end, strides: m.strides };
}
function uW(r, e) {
  e.beginMask = 0, e.endMask = 0, e.shrinkAxisMask = 0;
  let t6 = 0;
  e.beginValid = r.begin != null, e.endValid = r.end != null, e.begin = new Array(e.dims), e.end = new Array(e.dims), e.strides = new Array(e.dims), e.finalShapeGatherIndices = [], e.finalShapeGatherIndicesSparse = [], e.inputShapeGatherIndicesSparse = new Array(e.dims);
  for (let o = 0; o < r.dims; o++)
    if (1 << o & r.ellipsisMask) {
      let n = Math.min(e.dims - (r.dims - o) + 1 + r.numAddAxisAfterEllipsis, e.dims);
      for (; t6 < n; t6++)
        e.begin[t6] = 0, e.end[t6] = 0, e.strides[t6] = 1, e.beginMask |= 1 << t6, e.endMask |= 1 << t6, e.finalShapeGatherIndices.push(t6), e.finalShapeGatherIndicesSparse.push(-1), e.inputShapeGatherIndicesSparse[t6] = o;
    } else if (1 << o & r.newAxisMask)
      e.finalShapeGatherIndices.push(rC), e.finalShapeGatherIndicesSparse.push(-1);
    else {
      if (t6 === e.begin.length)
        throw Error(`Index out of range using input dim ${t6}; input has only ${e.dims} dims, ${e.begin.length}.`);
      r.begin != null && (e.begin[t6] = r.begin[o]), r.end != null && (e.end[t6] = r.end[o]), e.strides[t6] = r.strides[o], r.beginMask & 1 << o && (e.beginMask |= 1 << t6), r.endMask & 1 << o && (e.endMask |= 1 << t6), r.shrinkAxisMask & 1 << o ? (e.finalShapeGatherIndices.push(Jz), e.finalShapeGatherIndicesSparse.push(-1), e.shrinkAxisMask |= 1 << t6) : (e.finalShapeGatherIndices.push(t6), e.finalShapeGatherIndicesSparse.push(o)), e.inputShapeGatherIndicesSparse[t6] = o, t6++;
    }
}
function ev(r, e, t6, o, n, s) {
  if (n[e])
    return t6 > 0 ? s[e] : s[e + 1 & 1];
  {
    let a = r < 0 ? o + r : r;
    return a < s[0] ? s[0] : a > s[1] ? s[1] : a;
  }
}
var pv = {};
Ue(pv, { Serializable: () => ol, SerializationMap: () => Bs, registerClass: () => Er });
var ol = class {
  getClassName() {
    return this.constructor.className;
  }
  static fromConfig(e, t6) {
    return new e(t6);
  }
};
var Bs = class {
  constructor() {
    this.classNameMap = {};
  }
  static getMap() {
    return Bs.instance == null && (Bs.instance = new Bs()), Bs.instance;
  }
  static register(e) {
    Bs.getMap().classNameMap[e.className] = [e, e.fromConfig];
  }
};
function Er(r) {
  E(r.className != null, () => "Class being registered does not have the static className property defined."), E(typeof r.className == "string", () => "className is required to be a string, but got type " + typeof r.className), E(r.className.length > 0, () => "Class being registered has an empty-string as its className, which is disallowed."), Bs.register(r);
}
var dv = {};
Ue(dv, { TEST_EPSILON_FLOAT16: () => cv, createVideoElement: () => hW, encodeStrings: () => mv, expectArrayBuffersEqual: () => fW, expectArraysClose: () => cW, expectArraysEqual: () => mW, expectNumbersClose: () => lv, expectPromiseToFail: () => lW, expectValuesInRange: () => dW, play: () => gW, testEpsilon: () => Zm });
var pW = 1e-3;
var cv = 0.1;
function cW(r, e, t6) {
  return t6 == null && (t6 = Zm()), oC(r, e, (o, n) => nC(o, n, t6));
}
function Zm() {
  return T.backend.floatPrecision() === 32 ? pW : cv;
}
function oC(r, e, t6) {
  let o = true;
  if ((Wt(r) || Wt(e)) && (o = false), Wt(r) && Wt(e) && (o = true), o) {
    let a = r.constructor.name, i = e.constructor.name;
    if (a !== i)
      throw new Error(`Arrays are of different type. Actual: ${a}. Expected: ${i}`);
  }
  if (Array.isArray(r) && Array.isArray(e)) {
    let a = or(r), i = or(e);
    if (!Pr(a, i))
      throw new Error(`Arrays have different shapes. Actual: [${a}]. Expected: [${i}]`);
  }
  let n = Wt(r) ? r : Oo(r), s = Wt(e) ? e : Oo(e);
  if (n.length !== s.length)
    throw new Error(`Arrays have different lengths actual: ${n.length} vs expected: ${s.length}.
Actual:   ${n}.
Expected: ${s}.`);
  for (let a = 0; a < s.length; ++a) {
    let i = n[a], p = s[a];
    if (!t6(i, p))
      throw new Error(`Arrays differ: actual[${a}] = ${i}, expected[${a}] = ${p}.
Actual:   ${n}.
Expected: ${s}.`);
  }
  typeof expect != "undefined" && expect().nothing();
}
function lW(r, e) {
  r().then(() => e.fail(), () => e()), typeof expect != "undefined" && expect().nothing();
}
function mW(r, e) {
  let t6 = typeof e == "string" || typeof e == "number" || typeof e == "boolean" ? [e] : e;
  return Po(r) || Po(r[0]) || Po(e) || Po(e[0]) ? oC(r, t6, (o, n) => o == n) : oC(r, e, (o, n) => nC(o, n, 0));
}
function lv(r, e, t6) {
  if (t6 == null && (t6 = Zm()), !nC(r, e, t6))
    throw new Error(`Numbers differ: actual === ${r}, expected === ${e}`);
  typeof expect != "undefined" && expect().nothing();
}
function nC(r, e, t6) {
  return !isFinite(r) && !isFinite(e) ? true : !(isNaN(r) || isNaN(e) || Math.abs(r - e) > t6);
}
function dW(r, e, t6) {
  for (let o = 0; o < r.length; o++)
    if (r[o] < e || r[o] > t6)
      throw new Error(`Value out of range:${r[o]} low: ${e}, high: ${t6}`);
}
function fW(r, e) {
  let t6 = new Float32Array(r), o = new Float32Array(e);
  if (t6.length !== o.length)
    throw new Error(`Expected ArrayBuffer to be of length ${o.length}, but it was ${t6.length}`);
  for (let n = 0; n < o.length; n++)
    if (t6[n] !== o[n])
      throw new Error(`Expected ArrayBuffer value at ${n} to be ${o[n]} but got ${t6[n]} instead`);
}
function mv(r) {
  for (let e = 0; e < r.length; e++) {
    let t6 = r[e];
    Array.isArray(t6) ? mv(t6) : r[e] = gi(t6);
  }
  return r;
}
function hW(r) {
  let e = document.createElement("video");
  return "playsInline" in e && (e.playsInline = true), e.muted = true, e.loop = true, e.style.position = "fixed", e.style.left = "0px", e.style.top = "0px", e.preload = "auto", e.appendChild(r), new Promise((t6) => {
    e.addEventListener("loadeddata", (o) => t6(e)), e.load();
  });
}
async function gW(r) {
  await r.play(), "requestVideoFrameCallback" in r && await new Promise((e) => {
    r.requestVideoFrameCallback(e);
  });
}
var xW = "4.1.0";
function yW(r, e) {
  let t6 = v(r, "a", "add"), o = v(e, "b", "add");
  [t6, o] = Re(t6, o);
  let n = { a: t6, b: o };
  return T.runKernel(eo, n);
}
var xe = N({ add_: yW });
function bW(r, e) {
  let t6 = v(r, "a", "floorDiv"), o = v(e, "b", "floorDiv");
  [t6, o] = Re(t6, o);
  let n = { a: t6, b: o };
  return T.runKernel(sn, n);
}
var Jm = N({ floorDiv_: bW });
function CW(r, e) {
  let t6 = v(r, "a", "div"), o = v(e, "b", "div");
  if ([t6, o] = Re(t6, o), t6.dtype === "int32" && o.dtype === "int32")
    return Jm(t6, o);
  let n = { a: t6, b: o }, s = {};
  return T.runKernel(Jo, n, s);
}
var Ge = N({ div_: CW });
function SW(r, e) {
  let t6 = v(r, "a", "mul"), o = v(e, "b", "mul");
  [t6, o] = Re(t6, o);
  let n = { a: t6, b: o };
  return T.runKernel(kn, n);
}
var ae = N({ mul_: SW });
function wW(r) {
  let e = v(r, "x", "abs");
  if (e.dtype === "complex64") {
    let t6 = { x: e };
    return T.runKernel(pp, t6);
  } else {
    let t6 = { x: e };
    return T.runKernel(gs, t6);
  }
}
var Yt = N({ abs_: wW });
function IW(r) {
  let t6 = { x: v(r, "x", "acos") };
  return T.runKernel(sa, t6);
}
var fv = N({ acos_: IW });
function vW(r) {
  let t6 = { x: v(r, "x", "acosh") };
  return T.runKernel(aa, t6);
}
var hv = N({ acosh_: vW });
function kW(r) {
  E(Array.isArray(r), () => "The argument passed to tf.addN() must be a list of tensors"), E(r.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ${r.length}`);
  let e = r.map((n, s) => v(n, `tensors${s}`, "addN")), t6 = e[0];
  e.forEach((n) => {
    if (n.dtype !== t6.dtype)
      throw new Error("All tensors passed to tf.addN() must have the same dtype");
  }), e.forEach((n) => {
    if (!Pr(n.shape, t6.shape))
      throw new Error("All tensors passed to tf.addN() must have the same shape");
  });
  let o = e;
  return T.runKernel(Mo, o);
}
var gv = N({ addN_: kW });
function NW(r, e = null, t6 = false) {
  let n = { x: v(r, "x", "all", "bool") }, s = { axis: e, keepDims: t6 };
  return T.runKernel(Lo, n, s);
}
var xv = N({ all_: NW });
function TW(r, e = null, t6 = false) {
  let n = { x: v(r, "x", "any", "bool") }, s = { axis: e, keepDims: t6 };
  return T.runKernel(Bo, n, s);
}
var yv = N({ any_: TW });
function _W(r, e = 0) {
  let o = { x: v(r, "x", "argMax") }, n = { axis: e };
  return T.runKernel(Vo, o, n);
}
var bv = N({ argMax_: _W });
function EW(r, e = 0) {
  let o = { x: v(r, "x", "argMin") }, n = { axis: e };
  return T.runKernel(Za, o, n);
}
var Cv = N({ argMin_: EW });
function $W(r) {
  let t6 = { x: v(r, "x", "asin") };
  return T.runKernel(ia, t6);
}
var Sv = N({ asin_: $W });
function AW(r) {
  let t6 = { x: v(r, "x", "asinh") };
  return T.runKernel(ua, t6);
}
var wv = N({ asinh_: AW });
function RW(r) {
  let t6 = { x: v(r, "x", "atan") };
  return T.runKernel(pa, t6);
}
var Iv = N({ atan_: RW });
function FW(r, e) {
  let t6 = v(r, "a", "atan2"), o = v(e, "b", "atan2");
  [t6, o] = Re(t6, o);
  let n = { a: t6, b: o };
  return T.runKernel(la, n);
}
var vv = N({ atan2_: FW });
function DW(r) {
  let t6 = { x: v(r, "x", "atanh") };
  return T.runKernel(ca, t6);
}
var kv = N({ atanh_: DW });
function OW(r, e, t6, o, n = "NHWC", s) {
  let a = r[3], i = [...e, a], p = Tv(n);
  return uu(r, i, t6, s, o, null, null, p);
}
function aC(r, e, t6, o, n, s, a = "channelsLast") {
  let [i, p] = ed(e), u;
  if (a === "channelsLast")
    u = [i, p, r[3], r[3]];
  else if (a === "channelsFirst")
    u = [i, p, r[1], r[1]];
  else
    throw new Error(`Unknown dataFormat ${a}`);
  return uu(r, u, t6, o, n, s, false, a);
}
function PW(r, e, t6, o, n, s, a = "NDHWC") {
  let [i, p, u] = sC(e), c, l;
  if (a === "NDHWC")
    l = "channelsLast", c = [i, p, u, r[4], r[4]];
  else if (a === "NCDHW")
    l = "channelsFirst", c = [i, p, u, r[1], r[1]];
  else
    throw new Error(`Unknown dataFormat ${a}`);
  return Nv(r, c, t6, o, n, false, l, s);
}
function uu(r, e, t6, o, n, s, a = false, i = "channelsLast") {
  let [p, u, c, l] = [-1, -1, -1, -1];
  if (i === "channelsLast")
    [p, u, c, l] = r;
  else if (i === "channelsFirst")
    [p, l, u, c] = r;
  else
    throw new Error(`Unknown dataFormat ${i}`);
  let [m, d, , f] = e, [h, g] = ed(t6), [x, b] = ed(o), C = Lp(m, x), w = Lp(d, b), { padInfo: k, outHeight: _, outWidth: $ } = BW(n, u, c, h, g, C, w, s, i), A = a ? f * l : f, R;
  return i === "channelsFirst" ? R = [p, A, _, $] : i === "channelsLast" && (R = [p, _, $, A]), { batchSize: p, dataFormat: i, inHeight: u, inWidth: c, inChannels: l, outHeight: _, outWidth: $, outChannels: A, padInfo: k, strideHeight: h, strideWidth: g, filterHeight: m, filterWidth: d, effectiveFilterHeight: C, effectiveFilterWidth: w, dilationHeight: x, dilationWidth: b, inShape: r, outShape: R, filterShape: e };
}
function Nv(r, e, t6, o, n, s = false, a = "channelsLast", i) {
  let [p, u, c, l, m] = [-1, -1, -1, -1, -1];
  if (a === "channelsLast")
    [p, u, c, l, m] = r;
  else if (a === "channelsFirst")
    [p, m, u, c, l] = r;
  else
    throw new Error(`Unknown dataFormat ${a}`);
  let [d, f, h, , g] = e, [x, b, C] = sC(t6), [w, k, _] = sC(o), $ = Lp(d, w), A = Lp(f, k), R = Lp(h, _), { padInfo: D, outDepth: P, outHeight: M, outWidth: L } = VW(n, u, c, l, x, b, C, $, A, R, i), W = s ? g * m : g, V;
  return a === "channelsFirst" ? V = [p, W, P, M, L] : a === "channelsLast" && (V = [p, P, M, L, W]), { batchSize: p, dataFormat: a, inDepth: u, inHeight: c, inWidth: l, inChannels: m, outDepth: P, outHeight: M, outWidth: L, outChannels: W, padInfo: D, strideDepth: x, strideHeight: b, strideWidth: C, filterDepth: d, filterHeight: f, filterWidth: h, effectiveFilterDepth: $, effectiveFilterHeight: A, effectiveFilterWidth: R, dilationDepth: w, dilationHeight: k, dilationWidth: _, inShape: r, outShape: V, filterShape: e };
}
function MW(r, e, t6, o, n) {
  o == null && (o = iC(r, e, t6));
  let s = r[0], a = r[1], i = au((s - e + 2 * o) / t6 + 1, n), p = au((a - e + 2 * o) / t6 + 1, n);
  return [i, p];
}
function LW(r, e, t6, o, n, s) {
  n == null && (n = iC(r, e, o));
  let a = r[0], i = r[1], p = r[2], u = au((a - e + 2 * n) / o + 1, s), c = au((i - e + 2 * n) / o + 1, s), l = au((p - e + 2 * n) / o + 1, s);
  return [u, c, l, t6];
}
function iC(r, e, t6, o = 1) {
  let n = Lp(e, o);
  return Math.floor((r[0] * (t6 - 1) - t6 + n) / 2);
}
function ed(r) {
  return typeof r == "number" ? [r, r, r] : r.length === 2 ? [r[0], r[1], 1] : r;
}
function sC(r) {
  return typeof r == "number" ? [r, r, r] : r;
}
function Lp(r, e) {
  return e <= 1 ? r : r + (r - 1) * (e - 1);
}
function BW(r, e, t6, o, n, s, a, i, p) {
  let u, c, l;
  if (typeof r == "number") {
    u = { top: r, bottom: r, left: r, right: r, type: r === 0 ? "VALID" : "NUMBER" };
    let d = MW([e, t6], s, o, r, i);
    c = d[0], l = d[1];
  } else if (r === "same") {
    c = Math.ceil(e / o), l = Math.ceil(t6 / n);
    let m = Math.max(0, (c - 1) * o + s - e), d = Math.max(0, (l - 1) * n + a - t6), f = Math.floor(m / 2), h = m - f, g = Math.floor(d / 2), x = d - g;
    u = { top: f, bottom: h, left: g, right: x, type: "SAME" };
  } else if (r === "valid")
    u = { top: 0, bottom: 0, left: 0, right: 0, type: "VALID" }, c = Math.ceil((e - s + 1) / o), l = Math.ceil((t6 - a + 1) / n);
  else if (typeof r == "object") {
    let m = p === "channelsLast" ? r[1][0] : r[2][0], d = p === "channelsLast" ? r[1][1] : r[2][1], f = p === "channelsLast" ? r[2][0] : r[3][0], h = p === "channelsLast" ? r[2][1] : r[3][1];
    u = { top: m, bottom: d, left: f, right: h, type: m === 0 && d === 0 && f === 0 && h === 0 ? "VALID" : "EXPLICIT" }, c = au((e - s + m + d) / o + 1, i), l = au((t6 - a + f + h) / n + 1, i);
  } else
    throw Error(`Unknown padding parameter: ${r}`);
  return { padInfo: u, outHeight: c, outWidth: l };
}
function VW(r, e, t6, o, n, s, a, i, p, u, c) {
  let l, m, d, f;
  if (typeof r == "number") {
    l = { top: r, bottom: r, left: r, right: r, front: r, back: r, type: r === 0 ? "VALID" : "NUMBER" };
    let g = LW([e, t6, o, 1], i, 1, n, r, c);
    m = g[0], d = g[1], f = g[2];
  } else if (r === "same") {
    m = Math.ceil(e / n), d = Math.ceil(t6 / s), f = Math.ceil(o / a);
    let h = (m - 1) * n + i - e, g = (d - 1) * s + p - t6, x = (f - 1) * a + u - o, b = Math.floor(h / 2), C = h - b, w = Math.floor(g / 2), k = g - w, _ = Math.floor(x / 2), $ = x - _;
    l = { top: w, bottom: k, left: _, right: $, front: b, back: C, type: "SAME" };
  } else if (r === "valid")
    l = { top: 0, bottom: 0, left: 0, right: 0, front: 0, back: 0, type: "VALID" }, m = Math.ceil((e - i + 1) / n), d = Math.ceil((t6 - p + 1) / s), f = Math.ceil((o - u + 1) / a);
  else
    throw Error(`Unknown padding parameter: ${r}`);
  return { padInfo: l, outDepth: m, outHeight: d, outWidth: f };
}
function au(r, e) {
  if (!e)
    return Math.trunc(r);
  switch (e) {
    case "round":
      return Math.round(r);
    case "ceil":
      return Math.ceil(r);
    case "floor":
      return Math.floor(r);
    default:
      throw new Error(`Unknown roundingMode ${e}`);
  }
}
function iu(r) {
  let [e, t6, o] = ed(r);
  return e === 1 && t6 === 1 && o === 1;
}
function lr(r, e) {
  return iu(r) || iu(e);
}
function Tv(r) {
  if (r === "NHWC")
    return "channelsLast";
  if (r === "NCHW")
    return "channelsFirst";
  throw new Error(`Unknown dataFormat ${r}`);
}
function Pt(r, e, t6) {
  if (t6 != null) {
    if (typeof e == "string")
      throw Error(`Error in ${r}: pad must be an integer when using dimRoundingMode ${t6} but got pad ${e}.`);
    if (typeof e == "number")
      E(na(e), () => `Error in ${r}: pad must be an integer when using dimRoundingMode ${t6} but got pad ${e}.`);
    else if (typeof e == "object")
      e.forEach((o) => {
        o.forEach((n) => {
          E(na(n), () => `Error in ${r}: pad must be an integer when using dimRoundingMode ${t6} but got pad ${n}.`);
        });
      });
    else
      throw Error(`Error in ${r}: Unknown padding parameter: ${e}`);
  }
}
function zW(r, e) {
  let o = { x: v(r, "x", "reshape", "string_or_numeric") }, n = { shape: e };
  return T.runKernel(Ns, o, n);
}
var z = N({ reshape_: zW });
function WW(r, e, t6, o, n) {
  let s = v(r, "x", "avgPool", "float32"), a = 1;
  E(lr(t6, a), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${t6} and dilations '${a}'`);
  let i = s, p = false;
  s.rank === 3 && (p = true, i = z(s, [1, s.shape[0], s.shape[1], s.shape[2]])), E(i.rank === 4, () => `Error in avgPool: x must be rank 4 but got rank ${i.rank}.`), Pt("avgPool", o, n);
  let u = { x: i }, c = { filterSize: e, strides: t6, pad: o, dimRoundingMode: n }, l = T.runKernel(zo, u, c);
  return l = Ke(l, s.dtype), p ? z(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
}
var td = N({ avgPool_: WW });
function UW(r, e, t6, o, n, s = "NDHWC") {
  let a = v(r, "x", "avgPool3d", "float32"), i = a, p = false;
  a.rank === 4 && (p = true, i = z(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), E(i.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`), E(s === "NDHWC", () => `Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`), Pt("avgPool3d", o, n);
  let u = { x: i }, c = { filterSize: e, strides: t6, pad: o, dimRoundingMode: n, dataFormat: s }, l = T.runKernel(ip, u, c);
  return l = Ke(l, i.dtype), p ? z(l, [l.shape[1], l.shape[2], l.shape[3], l.shape[4]]) : l;
}
var _v = N({ avgPool3d_: UW });
function GW(r, e = 0) {
  E(r.length >= 1, () => "Pass at least one tensor to concat");
  let t6 = Na(r, "tensors", "concat", "string_or_numeric");
  if (t6[0].dtype === "complex64" && t6.forEach((s) => {
    if (s.dtype !== "complex64")
      throw new Error(`Cannot concatenate complex64 tensors with a tensor
          with dtype ${s.dtype}. `);
  }), t6.length === 1)
    return Br(t6[0]);
  let o = t6, n = { axis: e };
  return T.runKernel(ys, o, n);
}
var gt = N({ concat_: GW });
function HW(r) {
  let t6 = { x: v(r, "x", "sigmoid", "float32") };
  return T.runKernel(Un, t6);
}
var zs = N({ sigmoid_: HW });
function qW(r, e, t6) {
  let o = v(r, "x", "slice", "string_or_numeric");
  if (o.rank === 0)
    throw new Error("Slicing scalar is not possible");
  let n = { x: o }, s = { begin: e, size: t6 };
  return T.runKernel(_s, n, s);
}
var He = N({ slice_: qW });
function KW(r) {
  let t6 = { x: v(r, "x", "tanh", "float32") };
  return T.runKernel(Qn, t6);
}
var nl = N({ tanh_: KW });
function jW(r, e, t6, o, n, s) {
  let a = v(r, "forgetBias", "basicLSTMCell"), i = v(e, "lstmKernel", "basicLSTMCell"), p = v(t6, "lstmBias", "basicLSTMCell"), u = v(o, "data", "basicLSTMCell"), c = v(n, "c", "basicLSTMCell"), l = v(s, "h", "basicLSTMCell"), m = gt([u, l], 1), d = Xe(m, i), f = xe(d, p), h = f.shape[0], g = f.shape[1] / 4, x = [h, g], b = He(f, [0, 0], x), C = He(f, [0, g], x), w = He(f, [0, g * 2], x), k = He(f, [0, g * 3], x), _ = xe(ae(zs(b), nl(C)), ae(c, zs(xe(a, w)))), $ = ae(nl(_), zs(k));
  return [_, $];
}
var Ev = N({ basicLSTMCell_: jW });
function XW(r, e, t6) {
  let o = v(r, "x", "batchToSpaceND"), n = e.reduce((i, p) => i * p);
  E(o.rank >= 1 + e.length, () => `input rank is ${o.rank} but should be > than blockShape.length ${e.length}`), E(t6.length === e.length, () => `crops.length is ${t6.length} but should be equal to blockShape.length  ${e.length}`), E(o.shape[0] % n === 0, () => `input tensor batch is ${o.shape[0]} but is not divisible by the product of the elements of blockShape ${e.join(" * ")} === ${n}`);
  let s = { x: o }, a = { blockShape: e, crops: t6 };
  return T.runKernel(xs, s, a);
}
var rd = N({ batchToSpaceND_: XW });
function $v(r) {
  let e;
  return r.rank === 0 || r.rank === 1 ? e = z(r, [1, 1, 1, r.size]) : r.rank === 2 ? e = z(r, [1, 1, r.shape[0], r.shape[1]]) : r.rank === 3 ? e = z(r, [1, r.shape[0], r.shape[1], r.shape[2]]) : e = r, e;
}
function YW(r, e, t6, o, n, s) {
  s == null && (s = 1e-3);
  let a = v(r, "x", "batchNorm"), i = v(e, "mean", "batchNorm"), p = v(t6, "variance", "batchNorm"), u;
  n != null && (u = v(n, "scale", "batchNorm"));
  let c;
  o != null && (c = v(o, "offset", "batchNorm")), E(i.rank === p.rank, () => "Batch normalization gradient requires mean and variance to have equal ranks."), E(c == null || i.rank === c.rank, () => "Batch normalization gradient requires mean and offset to have equal ranks."), E(u == null || i.rank === u.rank, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let m = { x: $v(a), scale: u, offset: c, mean: i, variance: p }, d = { varianceEpsilon: s }, f = T.runKernel(an, m, d);
  return z(f, a.shape);
}
var wi = N({ batchNorm_: YW });
function QW(r, e, t6, o, n, s) {
  let a = v(r, "x", "batchNorm"), i = v(e, "mean", "batchNorm"), p = v(t6, "variance", "batchNorm"), u;
  n != null && (u = v(n, "scale", "batchNorm"));
  let c;
  return o != null && (c = v(o, "offset", "batchNorm")), E(a.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ${a.rank}.`), E(i.rank === 2 || i.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`), E(p.rank === 2 || p.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${p.rank}.`), u != null && E(u.rank === 2 || u.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${u.rank}.`), c != null && E(c.rank === 2 || c.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${c.rank}.`), wi(a, i, p, c, u, s);
}
var Av = N({ batchNorm2d_: QW });
function ZW(r, e, t6, o, n, s) {
  let a = v(r, "x", "batchNorm"), i = v(e, "mean", "batchNorm"), p = v(t6, "variance", "batchNorm"), u;
  n != null && (u = v(n, "scale", "batchNorm"));
  let c;
  return o != null && (c = v(o, "offset", "batchNorm")), E(a.rank === 3, () => `Error in batchNorm3D: x must be rank 3 but got rank ${a.rank}.`), E(i.rank === 3 || i.rank === 1, () => `Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`), E(p.rank === 3 || p.rank === 1, () => `Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${p.rank}.`), u != null && E(u.rank === 3 || u.rank === 1, () => `Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${u.rank}.`), c != null && E(c.rank === 3 || c.rank === 1, () => `Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${c.rank}.`), wi(a, i, p, c, u, s);
}
var Rv = N({ batchNorm3d_: ZW });
function JW(r, e, t6, o, n, s) {
  let a = v(r, "x", "batchNorm"), i = v(e, "mean", "batchNorm"), p = v(t6, "variance", "batchNorm"), u;
  n != null && (u = v(n, "scale", "batchNorm"));
  let c;
  return o != null && (c = v(o, "offset", "batchNorm")), E(a.rank === 4, () => `Error in batchNorm4D: x must be rank 4 but got rank ${a.rank}.`), E(i.rank === 4 || i.rank === 1, () => `Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`), E(p.rank === 4 || p.rank === 1, () => `Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${p.rank}.`), u != null && E(u.rank === 4 || u.rank === 1, () => `Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${u.rank}.`), c != null && E(c.rank === 4 || c.rank === 1, () => `Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${c.rank}.`), wi(a, i, p, c, u, s);
}
var Fv = N({ batchNorm4d_: JW });
function eU(r, e, t6) {
  let o = v(r, "x", "bincount"), n = v(e, "weights", "bincount");
  E(o.dtype === "int32", () => `Error in bincount: input dtype must be int32, but got ${o.dtype}`), E(t6 >= 0, () => `size must be non-negative, but got ${t6}.`), E(n.size === o.size || n.size === 0, () => `Error in bincount: weights must have the same size as input or0-length, but got input shape: ${o.shape}, weights shape: ${n.shape}.`);
  let s = { x: o, weights: n }, a = { size: t6 };
  return T.runKernel(Ja, s, a);
}
var od = N({ bincount_: eU });
function tU(r, e) {
  let t6 = v(r, "s0", "broadcastArgs", "int32"), o = v(e, "s1", "broadcastArgs", "int32");
  if (t6.rank !== 1)
    throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${t6.rank}`);
  if (o.rank !== 1)
    throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${o.rank}`);
  let n = { s0: t6, s1: o };
  return T.runKernel(up, n);
}
var Dv = N({ broadcastArgs_: tU });
function rU(r, e) {
  let t6 = v(r, "broadcastTo", "x"), o = t6.shape;
  if (yt(e), e.length < t6.rank)
    throw new Error(`broadcastTo(): shape.length=${e.length} < input.rank=${t6.rank}.`);
  if (e.length > t6.rank) {
    let u = t6.shape.slice();
    for (; u.length < e.length; )
      u.unshift(1);
    t6 = z(t6, u);
  }
  let n = t6.shape, s = Array.from(e);
  for (let u = e.length - 1; u >= 0; u--)
    if (n[u] === e[u])
      s[u] = 1;
    else if (t6.shape[u] !== 1)
      throw new Error(`broadcastTo(): [${o}] cannot be broadcast to [${e}].`);
  if (s.map((u, c) => u > 1 ? c : -1).filter((u) => u >= 0).length === 0)
    return Br(t6);
  let i = { x: t6 }, p = { reps: s };
  return T.runKernel(to, i, p);
}
var Ii = N({ broadcastTo_: rU });
function oU(r) {
  let t6 = { x: v(r, "x", "ceil", "float32") };
  return T.runKernel(Uo, t6);
}
var Ov = N({ ceil_: oU });
function Ws(r, e, t6) {
  yt(r);
  let o = { shape: r, value: e, dtype: t6 };
  return T.runKernel(Cs, {}, o);
}
function nU(r, e, t6) {
  let o = v(r, "x", "clipByValue");
  if (E(e <= t6, () => `Error in clip: min (${e}) must be less than or equal to max (${t6}).`), e === t6)
    return Ws(o.shape, e, o.dtype);
  let n = { x: o }, s = { clipValueMin: e, clipValueMax: t6 };
  return T.runKernel(lo, n, s);
}
var Pv = N({ clipByValue_: nU });
function sU(r) {
  return gt(r, 0);
}
var Mv = N({ concat1d_: sU });
function aU(r, e) {
  return gt(r, e);
}
var Lv = N({ concat2d_: aU });
function iU(r, e) {
  return gt(r, e);
}
var Bv = N({ concat3d_: iU });
function uU(r, e) {
  return gt(r, e);
}
var Vv = N({ concat4d_: uU });
function pU(r, e, t6, o, n = "NHWC", s = [1, 1], a) {
  let i = v(r, "x", "conv2d", "float32"), p = v(e, "filter", "conv2d", "float32"), u = i, c = false;
  i.rank === 3 && (c = true, u = z(i, [1, i.shape[0], i.shape[1], i.shape[2]])), E(u.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${u.rank}.`), E(p.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ${p.rank}.`), Pt("conv2d", o, a);
  let l = n === "NHWC" ? u.shape[3] : u.shape[1];
  E(l === p.shape[2], () => `Error in conv2d: depth of input (${l}) must match input depth for filter ${p.shape[2]}.`), E(lr(t6, s), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${t6} and dilations '${s}'`);
  let m = { x: u, filter: p }, d = { strides: t6, pad: o, dataFormat: n, dilations: s, dimRoundingMode: a }, f = T.runKernel(Go, m, d);
  return c ? z(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
var vi = N({ conv2d_: pU });
function cU(r, e, t6, o, n = "NWC", s = 1, a) {
  let i = v(r, "x", "conv1d"), p = v(e, "filter", "conv1d"), u = i, c = false;
  i.rank === 2 && (c = true, u = z(i, [1, i.shape[0], i.shape[1]])), E(u.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${u.rank}.`), E(p.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ${p.rank}.`), Pt("conv1d", o, a), E(u.shape[2] === p.shape[1], () => `Error in conv1d: depth of input (${u.shape[2]}) must match input depth for filter ${p.shape[1]}.`), E(lr(t6, s), () => `Error in conv1D: Either stride or dilation must be 1. Got stride ${t6} and dilation '${s}'`), E(n === "NWC", () => `Error in conv1d: got dataFormat of ${n} but only NWC is currently supported.`);
  let l = z(p, [1, p.shape[0], p.shape[1], p.shape[2]]), m = z(u, [u.shape[0], 1, u.shape[1], u.shape[2]]), g = vi(m, l, [1, t6], o, "NHWC", [1, s], a);
  return c ? z(g, [g.shape[2], g.shape[3]]) : z(g, [g.shape[0], g.shape[2], g.shape[3]]);
}
var zv = N({ conv1d_: cU });
function lU(r, e, t6, o, n, s = "NHWC", a) {
  E(r.length === e.rank, () => `Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);
  let i = r, p = e, u = false;
  e.rank === 3 && (u = true, p = z(e, [1, e.shape[0], e.shape[1], e.shape[2]]), i = [1, r[0], r[1], r[2]]), E(i.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`), E(p.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got rank ${p.rank}`), E(t6.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got rank ${t6.rank}`);
  let c = s === "NHWC" ? i[3] : i[1], l = s === "NHWC" ? p.shape[3] : p.shape[1];
  E(c === t6.shape[2], () => `Error in conv2dDerInput: depth of input (${c}) must match input depth for filter ${t6.shape[2]}.`), E(l === t6.shape[3], () => `Error in conv2dDerInput: depth of output (${l}) must match output depth for filter ${t6.shape[3]}.`), Pt("conv2dDerInput", n, a);
  let m = { dy: p, filter: t6 }, d = { strides: o, pad: n, dataFormat: s, dimRoundingMode: a, inputShape: i }, f = T.runKernel(Ho, m, d);
  return u ? z(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
var nd = N({ conv2DBackpropInput_: lU });
function mU(r, e, t6, o, n, s) {
  let a = v(r, "x", "conv2dTranspose"), i = v(e, "filter", "conv2dTranspose");
  return nd(t6, a, i, o, n, "NHWC", s);
}
var Wv = N({ conv2dTranspose_: mU });
function dU(r, e, t6, o, n = "NDHWC", s = [1, 1, 1]) {
  let a = v(r, "x", "conv3d"), i = v(e, "filter", "conv3d"), p = a, u = false;
  a.rank === 4 && (u = true, p = z(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), E(p.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${p.rank}.`), E(i.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`), E(p.shape[4] === i.shape[3], () => `Error in conv3d: depth of input (${p.shape[4]}) must match input depth for filter ${i.shape[3]}.`), E(lr(t6, s), () => `Error in conv3D: Either strides or dilations must be 1. Got strides ${t6} and dilations '${s}'`), E(n === "NDHWC", () => `Error in conv3d: got dataFormat of ${n} but only NDHWC is currently supported.`);
  let c = { x: p, filter: i }, l = { strides: t6, pad: o, dataFormat: n, dilations: s }, m = T.runKernel(lp, c, l);
  return u ? z(m, [m.shape[1], m.shape[2], m.shape[3], m.shape[4]]) : m;
}
var Uv = N({ conv3d_: dU });
function fU(r, e, t6, o, n) {
  E(r.length === e.rank, () => `Length of inShape (${r.length}) and rank of dy (${e.rank}) must match`);
  let s = r, a = e, i = false;
  e.rank === 4 && (i = true, a = z(e, [1, e.shape[0], e.shape[1], e.shape[2], e.shape[3]]), s = [1, r[0], r[1], r[2], r[3]]);
  let p = s[4], u = a.shape[4];
  E(s.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`), E(a.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got rank ${a.rank}`), E(t6.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got rank ${t6.rank}`), E(p === t6.shape[3], () => `Error in conv3dDerInput: depth of input (${p}) must match input depth for filter ${t6.shape[3]}.`), E(u === t6.shape[4], () => `Error in conv3dDerInput: depth of output (${u}) must match output depth for filter ${t6.shape[4]}.`);
  let c = { dy: a, filter: t6 }, l = { pad: n, strides: o, inputShape: s }, m = T.runKernel(mp, c, l);
  return i ? z(m, [m.shape[1], m.shape[2], m.shape[3], m.shape[4]]) : m;
}
var Gv = N({ conv3DBackpropInput_: fU });
function hU(r, e, t6, o, n) {
  let s = v(r, "x", "conv3dTranspose"), a = v(e, "filter", "conv3dTranspose");
  return Gv(t6, s, a, o, n);
}
var Hv = N({ conv3dTranspose_: hU });
function gU(r) {
  let t6 = { x: v(r, "x", "cos", "float32") };
  return T.runKernel(qo, t6);
}
var qv = N({ cos_: gU });
function xU(r) {
  let t6 = { x: v(r, "x", "cosh", "float32") };
  return T.runKernel(Ko, t6);
}
var Kv = N({ cosh_: xU });
function yU(r, e = 0, t6 = false, o = false) {
  let s = { x: v(r, "x", "cumprod") }, a = { axis: e, exclusive: t6, reverse: o };
  return T.runKernel(jo, s, a);
}
var jv = N({ cumprod_: yU });
function bU(r, e = 0, t6 = false, o = false) {
  let s = { x: v(r, "x", "cumsum") }, a = { axis: e, exclusive: t6, reverse: o };
  return T.runKernel(Xo, s, a);
}
var Xv = N({ cumsum_: bU });
function CU(r, e, t6, o = false) {
  let n = v(r, "x", "denseBincount"), s = v(e, "weights", "denseBincount");
  E(n.dtype === "int32", () => `Error in denseBincount: input dtype must be int32, but got ${n.dtype}`), E(n.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got rank ${n.rank}.`), E(t6 >= 0, () => `size must be non-negative, but got ${t6}.`), E(s.size === n.size || s.size === 0, () => `Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${n.shape}, weights shape: ${s.shape}.`);
  let a = { x: n, weights: s }, i = { size: t6, binaryOutput: o };
  return T.runKernel(ti, a, i);
}
var Yv = N({ denseBincount_: CU });
function SU(r, e, t6 = "NHWC") {
  let o = v(r, "x", "depthToSpace", "float32"), n = t6 === "NHWC" ? o.shape[1] : o.shape[2], s = t6 === "NHWC" ? o.shape[2] : o.shape[3], a = t6 === "NHWC" ? o.shape[3] : o.shape[1];
  E(e > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${e}`), E(n * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${n} and ${e}  for depthToSpace with input shape
    ${o.shape}`), E(s * e >= 0, () => `Negative dimension size caused by overflow when multiplying
    ${s} and ${e} for depthToSpace with input shape
        ${o.shape}`), E(a % (e * e) === 0, () => `Dimension size must be evenly divisible by ${e * e} but is ${a} for depthToSpace with input shape ${o.shape}`);
  let i = { x: o }, p = { blockSize: e, dataFormat: t6 };
  return T.runKernel(Qo, i, p);
}
var Qv = N({ depthToSpace_: SU });
function wU(r, e, t6, o, n = "NHWC", s = [1, 1], a) {
  let i = v(r, "x", "depthwiseConv2d", "float32"), p = v(e, "filter", "depthwiseConv2d", "float32"), u = i, c = false;
  i.rank === 3 && (c = true, u = z(i, [1, i.shape[0], i.shape[1], i.shape[2]])), E(u.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got rank ${u.rank}.`), E(p.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ${p.rank}.`);
  let l = n === "NHWC" ? u.shape[3] : u.shape[1];
  E(l === p.shape[2], () => `Error in depthwiseConv2d: number of input channels (${l}) must match the inChannels dimension in filter ${p.shape[2]}.`), Pt("depthwiseConv2d", o, a);
  let m = { x: u, filter: p }, d = { strides: t6, pad: o, dataFormat: n, dilations: s, dimRoundingMode: a }, f = T.runKernel(Zo, m, d);
  return c ? z(f, [f.shape[1], f.shape[2], f.shape[3]]) : f;
}
var Bp = N({ depthwiseConv2d_: wU });
function IU(r) {
  let t6 = { x: v(r, "x", "diag") };
  return T.runKernel(hp, t6);
}
var Zv = N({ diag_: IU });
function vU(r, e, t6, o, n = [1, 1], s = "NHWC") {
  let a = v(r, "x", "dilation2d"), i = v(e, "filter", "dilation2d");
  E(a.rank === 3 || a.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ${a.rank}.`), E(i.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`), E(s === "NHWC", () => `Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);
  let p = a, u = false;
  a.rank === 3 && (p = z(a, [1, a.shape[0], a.shape[1], a.shape[2]]), u = true);
  let c = { x: p, filter: i }, l = { strides: t6, pad: o, dilations: n }, m = T.runKernel(gp, c, l);
  return u ? z(m, [m.shape[1], m.shape[2], m.shape[3]]) : m;
}
var Jv = N({ dilation2d_: vU });
function kU(r, e) {
  let t6 = v(r, "a", "equal", "string_or_numeric"), o = v(e, "b", "equal", "string_or_numeric");
  [t6, o] = Re(t6, o), Je(t6.shape, o.shape);
  let n = { a: t6, b: o };
  return T.runKernel(tn, n);
}
var sd = N({ equal_: kU });
function NU(r, e, t6) {
  let o = v(e, "a", "where"), n = v(t6, "b", "where"), s = v(r, "condition", "where", "bool"), a = Je(Je(s.shape, o.shape), n.shape), i = Ii(s, a), p = Ii(o, a), u = Ii(n, a), c = { condition: i, t: p, e: u };
  return T.runKernel(Ts, c);
}
var os = N({ where_: NU });
function TU(r) {
  let t6 = { x: v(r, "x", "zerosLike") };
  return T.runKernel(Fs, t6);
}
var Ut = N({ zerosLike_: TU });
function _U(r, e) {
  let t6 = v(r, "a", "div"), o = v(e, "b", "div");
  [t6, o] = Re(t6, o);
  let n = Ge(t6, o), s = Ut(n), a = sd(o, s);
  return os(a, s, n);
}
var ek = N({ divNoNan_: _U });
function EU(r, e) {
  let t6 = v(r, "t1", "dot"), o = v(e, "t2", "dot");
  E((t6.rank === 1 || t6.rank === 2) && (o.rank === 1 || o.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ${t6.rank} and ${o.rank}.`);
  let n = t6.rank === 1 ? t6.size : t6.shape[1], s = o.rank === 1 ? o.size : o.shape[0];
  if (E(n === s, () => `Error in dot: inner dimensions of inputs must match, but got ${n} and ${s}.`), t6.rank === 1 && o.rank === 1) {
    let a = z(t6, [1, -1]), i = z(o, [-1, 1]), p = Xe(a, i);
    return z(p, []);
  } else if (t6.rank === 1 && o.rank === 2) {
    let a = z(t6, [1, -1]), i = z(o, [o.shape[0], o.shape[1]]), p = Xe(a, i);
    return z(p, [p.size]);
  } else if (t6.rank === 2 && o.rank === 1) {
    let a = z(o, [-1, 1]), i = Xe(t6, a);
    return z(i, [i.size]);
  } else {
    let a = z(o, [o.shape[0], o.shape[1]]);
    return Xe(t6, a);
  }
}
var tk = N({ dot_: EU });
function $U(r, ...e) {
  let t6 = e.map((n, s) => v(n, `tensors${s}`, "einsum")), o = { equation: r };
  return T.runKernel(ri, t6, o);
}
var rk = N({ einsum_: $U });
function AU(r) {
  let t6 = { x: v(r, "x", "elu", "float32") };
  return T.runKernel(en, t6);
}
var ad = N({ elu_: AU });
function RU(r) {
  let e = v(r, "x", "erf");
  E(e.dtype === "int32" || e.dtype === "float32", () => "Input dtype must be `int32` or `float32`."), e.dtype === "int32" && (e = Ke(e, "float32"));
  let t6 = { x: e };
  return T.runKernel(ma, t6);
}
var ok = N({ erf_: RU });
function uC(r, e) {
  for (let t6 = 0; t6 < r.length; ++t6)
    if (r[r.length - t6 - 1] !== e - 1 - t6)
      return false;
  return true;
}
function nk(r, e, t6) {
  let o = r.length + e.length, n = [], s = 0, a = 0;
  for (let i = 0; i < o; i++)
    t6.indexOf(i) === -1 ? n.push(r[s++]) : n.push(e[a++]);
  return n;
}
function FU(r, e) {
  let t6 = [], o = r.length;
  for (let s = 0; s < o; s++)
    e.indexOf(s) === -1 && t6.push(r[s]);
  let n = e.map((s) => r[s]);
  return [t6, n];
}
function Aa(r, e) {
  let t6 = e.map((o) => 1);
  return nk(r, t6, e);
}
function DU(r, e, t6) {
  E(uC(e, t6), () => `${r} supports only inner-most axes for now. Got axes ${e} and rank-${t6} input.`);
}
function OU(r, e) {
  if (uC(r, e))
    return null;
  let t6 = [];
  for (let o = 0; o < e; ++o)
    r.indexOf(o) === -1 && t6.push(o);
  return r.forEach((o) => t6.push(o)), t6;
}
function PU(r) {
  return r.map((e, t6) => [t6, e]).sort((e, t6) => e[1] - t6[1]).map((e) => e[0]);
}
function MU(r, e) {
  let t6 = [];
  for (let o = e - r; o < e; ++o)
    t6.push(o);
  return t6;
}
function BU(r, e = null, t6 = false) {
  let n = { x: v(r, "x", "max") }, s = { reductionIndices: e, keepDims: t6 };
  return T.runKernel(yn, n, s);
}
var Us = N({ max_: BU });
function VU(r, e = null, t6 = false) {
  let n = { x: v(r, "x", "min") }, s = { axis: e, keepDims: t6 };
  return T.runKernel(wn, n, s);
}
var sl = N({ min_: VU });
function zU(r, e) {
  let t6 = v(r, "base", "pow"), o = v(e, "exp", "pow");
  [t6, o] = Re(t6, o);
  let n = { a: t6, b: o };
  return T.runKernel(An, n);
}
var Ra = N({ pow_: zU });
function be(r, e) {
  if ((Wt(r) && e !== "string" || Array.isArray(r)) && e !== "complex64")
    throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");
  if (e === "string" && Wt(r) && !(r instanceof Uint8Array))
    throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");
  return xr(r, [], [], e);
}
function WU(r) {
  let t6 = { x: v(r, "x", "sqrt", "float32") };
  return T.runKernel(Gn, t6);
}
var $r = N({ sqrt_: WU });
function UU(r) {
  let e = v(r, "x", "square"), t6 = {};
  return T.runKernel("Square", { x: e }, t6);
}
var Qt = N({ square_: UU });
function GU(r, e = null, t6 = false) {
  let o = v(r, "x", "sum");
  o.dtype === "bool" && (o = Ke(o, "int32"));
  let n = { x: o }, s = { axis: e, keepDims: t6 };
  return T.runKernel(Hn, n, s);
}
var et = N({ sum_: GU });
function HU(r, e = "euclidean", t6 = null, o = false) {
  r = v(r, "x", "norm");
  let n = sk(r, e, t6), s = n.shape;
  if (o) {
    let a = Qa(t6, r.shape);
    s = Aa(n.shape, a);
  }
  return z(n, s);
}
function sk(r, e, t6 = null) {
  if (r.rank === 0)
    return Yt(r);
  if (r.rank !== 1 && t6 === null)
    return sk(z(r, [-1]), e, t6);
  if (r.rank === 1 || typeof t6 == "number" || Array.isArray(t6) && t6.length === 1) {
    if (e === 1)
      return et(Yt(r), t6);
    if (e === 1 / 0)
      return Us(Yt(r), t6);
    if (e === -1 / 0)
      return sl(Yt(r), t6);
    if (e === "euclidean" || e === 2)
      return $r(et(Ra(Yt(r), be(2, "int32")), t6));
    throw new Error(`Error in norm: invalid ord value: ${e}`);
  }
  if (Array.isArray(t6) && t6.length === 2) {
    if (e === 1)
      return Us(et(Yt(r), t6[0]), t6[1] - 1);
    if (e === 1 / 0)
      return Us(et(Yt(r), t6[1]), t6[0]);
    if (e === -1 / 0)
      return sl(et(Yt(r), t6[1]), t6[0]);
    if (e === "fro" || e === "euclidean")
      return $r(et(Qt(r), t6));
    throw new Error(`Error in norm: invalid ord value: ${e}`);
  }
  throw new Error(`Error in norm: invalid axis: ${t6}`);
}
var pu = N({ norm_: HU });
function qU(r, e = null, t6 = false) {
  return pu(r, "euclidean", e, t6);
}
var ak = N({ euclideanNorm_: qU });
function KU(r) {
  let t6 = { x: v(r, "x", "exp") };
  return T.runKernel(rn, t6);
}
var Co = N({ exp_: KU });
function jU(r, e = 0) {
  let t6 = v(r, "x", "expandDims", "string_or_numeric");
  E(e <= t6.rank, () => "Axis must be <= rank of the tensor");
  let o = { input: t6 }, n = { dim: e };
  return T.runKernel(bs, o, n);
}
var Fa = N({ expandDims_: jU });
function XU(r) {
  let t6 = { x: v(r, "x", "expm1") };
  return T.runKernel(da, t6);
}
var ik = N({ expm1_: XU });
function YU(r, e) {
  let t6 = v(r, "x", "tile", "string_or_numeric");
  E(t6.rank === e.length, () => `Error in transpose: rank of input ${t6.rank} must match length of reps ${e}.`);
  let o = { x: t6 }, n = { reps: e };
  return T.runKernel(to, o, n);
}
var ki = N({ tile_: YU });
function QU(r, e, t6, o = "float32") {
  e == null && (e = r);
  let n = le([r, e], o), s = r <= e ? r : e;
  for (let i = 0; i < s; ++i)
    n.set(1, i, i);
  let a = z(n.toTensor(), [r, e]);
  if (t6 == null)
    return a;
  if (t6.length === 1)
    return ki(Fa(a, 0), [t6[0], 1, 1]);
  if (t6.length === 2)
    return ki(Fa(Fa(a, 0), 0), [t6[0], t6[1], 1, 1]);
  if (t6.length === 3)
    return ki(Fa(Fa(Fa(a, 0), 0), 0), [t6[0], t6[1], t6[2], 1, 1]);
  throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${t6.length}D.`);
}
var id = N({ eye_: QU });
function ZU(r) {
  let t6 = { x: v(r, "x", "floor", "float32") };
  return T.runKernel(nn, t6);
}
var ud = N({ floor_: ZU });
function JU(r, e, t6 = 0, o = 0) {
  let n = v(r, "x", "gather"), s = v(e, "indices", "gather", "int32"), a = { x: n, indices: s }, i = { axis: t6, batchDims: o };
  return T.runKernel(Ss, a, i);
}
var pd = N({ gather_: JU });
function e4(r, e) {
  let t6 = v(r, "a", "greater", "string_or_numeric"), o = v(e, "b", "greater", "string_or_numeric");
  [t6, o] = Re(t6, o), Je(t6.shape, o.shape);
  let n = { a: t6, b: o };
  return T.runKernel(pn, n);
}
var cu = N({ greater_: e4 });
function t4(r, e) {
  let t6 = v(r, "a", "greaterEqual", "string_or_numeric"), o = v(e, "b", "greaterEqual", "string_or_numeric");
  [t6, o] = Re(t6, o), Je(t6.shape, o.shape);
  let n = { a: t6, b: o };
  return T.runKernel(cn, n);
}
var cd = N({ greaterEqual_: t4 });
function r4(r) {
  let t6 = { x: v(r, "x", "isFinite") };
  return T.runKernel(fa, t6);
}
var uk = N({ isFinite_: r4 });
function o4(r) {
  let t6 = { x: v(r, "x", "isInf") };
  return T.runKernel(ha, t6);
}
var pk = N({ isInf_: o4 });
function n4(r) {
  let t6 = { x: v(r, "x", "isNaN") };
  return T.runKernel(ln, t6);
}
var ck = N({ isNaN_: n4 });
function s4(r, e = 0.2) {
  let o = { x: v(r, "x", "leakyRelu") }, n = { alpha: e };
  return T.runKernel(mn, o, n);
}
var ld = N({ leakyRelu_: s4 });
function a4(r, e) {
  let t6 = v(r, "a", "less", "string_or_numeric"), o = v(e, "b", "less", "string_or_numeric");
  [t6, o] = Re(t6, o), Je(t6.shape, o.shape);
  let n = { a: t6, b: o };
  return T.runKernel(dn, n);
}
var lk = N({ less_: a4 });
function i4(r, e) {
  let t6 = v(r, "a", "lessEqual", "string_or_numeric"), o = v(e, "b", "lessEqual", "string_or_numeric");
  [t6, o] = Re(t6, o), Je(t6.shape, o.shape);
  let n = { a: t6, b: o };
  return T.runKernel(fn, n);
}
var Vp = N({ lessEqual_: i4 });
function mk(r, e, t6) {
  if (t6 <= 0)
    throw new Error("The number of values should be positive.");
  let o = { start: r, stop: e, num: t6 };
  return T.runKernel(xp, {}, o);
}
function u4(r, e = 5, t6 = 1, o = 1, n = 0.5) {
  let s = v(r, "x", "localResponseNormalization");
  E(s.rank === 4 || s.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got
               rank ${s.rank}.`), E(na(e), () => `Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${e}.`);
  let a = s, i = false;
  s.rank === 3 && (i = true, a = z(s, [1, s.shape[0], s.shape[1], s.shape[2]]));
  let p = { x: a }, u = { depthRadius: e, bias: t6, alpha: o, beta: n }, c = T.runKernel(yp, p, u);
  return i ? z(c, [c.shape[1], c.shape[2], c.shape[3]]) : c;
}
var dk = N({ localResponseNormalization_: u4 });
function p4(r) {
  let t6 = { x: v(r, "x", "log", "float32") };
  return T.runKernel(hn, t6);
}
var Da = N({ log_: p4 });
function c4(r) {
  let t6 = { x: v(r, "x", "log1p") };
  return T.runKernel(ga, t6);
}
var md = N({ log1p_: c4 });
function l4(r) {
  return E(fs(r), () => "The f passed in grad(f) must be a function"), (e, t6) => {
    let o = v(e, "x", "tf.grad", "string_or_numeric"), n = t6 != null ? v(t6, "dy", "tf.grad") : null;
    return T.tidy(() => {
      let { value: s, grads: a } = T.gradients(() => r(o), [o], n);
      return n != null && ht(s.shape, n.shape, "The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"), dd(a), a[0];
    });
  };
}
function m4(r) {
  return E(fs(r), () => "The f passed in grads(f) must be a function"), (e, t6) => {
    E(Array.isArray(e), () => "The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s");
    let o = Na(e, "args", "tf.grads", "string_or_numeric"), n = t6 != null ? v(t6, "dy", "tf.grads") : null;
    return T.tidy(() => {
      let { value: s, grads: a } = T.gradients(() => r(...o), o, n);
      return n != null && ht(s.shape, n.shape, "The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), dd(a), a;
    });
  };
}
function d4(r) {
  return E(fs(r), () => "The f passed in valueAndGrad(f) must be a function"), (e, t6) => {
    E(e instanceof it, () => "The x passed in valueAndGrad(f)(x) must be a tensor"), E(t6 == null || t6 instanceof it, () => "The dy passed in valueAndGrad(f)(x, dy) must be a tensor");
    let { grads: o, value: n } = T.gradients(() => r(e), [e], t6);
    return dd(o), { grad: o[0], value: n };
  };
}
function f4(r) {
  return E(fs(r), () => "The f passed in valueAndGrads(f) must be a function"), (e, t6) => {
    E(Array.isArray(e) && e.every((n) => n instanceof it), () => "The args passed in valueAndGrads(f)(args) must be array of tensors"), E(t6 == null || t6 instanceof it, () => "The dy passed in valueAndGrads(f)(args, dy) must be a tensor");
    let o = T.gradients(() => r(...e), e, t6);
    return t6 != null && ht(o.value.shape, t6.shape, "The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"), dd(o.grads), o;
  };
}
function pC(r, e) {
  E(fs(r), () => "The f passed in variableGrads(f) must be a function"), E(e == null || Array.isArray(e) && e.every((u) => u instanceof va), () => "The varList passed in variableGrads(f, varList) must be an array of variables");
  let t6 = e != null;
  if (!t6) {
    e = [];
    for (let u in T.registeredVariables)
      e.push(T.registeredVariables[u]);
  }
  let o = t6 ? e.filter((u) => !u.trainable) : null, n = e.length;
  e = e.filter((u) => u.trainable), E(e.length > 0, () => `variableGrads() expects at least one of the input variables to be trainable, but none of the ${n} variables is trainable.`);
  let s = true, { value: a, grads: i } = T.gradients(r, e, null, s);
  E(i.some((u) => u != null), () => "Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."), E(a.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it returned a rank-${a.rank} tensor`);
  let p = {};
  return e.forEach((u, c) => {
    i[c] != null && (p[u.name] = i[c]);
  }), o != null && o.forEach((u) => p[u.name] = null), { value: a, grads: p };
}
function Cr(r) {
  return T.customGrad(r);
}
function dd(r) {
  if (r.filter((t6) => t6 == null).length > 0)
    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that
    the f you passed encloses all operations that lead from x to y.`);
}
function h4(r) {
  let t6 = { x: v(r, "x", "softplus") };
  return T.runKernel(Qi, t6);
}
var fd = N({ softplus_: h4 });
function g4(r) {
  let e = v(r, "x", "logSigmoid");
  return Cr((o) => ({ value: yr(fd(yr(o))), gradFunc: (a) => ae(a, zs(yr(o))) }))(e);
}
var fk = N({ logSigmoid_: g4 });
function x4(r, e) {
  let t6 = v(r, "a", "sub"), o = v(e, "b", "sub");
  [t6, o] = Re(t6, o);
  let n = { a: t6, b: o };
  return T.runKernel(Xn, n);
}
var Ne = N({ sub_: x4 });
function y4(r, e = -1) {
  let t6 = v(r, "logits", "logSoftmax");
  if (e === -1 && (e = t6.rank - 1), e !== t6.rank - 1)
    throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${t6.rank} and axis was ${e}`);
  return Cr((n, s) => {
    let i = Us(n, e, true), p = Ne(n, i), u = Ne(Ke(p, "float32"), Da(et(Co(p), e, true)));
    return s([u]), { value: u, gradFunc: (l, m) => {
      let [d] = m, f = true, h = Co(d);
      return Ne(l, ae(et(l, e, f), h));
    } };
  })(t6);
}
var hk = N({ logSoftmax_: y4 });
function b4(r, e = null, t6 = false) {
  let o = v(r, "x", "logSumExp"), n = Qa(e, o.shape), s = Us(o, n, true), a = Ne(o, s), i = Co(a), p = et(i, n), u = Da(p), c = xe(z(s, u.shape), u);
  if (t6) {
    let l = Aa(c.shape, n);
    return z(c, l);
  }
  return c;
}
var hd = N({ logSumExp_: b4 });
function C4(r, e) {
  let t6 = v(r, "a", "logicalAnd", "bool"), o = v(e, "b", "logicalAnd", "bool");
  Je(t6.shape, o.shape);
  let n = { a: t6, b: o };
  return T.runKernel(gn, n);
}
var lu = N({ logicalAnd_: C4 });
function S4(r) {
  let t6 = { x: v(r, "x", "logicalNot", "bool") };
  return T.runKernel(xn, t6);
}
var gd = N({ logicalNot_: S4 });
function w4(r, e) {
  let t6 = v(r, "a", "logicalOr", "bool"), o = v(e, "b", "logicalOr", "bool");
  Je(t6.shape, o.shape);
  let n = { a: t6, b: o };
  return T.runKernel(xa, n);
}
var xd = N({ logicalOr_: w4 });
function I4(r, e) {
  let t6 = v(r, "a", "logicalXor", "bool"), o = v(e, "b", "logicalXor", "bool");
  return Je(t6.shape, o.shape), lu(xd(r, e), gd(lu(r, e)));
}
var gk = N({ logicalXor_: I4 });
var yd = 2147483648;
function v4(r, e, t6 = "left") {
  let o = v(r, "sortedSequence", "searchSorted"), n = v(e, "values", "searchSorted"), s = o.shape[o.shape.length - 1], a = n.shape[n.shape.length - 1], i = z(o, [-1, s]), p = z(n, [-1, a]);
  if (i.rank < 2)
    throw new Error("Sorted input argument must be at least 2-dimensional");
  if (i.shape[0] !== p.shape[0])
    throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");
  if (ze(p.shape) >= yd)
    throw new Error(`values tensor size must less than ${yd}`);
  if (i.shape[1] >= yd)
    throw new Error(`trailing dim_size must less than ${yd} for int32 output type, was ${i.shape[1]}`);
  let u = { sortedSequence: i, values: p }, c = { side: t6 };
  return T.runKernel(ii, u, c);
}
var al = N({ searchSorted_: v4 });
function xk(r, e) {
  return al(r, e, "left");
}
function k4(r, e, t6, o, n) {
  let s = v(r, "x", "maxPool"), a = 1, i = s, p = false;
  s.rank === 3 && (p = true, i = z(s, [1, s.shape[0], s.shape[1], s.shape[2]])), E(i.rank === 4, () => `Error in maxPool: input must be rank 4 but got rank ${i.rank}.`), E(lr(t6, a), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${t6} and dilations '${a}'`), Pt("maxPool", o, n);
  let u = { x: i }, c = { filterSize: e, strides: t6, pad: o, dimRoundingMode: n }, l = T.runKernel(Cn, u, c);
  return p ? z(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
}
var bd = N({ maxPool_: k4 });
function N4(r, e = [1, 1, 1], t6, o, n, s = "NDHWC") {
  let a = v(r, "x", "maxPool3d"), i = a, p = false;
  a.rank === 4 && (p = true, i = z(a, [1, a.shape[0], a.shape[1], a.shape[2], a.shape[3]])), E(i.rank === 5, () => `Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`), E(s === "NDHWC", () => `Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`), Pt("maxPool3d", o, n);
  let u = { x: i }, c = { filterSize: e, strides: t6, pad: o, dimRoundingMode: n, dataFormat: s }, l = T.runKernel(bp, u, c);
  return p ? z(l, [l.shape[1], l.shape[2], l.shape[3], l.shape[4]]) : l;
}
var yk = N({ maxPool3d_: N4 });
function T4(r, e, t6, o, n = false) {
  let a = { x: v(r, "x", "maxPoolWithArgmax") }, i = { filterSize: e, strides: t6, pad: o, includeBatchInIndex: n }, p = T.runKernel(Cp, a, i);
  return { result: p[0], indexes: p[1] };
}
var bk = N({ maxPoolWithArgmax_: T4 });
function _4(r, e) {
  let t6 = v(r, "a", "maximum"), o = v(e, "b", "maximum");
  [t6, o] = Re(t6, o), t6.dtype === "bool" && (t6 = Ke(t6, "int32"), o = Ke(o, "int32")), Je(t6.shape, o.shape);
  let n = { a: t6, b: o };
  return T.runKernel(bn, n);
}
var Cd = N({ maximum_: _4 });
function E4(r, e = null, t6 = false) {
  let n = { x: v(r, "x", "mean") }, s = { axis: e, keepDims: t6 };
  return T.runKernel(Sn, n, s);
}
var mu = N({ mean_: E4 });
function Vr(r, e = "float32") {
  if (yt(r), e === "complex64") {
    let o = Vr(r, "float32"), n = Vr(r, "float32");
    return Tr(o, n);
  }
  let t6 = ap(ze(r), e);
  return T.makeTensor(t6, r, e);
}
function Gs(r, e = "float32") {
  if (yt(r), e === "complex64") {
    let o = Gs(r, "float32"), n = Vr(r, "float32");
    return Tr(o, n);
  }
  let t6 = zc(ze(r), e);
  return T.makeTensor(t6, r, e);
}
function Ck(r, e, { indexing: t6 = "xy" } = {}) {
  if (t6 !== "xy" && t6 !== "ij")
    throw new TypeError(`${t6} is not a valid third argument to meshgrid`);
  if (r === void 0)
    return [];
  let o = v(r, "x", "meshgrid", r instanceof it ? r.dtype : "float32");
  if (e === void 0)
    return [o];
  let n = v(e, "y", "meshgrid", e instanceof it ? e.dtype : "float32"), s = ze(o.shape), a = ze(n.shape);
  return t6 === "xy" ? (o = z(o, [1, -1]), n = z(n, [-1, 1]), [Xe(Gs([a, 1], o.dtype), o), Xe(n, Gs([1, s], n.dtype))]) : (o = z(o, [-1, 1]), n = z(n, [1, -1]), [Xe(o, Gs([1, a], o.dtype)), Xe(Gs([s, 1], n.dtype), n)]);
}
function $4(r, e) {
  let t6 = v(r, "a", "minimum"), o = v(e, "b", "minimum");
  [t6, o] = Re(t6, o), t6.dtype === "bool" && (t6 = Ke(t6, "int32"), o = Ke(o, "int32")), Je(t6.shape, o.shape);
  let n = { a: t6, b: o };
  return T.runKernel(In, n);
}
var Sd = N({ minimum_: $4 });
function A4(r, e, t6) {
  E(t6 === "reflect" || t6 === "symmetric", () => `Invalid mode. Mode must be either reflect or symmetric. Got ${t6}.`);
  let o = v(r, "x", "mirrorPad");
  if (o.rank === 0)
    throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");
  E(e.length === o.rank, () => `Padding doesn't match input. Must be ${o.rank}. Got ${e.length}.`);
  let n = t6 === "reflect" ? 1 : 0;
  for (let i = 0; i < o.rank; i++)
    E(e[i].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), E(e[i][0] >= 0 && e[i][0] <= o.shape[i] - n && e[i][1] >= 0 && e[i][1] <= o.shape[i] - n, () => `Padding in dimension ${i} cannot be greater than or equal to ${o.shape[i] - n} or less than 0 for input of shape ${o.shape}`);
  let s = { paddings: e, mode: t6 }, a = { x: o };
  return T.runKernel(vn, a, s);
}
var Sk = N({ mirrorPad_: A4 });
function R4(r, e) {
  let t6 = v(r, "a", "mod"), o = v(e, "b", "mod");
  [t6, o] = Re(t6, o);
  let n = { a: t6, b: o };
  return T.runKernel(ya, n);
}
var wk = N({ mod_: R4 });
function F4(r, e = null, t6 = false) {
  r = v(r, "x", "moments");
  let o = Qa(e, r.shape), n = mu(r, o, t6), s = n.shape;
  t6 || (s = Aa(n.shape, o));
  let a = Qt(Ne(Ke(r, "float32"), z(n, s))), i = mu(a, o, t6);
  return { mean: n, variance: i };
}
var Ik = N({ moments_: F4 });
function D4(r, e, t6, o) {
  let n = v(e, "data", "multiRNNCell"), s = Na(t6, "c", "multiRNNCell"), a = Na(o, "h", "multiRNNCell"), i = n, p = [];
  for (let l = 0; l < r.length; l++) {
    let m = r[l](i, s[l], a[l]);
    p.push(m[0]), p.push(m[1]), i = m[1];
  }
  let u = [], c = [];
  for (let l = 0; l < p.length; l += 2)
    u.push(p[l]), c.push(p[l + 1]);
  return [u, c];
}
var vk = N({ multiRNNCell_: D4 });
function O4(r, e, t6, o = false) {
  let n = v(r, "logits", "multinomial"), s = n.size, a = n.rank;
  if (s < 2)
    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);
  if (a > 2)
    throw new Error(`Rank of probabilities must be 1 or 2, but is ${a}`);
  t6 = t6 || Math.random();
  let p = { logits: a === 1 ? z(n, [1, -1]) : n }, u = { numSamples: e, seed: t6, normalized: o }, c = T.runKernel(Sp, p, u);
  return a === 1 ? z(c, [c.size]) : c;
}
var kk = N({ multinomial_: O4 });
function P4(r, e) {
  let t6 = v(r, "a", "notEqual", "string_or_numeric"), o = v(e, "b", "notEqual", "string_or_numeric");
  [t6, o] = Re(t6, o), Je(t6.shape, o.shape);
  let n = { a: t6, b: o };
  return T.runKernel(Nn, n);
}
var wd = N({ notEqual_: P4 });
function M4(r) {
  let t6 = { x: v(r, "x", "onesLike") };
  return T.runKernel(Is, t6);
}
var Nk = N({ onesLike_: M4 });
function L4(r, e) {
  let t6 = v(r, "v1", "outerProduct"), o = v(e, "v2", "outerProduct");
  E(t6.rank === 1 && o.rank === 1, () => `Error in outerProduct: inputs must be rank 1, but got ranks ${t6.rank} and ${o.rank}.`);
  let n = z(t6, [-1, 1]), s = z(o, [1, -1]);
  return Xe(n, s);
}
var Tk = N({ outerProduct_: L4 });
function B4(r, e, t6 = 0) {
  let o = v(r, "x", "pad");
  if (o.rank === 0)
    throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");
  let n = { paddings: e, constantValue: t6 }, s = { x: o };
  return T.runKernel($n, s, n);
}
var Hs = N({ pad_: B4 });
function V4(r, e, t6 = 0) {
  return E(e.length === 2, () => "Invalid number of paddings. Must be length of 2."), Hs(r, [e], t6);
}
var _k = N({ pad1d_: V4 });
function z4(r, e, t6 = 0) {
  return E(e.length === 2 && e[0].length === 2 && e[1].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Hs(r, e, t6);
}
var Ek = N({ pad2d_: z4 });
function W4(r, e, t6 = 0) {
  return E(e.length === 3 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Hs(r, e, t6);
}
var $k = N({ pad3d_: W4 });
function U4(r, e, t6 = 0) {
  return E(e.length === 4 && e[0].length === 2 && e[1].length === 2 && e[2].length === 2 && e[3].length === 2, () => "Invalid number of paddings. Must be length of 2 each."), Hs(r, e, t6);
}
var Ak = N({ pad4d_: U4 });
function G4(r, e, t6) {
  let o = v(r, "x", "spaceToBatchND");
  E(o.rank >= 1 + e.length, () => `input rank ${o.rank} should be > than [blockShape] ${e.length}`), E(t6.length === e.length, () => `paddings.shape[0] ${t6.length} must be equal to [blockShape] ${e.length}`), E(o.shape.reduce((a, i, p) => p > 0 && p <= e.length ? a && (i + t6[p - 1][0] + t6[p - 1][1]) % e[p - 1] === 0 : a, true), () => `input spatial dimensions ${o.shape.slice(1)} with paddings ${t6.toString()} must be divisible by blockShapes ${e.toString()}`);
  let n = { x: o }, s = { blockShape: e, paddings: t6 };
  return T.runKernel(Es, n, s);
}
var Id = N({ spaceToBatchND_: G4 });
function H4(r, e, t6, o, n, s, a) {
  n == null && (n = [1, 1]), s == null && (s = 1), o === 0 && (o = "valid");
  let i = v(r, "x", "maxPool"), p = i, u = false;
  i.rank === 3 && (u = true, p = z(i, [1, i.shape[0], i.shape[1], i.shape[2]])), E(lr(s, n), () => `Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${n}'`);
  let c = aC(p.shape, e, s, n, o), l = [c.dilationHeight, c.dilationWidth], m;
  o === "same" ? m = K4([c.filterHeight, c.filterWidth], l) : m = [[0, 0], [0, 0]];
  let d = l[0] === 1 && l[1] === 1, [f, h] = q4([c.inHeight, c.inWidth], l, m), g = d ? o : "valid", x = d ? p : Id(p, l, f), C = (t6 === "avg" ? () => td(x, e, s, g, a) : () => bd(x, e, s, g, a))(), w = d ? C : rd(C, l, h);
  return u ? z(w, [w.shape[1], w.shape[2], w.shape[3]]) : w;
}
function q4(r, e, t6) {
  let o = t6.map((c) => c[0]), n = t6.map((c) => c[1]), s = r.concat(o, n), a = e.map((c, l) => (c - s[l] % c) % c), i = n.map((c, l) => c + a[l]), p = e.map((c, l) => [o[l], i[l]]), u = e.map((c, l) => [0, a[l]]);
  return [p, u];
}
function K4(r, e) {
  let o = r.map((a, i) => a + (a - 1) * (e[i] - 1)).map((a) => a - 1), n = o.map((a) => Math.floor(a / 2)), s = o.map((a, i) => a - n[i]);
  return o.map((a, i) => [n[i], s[i]]);
}
var Rk = N({ pool_: H4 });
function j4(r, e) {
  let t6 = v(r, "x", "prelu"), o = v(e, "alpha", "prelu"), n = { x: t6, alpha: o };
  return T.runKernel(Rn, n);
}
var vd = N({ prelu_: j4 });
function X4(r, e = null, t6 = false) {
  let o = v(r, "x", "prod");
  o.dtype === "bool" && (o = Ke(o, "int32"));
  let n = { x: o }, s = { axis: e, keepDims: t6 };
  return T.runKernel(Fn, n, s);
}
var Fk = N({ prod_: X4 });
function Y4(r, e, t6, o) {
  let n = r.map((c, l) => v(c, `tensors${l}`, "raggedGather", "int32")), s = v(e, "paramsDenseValues", "raggedGather"), a = v(t6, "indices", "raggedGather", "int32"), i = { paramsNestedSplits: n, paramsDenseValues: s, indices: a }, p = { outputRaggedRank: o }, u = T.runKernel(wp, i, p);
  return { outputNestedSplits: u.slice(0, u.length - 1), outputDenseValues: u[u.length - 1] };
}
var Dk = N({ raggedGather_: Y4 });
function Q4(r, e, t6) {
  let o = v(r, "starts", "raggedRange"), n = v(e, "limits", "raggedRange", o.dtype), s = v(t6, "deltas", "raggedRange", o.dtype), a = { starts: o, limits: n, deltas: s }, i = T.runKernel(Ip, a);
  return { rtNestedSplits: i[0], rtDenseValues: i[1] };
}
var Ok = N({ raggedRange_: Q4 });
function Z4(r, e, t6, o, n) {
  let s = v(r, "shape", "raggedTensorToTensor", "int32"), a = v(e, "values", "raggedTensorToTensor"), i = v(t6, "defaultValue", "raggedTensorToTensor", a.dtype), p = o.map((l, m) => v(l, `tensors${m}`, "raggedTensorToTensor", "int32")), u = { shape: s, values: a, defaultValue: i, rowPartitionTensors: p }, c = { rowPartitionTypes: n };
  return T.runKernel(vp, u, c);
}
var Pk = N({ raggedTensorToTensor_: Z4 });
function J4(r, e, t6) {
  yt(r);
  let o = ze(r), n = null;
  if (t6 == null || t6 === "float32")
    n = new Float32Array(o);
  else if (t6 === "int32")
    n = new Int32Array(o);
  else if (t6 === "bool")
    n = new Uint8Array(o);
  else
    throw new Error(`Unknown data type ${t6}`);
  for (let s = 0; s < o; s++)
    n[s] = e();
  return T.makeTensor(n, r, t6);
}
var Mk = N({ rand_: J4 });
var _d = rp(gC());
var fu = class {
  constructor(e, t6, o, n, s) {
    this.mean = e, this.stdDev = t6, this.dtype = o, this.nextVal = NaN, this.truncated = n, this.truncated && (this.upper = this.mean + this.stdDev * 2, this.lower = this.mean - this.stdDev * 2);
    let a = s || Math.random();
    this.random = _d.alea(a.toString());
  }
  nextValue() {
    if (!isNaN(this.nextVal)) {
      let n = this.nextVal;
      return this.nextVal = NaN, n;
    }
    let e, t6, o = false;
    for (; !o; ) {
      let n, s, a;
      do
        n = 2 * this.random() - 1, s = 2 * this.random() - 1, a = n * n + s * s;
      while (a >= 1 || a === 0);
      let i = Math.sqrt(-2 * Math.log(a) / a);
      e = this.mean + this.stdDev * n * i, t6 = this.mean + this.stdDev * s * i, (!this.truncated || this.isValidTruncated(e)) && (o = true);
    }
    return (!this.truncated || this.isValidTruncated(t6)) && (this.nextVal = this.convertValue(t6)), this.convertValue(e);
  }
  convertValue(e) {
    return this.dtype == null || this.dtype === "float32" ? e : Math.round(e);
  }
  isValidTruncated(e) {
    return e <= this.upper && e >= this.lower;
  }
};
var Nd = class {
  constructor(e, t6, o, n) {
    this.alpha = e, this.beta = 1 / t6, this.dtype = o;
    let s = n || Math.random();
    this.randu = _d.alea(s.toString()), this.randn = new fu(0, 1, o, false, this.randu()), e < 1 ? this.d = e + 2 / 3 : this.d = e - 1 / 3, this.c = 1 / Math.sqrt(9 * this.d);
  }
  nextValue() {
    let e, t6, o, n, s, a;
    for (; ; ) {
      do
        n = this.randn.nextValue(), a = 1 + this.c * n;
      while (a <= 0);
      if (a *= a * a, e = n * n, t6 = 1 - 0.331 * e * e, o = 0.5 * e + this.d * (1 - a + Math.log(a)), s = this.randu(), s < t6 || Math.log(s) < o)
        break;
    }
    return a = 1 / this.beta * this.d * a, this.alpha < 1 && (a *= Math.pow(this.randu(), 1 / this.alpha)), this.convertValue(a);
  }
  convertValue(e) {
    return this.dtype === "float32" ? e : Math.round(e);
  }
};
var Td = class {
  constructor(e = 0, t6 = 1, o, n) {
    if (this.canReturnFloat = () => this.dtype == null || this.dtype === "float32", this.min = e, this.range = t6 - e, this.dtype = o, n == null && (n = Math.random()), typeof n == "number" && (n = n.toString()), !this.canReturnFloat() && this.range <= 1)
      throw new Error(`The difference between ${e} - ${t6} <= 1 and dtype is not float`);
    this.random = _d.alea(n);
  }
  convertValue(e) {
    return this.canReturnFloat() ? e : Math.round(e);
  }
  nextValue() {
    return this.convertValue(this.min + this.range * this.random());
  }
};
function aG(r, e, t6 = 1, o = "float32", n) {
  if (yt(r), t6 == null && (t6 = 1), o == null && (o = "float32"), o !== "float32" && o !== "int32")
    throw new Error(`Unsupported data type ${o}`);
  let s = new Nd(e, t6, o, n), a = le(r, o);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = s.nextValue();
  return a.toTensor();
}
var e1 = N({ randomGamma_: aG });
function iG(r, e = 0, t6 = 1, o, n) {
  if (yt(r), o != null && o === "bool")
    throw new Error(`Unsupported data type ${o}`);
  let s = new fu(e, t6, o, false, n), a = le(r, o);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = s.nextValue();
  return a.toTensor();
}
var Ed = N({ randomNormal_: iG });
function uG(r, e, t6) {
  if (e != null && e === "bool")
    throw new Error(`Unsupported data type ${e}`);
  return Ed(r, 0, 1, e, t6);
}
var t1 = N({ randomStandardNormal_: uG });
function pG(r, e = 0, t6 = 1, o = "float32", n) {
  yt(r);
  let s = le(r, o), a = new Td(e, t6, null, n);
  for (let i = 0; i < s.values.length; i++)
    s.values[i] = a.nextValue();
  return s.toTensor();
}
var $d = N({ randomUniform_: pG });
function Ni(r, e, t6 = 1, o = "float32") {
  if (t6 === 0)
    throw new Error("Cannot have a step of zero");
  let n = { start: r, stop: e, step: t6, dtype: o };
  return T.runKernel(ks, {}, n);
}
function cG(r) {
  let t6 = { x: v(r, "x", "reciprocal") };
  return T.runKernel(Dn, t6);
}
var r1 = N({ reciprocal_: cG });
function lG(r) {
  let t6 = { x: v(r, "x", "relu") };
  return T.runKernel(On, t6);
}
var Ti = N({ relu_: lG });
function mG(r) {
  let t6 = { x: v(r, "x", "relu6") };
  return T.runKernel(Ln, t6);
}
var Ad = N({ relu6_: mG });
function dG(r, e) {
  let o = { x: v(r, "x", "reverse") }, n = { dims: e };
  return T.runKernel(Bn, o, n);
}
var no = N({ reverse_: dG });
function fG(r) {
  let e = v(r, "x", "reverse");
  return E(e.rank === 1, () => `Error in reverse1D: x must be rank 1 but got rank ${e.rank}.`), no(e, 0);
}
var o1 = N({ reverse1d_: fG });
function hG(r, e) {
  let t6 = v(r, "x", "reverse");
  return E(t6.rank === 2, () => `Error in reverse2D: x must be rank 2 but got rank ${t6.rank}.`), no(t6, e);
}
var n1 = N({ reverse2d_: hG });
function gG(r, e) {
  let t6 = v(r, "x", "reverse");
  return E(t6.rank === 3, () => `Error in reverse3D: x must be rank 3 but got rank ${t6.rank}.`), no(t6, e);
}
var s1 = N({ reverse3d_: gG });
function xG(r, e) {
  let t6 = v(r, "x", "reverse");
  return E(t6.rank === 4, () => `Error in reverse4D: x must be rank 4 but got rank ${t6.rank}.`), no(t6, e);
}
var a1 = N({ reverse4d_: xG });
function yG(r) {
  let t6 = { x: v(r, "x", "round") };
  return T.runKernel(Ca, t6);
}
var Rd = N({ round_: yG });
function bG(r) {
  let t6 = { x: v(r, "x", "rsqrt", "float32") };
  return T.runKernel(Vn, t6);
}
var i1 = N({ rsqrt_: bG });
function CG(r) {
  let t6 = { x: v(r, "x", "selu") };
  return T.runKernel(Xi, t6);
}
var u1 = N({ selu_: CG });
function SG(r, e, t6, o, n, s = [1, 1], a = "NHWC") {
  let i = v(r, "x", "separableConv2d"), p = v(e, "depthwiseFilter", "separableConv2d"), u = v(t6, "pointwiseFilter", "separableConv2d"), c = i, l = false;
  if (i.rank === 3 && (l = true, c = z(i, [1, i.shape[0], i.shape[1], i.shape[2]])), a === "NCHW")
    throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");
  E(c.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got rank ${c.rank}.`), E(p.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but got rank ${p.rank}.`), E(u.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but got rank ${p.rank}.`), E(u.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${u.shape[0]}.`), E(u.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${u.shape[1]}.`);
  let m = p.shape[2], d = p.shape[3];
  E(u.shape[2] === m * d, () => `Error in separableConv2d: the third dimension of pointwise filter must be ${m * d}, but got ${u.shape[2]}.`);
  let f = Bp(c, p, o, n, a, s), g = vi(f, u, 1, "valid", a);
  return l ? z(g, [g.shape[1], g.shape[2], g.shape[3]]) : g;
}
var p1 = N({ separableConv2d_: SG });
async function wG(r, e) {
  let t6 = v(r, "x", "setdiff1d"), o = v(e, "y", "setdiff1d");
  E(t6.dtype === o.dtype, () => `x and y should have the same dtype, but got x (${t6.dtype}) and y (${o.dtype}).`), E(t6.rank === 1, () => `x should be 1D tensor, but got x (${t6.shape}).`), E(o.rank === 1, () => `y should be 1D tensor, but got y (${o.shape}).`);
  let n = await t6.data(), s = await o.data(), a = new Set(s), i = 0;
  for (let c = 0; c < n.length; c++)
    a.has(n[c]) || i++;
  let p = new st([i], t6.dtype), u = new st([i], "int32");
  for (let c = 0, l = 0; c < n.length; c++)
    a.has(n[c]) || (p.values[l] = n[c], u.values[l] = c, l++);
  return [p.toTensor(), u.toTensor()];
}
var c1 = wG;
function IG(r) {
  let t6 = { x: v(r, "x", "sign") };
  return T.runKernel(Yi, t6);
}
var l1 = N({ sign_: IG });
function vG(r) {
  let t6 = { x: v(r, "x", "sin", "float32") };
  return T.runKernel(Wn, t6);
}
var m1 = N({ sin_: vG });
function kG(r) {
  let t6 = { x: v(r, "x", "sinh") };
  return T.runKernel(Sa, t6);
}
var d1 = N({ sinh_: kG });
function NG(r, e, t6) {
  let o = v(r, "x", "slice1d");
  return E(o.rank === 1, () => `slice1d expects a rank-1 tensor, but got a rank-${o.rank} tensor`), He(o, [e], [t6]);
}
var f1 = N({ slice1d_: NG });
function TG(r, e, t6) {
  let o = v(r, "x", "slice2d");
  return E(o.rank === 2, () => `slice2d expects a rank-2 tensor, but got a rank-${o.rank} tensor`), He(o, e, t6);
}
var h1 = N({ slice2d_: TG });
function _G(r, e, t6) {
  let o = v(r, "x", "slice3d");
  return E(o.rank === 3, () => `slice3d expects a rank-3 tensor, but got a rank-${o.rank} tensor`), He(o, e, t6);
}
var g1 = N({ slice3d_: _G });
function EG(r, e, t6) {
  let o = v(r, "x", "slice4d");
  return E(o.rank === 4, () => `slice4d expects a rank-4 tensor, but got a rank-${o.rank} tensor`), He(o, e, t6);
}
var x1 = N({ slice4d_: EG });
function $G(r, e = -1) {
  let t6 = v(r, "logits", "softmax", "float32");
  if (e === -1 && (e = t6.rank - 1), e !== t6.rank - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${t6.rank} and dim was ${e}`);
  let o = { logits: t6 }, n = { dim: e };
  return T.runKernel(qn, o, n);
}
var y1 = N({ softmax_: $G });
function AG(r) {
  E(r.dtype === "complex64", () => `The dtype for tf.spectral.fft() must be complex64 but got ${r.dtype}.`);
  let e = { input: r };
  return T.runKernel(oi, e);
}
var zp = N({ fft_: AG });
function RG(r) {
  E(r.dtype === "complex64", () => `The dtype for tf.spectral.ifft() must be complex64 but got ${r.dtype}.`);
  let e = { input: r };
  return T.runKernel(ni, e);
}
var hu = N({ ifft_: RG });
function FG(r) {
  let e = r.shape[r.shape.length - 1], t6 = r.size / e, o;
  if (e <= 2) {
    let n = z(r, [t6, e]);
    o = hu(n);
  } else {
    let n = [t6, 2 * (e - 1)], s = z($a(r), [t6, e]), a = z(Si(r), [t6, e]), i = no(He(s, [0, 1], [t6, e - 2]), 1), p = ae(no(He(a, [0, 1], [t6, e - 2]), 1), be(-1)), u = gt([s, i], 1), c = gt([a, p], 1), l = z(Tr(u, c), [n[0], n[1]]);
    o = hu(l);
  }
  if (o = $a(o), r.rank === 3 && r.shape[0] !== 0) {
    let n = o, s = r.shape[0];
    o = z(o, [s, o.shape[0] / s, o.shape[1]]), n.dispose();
  }
  return o;
}
var Fd = N({ irfft_: FG });
function DG(r, e, t6 = 0) {
  let n = { x: v(r, "x", "split") }, s = { numOrSizeSplits: e, axis: t6 };
  return T.runKernel($s, n, s);
}
var Oa = N({ split_: DG });
function OG(r, e) {
  E(r.dtype === "float32", () => `The dtype for rfft() must be real value but got ${r.dtype}`);
  let t6 = r.shape[r.shape.length - 1], o = r.size / t6, n;
  if (e != null && e < t6) {
    let f = r.shape.map((g) => 0), h = r.shape.map((g) => g);
    h[r.shape.length - 1] = e, n = He(r, f, h), t6 = e;
  } else if (e != null && e > t6) {
    let f = r.shape.map((h) => h);
    f[r.shape.length - 1] = e - t6, n = gt([r, Vr(f)], r.shape.length - 1), t6 = e;
  } else
    n = r;
  let s = Ut(n), a = z(Tr(n, s), [o, t6]), i = zp(a), p = Math.floor(t6 / 2) + 1, u = $a(i), c = Si(i), l = Oa(u, [p, t6 - p], u.shape.length - 1), m = Oa(c, [p, t6 - p], c.shape.length - 1), d = n.shape.slice();
  return d[n.shape.length - 1] = p, z(Tr(l[0], m[0]), d);
}
var Wp = N({ rfft_: OG });
function PG(r, e) {
  let t6 = v(r, "a", "squaredDifference"), o = v(e, "b", "squaredDifference");
  [t6, o] = Re(t6, o), Je(t6.shape, o.shape);
  let n = { a: t6, b: o }, s = {};
  return T.runKernel(Kn, n, s);
}
var Dd = N({ squaredDifference_: PG });
function MG(r, e) {
  let t6 = v(r, "x", "squeeze", "string_or_numeric");
  return z(t6, pb(t6.shape, e).newShape);
}
var Up = N({ squeeze_: MG });
function LG(r, e = 0) {
  let t6 = Na(r, "tensors", "stack", "string_or_numeric");
  E(t6.length >= 1, () => "Pass at least one tensor to tf.stack"), t6.length > 0 && E(e <= t6[0].rank, () => "Axis must be <= rank of the tensor");
  let o = t6, n = { axis: e };
  return T.runKernel(vs, o, n);
}
var Sr = N({ stack_: LG });
function BG(r, e = 0) {
  let o = { x: v(r, "x", "step") }, n = { alpha: e };
  return T.runKernel(Ds, o, n);
}
var Od = N({ step_: BG });
function VG(r, e, t6, o, n = 0, s = 0, a = 0, i = 0, p = 0) {
  let c = { x: v(r, "x", "stridedSlice", "string_or_numeric") }, l = { begin: e, end: t6, strides: o, beginMask: n, endMask: s, ellipsisMask: a, newAxisMask: i, shrinkAxisMask: p };
  return T.runKernel(jn, c, l);
}
var b1 = N({ stridedSlice_: VG });
function zG(r) {
  let t6 = { x: v(r, "x", "tan", "float32") };
  return T.runKernel(Yn, t6);
}
var C1 = N({ tan_: zG });
function mr(r, e) {
  Jr(r);
  let t6 = or(r, e);
  if (t6.length !== 1)
    throw new Error("tensor1d() requires values to be a flat/TypedArray");
  return xr(r, null, t6, e);
}
function _i(r, e, t6) {
  if (Jr(r), e != null && e.length !== 2)
    throw new Error("tensor2d() requires shape to have two numbers");
  let o = or(r, t6);
  if (o.length !== 2 && o.length !== 1)
    throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");
  if (o.length === 1 && e == null)
    throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");
  return xr(r, e, o, t6);
}
function S1(r, e, t6) {
  if (Jr(r), e != null && e.length !== 4)
    throw new Error("tensor4d() requires shape to have four numbers");
  let o = or(r, t6);
  if (o.length !== 4 && o.length !== 1)
    throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");
  if (o.length === 1 && e == null)
    throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");
  return xr(r, e, o, t6);
}
function w1(r, e, t6) {
  if (Jr(r), e != null && e.length !== 5)
    throw new Error("tensor5d() requires shape to have five numbers");
  let o = or(r, t6);
  if (o.length !== 5 && o.length !== 1)
    throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");
  if (o.length === 1 && e == null)
    throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");
  return xr(r, e, o, t6);
}
function I1(r, e, t6) {
  if (Jr(r), e != null && e.length !== 6)
    throw new Error("tensor6d() requires shape to have six numbers");
  let o = or(r, t6);
  if (o.length !== 6 && o.length !== 1)
    throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");
  if (o.length === 1 && e == null)
    throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");
  return e = e || o, xr(r, e, o, t6);
}
function WG(r, e = 1, t6 = true) {
  let o = v(r, "x", "topk");
  if (o.rank === 0)
    throw new Error("topk() expects the input to be of rank 1 or higher");
  let n = o.shape[o.shape.length - 1];
  if (e < 0)
    throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);
  if (e > n)
    throw new Error(`'k' passed to topk() must be <= the last dimension (${n}) but got ${e}`);
  let s = { x: o }, a = { k: e, sorted: t6 }, [i, p] = T.runKernel(Zn, s, a);
  return { values: i, indices: p };
}
var v1 = N({ topk_: WG });
function UG(r, e = 0, t6 = 1, o, n) {
  if (yt(r), o != null && o === "bool")
    throw new Error("Unsupported data type $ { dtype }");
  let s = new fu(e, t6, o, true, n), a = le(r, o);
  for (let i = 0; i < a.values.length; i++)
    a.values[i] = s.nextValue();
  return a.toTensor();
}
var k1 = N({ truncatedNormal_: UG });
function GG(r, e = 0) {
  let t6 = v(r, "x", "unique", "string_or_numeric");
  E(t6.rank > 0, () => "The input tensor must be at least 1D");
  let o = { x: t6 }, n = { axis: e }, [s, a] = T.runKernel(kp, o, n);
  return { values: s, indices: a };
}
var N1 = N({ unique_: GG });
function HG(r, e, t6) {
  let o = v(r, "x", "unsortedSegmentSum"), n = v(e, "segmentIds", "unsortedSegmentSum", "int32");
  E(na(t6), () => "numSegments must be of dtype int");
  let s = { x: o, segmentIds: n }, a = { numSegments: t6 };
  return T.runKernel(Np, s, a);
}
var T1 = N({ unsortedSegmentSum_: HG });
function qG(r, e = 0) {
  let t6 = v(r, "x", "unstack", "string_or_numeric");
  E(e >= -t6.shape.length && e < t6.shape.length, () => `Axis = ${e} is not in [-${t6.shape.length}, ${t6.shape.length})`);
  let o = { value: t6 }, n = { axis: e };
  return T.runKernel(Rs, o, n);
}
var so = N({ unstack_: qG });
function _1(r, e) {
  return al(r, e, "right");
}
function E1(r, e = true, t6, o) {
  return T.makeVariable(r, e, t6, o);
}
function Pd(r, e) {
  let t6 = [];
  for (let s = 0; s < e.length; s++)
    e[s] && t6.push(s);
  let o = le(r, "int32"), n = le([t6.length, r.length], "int32");
  for (let s = 0; s < t6.length; s++) {
    let a = o.indexToLoc(t6[s]), i = s * r.length;
    n.values.set(a, i);
  }
  return n.toTensor();
}
async function KG(r) {
  let e = v(r, "condition", "whereAsync", "bool"), t6 = await e.data(), o = Pd(e.shape, t6);
  return r !== e && e.dispose(), o;
}
var Md = KG;
async function jG(r, e, t6) {
  let o = v(r, "tensor", "boolMask"), n = v(e, "mask", "boolMask", "bool"), s = t6 == null ? 0 : t6, a = n.rank, i = o.shape;
  E(a > 0, () => "mask cannot be scalar"), ht(i.slice(s, s + a), n.shape, "mask's shape must match the first K dimensions of tensor's shape,");
  let p = 1;
  for (let h = s; h < s + a; h++)
    p *= i[h];
  let u = i.slice(0, s).concat([p], i.slice(s + a)), c = z(o, u), l = z(n, [-1]), m = await Md(l), d = Up(m, [1]), f = pd(c, d, s);
  return r !== o && o.dispose(), e !== n && n.dispose(), d.dispose(), c.dispose(), l.dispose(), m.dispose(), f;
}
var XG = jG;
function YG(r, e, t6, o, n = true) {
  let s = v(r, "v", "movingAverage"), a = v(e, "x", "movingAverage"), i = v(t6, "decay", "movingAverage");
  Fb(s, a), E(Pr(s.shape, a.shape), () => "Shape mismatch in v and x");
  let p = be(1), u = Ne(p, i), c = ae(Ne(a, s), u);
  if (n) {
    E(o != null, () => "When using zeroDebias: true, step is required.");
    let l = v(o, "step", "movingAverage");
    c = Ge(c, Ne(p, Ra(i, l)));
  }
  return xe(s, c);
}
var QG = N({ movingAverage_: YG });
function ZG(r, e, t6) {
  yt(t6);
  let o = v(r, "indices", "scatterND", "int32"), n = v(e, "updates", "scatterND");
  Qm(n, o, t6);
  let s = { indices: o, updates: n }, a = { shape: t6 };
  return T.runKernel(zn, s, a);
}
var JG = N({ scatterND_: ZG });
function $1(r, e, t6, o) {
  if (r.dtype !== "int32")
    throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${r.dtype}.`);
  if (r.rank > 2)
    throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${r.shape}.`);
  let n = r.rank > 0 ? r.shape[0] : 1, s = r.rank > 1 ? r.shape[1] : 1;
  if (t6.length !== s)
    throw new Error(`outputShape has incorrect number of elements:, ${t6.length}, should be: ${s}.`);
  let a = e.size;
  if (!(e.rank === 0 || e.rank === 1 && a === n))
    throw new Error(`sparseValues has incorrect shape ${e.shape}, should be [] or [${n}]`);
  if (e.dtype !== o.dtype)
    throw new Error("sparseValues.dtype must match defaultValues.dtype");
}
function tH(r, e, t6, o = 0) {
  yt(t6);
  let n = v(r, "sparseIndices", "sparseToDense", "int32"), s = v(e, "sparseValues", "sparseToDense", "string_or_numeric"), a = v(o, "defaultValue", "sparseToDense", s.dtype);
  $1(n, s, t6, a);
  let i = { sparseIndices: n, sparseValues: s, defaultValue: a }, p = { outputShape: t6 };
  return T.runKernel(li, i, p);
}
var rH = N({ sparseToDense_: tH });
function oH(r, e) {
  let t6 = v(e, "indices", "gatherND", "int32"), n = { params: v(r, "x", "gatherND", "string_or_numeric"), indices: t6 };
  return T.runKernel(un, n);
}
var nH = N({ gatherND_: oH });
function A1(r, e) {
  if (e == null)
    return r.shape.slice();
  if (Pr(r.shape, e))
    return e;
  if (r.shape.length === e.length) {
    let t6 = [];
    for (let o = 0; o < r.shape.length; o++)
      e[o] == null && r.shape[o] != null ? t6.push(r.shape[o]) : t6.push(e[o]);
    return t6;
  }
  return e;
}
function sH(r, e, t6, o) {
  let n = v(r, "x", "dropout");
  if (E(n.dtype === "float32", () => `x has to be a floating point tensor since it's going to be scaled, but got a ${n.dtype} tensor instead.`), E(e >= 0 && e < 1, () => `rate must be a float in the range [0, 1), but got ${e}.`), e === 0)
    return r instanceof it ? n.clone() : n;
  let s = A1(n, t6), a = 1 - e, i = Ge(ud(xe($d(s, 0, 1, "float32", o), a)), a);
  return ae(n, i);
}
var aH = N({ dropout_: sH });
function xC(r) {
  return Math.floor(Math.pow(2, Math.ceil(Math.log(r) / Math.log(2))));
}
function il(r, e, t6) {
  let o = 1 - r % 2, n = new Float32Array(r);
  for (let s = 0; s < r; ++s) {
    let a = 2 * Math.PI * s / (r + o - 1);
    n[s] = e - t6 * Math.cos(a);
  }
  return mr(n, "float32");
}
async function iH(r, e, t6 = 1) {
  let o = v(r, "predictions", "inTopK"), n = v(e, "targets", "inTopK");
  E(o.rank > 1, () => `inTopK() expects the predictions to be of rank 2 or higher, but got ${o.rank}`), E(o.rank - 1 === n.rank, () => `predictions rank should be 1 larger than targets rank, but got predictions rank ${o.rank} and targets rank ${n.rank}`), ht(o.shape.slice(0, o.shape.length - 1), n.shape, "predictions's shape should be align with the targets' shape, except the last dimension.");
  let s = o.shape[o.shape.length - 1];
  E(t6 > 0 && t6 <= s, () => `'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${t6}`);
  let a = await o.data(), i = await n.data(), [p, u] = [a.length / s, s], c = cb("bool", p);
  for (let l = 0; l < p; l++) {
    let m = l * u, d = a.subarray(m, m + u), f = [];
    for (let h = 0; h < d.length; h++)
      f.push({ value: d[h], index: h });
    f.sort((h, g) => g.value - h.value), c[l] = 0;
    for (let h = 0; h < t6; h++)
      if (f[h].index === i[l]) {
        c[l] = 1;
        break;
      }
  }
  return r !== o && o.dispose(), e !== n && n.dispose(), nr(c, n.shape, "bool");
}
var uH = iH;
var yC = {};
Ue(yC, { conv2d: () => F1, depthwiseConv2d: () => P1, matMul: () => M1 });
function pH(r, e, t6, o, n, s = "NHWC", a) {
  let i = r;
  r.rank === 3 && (i = z(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let p = e;
  p.rank === 3 && (p = z(e, [1, e.shape[0], e.shape[1], e.shape[2]])), E(i.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`), E(p.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ${p.shape}.`), E(t6.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ${t6}.`);
  let u = s === "NHWC" ? i.shape[3] : i.shape[1], c = s === "NHWC" ? p.shape[3] : p.shape[1];
  E(u === t6[2], () => `Error in conv2dDerFilter: depth of input ${u}) must match input depth in filter (${t6[2]}.`), E(c === t6[3], () => `Error in conv2dDerFilter: depth of dy (${c}) must match output depth for filter (${t6[3]}).`), Pt("conv2dDerFilter", n, a);
  let l = { x: i, dy: p }, m = { strides: o, pad: n, dataFormat: s, dimRoundingMode: a, filterShape: t6 };
  return T.runKernel(cp, l, m);
}
var R1 = N({ conv2DBackpropFilter_: pH });
function gu(r, e, t6) {
  if (t6 == null || t6 === "linear")
    return r;
  if (t6 === "relu")
    return ae(r, Od(e));
  throw new Error(`Cannot compute gradient for fused activation ${t6}.`);
}
function xu(r, e) {
  let t6 = e, o = jm(r.shape, e.shape);
  return o.length > 0 && (t6 = et(t6, o)), z(t6, r.shape);
}
function yu(r, e, t6, o) {
  if (e === "linear")
    return r;
  if (e === "relu")
    return Ti(r);
  if (e === "elu")
    return ad(r);
  if (e === "relu6")
    return Ad(r);
  if (e === "prelu")
    return vd(r, t6);
  if (e === "leakyrelu")
    return ld(r, o);
  if (e === "sigmoid")
    return zs(r);
  throw new Error(`Unknown fused activation ${e}.`);
}
var bu = (r, e) => !(r > 0) || e === "linear";
function cH({ x: r, filter: e, strides: t6, pad: o, dataFormat: n = "NHWC", dilations: s = [1, 1], dimRoundingMode: a, bias: i, activation: p = "linear", preluActivationWeights: u, leakyreluAlpha: c }) {
  if (p = p || "linear", bu(T.state.gradientDepth, p) === false) {
    E(n === "NHWC", () => `Error in fused conv2d: got dataFormat of ${n} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);
    let _ = vi(r, e, t6, o, n, s, a);
    return i != null && (_ = xe(_, i)), yu(_, p, u, c);
  }
  let l = v(r, "x", "conv2d", "float32"), m = v(e, "filter", "conv2d", "float32"), d = l, f = false;
  l.rank === 3 && (f = true, d = z(l, [1, l.shape[0], l.shape[1], l.shape[2]])), E(d.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`), E(m.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ${m.rank}.`), Pt("fused conv2d", o, a);
  let h = n === "NHWC" ? d.shape[3] : d.shape[1];
  E(m.shape[2] === h, () => `Error in conv2d: depth of input (${h}) must match input depth for filter ${m.shape[2]}.`), E(lr(t6, s), () => `Error in conv2D: Either strides or dilations must be 1. Got strides ${t6} and dilations '${s}'`);
  let g = uu(d.shape, m.shape, t6, s, o, a), x;
  i != null && (x = v(i, "bias", "fused conv2d"), [x] = Re(x, l), n === "NHWC" ? Je(g.outShape, x.shape) : (E(x.shape.length <= 1, () => `Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${x.shape.length}.`), E(x.shape.length === 0 || x.shape[0] === g.outChannels || x.shape[0] === 1, () => `Error in fused conv2d: bias shape (${x.shape}) is not compatible with the number of output channels (${g.outChannels})`)));
  let b;
  if (u != null) {
    let _ = u.shape;
    if (E(_.length <= 1 || _.length === 3, () => `Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${_.length}.`), _.length === 1)
      E(_[0] === 1 || _[0] === g.outChannels, () => `Error in fused conv2d: PReLU activation weights (${_}) is not compatible with the number of output channels (${g.outChannels}).`);
    else if (_.length === 3)
      try {
        Je(_, g.outShape);
      } catch ($) {
        let A = `Error in fused conv2d: PReLU activation weights (${_}) is not compatible with the output shape of the conv2d (${g.outShape}).`;
        throw Error(A);
      }
    b = v(u, "prelu weights", "fused conv2d");
  }
  let C = (_, $) => {
    E(n === "NHWC", () => `Error in gradient of fused conv2D: got dataFormat of ${n} but only NHWC is currently supported.`);
    let [A, R, D, P] = $, M = gu(_, D, p);
    E(iu(s), () => `Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);
    let L = nd(R.shape, M, A, t6, o), W = R1(R, M, A.shape, t6, o), V = [L, W];
    if (P != null) {
      let U = xu(P, M);
      V.push(U);
    }
    return V;
  }, w = { x: d, filter: m, bias: x, preluActivationWeights: b }, k = { strides: t6, pad: o, dataFormat: n, dilations: s, dimRoundingMode: a, activation: p, leakyreluAlpha: c };
  return i == null ? Cr(($, A, R) => {
    let D = T.runKernel(ho, w, k);
    return R([A, $, D]), f && (D = z(D, [D.shape[1], D.shape[2], D.shape[3]])), { value: D, gradFunc: C };
  })(d, m) : Cr(($, A, R, D) => {
    let P = T.runKernel(ho, w, k);
    return D([A, $, P, R]), f && (P = z(P, [P.shape[1], P.shape[2], P.shape[3]])), { value: P, gradFunc: C };
  })(d, m, x);
}
var F1 = N({ fusedConv2d_: cH });
function lH(r, e, t6, o, n, s = [1, 1], a) {
  let i = r;
  r.rank === 3 && (i = z(r, [1, r.shape[0], r.shape[1], r.shape[2]]));
  let p = e;
  p.rank === 3 && (p = z(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  let u = { x: i, dy: p }, c = { strides: o, pad: n, dimRoundingMode: a, dilations: s, filterShape: t6 };
  return T.runKernel(dp, u, c);
}
var D1 = N({ depthwiseConv2dNativeBackpropFilter_: lH });
function mH(r, e, t6, o, n, s = [1, 1], a) {
  let i = e, p = false;
  e.rank === 3 && (p = true, i = z(e, [1, e.shape[0], e.shape[1], e.shape[2]]));
  let u = { dy: i, filter: t6 }, c = { strides: o, pad: n, dimRoundingMode: a, dilations: s, inputShape: r }, l = T.runKernel(fp, u, c);
  return p ? z(l, [l.shape[1], l.shape[2], l.shape[3]]) : l;
}
var O1 = N({ depthwiseConv2dNativeBackpropInput_: mH });
function dH({ x: r, filter: e, strides: t6, pad: o, dataFormat: n = "NHWC", dilations: s = [1, 1], dimRoundingMode: a, bias: i, activation: p = "linear", preluActivationWeights: u, leakyreluAlpha: c }) {
  if (bu(T.state.gradientDepth, p) === false) {
    let k = Bp(r, e, t6, o, n, s, a);
    return i != null && (k = xe(k, i)), yu(k, p, u, c);
  }
  let l = v(r, "x", "depthwiseConv2d", "float32"), m = v(e, "filter", "depthwiseConv2d", "float32"), d = l, f = false;
  l.rank === 3 && (f = true, d = z(l, [1, l.shape[0], l.shape[1], l.shape[2]])), E(d.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`), E(m.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${m.rank}.`), E(d.shape[3] === m.shape[2], () => `Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${m.shape[2]}.`), s == null && (s = [1, 1]), E(lr(t6, s), () => `Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${t6} and dilations '${s}'`), Pt("fused depthwiseConv2d", o, a);
  let h = uu(d.shape, m.shape, t6, s, o, a, true), g;
  i != null && (g = v(i, "bias", "fused conv2d"), [g] = Re(g, l), Je(h.outShape, g.shape));
  let x;
  u != null && (x = v(u, "prelu weights", "fused depthwiseConv2d"));
  let b = (k, _) => {
    E(iu(s), () => `Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);
    let [$, A, R, D] = _, P = gu(k, R, p), M = O1(A.shape, P, $, t6, o, s, a), L = D1(A, P, $.shape, t6, o, s, a);
    if (D != null) {
      let W = xu(g, P);
      return [M, L, W];
    }
    return [M, L];
  }, C = { x: d, filter: m, bias: g, preluActivationWeights: x }, w = { strides: t6, pad: o, dataFormat: n, dilations: s, dimRoundingMode: a, activation: p, leakyreluAlpha: c };
  return i == null ? Cr((_, $, A) => {
    let R = T.runKernel(go, C, w);
    return A([$, _, R]), f && (R = z(R, [R.shape[1], R.shape[2], R.shape[3]])), { value: R, gradFunc: b };
  })(d, m) : Cr((_, $, A, R) => {
    let D = T.runKernel(go, C, w);
    return R([$, _, D, A]), f && (D = z(D, [D.shape[1], D.shape[2], D.shape[3]])), { value: D, gradFunc: b };
  })(d, m, g);
}
var P1 = N({ fusedDepthwiseConv2d_: dH });
function fH({ a: r, b: e, transposeA: t6 = false, transposeB: o = false, bias: n, activation: s = "linear", preluActivationWeights: a, leakyreluAlpha: i = 0.2 }) {
  if (bu(T.state.gradientDepth, s) === false) {
    let P = Xe(r, e, t6, o);
    return n != null && (P = xe(P, n)), yu(P, s, a, i);
  }
  let p = v(r, "a", "fused matMul"), u = v(e, "b", "fused matMul");
  [p, u] = Re(p, u);
  let c = t6 ? p.shape[p.rank - 2] : p.shape[p.rank - 1], l = o ? u.shape[u.rank - 1] : u.shape[u.rank - 2], m = t6 ? p.shape[p.rank - 1] : p.shape[p.rank - 2], d = o ? u.shape[u.rank - 2] : u.shape[u.rank - 1], f = p.shape.slice(0, -2), h = u.shape.slice(0, -2), g = ze(f), x = ze(h);
  E(c === l, () => `Error in fused matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${p.shape} and ${u.shape} and transposeA=${t6} and transposeB=${o} must match.`);
  let C = Je(p.shape.slice(0, -2), u.shape.slice(0, -2)).concat([m, d]), w = t6 ? z(p, [g, c, m]) : z(p, [g, m, c]), k = o ? z(u, [x, d, l]) : z(u, [x, l, d]), _;
  n != null && (_ = v(n, "bias", "fused matMul"), [_] = Re(_, p), Je(C, _.shape));
  let $;
  a != null && ($ = v(a, "prelu weights", "fused matMul"));
  let A = (P, M) => {
    let [L, W, V, U] = M, q = gu(z(P, V.shape), V, s), H, j;
    if (!t6 && !o ? (H = Xe(q, W, false, true), j = Xe(L, q, true, false)) : !t6 && o ? (H = Xe(q, W, false, false), j = Xe(q, L, true, false)) : t6 && !o ? (H = Xe(W, q, false, true), j = Xe(L, q, false, false)) : (H = Xe(W, q, true, true), j = Xe(q, L, true, true)), n != null) {
      let X = xu(U, q);
      return [H, j, X];
    } else
      return [H, j];
  }, R = { a: w, b: k, bias: _, preluActivationWeights: $ }, D = { transposeA: t6, transposeB: o, activation: s, leakyreluAlpha: i };
  return n == null ? Cr((M, L, W) => {
    let V = T.runKernel(fo, R, D);
    return W([M, L, V]), { value: z(V, C), gradFunc: A };
  })(w, k) : Cr((M, L, W, V) => {
    let U = T.runKernel(fo, R, D);
    return V([M, L, U, W]), { value: z(U, C), gradFunc: A };
  })(w, k, _);
}
var M1 = N({ fusedMatMul_: fH });
function hH(r) {
  return il(r, 0.54, 0.46);
}
var L1 = N({ hammingWindow_: hH });
function gH(r) {
  return il(r, 0.5, 0.5);
}
var Ld = N({ hannWindow_: gH });
function xH(r, e, t6, o = false, n = 0) {
  let s = 0, a = [];
  for (; s + e <= r.size; )
    a.push(He(r, s, e)), s += t6;
  if (o)
    for (; s < r.size; ) {
      let i = s + e - r.size, p = gt([He(r, s, e - i), Ws([i], n)]);
      a.push(p), s += t6;
    }
  return a.length === 0 ? _i([], [0, e]) : z(gt(a), [a.length, e]);
}
var Bd = N({ frame_: xH });
function yH(r, e, t6, o, n = Ld) {
  o == null && (o = xC(e));
  let s = Bd(r, e, t6), a = ae(s, n(e));
  return Wp(a, o);
}
var B1 = N({ stft_: yH });
function bH(r, e, t6, o, n = "bilinear", s = 0) {
  let a = v(r, "image", "cropAndResize"), i = v(e, "boxes", "cropAndResize", "float32"), p = v(t6, "boxInd", "cropAndResize", "int32"), u = i.shape[0];
  E(a.rank === 4, () => `Error in cropAndResize: image must be rank 4,but got rank ${a.rank}.`), E(i.rank === 2 && i.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${u},4] but had shape ${i.shape}.`), E(p.rank === 1 && p.shape[0] === u, () => `Error in cropAndResize: boxInd must be have size [${u}] but had shape ${i.shape}.`), E(o.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got length ${o.length}.`), E(o[0] >= 1 && o[1] >= 1, () => `cropSize must be atleast [1,1], but was ${o}`), E(n === "bilinear" || n === "nearest", () => `method must be bilinear or nearest, but was ${n}`);
  let c = { image: a, boxes: i, boxInd: p }, l = { method: n, extrapolationValue: s, cropSize: o };
  return T.runKernel(Yo, c, l);
}
var V1 = N({ cropAndResize_: bH });
function CH(r) {
  let e = v(r, "image", "flipLeftRight", "float32");
  E(e.rank === 4, () => `Error in flipLeftRight: image must be rank 4,but got rank ${e.rank}.`);
  let t6 = { image: e };
  return T.runKernel(on, t6, {});
}
var z1 = N({ flipLeftRight_: CH });
function SH(r) {
  let e = v(r, "image", "grayscaleToRGB"), t6 = e.rank - 1, o = e.shape[t6];
  E(e.rank >= 2, () => `Error in grayscaleToRGB: images must be at least rank 2, but got rank ${e.rank}.`), E(o === 1, () => `Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${o}.`);
  let n = new Array(e.rank);
  return n.fill(1, 0, t6), n[t6] = 3, ki(e, n);
}
var W1 = N({ grayscaleToRGB_: SH });
function wH(r, e, t6 = 0, o = 0.5) {
  let n = v(r, "image", "rotateWithOffset", "float32");
  E(n.rank === 4, () => `Error in rotateWithOffset: image must be rank 4,but got rank ${n.rank}.`);
  let s = { image: n }, a = { radians: e, fillValue: t6, center: o };
  return T.runKernel(es, s, a);
}
var U1 = N({ rotateWithOffset_: wH });
function So(r, e, t6, o, n, s) {
  o == null && (o = 0.5), n == null && (n = Number.NEGATIVE_INFINITY), s == null && (s = 0);
  let a = r.shape[0];
  return t6 = Math.min(t6, a), E(0 <= o && o <= 1, () => `iouThreshold must be in [0, 1], but was '${o}'`), E(r.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${r.rank}'`), E(r.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${r.shape[1]}`), E(e.rank === 1, () => "scores must be a 1D tensor"), E(e.shape[0] === a, () => `scores has incompatible shape with boxes. Expected ${a}, but was ${e.shape[0]}`), E(0 <= s && s <= 1, () => `softNmsSigma must be in [0, 1], but was '${s}'`), { maxOutputSize: t6, iouThreshold: o, scoreThreshold: n, softNmsSigma: s };
}
function IH(r, e, t6, o = 0.5, n = Number.NEGATIVE_INFINITY) {
  let s = v(r, "boxes", "nonMaxSuppression", "float32"), a = v(e, "scores", "nonMaxSuppression", "float32"), i = So(s, a, t6, o, n);
  t6 = i.maxOutputSize, o = i.iouThreshold, n = i.scoreThreshold;
  let p = { maxOutputSize: t6, iouThreshold: o, scoreThreshold: n };
  return T.runKernel(Tn, { boxes: s, scores: a }, p);
}
var G1 = N({ nonMaxSuppression_: IH });
function H1(r, e, t6) {
  let o = vH(r, e, t6), n = o < 0 ? -(o + 1) : o;
  r.splice(n, 0, e);
}
function vH(r, e, t6) {
  return NH(r, e, t6 || kH);
}
function kH(r, e) {
  return r > e ? 1 : r < e ? -1 : 0;
}
function NH(r, e, t6) {
  let o = 0, n = r.length, s = 0, a = false;
  for (; o < n; ) {
    s = o + (n - o >>> 1);
    let i = t6(e, r[s]);
    i > 0 ? o = s + 1 : (n = s, a = !i);
  }
  return a ? o : -o - 1;
}
function Vd(r, e, t6, o, n) {
  return bC(r, e, t6, o, n, 0);
}
function zd(r, e, t6, o, n, s) {
  return bC(r, e, t6, o, n, 0, false, s, true);
}
function Wd(r, e, t6, o, n, s) {
  return bC(r, e, t6, o, n, s, true);
}
function bC(r, e, t6, o, n, s, a = false, i = false, p = false) {
  let u = [];
  for (let g = 0; g < e.length; g++)
    e[g] > n && u.push({ score: e[g], boxIndex: g, suppressBeginIndex: 0 });
  u.sort(q1);
  let c = s > 0 ? -0.5 / s : 0, l = [], m = [];
  for (; l.length < t6 && u.length > 0; ) {
    let g = u.pop(), { score: x, boxIndex: b, suppressBeginIndex: C } = g;
    if (x < n)
      break;
    let w = false;
    for (let k = l.length - 1; k >= C; --k) {
      let _ = TH(r, b, l[k]);
      if (_ >= o) {
        w = true;
        break;
      }
      if (g.score = g.score * _H(o, c, _), g.score <= n)
        break;
    }
    g.suppressBeginIndex = l.length, w || (g.score === x ? (l.push(b), m.push(g.score)) : g.score > n && H1(u, g, q1));
  }
  let d = l.length, f = t6 - d;
  i && f > 0 && (l.push(...new Array(f).fill(0)), m.push(...new Array(f).fill(0)));
  let h = { selectedIndices: l };
  return a && (h.selectedScores = m), p && (h.validOutputs = d), h;
}
function TH(r, e, t6) {
  let o = r.subarray(e * 4, e * 4 + 4), n = r.subarray(t6 * 4, t6 * 4 + 4), s = Math.min(o[0], o[2]), a = Math.min(o[1], o[3]), i = Math.max(o[0], o[2]), p = Math.max(o[1], o[3]), u = Math.min(n[0], n[2]), c = Math.min(n[1], n[3]), l = Math.max(n[0], n[2]), m = Math.max(n[1], n[3]), d = (i - s) * (p - a), f = (l - u) * (m - c);
  if (d <= 0 || f <= 0)
    return 0;
  let h = Math.max(s, u), g = Math.max(a, c), x = Math.min(i, l), b = Math.min(p, m), C = Math.max(x - h, 0) * Math.max(b - g, 0);
  return C / (d + f - C);
}
function _H(r, e, t6) {
  let o = Math.exp(e * t6 * t6);
  return t6 <= r ? o : 0;
}
function q1(r, e) {
  return r.score - e.score || r.score === e.score && e.boxIndex - r.boxIndex;
}
async function EH(r, e, t6, o = 0.5, n = Number.NEGATIVE_INFINITY) {
  let s = v(r, "boxes", "nonMaxSuppressionAsync"), a = v(e, "scores", "nonMaxSuppressionAsync"), i = So(s, a, t6, o, n);
  t6 = i.maxOutputSize, o = i.iouThreshold, n = i.scoreThreshold;
  let p = await Promise.all([s.data(), a.data()]), u = p[0], c = p[1], { selectedIndices: l } = Vd(u, c, t6, o, n);
  return s !== r && s.dispose(), a !== e && a.dispose(), mr(l, "int32");
}
var K1 = EH;
function $H(r, e, t6, o = 0.5, n = Number.NEGATIVE_INFINITY, s = 0) {
  let a = v(r, "boxes", "nonMaxSuppression"), i = v(e, "scores", "nonMaxSuppression"), p = So(a, i, t6, o, n, s);
  t6 = p.maxOutputSize, o = p.iouThreshold, n = p.scoreThreshold, s = p.softNmsSigma;
  let u = { boxes: a, scores: i }, c = { maxOutputSize: t6, iouThreshold: o, scoreThreshold: n, softNmsSigma: s }, l = T.runKernel(_n, u, c);
  return { selectedIndices: l[0], selectedScores: l[1] };
}
var j1 = N({ nonMaxSuppressionWithScore_: $H });
async function AH(r, e, t6, o = 0.5, n = Number.NEGATIVE_INFINITY, s = 0) {
  let a = v(r, "boxes", "nonMaxSuppressionAsync"), i = v(e, "scores", "nonMaxSuppressionAsync"), p = So(a, i, t6, o, n, s);
  t6 = p.maxOutputSize, o = p.iouThreshold, n = p.scoreThreshold, s = p.softNmsSigma;
  let u = await Promise.all([a.data(), i.data()]), c = u[0], l = u[1], { selectedIndices: m, selectedScores: d } = Wd(c, l, t6, o, n, s);
  return a !== r && a.dispose(), i !== e && i.dispose(), { selectedIndices: mr(m, "int32"), selectedScores: mr(d) };
}
var X1 = AH;
function RH(r, e, t6, o = 0.5, n = Number.NEGATIVE_INFINITY, s = false) {
  let a = v(r, "boxes", "nonMaxSuppression"), i = v(e, "scores", "nonMaxSuppression"), p = So(a, i, t6, o, n, null), u = p.maxOutputSize, c = p.iouThreshold, l = p.scoreThreshold, m = { boxes: a, scores: i }, d = { maxOutputSize: u, iouThreshold: c, scoreThreshold: l, padToMaxOutputSize: s }, f = T.runKernel(ba, m, d);
  return { selectedIndices: f[0], validOutputs: f[1] };
}
var Y1 = N({ nonMaxSuppressionPadded_: RH });
async function FH(r, e, t6, o = 0.5, n = Number.NEGATIVE_INFINITY, s = false) {
  let a = v(r, "boxes", "nonMaxSuppressionAsync"), i = v(e, "scores", "nonMaxSuppressionAsync"), p = So(a, i, t6, o, n, null), u = p.maxOutputSize, c = p.iouThreshold, l = p.scoreThreshold, [m, d] = await Promise.all([a.data(), i.data()]), { selectedIndices: f, validOutputs: h } = zd(m, d, u, c, l, s);
  return a !== r && a.dispose(), i !== e && i.dispose(), { selectedIndices: mr(f, "int32"), validOutputs: be(h, "int32") };
}
var Q1 = FH;
function DH(r, e, t6 = false, o = false) {
  let n = v(r, "images", "resizeBilinear");
  E(n.rank === 3 || n.rank === 4, () => `Error in resizeBilinear: x must be rank 3 or 4, but got rank ${n.rank}.`), E(e.length === 2, () => `Error in resizeBilinear: new shape must 2D, but got shape ${e}.`), E(o === false || t6 === false, () => "Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");
  let s = n, a = false;
  n.rank === 3 && (a = true, s = z(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let [] = e, i = { images: s }, p = { alignCorners: t6, halfPixelCenters: o, size: e }, u = T.runKernel(Mn, i, p);
  return a ? z(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
var Z1 = N({ resizeBilinear_: DH });
function OH(r, e, t6 = false, o = false) {
  let n = v(r, "images", "resizeNearestNeighbor");
  E(n.rank === 3 || n.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${n.rank}.`), E(e.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ${e}.`), E(n.dtype === "float32" || n.dtype === "int32", () => "`images` must have `int32` or `float32` as dtype"), E(o === false || t6 === false, () => "Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");
  let s = n, a = false;
  n.rank === 3 && (a = true, s = z(n, [1, n.shape[0], n.shape[1], n.shape[2]]));
  let [] = e, i = { images: s }, p = { alignCorners: t6, halfPixelCenters: o, size: e }, u = T.runKernel(Pn, i, p);
  return a ? z(u, [u.shape[1], u.shape[2], u.shape[3]]) : u;
}
var J1 = N({ resizeNearestNeighbor_: OH });
function PH(r, e = "binary", t6 = false, o = 0.5) {
  let n = v(r, "image", "threshold"), s = 0.2989, a = 0.587, i = 0.114, p = n.shape[0] * n.shape[1], u = ae(mr([o]), 255), c, l, m, d;
  if (E(n.rank === 3, () => `Error in threshold: image must be rank 3,but got rank ${n.rank}.`), E(n.shape[2] === 3 || n.shape[2] === 1, () => `Error in threshold: image color channel must be equal to 3 or 1but got ${n.shape[2]}.`), E(n.dtype === "int32" || n.dtype === "float32", () => `Error in dtype: image dtype must be int32 or float32,but got dtype ${n.dtype}.`), E(e === "otsu" || e === "binary", () => `Method must be binary or otsu, but was ${e}`), n.shape[2] === 3) {
    [c, l, m] = Oa(n, [1, 1, 1], -1);
    let g = ae(c, s), x = ae(l, a), b = ae(m, i);
    d = xe(xe(g, x), b);
  } else
    d = r;
  if (e === "otsu") {
    let g = od(Ke(Rd(d), "int32"), nr([]), 256);
    u = MH(g, p);
  }
  let f = t6 ? Vp(d, u) : cu(d, u);
  return Ke(ae(f, 255), "int32");
}
function MH(r, e) {
  let t6 = mr([-1]), o = mr([0]), n = mr([0]), s, a, i, p, u, c;
  for (let l = 0; l < r.size - 1; l++) {
    s = He(r, 0, l + 1), a = He(r, l + 1), u = Ge(et(s), e), c = Ge(et(a), e);
    let m = et(ae(s, Ni(0, s.size)));
    i = Ge(m, et(s));
    let d = Ws(a.shape, s.size), f = xe(Ni(0, a.size), d), h = ae(a, f);
    p = Ge(et(h), et(a));
    let g = Ne(i, p), x = Ne(i, p), b = ae(u, c);
    n = ae(ae(b, g), x);
    let C = cu(n, o);
    o = os(C, n, o), t6 = os(C, mr([l]), t6);
  }
  return t6;
}
var eN = N({ threshold_: PH });
function LH(r, e, t6 = "nearest", o = "constant", n = 0, s) {
  let a = v(r, "image", "transform", "float32"), i = v(e, "transforms", "transform", "float32");
  E(a.rank === 4, () => `Error in transform: image must be rank 4,but got rank ${a.rank}.`), E(i.rank === 2 && (i.shape[0] === a.shape[0] || i.shape[0] === 1) && i.shape[1] === 8, () => "Error in transform: Input transform should be batch x 8 or 1 x 8"), E(s == null || s.length === 2, () => `Error in transform: outputShape must be [height, width] or null, but got ${s}.`);
  let p = { image: a, transforms: i }, u = { interpolation: t6, fillMode: o, fillValue: n, outputShape: s };
  return T.runKernel(Jn, p, u);
}
var tN = N({ transform_: LH });
function BH(r, e, t6) {
  E(e % 1 === 0, () => `bandPart(): numLower must be an integer, got ${e}.`), E(t6 % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${t6}.`);
  let o = v(r, "a", "bandPart");
  E(o.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${o.rank}.`);
  let n = o.shape, [s, a] = o.shape.slice(-2);
  if (!(e <= s))
    throw new Error(`bandPart(): numLower (${e}) must not be greater than the number of rows (${s}).`);
  if (!(t6 <= a))
    throw new Error(`bandPart(): numUpper (${t6}) must not be greater than the number of columns (${a}).`);
  e < 0 && (e = s), t6 < 0 && (t6 = a);
  let i = z(Ni(0, s, 1, "int32"), [-1, 1]), p = Ni(0, a, 1, "int32"), u = Ne(i, p), c = lu(Vp(u, be(+e, "int32")), cd(u, be(-t6, "int32"))), l = Vr([s, a], o.dtype);
  return z(Sr(so(z(o, [-1, s, a])).map((m) => os(c, m, l))), n);
}
var rN = N({ bandPart_: BH });
function VH(r) {
  let e;
  if (Array.isArray(r)) {
    e = false, E(r != null && r.length > 0, () => "Gram-Schmidt process: input must not be null, undefined, or empty");
    let n = r[0].shape[0];
    for (let s = 1; s < r.length; ++s)
      E(r[s].shape[0] === n, () => `Gram-Schmidt: Non-unique lengths found in the input vectors: (${r[s].shape[0]} vs. ${n})`);
  } else
    e = true, r = Oa(r, r.shape[0], 0).map((n) => Up(n, [0]));
  E(r.length <= r[0].shape[0], () => `Gram-Schmidt: Number of vectors (${r.length}) exceeds number of dimensions (${r[0].shape[0]}).`);
  let t6 = [], o = r;
  for (let n = 0; n < r.length; ++n)
    t6.push(T.tidy(() => {
      let s = o[n];
      if (n > 0)
        for (let a = 0; a < n; ++a) {
          let i = ae(et(ae(t6[a], s)), t6[a]);
          s = Ne(s, i);
        }
      return Ge(s, pu(s, "euclidean"));
    }));
  return e ? Sr(t6, 0) : t6;
}
var oN = N({ gramSchmidt_: VH });
function zH(r, e = false) {
  if (E(r.rank >= 2, () => `qr() requires input tensor to have a rank >= 2, but got rank ${r.rank}`), r.rank === 2)
    return nN(r, e);
  {
    let t6 = r.shape.slice(0, r.shape.length - 2).reduce((p, u) => p * u), o = so(z(r, [t6, r.shape[r.shape.length - 2], r.shape[r.shape.length - 1]]), 0), n = [], s = [];
    o.forEach((p) => {
      let [u, c] = nN(p, e);
      n.push(u), s.push(c);
    });
    let a = z(Sr(n, 0), r.shape), i = z(Sr(s, 0), r.shape);
    return [a, i];
  }
}
function nN(r, e = false) {
  return T.tidy(() => {
    E(r.shape.length === 2, () => `qr2d() requires a 2D Tensor, but got a ${r.shape.length}D Tensor.`);
    let t6 = r.shape[0], o = r.shape[1], n = id(t6), s = Br(r), a = _i([[1]], [1, 1]), i = Br(a), p = t6 >= o ? o : t6;
    for (let u = 0; u < p; ++u) {
      let c = s, l = i, m = n;
      [i, s, n] = T.tidy(() => {
        let d = He(s, [u, u], [t6 - u, 1]), f = pu(d), h = He(s, [u, u], [1, 1]), g = os(cu(h, 0), _i([[-1]]), _i([[1]])), x = Ne(h, ae(g, f)), b = Ge(d, x);
        b.shape[0] === 1 ? i = Br(a) : i = gt([a, He(b, [1, 0], [b.shape[0] - 1, b.shape[1]])], 0);
        let C = yr(Ge(Xe(g, x), f)), w = He(s, [u, 0], [t6 - u, o]), k = ae(C, i), _ = Mp(i);
        if (u === 0)
          s = Ne(w, Xe(k, Xe(_, w)));
        else {
          let R = Ne(w, Xe(k, Xe(_, w)));
          s = gt([He(s, [0, 0], [u, o]), R], 0);
        }
        let $ = Mp(k), A = He(n, [0, u], [t6, n.shape[1] - u]);
        if (u === 0)
          n = Ne(A, Xe(Xe(A, i), $));
        else {
          let R = Ne(A, Xe(Xe(A, i), $));
          n = gt([He(n, [0, 0], [t6, u]), R], 1);
        }
        return [i, s, n];
      }), Dt([c, l, m]);
    }
    return !e && t6 > o && (n = He(n, [0, 0], [t6, o]), s = He(s, [0, 0], [o, o])), [n, s];
  });
}
var sN = N({ qr_: zH });
var Et;
(function(r) {
  r[r.NONE = 0] = "NONE", r[r.MEAN = 1] = "MEAN", r[r.SUM = 2] = "SUM", r[r.SUM_BY_NONZERO_WEIGHTS = 3] = "SUM_BY_NONZERO_WEIGHTS";
})(Et || (Et = {}));
function WH(r, e, t6 = Et.SUM_BY_NONZERO_WEIGHTS) {
  let o = v(r, "losses", "computeWeightedLoss"), n = null;
  e != null && (n = v(e, "weights", "computeWeightedLoss"));
  let s = n == null ? o : ae(o, n);
  if (t6 === Et.NONE)
    return s;
  if (t6 === Et.SUM)
    return et(s);
  if (t6 === Et.MEAN) {
    if (n == null)
      return mu(s);
    {
      let a = o.size / n.size, i = Ge(et(s), et(n));
      return a > 1 ? Ge(i, be(a)) : i;
    }
  }
  if (t6 === Et.SUM_BY_NONZERO_WEIGHTS) {
    if (n == null)
      return Ge(et(s), be(o.size));
    {
      let a = ae(n, Gs(o.shape)), i = Ke(et(wd(a, be(0))), "float32");
      return Ge(et(s), i);
    }
  }
  throw Error(`Unknown reduction: ${t6}`);
}
var sr = N({ computeWeightedLoss_: WH });
function UH(r, e, t6, o = Et.SUM_BY_NONZERO_WEIGHTS) {
  let n = v(r, "labels", "absoluteDifference"), s = v(e, "predictions", "absoluteDifference"), a = null;
  t6 != null && (a = v(t6, "weights", "absoluteDifference")), ht(n.shape, s.shape, "Error in absoluteDifference: ");
  let i = Yt(Ne(n, s));
  return sr(i, a, o);
}
var aN = N({ absoluteDifference_: UH });
function GH(r, e, t6, o, n = Et.SUM_BY_NONZERO_WEIGHTS) {
  let s = v(r, "labels", "cosineDistance"), a = v(e, "predictions", "cosineDistance"), i = null;
  o != null && (i = v(o, "weights", "cosineDistance")), ht(s.shape, a.shape, "Error in cosineDistance: ");
  let p = be(1), u = Ne(p, et(ae(s, a), t6, true));
  return sr(u, i, n);
}
var iN = N({ cosineDistance_: GH });
function HH(r, e, t6, o = Et.SUM_BY_NONZERO_WEIGHTS) {
  let n = v(r, "labels", "hingeLoss"), s = v(e, "predictions", "hingeLoss"), a = null;
  t6 != null && (a = v(t6, "weights", "hingeLoss")), ht(n.shape, s.shape, "Error in hingeLoss: ");
  let i = be(1);
  n = Ne(ae(be(2), n), i);
  let p = Ti(Ne(i, ae(n, s)));
  return sr(p, a, o);
}
var uN = N({ hingeLoss_: HH });
function qH(r, e, t6, o = 1, n = Et.SUM_BY_NONZERO_WEIGHTS) {
  let s = v(r, "labels", "huberLoss"), a = v(e, "predictions", "huberLoss"), i = null;
  t6 != null && (i = v(t6, "weights", "huberLoss")), ht(s.shape, a.shape, "Error in huberLoss: ");
  let p = be(o), u = Yt(Ne(a, s)), c = Sd(u, p), l = Ne(u, c), m = xe(ae(be(0.5), Qt(c)), ae(p, l));
  return sr(m, i, n);
}
var pN = N({ huberLoss_: qH });
function KH(r, e, t6, o = 1e-7, n = Et.SUM_BY_NONZERO_WEIGHTS) {
  let s = v(r, "labels", "logLoss"), a = v(e, "predictions", "logLoss"), i = null;
  t6 != null && (i = v(t6, "weights", "logLoss")), ht(s.shape, a.shape, "Error in logLoss: ");
  let p = be(1), u = be(o), c = yr(ae(s, Da(xe(a, u)))), l = ae(Ne(p, s), Da(xe(Ne(p, a), u))), m = Ne(c, l);
  return sr(m, i, n);
}
var cN = N({ logLoss_: KH });
function jH(r, e, t6, o = Et.SUM_BY_NONZERO_WEIGHTS) {
  let n = v(r, "labels", "meanSquaredError"), s = v(e, "predictions", "meanSquaredError"), a = null;
  t6 != null && (a = v(t6, "weights", "meanSquaredError")), ht(n.shape, s.shape, "Error in meanSquaredError: ");
  let i = Dd(n, s);
  return sr(i, a, o);
}
var lN = N({ meanSquaredError_: jH });
function XH(r, e) {
  let t6 = v(r, "labels", "sigmoidCrossEntropyWithLogits"), o = v(e, "logits", "sigmoidCrossEntropyWithLogits");
  ht(t6.shape, o.shape, "Error in sigmoidCrossEntropyWithLogits: ");
  let n = Ti(o), s = ae(o, t6), a = md(Co(yr(Yt(o))));
  return xe(Ne(n, s), a);
}
function YH(r, e, t6, o = 0, n = Et.SUM_BY_NONZERO_WEIGHTS) {
  let s = v(r, "multiClassLabels", "sigmoidCrossEntropy"), a = v(e, "logits", "sigmoidCrossEntropy"), i = null;
  if (t6 != null && (i = v(t6, "weights", "sigmoidCrossEntropy")), ht(s.shape, a.shape, "Error in sigmoidCrossEntropy: "), o > 0) {
    let u = be(o), c = be(1), l = be(0.5);
    s = xe(ae(s, Ne(c, u)), ae(l, u));
  }
  let p = XH(s, a);
  return sr(p, i, n);
}
var mN = N({ sigmoidCrossEntropy_: YH });
function QH(r, e, t6 = -1) {
  if (t6 === -1 && (t6 = e.rank - 1), t6 !== e.rank - 1)
    throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${e.rank} and dim was ${t6}`);
  return Cr((n, s, a) => {
    let p = hd(s, [t6], true), u = Ne(Ke(s, "float32"), p);
    a([n, u]);
    let c = yr(ae(u, n));
    return { value: et(c, [t6]), gradFunc: (d, f) => {
      let [h, g] = f, x = Aa(d.shape, [t6]);
      return [ae(z(d, x), Ne(Ke(h, "float32"), Co(g))), ae(z(d, x), Ne(Co(g), Ke(h, "float32")))];
    } };
  })(r, e);
}
function ZH(r, e, t6, o = 0, n = Et.SUM_BY_NONZERO_WEIGHTS) {
  let s = v(r, "onehotLabels", "softmaxCrossEntropy"), a = v(e, "logits", "softmaxCrossEntropy"), i = null;
  if (t6 != null && (i = v(t6, "weights", "softmaxCrossEntropy")), ht(s.shape, a.shape, "Error in softmaxCrossEntropy: "), o > 0) {
    let u = be(o), c = be(1), l = be(s.shape[1]);
    s = xe(ae(s, Ne(c, u)), Ge(u, l));
  }
  let p = QH(s, a);
  return sr(p, i, n);
}
var dN = N({ softmaxCrossEntropy_: ZH });
function JH(r, e, t6, o) {
  let n = v(r, "indices", "sparseFillEmptyRows", "int32"), s = v(e, "values", "sparseFillEmptyRows"), a = v(t6, "denseShape", "sparseFillEmptyRows", "int32"), i = v(o, "defaultValue", "sparseFillEmptyRows", s.dtype);
  if (n.rank !== 2)
    throw new Error(`Indices should be Tensor2D but received shape
        ${n.shape}`);
  if (s.rank !== 1)
    throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);
  if (a.rank !== 1)
    throw new Error(`Dense shape should be Tensor1D but received shape ${a.shape}`);
  if (i.rank !== 0)
    throw new Error(`Default value should be a scalar but received shape ${i.shape}`);
  let p = { indices: n, values: s, denseShape: a, defaultValue: i }, u = T.runKernel(ui, p);
  return { outputIndices: u[0], outputValues: u[1], emptyRowIndicator: u[2], reverseIndexMap: u[3] };
}
var fN = N({ sparseFillEmptyRows_: JH });
function eq(r, e, t6) {
  let o = v(r, "inputIndices", "sparseReshape", "int32"), n = v(e, "inputShape", "sparseReshape", "int32"), s = v(t6, "newShape", "sparseReshape", "int32");
  if (o.rank !== 2)
    throw new Error(`Input indices should be Tensor2D but received shape
        ${o.shape}`);
  if (n.rank !== 1)
    throw new Error(`Input shape should be Tensor1D but received shape ${n.shape}`);
  if (s.rank !== 1)
    throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);
  let a = { inputIndices: o, inputShape: n, newShape: s }, i = T.runKernel(wa, a);
  return { outputIndices: i[0], outputShape: i[1] };
}
var hN = N({ sparseReshape_: eq });
function tq(r, e, t6) {
  let o = v(r, "data", "sparseSegmentMean"), n = v(e, "indices", "sparseSegmentMean", "int32"), s = v(t6, "segmentIds", "sparseSegmentMean", "int32");
  if (o.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
          ${n.shape}`);
  if (s.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
          ${s.shape}`);
  let a = { data: o, indices: n, segmentIds: s };
  return T.runKernel(pi, a);
}
var gN = N({ sparseSegmentMean_: tq });
function rq(r, e, t6) {
  let o = v(r, "data", "sparseSegmentSum"), n = v(e, "indices", "sparseSegmentSum", "int32"), s = v(t6, "segmentIds", "sparseSegmentSum", "int32");
  if (o.rank < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.rank !== 1)
    throw new Error(`Indices should be Tensor1D but received shape
         ${n.shape}`);
  if (s.rank !== 1)
    throw new Error(`Segment ids should be Tensor1D but received shape
         ${s.shape}`);
  let a = { data: o, indices: n, segmentIds: s };
  return T.runKernel(ci, a);
}
var xN = N({ sparseSegmentSum_: rq });
function oq(r, e, t6, o, n, s, a, i) {
  let p = v(r, "data", "stringNGrams", "string");
  if (p.dtype !== "string")
    throw new Error("Data must be of datatype string");
  if (p.shape.length !== 1)
    throw new Error(`Data must be a vector, saw: ${p.shape}`);
  let u = v(e, "dataSplits", "stringNGrams");
  if (u.dtype !== "int32")
    throw new Error("Data splits must be of datatype int32");
  let c = { separator: t6, nGramWidths: o, leftPad: n, rightPad: s, padWidth: a, preserveShortSequences: i }, l = { data: p, dataSplits: u }, m = T.runKernel(As, l, c);
  return { nGrams: m[0], nGramsSplits: m[1] };
}
var yN = N({ stringNGrams_: oq });
function nq(r, e, t6 = true) {
  let o = v(r, "input", "stringSplit", "string"), n = v(e, "delimiter", "stringSplit", "string");
  if (o.rank !== 1)
    throw new Error(`Input should be Tensor1D but received shape ${o.shape}`);
  if (n.rank !== 0)
    throw new Error(`Delimiter should be a scalar but received shape ${n.shape}`);
  let s = { skipEmpty: t6 }, a = { input: o, delimiter: n }, i = T.runKernel(di, a, s);
  return { indices: i[0], values: i[1], shape: i[2] };
}
var bN = N({ stringSplit_: nq });
function sq(r, e) {
  let t6 = v(r, "input", "stringToHashBucketFast", "string"), o = { numBuckets: e };
  if (e <= 0)
    throw new Error("Number of buckets must be at least 1");
  let n = { input: t6 };
  return T.runKernel(fi, n, o);
}
var CN = N({ stringToHashBucketFast_: sq });
var aq = { fft: zp, ifft: hu, rfft: Wp, irfft: Fd };
var iq = { hammingWindow: L1, hannWindow: Ld, frame: Bd, stft: B1 };
var uq = { flipLeftRight: z1, grayscaleToRGB: W1, resizeNearestNeighbor: J1, resizeBilinear: Z1, rotateWithOffset: U1, cropAndResize: V1, nonMaxSuppression: G1, nonMaxSuppressionAsync: K1, nonMaxSuppressionWithScore: j1, nonMaxSuppressionWithScoreAsync: X1, nonMaxSuppressionPadded: Y1, nonMaxSuppressionPaddedAsync: Q1, threshold: eN, transform: tN };
var pq = { bandPart: rN, gramSchmidt: oN, qr: sN };
var cq = { absoluteDifference: aN, computeWeightedLoss: sr, cosineDistance: iN, hingeLoss: uN, huberLoss: pN, logLoss: cN, meanSquaredError: lN, sigmoidCrossEntropy: mN, softmaxCrossEntropy: dN };
var lq = { sparseFillEmptyRows: fN, sparseReshape: hN, sparseSegmentMean: gN, sparseSegmentSum: xN };
var mq = { stringNGrams: yN, stringSplit: bN, stringToHashBucketFast: CN };
var wr = class extends ol {
  minimize(e, t6 = false, o) {
    let { value: n, grads: s } = this.computeGradients(e, o);
    if (o != null) {
      let a = o.map((i) => ({ name: i.name, tensor: s[i.name] }));
      this.applyGradients(a);
    } else
      this.applyGradients(s);
    return Dt(s), t6 ? n : (n.dispose(), null);
  }
  get iterations() {
    return this.iterations_ == null && (this.iterations_ = 0), this.iterations_;
  }
  incrementIterations() {
    this.iterations_ = this.iterations + 1;
  }
  computeGradients(e, t6) {
    return pC(e, t6);
  }
  dispose() {
    this.iterations_ != null && Dt(this.iterations_);
  }
  async saveIterations() {
    return this.iterations_ == null && (this.iterations_ = 0), { name: "iter", tensor: be(this.iterations_, "int32") };
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for this optimizer yet.");
  }
  async setWeights(e) {
    throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`);
  }
  async extractIterations(e) {
    return this.iterations_ = (await e[0].tensor.data())[0], e.slice(1);
  }
};
Object.defineProperty(wr, Symbol.hasInstance, { value: (r) => r.minimize != null && r.computeGradients != null && r.applyGradients != null });
var Ei = class extends wr {
  constructor(e, t6, o = null) {
    super(), this.learningRate = e, this.rho = t6, this.epsilon = o, this.accumulatedGrads = [], this.accumulatedUpdates = [], o == null && (this.epsilon = T.backend.epsilon());
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((o) => o.name) : Object.keys(e)).forEach((o, n) => {
      let s = T.registeredVariables[o], a = false;
      this.accumulatedGrads[n] == null && (this.accumulatedGrads[n] = { originalName: `${o}/accum_grad`, variable: Ee(() => Ut(s).variable(a)) }), this.accumulatedUpdates[n] == null && (this.accumulatedUpdates[n] = { originalName: `${o}/accum_var`, variable: Ee(() => Ut(s).variable(a)) });
      let i = Array.isArray(e) ? e[n].tensor : e[o];
      if (i == null)
        return;
      let p = this.accumulatedGrads[n].variable, u = this.accumulatedUpdates[n].variable;
      Ee(() => {
        let c = xe(ae(p, this.rho), ae(Qt(i), 1 - this.rho)), l = ae(Ge($r(xe(u, this.epsilon)), $r(xe(p, this.epsilon))), i), m = xe(ae(u, this.rho), ae(Qt(l), 1 - this.rho));
        p.assign(c), u.assign(m);
        let d = xe(ae(l, -this.learningRate), s);
        s.assign(d);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedUpdates != null && (Dt(this.accumulatedGrads.map((e) => e.variable)), Dt(this.accumulatedUpdates.map((e) => e.variable)));
  }
  async getWeights() {
    let e = [...this.accumulatedGrads, ...this.accumulatedUpdates];
    return [await this.saveIterations()].concat(e.map((t6) => ({ name: t6.originalName, tensor: t6.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t6 = e.length / 2, o = false;
    this.accumulatedGrads = e.slice(0, t6).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) })), this.accumulatedUpdates = e.slice(t6, t6 * 2).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, rho: this.rho, epsilon: this.epsilon };
  }
  static fromConfig(e, t6) {
    return new e(t6.learningRate, t6.rho, t6.epsilon);
  }
};
Ei.className = "Adadelta";
Er(Ei);
var $i = class extends wr {
  constructor(e, t6 = 0.1) {
    super(), this.learningRate = e, this.initialAccumulatorValue = t6, this.accumulatedGrads = [];
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((o) => o.name) : Object.keys(e)).forEach((o, n) => {
      let s = T.registeredVariables[o];
      this.accumulatedGrads[n] == null && (this.accumulatedGrads[n] = { originalName: `${o}/accumulator`, variable: Ee(() => Ws(s.shape, this.initialAccumulatorValue).variable(false)) });
      let a = Array.isArray(e) ? e[n].tensor : e[o];
      if (a == null)
        return;
      let i = this.accumulatedGrads[n].variable;
      Ee(() => {
        let p = xe(i, Qt(a));
        i.assign(p);
        let u = xe(ae(Ge(a, $r(xe(p, T.backend.epsilon()))), -this.learningRate), s);
        s.assign(u);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedGrads != null && Dt(this.accumulatedGrads.map((e) => e.variable));
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulatedGrads.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t6 = false;
    this.accumulatedGrads = e.map((o) => ({ originalName: o.name, variable: o.tensor.variable(t6) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, initialAccumulatorValue: this.initialAccumulatorValue };
  }
  static fromConfig(e, t6) {
    return new e(t6.learningRate, t6.initialAccumulatorValue);
  }
};
$i.className = "Adagrad";
Er($i);
var Ai = class extends wr {
  constructor(e, t6, o, n = null) {
    super(), this.learningRate = e, this.beta1 = t6, this.beta2 = o, this.epsilon = n, this.accumulatedFirstMoment = [], this.accumulatedSecondMoment = [], Ee(() => {
      this.accBeta1 = be(t6).variable(), this.accBeta2 = be(o).variable();
    }), n == null && (this.epsilon = T.backend.epsilon());
  }
  applyGradients(e) {
    let t6 = Array.isArray(e) ? e.map((o) => o.name) : Object.keys(e);
    Ee(() => {
      let o = Ne(1, this.accBeta1), n = Ne(1, this.accBeta2);
      t6.forEach((s, a) => {
        let i = T.registeredVariables[s], p = false;
        this.accumulatedFirstMoment[a] == null && (this.accumulatedFirstMoment[a] = { originalName: `${s}/m`, variable: Ee(() => Ut(i).variable(p)) }), this.accumulatedSecondMoment[a] == null && (this.accumulatedSecondMoment[a] = { originalName: `${s}/v`, variable: Ee(() => Ut(i).variable(p)) });
        let u = Array.isArray(e) ? e[a].tensor : e[s];
        if (u == null)
          return;
        let c = this.accumulatedFirstMoment[a].variable, l = this.accumulatedSecondMoment[a].variable, m = xe(ae(c, this.beta1), ae(u, 1 - this.beta1)), d = xe(ae(l, this.beta2), ae(Qt(u), 1 - this.beta2)), f = Ge(m, o), h = Ge(d, n);
        c.assign(m), l.assign(d);
        let g = xe(ae(Ge(f, xe($r(h), this.epsilon)), -this.learningRate), i);
        i.assign(g);
      }), this.accBeta1.assign(ae(this.accBeta1, this.beta1)), this.accBeta2.assign(ae(this.accBeta2, this.beta2));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.accBeta2.dispose(), this.accumulatedFirstMoment != null && Dt(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedSecondMoment != null && Dt(this.accumulatedSecondMoment.map((e) => e.variable));
  }
  async getWeights() {
    let e = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];
    return [await this.saveIterations()].concat(e.map((t6) => ({ name: t6.originalName, tensor: t6.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e), Ee(() => {
      this.accBeta1.assign(Ra(this.beta1, this.iterations_ + 1)), this.accBeta2.assign(Ra(this.beta2, this.iterations_ + 1));
    });
    let t6 = e.length / 2, o = false;
    this.accumulatedFirstMoment = e.slice(0, t6).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) })), this.accumulatedSecondMoment = e.slice(t6, t6 * 2).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon };
  }
  static fromConfig(e, t6) {
    return new e(t6.learningRate, t6.beta1, t6.beta2, t6.epsilon);
  }
};
Ai.className = "Adam";
Er(Ai);
var Ri = class extends wr {
  constructor(e, t6, o, n = null, s = 0) {
    super(), this.learningRate = e, this.beta1 = t6, this.beta2 = o, this.epsilon = n, this.decay = s, this.accumulatedFirstMoment = [], this.accumulatedWeightedInfNorm = [], Ee(() => {
      this.iteration = be(0).variable(), this.accBeta1 = be(t6).variable();
    }), n == null && (this.epsilon = T.backend.epsilon());
  }
  applyGradients(e) {
    let t6 = Array.isArray(e) ? e.map((o) => o.name) : Object.keys(e);
    Ee(() => {
      let o = Ne(1, this.accBeta1), n = Ge(-this.learningRate, xe(ae(this.iteration, this.decay), 1));
      t6.forEach((s, a) => {
        let i = T.registeredVariables[s], p = false;
        this.accumulatedFirstMoment[a] == null && (this.accumulatedFirstMoment[a] = { originalName: `${s}/m`, variable: Ut(i).variable(p) }), this.accumulatedWeightedInfNorm[a] == null && (this.accumulatedWeightedInfNorm[a] = { originalName: `${s}/v`, variable: Ut(i).variable(p) });
        let u = Array.isArray(e) ? e[a].tensor : e[s];
        if (u == null)
          return;
        let c = this.accumulatedFirstMoment[a].variable, l = this.accumulatedWeightedInfNorm[a].variable, m = xe(ae(c, this.beta1), ae(u, 1 - this.beta1)), d = ae(l, this.beta2), f = Yt(u), h = Cd(d, f);
        c.assign(m), l.assign(h);
        let g = xe(ae(Ge(n, o), Ge(m, xe(h, this.epsilon))), i);
        i.assign(g);
      }), this.iteration.assign(xe(this.iteration, 1)), this.accBeta1.assign(ae(this.accBeta1, this.beta1));
    }), this.incrementIterations();
  }
  dispose() {
    this.accBeta1.dispose(), this.iteration.dispose(), this.accumulatedFirstMoment != null && Dt(this.accumulatedFirstMoment.map((e) => e.variable)), this.accumulatedWeightedInfNorm != null && Dt(this.accumulatedWeightedInfNorm.map((e) => e.variable));
  }
  async getWeights() {
    throw new Error("getWeights() is not implemented for Adamax yet.");
  }
  async setWeights(e) {
    throw new Error("setWeights() is not implemented for Adamax yet.");
  }
  getConfig() {
    return { learningRate: this.learningRate, beta1: this.beta1, beta2: this.beta2, epsilon: this.epsilon, decay: this.decay };
  }
  static fromConfig(e, t6) {
    return new e(t6.learningRate, t6.beta1, t6.beta2, t6.epsilon, t6.decay);
  }
};
Ri.className = "Adamax";
Er(Ri);
var qs = class extends wr {
  constructor(e) {
    super(), this.learningRate = e, this.setLearningRate(e);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((o) => o.name) : Object.keys(e)).forEach((o, n) => {
      let s = Array.isArray(e) ? e[n].tensor : e[o];
      if (s == null)
        return;
      let a = T.registeredVariables[o];
      Ee(() => {
        let i = xe(ae(this.c, s), a);
        a.assign(i);
      });
    }), this.incrementIterations();
  }
  setLearningRate(e) {
    this.learningRate = e, this.c != null && this.c.dispose(), this.c = _r(be(-e));
  }
  dispose() {
    this.c.dispose();
  }
  async getWeights() {
    return [await this.saveIterations()];
  }
  async setWeights(e) {
    if (e = await this.extractIterations(e), e.length !== 0)
      throw new Error("SGD optimizer does not have settable weights.");
  }
  getConfig() {
    return { learningRate: this.learningRate };
  }
  static fromConfig(e, t6) {
    return new e(t6.learningRate);
  }
};
qs.className = "SGD";
Er(qs);
var Fi = class extends qs {
  constructor(e, t6, o = false) {
    super(e), this.learningRate = e, this.momentum = t6, this.useNesterov = o, this.accumulations = [], this.m = be(this.momentum);
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((o) => o.name) : Object.keys(e)).forEach((o, n) => {
      let s = T.registeredVariables[o];
      this.accumulations[n] == null && (this.accumulations[n] = { originalName: `${o}/momentum`, variable: Ee(() => Ut(s).variable(false)) });
      let a = this.accumulations[n].variable, i = Array.isArray(e) ? e[n].tensor : e[o];
      i != null && Ee(() => {
        let p, u = xe(ae(this.m, a), i);
        this.useNesterov ? p = xe(ae(this.c, xe(i, ae(u, this.m))), s) : p = xe(ae(this.c, u), s), a.assign(u), s.assign(p);
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.m.dispose(), this.accumulations != null && Dt(this.accumulations.map((e) => e.variable));
  }
  setMomentum(e) {
    this.momentum = e;
  }
  async getWeights() {
    return [await this.saveIterations()].concat(this.accumulations.map((e) => ({ name: e.originalName, tensor: e.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t6 = false;
    this.accumulations = e.map((o) => ({ originalName: o.name, variable: o.tensor.variable(t6) }));
  }
  getConfig() {
    return { learningRate: this.learningRate, momentum: this.momentum, useNesterov: this.useNesterov };
  }
  static fromConfig(e, t6) {
    return new e(t6.learningRate, t6.momentum, t6.useNesterov);
  }
};
Fi.className = "Momentum";
Er(Fi);
var Di = class extends wr {
  constructor(e, t6 = 0.9, o = 0, n = null, s = false) {
    if (super(), this.learningRate = e, this.decay = t6, this.momentum = o, this.epsilon = n, this.accumulatedMeanSquares = [], this.accumulatedMoments = [], this.accumulatedMeanGrads = [], this.centered = s, n == null && (this.epsilon = T.backend.epsilon()), e == null)
      throw new Error("learningRate for RMSPropOptimizer must be defined.");
  }
  applyGradients(e) {
    (Array.isArray(e) ? e.map((o) => o.name) : Object.keys(e)).forEach((o, n) => {
      let s = T.registeredVariables[o], a = false;
      this.accumulatedMeanSquares[n] == null && (this.accumulatedMeanSquares[n] = { originalName: `${o}/rms`, variable: Ee(() => Ut(s).variable(a)) }), this.accumulatedMoments[n] == null && (this.accumulatedMoments[n] = { originalName: `${o}/momentum`, variable: Ee(() => Ut(s).variable(a)) }), this.accumulatedMeanGrads[n] == null && this.centered && (this.accumulatedMeanGrads[n] = { originalName: `${o}/mg`, variable: Ee(() => Ut(s).variable(a)) });
      let i = Array.isArray(e) ? e[n].tensor : e[o];
      if (i == null)
        return;
      let p = this.accumulatedMeanSquares[n].variable, u = this.accumulatedMoments[n].variable;
      Ee(() => {
        let c = xe(ae(p, this.decay), ae(Qt(i), 1 - this.decay));
        if (this.centered) {
          let l = this.accumulatedMeanGrads[n].variable, m = xe(ae(l, this.decay), ae(i, 1 - this.decay)), d = Ge(ae(i, this.learningRate), $r(Ne(c, xe(Qt(m), this.epsilon)))), f = xe(ae(u, this.momentum), d);
          p.assign(c), l.assign(m), u.assign(f);
          let h = Ne(s, f);
          s.assign(h);
        } else {
          let l = xe(ae(p, this.decay), ae(Qt(i), 1 - this.decay)), m = xe(ae(u, this.momentum), Ge(ae(i, this.learningRate), $r(xe(l, this.epsilon))));
          p.assign(l), u.assign(m);
          let d = Ne(s, m);
          s.assign(d);
        }
      });
    }), this.incrementIterations();
  }
  dispose() {
    this.accumulatedMeanSquares != null && Dt(this.accumulatedMeanSquares.map((e) => e.variable)), this.accumulatedMeanGrads != null && this.centered && Dt(this.accumulatedMeanGrads.map((e) => e.variable)), this.accumulatedMoments != null && Dt(this.accumulatedMoments.map((e) => e.variable));
  }
  async getWeights() {
    let e = [...this.accumulatedMeanSquares, ...this.accumulatedMoments];
    return this.centered && e.push(...this.accumulatedMeanGrads), [await this.saveIterations()].concat(e.map((t6) => ({ name: t6.originalName, tensor: t6.variable })));
  }
  async setWeights(e) {
    e = await this.extractIterations(e);
    let t6 = this.centered ? e.length / 3 : e.length / 2, o = false;
    this.accumulatedMeanSquares = e.slice(0, t6).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) })), this.accumulatedMoments = e.slice(t6, t6 * 2).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) })), this.centered && (this.accumulatedMeanGrads = e.slice(t6 * 2, t6 * 3).map((n) => ({ originalName: n.name, variable: n.tensor.variable(o) })));
  }
  getConfig() {
    return { learningRate: this.learningRate, decay: this.decay, momentum: this.momentum, epsilon: this.epsilon, centered: this.centered };
  }
  static fromConfig(e, t6) {
    return new e(t6.learningRate, t6.decay, t6.momentum, t6.epsilon, t6.centered);
  }
};
Di.className = "RMSProp";
Er(Di);
var ns = class {
  static sgd(e) {
    return new qs(e);
  }
  static momentum(e, t6, o = false) {
    return new Fi(e, t6, o);
  }
  static rmsprop(e, t6 = 0.9, o = 0, n = null, s = false) {
    return new Di(e, t6, o, n, s);
  }
  static adam(e = 1e-3, t6 = 0.9, o = 0.999, n = null) {
    return new Ai(e, t6, o, n);
  }
  static adadelta(e = 1e-3, t6 = 0.95, o = null) {
    return new Ei(e, t6, o);
  }
  static adamax(e = 2e-3, t6 = 0.9, o = 0.999, n = null, s = 0) {
    return new Ri(e, t6, o, n, s);
  }
  static adagrad(e, t6 = 0.1) {
    return new $i(e, t6);
  }
};
var hMe = { sgd: ns.sgd, momentum: ns.momentum, adadelta: ns.adadelta, adagrad: ns.adagrad, rmsprop: ns.rmsprop, adamax: ns.adamax, adam: ns.adam };
var dq = (() => typeof requestAnimationFrame != "undefined" ? requestAnimationFrame : typeof setImmediate != "undefined" ? setImmediate : (r) => r())();
function CC() {
  return new Promise((r) => dq(() => r()));
}
var S = {};
Ue(S, { ERF_A1: () => $q, ERF_A2: () => Aq, ERF_A3: () => Rq, ERF_A4: () => Fq, ERF_A5: () => Dq, ERF_P: () => Eq, PARALLELIZE_THRESHOLD: () => Ud, RowPartitionType: () => Ks, SELU_SCALE: () => _q, SELU_SCALEALPHA: () => Tq, applyActivation: () => yu, assertAndGetBroadcastShape: () => Je, assertAxesAreInnerMostDims: () => DU, assertParamsConsistent: () => fq, assignToTypedArray: () => Vq, axesAreInnerMostDims: () => uC, calculateShapes: () => J0, checkEinsumDimSizes: () => qq, checkPadOnDimRoundingMode: () => Pt, combineLocations: () => nk, combineRaggedTensorToTensorShapes: () => gq, complexWithEvenIndex: () => Mq, complexWithOddIndex: () => Lq, computeConv2DInfo: () => uu, computeConv3DInfo: () => Nv, computeDefaultPad: () => iC, computeDilation2DInfo: () => OW, computeOptimalWindowSize: () => Cq, computeOutAndReduceShapes: () => FU, computeOutShape: () => hq, computePool2DInfo: () => aC, computePool3DInfo: () => PW, convertConv2DDataFormat: () => Tv, decodeEinsumEquation: () => Gq, eitherStridesOrDilationsAreOne: () => lr, expandShapeToKeepDim: () => Aa, exponent: () => Wq, exponents: () => zq, fromStringArrayToUint8: () => dK, fromUint8ToStringArray: () => mK, getAxesPermutation: () => OU, getBroadcastDims: () => X0, getComplexWithIndex: () => Bq, getEinsumComputePath: () => Kq, getEinsumPermutation: () => Hq, getFusedBiasGradient: () => xu, getFusedDyActivation: () => gu, getImageCenter: () => Sq, getInnerMostAxes: () => MU, getPermuted: () => Iq, getRaggedRank: () => yq, getReductionAxes: () => jm, getReshaped: () => wq, getReshapedPermuted: () => vq, getRowPartitionTypesHelper: () => xq, getSliceBeginCoords: () => kq, getSliceSize: () => Nq, getSparseFillEmptyRowsIndicesDenseShapeMismatch: () => Qq, getSparseFillEmptyRowsNegativeIndexErrorMessage: () => Zq, getSparseFillEmptyRowsOutOfRangeIndexErrorMessage: () => Jq, getSparseReshapeEmptyTensorZeroOutputDimErrorMessage: () => rK, getSparseReshapeInputOutputMismatchErrorMessage: () => nK, getSparseReshapeInputOutputMultipleErrorMessage: () => oK, getSparseReshapeMultipleNegativeOneOutputDimErrorMessage: () => eK, getSparseReshapeNegativeOutputDimErrorMessage: () => tK, getSparseSegmentReductionIndicesOutOfRangeErrorMessage: () => uK, getSparseSegmentReductionNegativeSegmentIdsErrorMessage: () => sK, getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage: () => aK, getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage: () => iK, getUndoAxesPermutation: () => PU, isIdentityPermutation: () => jq, log: () => GV, mergeRealAndImagArrays: () => Oq, prepareAndValidate: () => Z0, prepareSplitSize: () => Yq, segment_util: () => wC, shouldFuse: () => bu, slice_util: () => ut, splitRealAndImagArrays: () => Pq, tupleValuesAreOne: () => iu, upcastType: () => dt, validateDefaultValueShape: () => bq, validateInput: () => Qm, validateUpdateShape: () => tC, warn: () => Os });
function fq(r, e) {
  let t6 = r[0].length;
  r.forEach((n, s) => {
    E(n.length === t6, () => `Error in concat${t6}D: rank of tensors[${s}] must be the same as the rank of the rest (${t6})`);
  }), E(e >= 0 && e < t6, () => `Error in concat${t6}D: axis must be between 0 and ${t6 - 1}.`);
  let o = r[0];
  r.forEach((n, s) => {
    for (let a = 0; a < t6; a++)
      E(a === e || n[a] === o[a], () => `Error in concat${t6}D: Shape of tensors[${s}] (${n}) does not match the shape of the rest (${o}) along the non-concatenated axis ${s}.`);
  });
}
function hq(r, e) {
  let t6 = r[0].slice();
  for (let o = 1; o < r.length; o++)
    t6[e] += r[o][e];
  return t6;
}
var Ks;
(function(r) {
  r[r.FIRST_DIM_SIZE = 0] = "FIRST_DIM_SIZE", r[r.VALUE_ROWIDS = 1] = "VALUE_ROWIDS", r[r.ROW_LENGTHS = 2] = "ROW_LENGTHS", r[r.ROW_SPLITS = 3] = "ROW_SPLITS", r[r.ROW_LIMITS = 4] = "ROW_LIMITS", r[r.ROW_STARTS = 5] = "ROW_STARTS";
})(Ks || (Ks = {}));
function gq(r, e, t6) {
  let o = new Array();
  if (t6 == null && e == null)
    return o;
  if (e == null)
    for (; o.length < r + t6.length; )
      o.push(-1);
  else
    o = e.slice();
  if (t6 == null)
    return o;
  if (r + t6.length !== o.length)
    throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.rank = ${r + t6.length}, but shape.rank = ${o.length}`);
  for (let n = 1; n < t6.length; ++n) {
    let s = t6[n], a = o[o.length - t6.length + n], i = o[a];
    if (s >= 0)
      if (i >= 0) {
        if (i !== s)
          throw new Error(`rt input.shape and shape=${e} are incompatible: rt input.shape[${n + r}] = ${s} but shape[${n + r}] = ${i}`);
      } else
        o[a] = s;
  }
  return o;
}
function xq(r) {
  let e = { FIRST_DIM_SIZE: Ks.FIRST_DIM_SIZE, VALUE_ROWIDS: Ks.VALUE_ROWIDS, ROW_LENGTHS: Ks.ROW_LENGTHS, ROW_SPLITS: Ks.ROW_SPLITS, ROW_LIMITS: Ks.ROW_LIMITS, ROW_STARTS: Ks.ROW_STARTS }, t6 = [];
  for (let o of r)
    if (o in e)
      t6.push(e[o]);
    else
      break;
  return t6;
}
function yq(r) {
  return r.length === 0 ? 0 : r[0] === Ks.FIRST_DIM_SIZE ? r.length - 1 : r.length;
}
function bq(r, e) {
  if (r == null || e == null)
    return;
  let t6 = r.length, o = e.length;
  if (t6 >= o)
    throw new Error(`defaultValue.shape=${r} and ragged tensor flatValues.shape=${e}, are incompatible: defaultValue.rank = ${t6} must be less than ragged tensor input flatValues.rank = ${o})`);
  for (let n = 0; n < Math.min(t6, o - 1); ++n) {
    let s = r[n], a = e[n + 1];
    if (s >= 0 && a >= 0 && s !== 1 && s !== a)
      throw new Error(`defaultValue.shape=${r}, and ragged tensor input flatValues.shape=${e} are incompatible: defaultValue.shape[${n - r.length}] = ${s} but ragged tensor input.flatValues.shape[${n - r.length}] = ${a}`);
  }
}
var Ud = 30;
function Cq(r) {
  return r <= Ud ? r : sp(r, Math.floor(Math.sqrt(r)));
}
function Sq(r, e, t6) {
  let o = t6 * (typeof r == "number" ? r : r[0]), n = e * (typeof r == "number" ? r : r[1]);
  return [o, n];
}
function wq(r, e, t6, o = true) {
  let n = [];
  if (o)
    n = n.concat(e.slice(0)), n.push(r[0] / t6), n = n.concat(r.slice(1));
  else {
    n = n.concat(r[0]);
    let s = e.length;
    for (let a = 0; a < s; ++a)
      n = n.concat([r[a + 1] / e[a], e[a]]);
    n = n.concat(r.slice(s + 1));
  }
  return n;
}
function Iq(r, e, t6 = true) {
  let o = [];
  if (t6) {
    o.push(e);
    for (let n = e + 1; n < r; ++n)
      n <= 2 * e ? (o.push(n), o.push(n - (e + 1))) : o.push(n);
  } else {
    let n = [], s = [];
    for (let a = 1; a < r; ++a)
      a >= e * 2 + 1 || a % 2 === 1 ? s.push(a) : n.push(a);
    o.push(...n), o.push(0), o.push(...s);
  }
  return o;
}
function vq(r, e, t6, o = true) {
  let n = [];
  o ? n.push(r[0] / t6) : n.push(r[0] * t6);
  for (let s = 1; s < r.length; ++s)
    s <= e.length ? o ? n.push(e[s - 1] * r[s]) : n.push(r[s] / e[s - 1]) : n.push(r[s]);
  return n;
}
function kq(r, e) {
  let t6 = [0];
  for (let o = 0; o < e; ++o)
    t6.push(r[o][0]);
  return t6;
}
function Nq(r, e, t6) {
  let o = r.slice(0, 1);
  for (let n = 0; n < t6; ++n)
    o.push(r[n + 1] - e[n][0] - e[n][1]);
  return o;
}
var Tq = 1.7580993408473768;
var _q = 1.0507009873554805;
var Eq = 0.3275911;
var $q = 0.254829592;
var Aq = -0.284496736;
var Rq = 1.421413741;
var Fq = -1.453152027;
var Dq = 1.061405429;
function Oq(r, e) {
  if (r.length !== e.length)
    throw new Error(`Cannot merge real and imag arrays of different lengths. real:${r.length}, imag: ${e.length}.`);
  let t6 = new Float32Array(r.length * 2);
  for (let o = 0; o < t6.length; o += 2)
    t6[o] = r[o / 2], t6[o + 1] = e[o / 2];
  return t6;
}
function Pq(r) {
  let e = new Float32Array(r.length / 2), t6 = new Float32Array(r.length / 2);
  for (let o = 0; o < r.length; o += 2)
    e[o / 2] = r[o], t6[o / 2] = r[o + 1];
  return { real: e, imag: t6 };
}
function Mq(r) {
  let e = Math.ceil(r.length / 4), t6 = new Float32Array(e), o = new Float32Array(e);
  for (let n = 0; n < r.length; n += 4)
    t6[Math.floor(n / 4)] = r[n], o[Math.floor(n / 4)] = r[n + 1];
  return { real: t6, imag: o };
}
function Lq(r) {
  let e = Math.floor(r.length / 4), t6 = new Float32Array(e), o = new Float32Array(e);
  for (let n = 2; n < r.length; n += 4)
    t6[Math.floor(n / 4)] = r[n], o[Math.floor(n / 4)] = r[n + 1];
  return { real: t6, imag: o };
}
function Bq(r, e) {
  let t6 = r[e * 2], o = r[e * 2 + 1];
  return { real: t6, imag: o };
}
function Vq(r, e, t6, o) {
  r[o * 2] = e, r[o * 2 + 1] = t6;
}
function zq(r, e) {
  let t6 = new Float32Array(r / 2), o = new Float32Array(r / 2);
  for (let n = 0; n < Math.ceil(r / 2); n++) {
    let s = (e ? 2 : -2) * Math.PI * (n / r);
    t6[n] = Math.cos(s), o[n] = Math.sin(s);
  }
  return { real: t6, imag: o };
}
function Wq(r, e, t6) {
  let o = (t6 ? 2 : -2) * Math.PI * (r / e), n = Math.cos(o), s = Math.sin(o);
  return { real: n, imag: s };
}
var SC = "->";
var Uq = /->/g;
var SN = ",";
var wN = "...";
function Gq(r, e) {
  r = r.replace(/\s/g, "");
  let t6 = (r.length - r.replace(Uq, "").length) / SC.length;
  if (t6 < 1)
    throw new Error("Equations without an arrow are not supported.");
  if (t6 > 1)
    throw new Error(`Equation must contain exactly one arrow ("${SC}").`);
  let [o, n] = r.split(SC);
  E(o.indexOf(wN) === -1, () => `The ellipsis notation ("${wN}") is not supported yet.`);
  let s = o.split(SN), a = s.length;
  if (e !== a)
    throw new Error(`Expected ${a} input tensors, received ${e}`);
  if (a > 2)
    throw new Error("Support for more than 2 input tensors is not implemented yet.");
  let i = [];
  for (let m = 0; m < n.length; ++m) {
    let d = n[m];
    if (!s.some((f) => f.indexOf(d) !== -1))
      throw new Error(`Output subscripts contain the label ${d} not present in the input subscripts.`);
    i.indexOf(d) === -1 && i.push(d);
  }
  for (let m = 0; m < o.length; ++m) {
    let d = o[m];
    i.indexOf(d) === -1 && d !== SN && i.push(d);
  }
  let p = new Array(s.length);
  for (let m = 0; m < a; ++m) {
    if (new Set(s[m].split("")).size !== s[m].length)
      throw new Error(`Found duplicate axes in input component ${s[m]}. Support for duplicate axes in input is not implemented yet.`);
    p[m] = [];
    for (let d = 0; d < s[m].length; ++d)
      p[m].push(i.indexOf(s[m][d]));
  }
  let u = i.length, c = n.length, l = [];
  for (let m = c; m < u; ++m)
    l.push(m);
  return { allDims: i, summedDims: l, idDims: p };
}
function Hq(r, e) {
  let t6 = new Array(r);
  t6.fill(-1);
  for (let n = 0; n < e.length; ++n)
    t6[e[n]] = n;
  let o = [];
  for (let n = 0; n < r; ++n)
    t6[n] === -1 && o.push(n);
  return t6 = t6.filter((n) => n !== -1), { permutationIndices: t6, expandDims: o };
}
function qq(r, e, t6) {
  let o = new Array(r);
  for (let n = 0; n < t6.length; ++n) {
    let s = t6[n].shape;
    for (let a = 0; a < e[n].length; ++a)
      o[e[n][a]] === void 0 ? o[e[n][a]] = s[a] : E(o[e[n][a]] === s[a], () => `Expected dimension ${o[e[n][a]]} at axis ${a} of input shaped ${JSON.stringify(s)}, but got dimension ${s[a]}`);
  }
}
function Kq(r, e) {
  let t6 = r, o = [], n = 0;
  r.length === 0 && t6.push(-1), n = r.length + 1;
  for (let a = 0; a < n; ++a)
    o.push([]);
  let s = [];
  for (let a = 0; a < t6.length; ++a) {
    let i = t6[a], p = Xq(e, i);
    for (let u of p)
      s.indexOf(u) === -1 && (o[a].push(u), s.push(u));
  }
  return { path: t6, steps: o };
}
function jq(r) {
  return r.every((e, t6) => e === t6);
}
function Xq(r, e) {
  let t6 = [];
  for (let o = 0; o < r.length; ++o)
    (r[o].length === 0 || r[o].indexOf(e) !== -1 || e === -1) && t6.push(o);
  return t6;
}
function Yq(r, e, t6 = 0) {
  let o = [];
  if (typeof e == "number")
    E(r.shape[t6] % e === 0, () => "Number of splits must evenly divide the axis."), o = new Array(e).fill(r.shape[t6] / e);
  else {
    let n = e.reduce((a, i) => (i === -1 && (a += 1), a), 0);
    E(n <= 1, () => "There should be only one negative value in split array.");
    let s = e.indexOf(-1);
    if (s !== -1) {
      let a = e.reduce((i, p) => p > 0 ? i + p : i);
      e[s] = r.shape[t6] - a;
    }
    E(r.shape[t6] === e.reduce((a, i) => a + i), () => "The sum of sizes must match the size of the axis dimension."), o = e;
  }
  return o;
}
function Qq(r) {
  return `Received SparseTensor with denseShape[0] = 0 but
  indices.shape[0] = ${r}`;
}
function Zq(r, e) {
  return `indices(${r}, 0) is invalid: ${e} < 0`;
}
function Jq(r, e, t6) {
  return `indices(${r}, 0) is invalid: ${e} >= ${t6}`;
}
function eK(r, e) {
  return `only one output dimension may be -1, not both ${r} and ${e}`;
}
function tK(r, e) {
  return `size ${r} must be non-negative, not ${e}`;
}
function rK() {
  return "reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero";
}
function oK(r, e) {
  let t6 = ze(r), o = ze(e);
  return `Input to reshape is a SparseTensor with ${t6}
  dense values, but the requested shape requires a multiple of ${o}. inputShape=${r} outputShape= ${e}`;
}
function nK(r, e) {
  let t6 = ze(r), o = ze(e);
  return `Input to reshape is a tensor with ${t6} dense values, but the requested shape has ${o}. inputShape=${r} outputShape=${e}`;
}
function sK() {
  return "segment ids must be >= 0";
}
function aK() {
  return "segment ids are not increasing";
}
function iK(r, e) {
  return `Segment id ${r} out of range [0, ${e}), possibly because segmentIds input is not sorted.`;
}
function uK(r, e, t6) {
  return `Bad: indices[${r}] == ${e} out of range [0, ${t6})`;
}
var wC = {};
Ue(wC, { collectGatherOpShapeInfo: () => lK, computeOutShape: () => cK, segOpComputeOptimalWindowSize: () => pK });
function pK(r, e) {
  let t6 = false, o;
  for (r <= Ud ? (o = r, t6 = true) : o = sp(r, Math.floor(Math.sqrt(r))); !t6; )
    o > e || o === r ? t6 = true : o = sp(r, o + 1);
  return o;
}
function cK(r, e, t6) {
  let o = [], n = r.length;
  for (let s = 0; s < n; s++)
    s !== e ? o.push(r[s]) : o.push(t6);
  return o;
}
function lK(r, e, t6, o) {
  let n = e.shape.length, s = r.shape.length;
  if (o !== 0 && (o < -n || o > n))
    throw new Error(`Expect batchDims in the range of [-${n}, ${n}], but got ${o}`);
  if (o < 0 && (o += n), o > s)
    throw new Error(`batchDims (${o}) must be less than rank(x) (
    ${s}).`);
  if (t6 < o)
    throw new Error(`batchDims (${o}) must be less than or equal to axis (${t6}).`);
  for (let l = 0; l < o; ++l)
    if (r.shape[l] !== e.shape[l])
      throw new Error(`x.shape[${l}]: ${r.shape[l]} should be equal to indices.shape[${l}]: ${e.shape[l]}.`);
  let a = r.shape[t6], i = [], p = 1, u = 1, c = 1;
  for (let l = 0; l < o; ++l)
    i.push(r.shape[l]), p *= r.shape[l];
  for (let l = o; l < t6; l++)
    i.push(r.shape[l]), u *= r.shape[l];
  for (let l = o; l < n; l++)
    i.push(e.shape[l]);
  for (let l = t6 + 1; l < s; l++)
    i.push(r.shape[l]), c *= r.shape[l];
  return { batchSize: p, sliceSize: c, outerSize: u, dimSize: a, outputShape: i };
}
function mK(r) {
  try {
    return r.map((e) => Ap(e));
  } catch (e) {
    throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`);
  }
}
function dK(r) {
  return r.map((e) => gi(e));
}
var Lt = {};
Ue(Lt, { nonMaxSuppressionV3Impl: () => Vd, nonMaxSuppressionV4Impl: () => zd, nonMaxSuppressionV5Impl: () => Wd, whereImpl: () => Pd });
var fK = O();
fK.registerFlag("KEEP_INTERMEDIATE_TENSORS", () => false, (r) => {
  r && console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.");
});
var ao;
(function(r) {
  r[r.DT_INVALID = 0] = "DT_INVALID", r[r.DT_FLOAT = 1] = "DT_FLOAT", r[r.DT_DOUBLE = 2] = "DT_DOUBLE", r[r.DT_INT32 = 3] = "DT_INT32", r[r.DT_UINT8 = 4] = "DT_UINT8", r[r.DT_INT16 = 5] = "DT_INT16", r[r.DT_INT8 = 6] = "DT_INT8", r[r.DT_STRING = 7] = "DT_STRING", r[r.DT_COMPLEX64 = 8] = "DT_COMPLEX64", r[r.DT_INT64 = 9] = "DT_INT64", r[r.DT_BOOL = 10] = "DT_BOOL", r[r.DT_QINT8 = 11] = "DT_QINT8", r[r.DT_QUINT8 = 12] = "DT_QUINT8", r[r.DT_QINT32 = 13] = "DT_QINT32", r[r.DT_BFLOAT16 = 14] = "DT_BFLOAT16", r[r.DT_QINT16 = 15] = "DT_QINT16", r[r.DT_QUINT16 = 16] = "DT_QUINT16", r[r.DT_UINT16 = 17] = "DT_UINT16", r[r.DT_COMPLEX128 = 18] = "DT_COMPLEX128", r[r.DT_HALF = 19] = "DT_HALF", r[r.DT_RESOURCE = 20] = "DT_RESOURCE", r[r.DT_VARIANT = 21] = "DT_VARIANT", r[r.DT_UINT32 = 22] = "DT_UINT32", r[r.DT_UINT64 = 23] = "DT_UINT64", r[r.DT_FLOAT_REF = 101] = "DT_FLOAT_REF", r[r.DT_DOUBLE_REF = 102] = "DT_DOUBLE_REF", r[r.DT_INT32_REF = 103] = "DT_INT32_REF", r[r.DT_UINT8_REF = 104] = "DT_UINT8_REF", r[r.DT_INT16_REF = 105] = "DT_INT16_REF", r[r.DT_INT8_REF = 106] = "DT_INT8_REF", r[r.DT_STRING_REF = 107] = "DT_STRING_REF", r[r.DT_COMPLEX64_REF = 108] = "DT_COMPLEX64_REF", r[r.DT_INT64_REF = 109] = "DT_INT64_REF", r[r.DT_BOOL_REF = 110] = "DT_BOOL_REF", r[r.DT_QINT8_REF = 111] = "DT_QINT8_REF", r[r.DT_QUINT8_REF = 112] = "DT_QUINT8_REF", r[r.DT_QINT32_REF = 113] = "DT_QINT32_REF", r[r.DT_BFLOAT16_REF = 114] = "DT_BFLOAT16_REF", r[r.DT_QINT16_REF = 115] = "DT_QINT16_REF", r[r.DT_QUINT16_REF = 116] = "DT_QUINT16_REF", r[r.DT_UINT16_REF = 117] = "DT_UINT16_REF", r[r.DT_COMPLEX128_REF = 118] = "DT_COMPLEX128_REF", r[r.DT_HALF_REF = 119] = "DT_HALF_REF", r[r.DT_RESOURCE_REF = 120] = "DT_RESOURCE_REF", r[r.DT_VARIANT_REF = 121] = "DT_VARIANT_REF", r[r.DT_UINT32_REF = 122] = "DT_UINT32_REF", r[r.DT_UINT64_REF = 123] = "DT_UINT64_REF";
})(ao || (ao = {}));
var IN;
(function(r) {
  let e;
  (function(t6) {
    t6[t6.LEGACY = 0] = "LEGACY", t6[t6.V1 = 1] = "V1", t6[t6.V2 = 2] = "V2";
  })(e = r.CheckpointFormatVersion || (r.CheckpointFormatVersion = {}));
})(IN || (IN = {}));
var vC = {};
function gK(r, e) {
  let t6 = { tfOpName: r, category: "custom", inputs: [], attrs: [], customExecutor: e };
  vC[r] = t6;
}
function Gd(r) {
  return vC[r];
}
function xK(r) {
  delete vC[r];
}
function I(r, e, t6, o, n) {
  let s = e.inputParams[r];
  if (s && s.inputIndexStart !== void 0) {
    let i = s.inputIndexStart, p = s.inputIndexEnd === 0 ? void 0 : s.inputIndexEnd === void 0 ? i + 1 : s.inputIndexEnd;
    if (s.type === "tensor")
      return Gt(e.inputNames[s.inputIndexStart], t6, o, n);
    if (s.type === "tensors")
      return e.inputNames.slice(i, p).map((m) => Gt(m, t6, o, n));
    let u = Gt(e.inputNames.slice(i)[0], t6, o, n), c = u.dataSync();
    return s.type === "number" ? c[0] : y.toNestedArray(u.shape, c);
  }
  let a = e.attrParams[r];
  return a && a.value;
}
function Gt(r, e, t6, o) {
  let [n, s] = Ir(r);
  if (o != null) {
    let i = o.getHashTableHandleByName(n);
    if (i != null)
      return i;
  }
  let a = t6.currentContextIds.find((i) => !!e[Hd(n, i)]);
  return a !== void 0 ? e[Hd(n, a)][s] : void 0;
}
function vN(r, e, t6) {
  return e[Hd(r, t6.currentContextId)];
}
function ss(r, e) {
  let [t6, o, n] = Ir(r);
  return [Hd(t6, e && e.currentContextId), o, n];
}
function Hd(r, e) {
  return e ? `${r}-${e}` : r;
}
function Ir(r) {
  let e = r.split(":");
  if (e.length === 1)
    return [r, 0, void 0];
  let t6 = e[0], o = e.length === 3 ? e[1] : void 0, n = Number(e[e.length - 1]);
  return [t6, n, o];
}
function ul(r, e, t6) {
  let o = I("pad", r, e, t6);
  if (o === "explicit") {
    o = I("explicitPaddings", r, e, t6);
    let n = [[0, 0], [0, 0], [0, 0], [0, 0]];
    for (let s = 0; s < 4; s++)
      n[s][0] = o[s * 2], n[s][1] = o[s * 2 + 1];
    return n;
  }
  return o;
}
function as(r) {
  return r.kept ? r : Br(r);
}
var kC = {};
Ue(kC, { json: () => yK });
var yK = [{ tfOpName: "Add", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddV2", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AddN", category: "arithmetic", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "BiasAdd", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "Sub", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "RealDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Div", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "DivNoNan", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorDiv", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mul", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Maximum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Minimum", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Pow", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SquaredDifference", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Mod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "FloorMod", category: "arithmetic", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var NC = {};
Ue(NC, { json: () => bK });
var bK = [{ tfOpName: "Abs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atan2", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Ceil", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ClipByValue", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "clipValueMin", type: "number" }, { start: 2, name: "clipValueMax", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Complex", category: "basic_math", inputs: [{ start: 0, name: "real", type: "tensor" }, { start: 1, name: "imag", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ComplexAbs", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cos", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Cosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Elu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Exp", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Floor", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Imag", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Neg", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Real", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "Tout", name: "outputType", type: "dtype", notSupported: true }] }, { tfOpName: "Prelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "alpha", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Relu6", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Selu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sigmoid", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sin", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Rsqrt", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Square", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Tanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Sign", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Round", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Expm1", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Log1p", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Reciprocal", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Softplus", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Asinh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Acosh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Atanh", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Erf", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Prod", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axes", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool", notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LeakyRelu", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "alpha", name: "alpha", type: "number", defaultValue: 0.2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "IsNan", category: "basic_math", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var TC = {};
Ue(TC, { json: () => CK });
var CK = [{ tfOpName: "EmptyTensorList", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "maxNumElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "LoopCond", category: "control", inputs: [{ start: 0, name: "pred", type: "tensor" }] }, { tfOpName: "Switch", category: "control", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "pred", type: "tensor" }] }, { tfOpName: "Merge", category: "control", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }] }, { tfOpName: "Enter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "frame_name", name: "frameName", type: "string" }, { tfName: "is_constant", name: "isConstant", type: "bool" }] }, { tfOpName: "Exit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NextIteration", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayV3", category: "control", inputs: [{ start: 0, name: "size", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "dynamic_size", name: "dynamicSize", type: "bool" }, { tfName: "clear_after_read", name: "clearAfterRead", type: "bool" }, { tfName: "identical_element_shapes", name: "identicalElementShapes", type: "bool" }, { tfName: "tensor_array_name", name: "name", type: "string" }] }, { tfOpName: "TensorArrayWriteV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayReadV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "TensorArrayGatherV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape", name: "elementShape", type: "shape" }] }, { tfOpName: "TensorArrayScatterV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "tensor", type: "tensor" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArrayConcatV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "element_shape_except0", name: "elementShapeExcept0", type: "shape", notSupported: true }] }, { tfOpName: "TensorArraySplitV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }, { start: 2, name: "lengths", type: "number[]" }, { start: 3, name: "flowIn", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "TensorArraySizeV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }, { start: 1, name: "flowIn", type: "number" }] }, { tfOpName: "TensorArrayCloseV3", category: "control", inputs: [{ start: 0, name: "tensorArrayId", type: "tensor" }] }, { tfOpName: "StatelessIf", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "If", category: "control", inputs: [{ start: 0, name: "cond", type: "tensor" }, { start: 1, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "then_branch", name: "thenBranch", type: "func" }, { tfName: "else_branch", name: "elseBranch", type: "func" }] }, { tfOpName: "StatelessWhile", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "While", category: "control", inputs: [{ start: 0, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "cond", name: "cond", type: "func" }, { tfName: "body", name: "body", type: "func" }] }, { tfOpName: "TensorListScatter", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListScatterV2", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }, { start: 3, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGather", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "indices", type: "number[]" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListGetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListSetItem", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "index", type: "number" }, { start: 2, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListReserve", category: "control", inputs: [{ start: 0, name: "elementShape", type: "shape" }, { start: 1, name: "numElements", type: "number" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListFromTensor", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListStack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }, { tfName: "num_elements", name: "numElements", type: "dtype" }] }, { tfOpName: "TensorListSplit", category: "control", inputs: [{ start: 0, name: "tensor", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }, { start: 2, name: "lengths", type: "number[]" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcat", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListConcatV2", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }], attrs: [{ tfName: "element_shape", name: "elementShape", type: "shape" }, { tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPopBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "elementShape", type: "shape" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListPushBack", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "tensor", type: "tensor" }], attrs: [{ tfName: "element_dtype", name: "elementDType", type: "dtype" }] }, { tfOpName: "TensorListLength", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }] }, { tfOpName: "TensorListResize", category: "control", inputs: [{ start: 0, name: "tensorListId", type: "tensor" }, { start: 1, name: "size", type: "number" }] }];
var _C = {};
Ue(_C, { json: () => SK });
var SK = [{ tfOpName: "AvgPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [], notSupported: true }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPoolWithArgmax", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "include_batch_in_index", name: "includeBatchInIndex", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "AvgPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MaxPool3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "ksize", name: "kernelSize", type: "number[]" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Conv1D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "stride", name: "stride", type: "number" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NWC" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "dilation", name: "dilation", type: "number", defaultValue: 1 }] }, { tfOpName: "Conv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "useCudnnOnGpu", name: "useCudnnOnGpu", type: "bool" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "_FusedConv2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "use_cudnn_on_gpu", name: "useCudnnOnGpu", type: "bool", defaultValue: true }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number", defaultValue: 0.2 }] }, { tfOpName: "Conv2DBackpropInput", category: "convolution", inputs: [{ start: 2, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 0, name: "outputShape", type: "number[]" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]", notSupported: true }] }, { tfOpName: "DepthwiseConv2d", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "DepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "FusedDepthwiseConv2dNative", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]", defaultValue: [1, 1, 1, 1] }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "explicit_paddings", name: "explicitPaddings", type: "number[]", defaultValue: [] }] }, { tfOpName: "Conv3D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }, { tfName: "data_format", name: "dataFormat", type: "string", defaultValue: "NHWC" }, { tfName: "dilations", name: "dilations", type: "number[]" }] }, { tfOpName: "Dilation2D", category: "convolution", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "filter", type: "tensor" }], attrs: [{ tfName: "strides", name: "strides", type: "number[]" }, { tfName: "rates", name: "dilations", type: "number[]" }, { tfName: "padding", name: "pad", type: "string" }] }];
var EC = {};
Ue(EC, { json: () => wK });
var wK = [{ tfOpName: "Fill", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }, { start: 1, name: "value", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "LinSpace", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "num", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "OneHot", category: "creation", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "depth", type: "number" }, { start: 2, name: "onValue", type: "number", defaultValue: 1 }, { start: 3, name: "offValue", type: "number", defaultValue: 0 }], attrs: [{ tfName: "axis", name: "axis", type: "number", notSupported: true }, { tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Ones", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "OnesLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "RandomStandardNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "RandomUniform", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "minval", name: "minval", type: "number", defaultValue: 0 }, { tfName: "maxval", name: "maxval", type: "number", defaultValue: 1 }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "seed", name: "seed", type: "number", defaultValue: 0 }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "Range", category: "creation", inputs: [{ start: 0, name: "start", type: "number" }, { start: 1, name: "stop", type: "number" }, { start: 2, name: "step", type: "number", defaultValue: 0 }], attrs: [{ tfName: "Tidx", name: "dtype", type: "dtype" }] }, { tfOpName: "TruncatedNormal", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "means", name: "mean", type: "number", defaultValue: 0 }, { tfName: "stddev", name: "stdDev", type: "number", defaultValue: 1 }, { tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number", defaultValue: 0, notSupported: true }, { tfName: "dtype", name: "dtype", type: "dtype" }, { tfName: "T", name: "T", type: "number", notSupported: true }] }, { tfOpName: "Zeros", category: "creation", inputs: [{ start: 0, name: "shape", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "ZerosLike", category: "creation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype" }] }, { tfOpName: "Multinomial", category: "creation", inputs: [{ start: 0, name: "logits", type: "tensor" }, { start: 1, name: "numSamples", type: "number" }], attrs: [{ tfName: "seed", name: "seed", type: "number" }, { tfName: "seed2", name: "seed2", type: "number" }, { tfName: "T", name: "dtype", type: "dtype" }, { tfName: "output_dtype", name: "output_dtype", type: "dtype" }] }];
var $C = {};
Ue($C, { json: () => IK });
var IK = [{ tfOpName: "NonMaxSuppressionV2", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV3", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }] }, { tfOpName: "NonMaxSuppressionV4", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }, { tfName: "T_threshold", name: "threshold", type: "dtype", notSupported: true }, { tfName: "pad_to_max_output_size", name: "padToMaxOutputSize", type: "bool" }] }, { tfOpName: "NonMaxSuppressionV5", category: "dynamic", inputs: [{ start: 0, name: "boxes", type: "tensor" }, { start: 1, name: "scores", type: "tensor" }, { start: 2, name: "maxOutputSize", type: "number" }, { start: 3, name: "iouThreshold", type: "number" }, { start: 4, name: "scoreThreshold", type: "number" }, { start: 5, name: "softNmsSigma", type: "number" }] }, { tfOpName: "Where", category: "dynamic", inputs: [{ start: 0, name: "condition", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ListDiff", category: "dynamic", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "y", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var AC = {};
Ue(AC, { json: () => vK });
var vK = [{ tfOpName: "LowerBound", category: "evaluation", inputs: [{ start: 0, name: "sortedSequence", type: "tensor" }, { start: 1, name: "values", type: "tensor" }] }, { tfOpName: "TopKV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "k", type: "number" }], attrs: [{ tfName: "sorted", name: "sorted", type: "bool" }] }, { tfOpName: "UpperBound", category: "evaluation", inputs: [{ start: 0, name: "sortedSequence", type: "tensor" }, { start: 1, name: "values", type: "tensor" }] }, { tfOpName: "Unique", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "UniqueV2", category: "evaluation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }];
var RC = {};
Ue(RC, { json: () => kK });
var kK = [{ tfOpName: "PlaceholderWithDefault", category: "graph", inputs: [{ start: 0, name: "default", type: "tensor" }], attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Placeholder", category: "graph", attrs: [{ tfName: "shape", name: "shape", type: "shape" }, { tfName: "dtype", name: "dtype", type: "dtype" }] }, { tfOpName: "Const", category: "graph" }, { tfOpName: "Identity", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IdentityN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Snapshot", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Rank", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Size", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "Shape", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "ShapeN", category: "graph", inputs: [{ start: 0, end: 0, name: "x", type: "tensors" }] }, { tfOpName: "Print", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "data", type: "tensors" }], attrs: [{ tfName: "message", name: "message", type: "string" }, { tfName: "first_n", name: "firstN", type: "number", notSupported: true }, { tfName: "summarize", name: "summarize", type: "number", defaultValue: 3 }] }, { tfOpName: "NoOp", category: "graph", inputs: [] }, { tfOpName: "StopGradient", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "FakeQuantWithMinMaxVars", category: "graph", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "min", name: "min", type: "number" }, { tfName: "max", name: "max", type: "number" }] }];
var FC = {};
Ue(FC, { json: () => NK });
var NK = [{ tfOpName: "HashTable", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "HashTableV2", category: "hash_table", inputs: [], attrs: [{ tfName: "shared_name", name: "sharedName", type: "string" }, { tfName: "use_node_name_sharing", name: "useNodeNameSharing", type: "bool" }, { tfName: "key_dtype", name: "keyDType", type: "dtype" }, { tfName: "value_dtype", name: "valueDType", type: "dtype" }] }, { tfOpName: "LookupTableImport", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableImportV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFind", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableFindV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "Tin", name: "tIn", type: "dtype", notSupported: true }, { tfName: "Tout", name: "tOut", type: "dtype", notSupported: true }] }, { tfOpName: "LookupTableSize", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "LookupTableSizeV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }] }, { tfOpName: "InitializeTable", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }, { tfOpName: "InitializeTableV2", category: "hash_table", inputs: [{ start: 0, name: "tableHandle", type: "tensor" }, { start: 1, name: "keys", type: "tensor" }, { start: 2, name: "values", type: "tensor" }] }];
var DC = {};
Ue(DC, { json: () => TK });
var TK = [{ tfOpName: "ResizeBilinear", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "ResizeNearestNeighbor", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "size", type: "number[]" }], attrs: [{ tfName: "align_corners", name: "alignCorners", type: "bool" }, { tfName: "half_pixel_centers", name: "halfPixelCenters", type: "bool" }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "CropAndResize", category: "image", inputs: [{ start: 0, name: "image", type: "tensor" }, { start: 1, name: "boxes", type: "tensor" }, { start: 2, name: "boxInd", type: "tensor" }, { start: 3, name: "cropSize", type: "number[]" }], attrs: [{ tfName: "method", name: "method", type: "string" }, { tfName: "extrapolation_value", name: "extrapolationValue", type: "number" }] }, { tfOpName: "ImageProjectiveTransformV3", category: "image", inputs: [{ start: 0, name: "images", type: "tensor" }, { start: 1, name: "transforms", type: "tensor" }, { start: 2, name: "outputShape", type: "number[]" }, { start: 3, name: "fillValue", type: "number" }], attrs: [{ tfName: "interpolation", name: "interpolation", type: "string" }, { tfName: "fill_mode", name: "fillMode", type: "string" }] }];
var OC = {};
Ue(OC, { json: () => _K });
var _K = [{ tfOpName: "Equal", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "NotEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Greater", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "GreaterEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Less", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LessEqual", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalAnd", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalNot", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "LogicalOr", category: "logical", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Select", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SelectV2", category: "logical", inputs: [{ start: 0, name: "condition", type: "tensor" }, { start: 1, name: "a", type: "tensor" }, { start: 2, name: "b", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }];
var PC = {};
Ue(PC, { json: () => EK });
var EK = [{ tfOpName: "_FusedMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }, { start: 2, end: 0, name: "args", type: "tensors" }], attrs: [{ tfName: "num_args", name: "numArgs", type: "number" }, { tfName: "fused_ops", name: "fusedOps", type: "string[]", defaultValue: [] }, { tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-4 }, { tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "leakyrelu_alpha", name: "leakyreluAlpha", type: "number", defaultValue: 0.2 }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "MatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "transpose_a", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "transpose_b", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMul", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "BatchMatMulV2", category: "matrices", inputs: [{ start: 0, name: "a", type: "tensor" }, { start: 1, name: "b", type: "tensor" }], attrs: [{ tfName: "adj_x", name: "transposeA", type: "bool", defaultValue: false }, { tfName: "adj_y", name: "transposeB", type: "bool", defaultValue: false }, { tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Transpose", category: "matrices", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "perm", type: "number[]" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "Einsum", category: "matrices", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "equation", name: "equation", type: "string" }, { tfName: "N", name: "n", type: "number", defaultValue: 2 }, { tfName: "T", name: "dtype", type: "dtype" }] }];
var MC = {};
Ue(MC, { json: () => $K });
var $K = [{ tfOpName: "EuclideanNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool", defaultValue: false }] }, { tfOpName: "FusedBatchNorm", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV2", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "FusedBatchNormV3", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "scale", type: "tensor" }, { start: 2, name: "offset", type: "tensor" }, { start: 3, name: "mean", type: "tensor" }, { start: 4, name: "variance", type: "tensor" }], attrs: [{ tfName: "epsilon", name: "epsilon", type: "number", defaultValue: 1e-3 }, { tfName: "data_format", name: "dataFormat", type: "string", notSupported: true }] }, { tfOpName: "LRN", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "depth_radius", name: "radius", type: "number", defaultValue: 5 }, { tfName: "bias", name: "bias", type: "number", defaultValue: 1 }, { tfName: "alpha", name: "alpha", type: "number", defaultValue: 1 }, { tfName: "beta", name: "beta", type: "number", defaultValue: 0.5 }] }, { tfOpName: "Softmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "LogSoftmax", category: "normalization", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "normalization", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: true, notSupported: true }] }];
var LC = {};
Ue(LC, { json: () => AK });
var AK = [{ tfOpName: "Bincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }] }, { tfOpName: "DenseBincount", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "size", type: "number" }, { start: 2, name: "weights", type: "tensor" }], attrs: [{ tfName: "binary_output", name: "binaryOutput", type: "bool" }] }, { tfOpName: "Max", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Mean", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Min", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Sum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "All", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Any", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "ArgMax", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "ArgMin", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "Prod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }], attrs: [{ tfName: "keep_dims", name: "keepDims", type: "bool" }] }, { tfOpName: "Cumprod", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }, { tfOpName: "Cumsum", category: "reduction", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }], attrs: [{ tfName: "exclusive", name: "exclusive", type: "bool" }, { tfName: "reverse", name: "reverse", type: "bool" }] }];
var BC = {};
Ue(BC, { json: () => RK });
var RK = [{ tfOpName: "ConcatV2", category: "slice_join", inputs: [{ start: 0, end: -1, name: "tensors", type: "tensors" }, { start: -1, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "Concat", category: "slice_join", inputs: [{ start: 1, end: 0, name: "tensors", type: "tensors" }, { start: 0, name: "axis", type: "number" }], attrs: [{ tfName: "N", name: "n", type: "number", defaultValue: 2 }] }, { tfOpName: "GatherV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }], attrs: [{ tfName: "batch_dims", name: "batchDims", type: "number", defaultValue: 0 }] }, { tfOpName: "Gather", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", notSupported: true }] }, { tfOpName: "Reverse", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "dims", type: "bool[]" }] }, { tfOpName: "ReverseV2", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number[]" }] }, { tfOpName: "Slice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "size", type: "number[]" }] }, { tfOpName: "StridedSlice", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "begin", type: "number[]" }, { start: 2, name: "end", type: "number[]" }, { start: 3, name: "strides", type: "number[]" }], attrs: [{ tfName: "begin_mask", name: "beginMask", type: "number", defaultValue: 0 }, { tfName: "end_mask", name: "endMask", type: "number", defaultValue: 0 }, { tfName: "new_axis_mask", name: "newAxisMask", type: "number", defaultValue: 0 }, { tfName: "ellipsis_mask", name: "ellipsisMask", type: "number", defaultValue: 0 }, { tfName: "shrink_axis_mask", name: "shrinkAxisMask", type: "number", defaultValue: 0 }] }, { tfOpName: "Pack", category: "slice_join", inputs: [{ start: 0, end: 0, name: "tensors", type: "tensors" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "Unpack", category: "slice_join", inputs: [{ start: 0, name: "tensor", type: "tensor" }], attrs: [{ tfName: "axis", name: "axis", type: "number", defaultValue: 0 }, { tfName: "num", name: "num", type: "number", defaultValue: 0, notSupported: true }] }, { tfOpName: "Tile", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "reps", type: "number[]" }] }, { tfOpName: "Split", category: "slice_join", inputs: [{ start: 0, name: "axis", type: "number", defaultValue: 0 }, { start: 1, name: "x", type: "tensor" }], attrs: [{ tfName: "num_split", name: "numOrSizeSplits", type: "number", defaultValue: 1 }] }, { tfOpName: "SplitV", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "numOrSizeSplits", type: "number[]" }, { start: 2, name: "axis", type: "number", defaultValue: 0 }] }, { tfOpName: "ScatterNd", category: "slice_join", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "shape", type: "number[]" }] }, { tfOpName: "GatherNd", category: "slice_join", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }] }, { tfOpName: "SparseToDense", category: "slice_join", inputs: [{ start: 0, name: "sparseIndices", type: "tensor" }, { start: 1, name: "outputShape", type: "number[]" }, { start: 2, name: "sparseValues", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }], attrs: [{ tfName: "validate_indices", name: "validateIndices", type: "bool", defaultValue: false, notSupported: true }] }];
var VC = {};
Ue(VC, { json: () => FK });
var FK = [{ tfOpName: "SparseFillEmptyRows", category: "sparse", inputs: [{ start: 0, name: "indices", type: "tensor" }, { start: 1, name: "values", type: "tensor" }, { start: 2, name: "denseShape", type: "tensor" }, { start: 3, name: "defaultValue", type: "tensor" }] }, { tfOpName: "SparseReshape", category: "sparse", inputs: [{ start: 0, name: "inputIndices", type: "tensor" }, { start: 1, name: "inputShape", type: "tensor" }, { start: 2, name: "newShape", type: "tensor" }], attrs: [{ tfName: "T", name: "dtype", type: "dtype", notSupported: true }] }, { tfOpName: "SparseSegmentMean", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }, { tfOpName: "SparseSegmentSum", category: "sparse", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "indices", type: "tensor" }, { start: 2, name: "segmentIds", type: "tensor" }] }];
var zC = {};
Ue(zC, { json: () => DK });
var DK = [{ tfOpName: "FFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "IFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }] }, { tfOpName: "RFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }, { tfOpName: "IRFFT", category: "spectral", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "fft_length", type: "number", notSupported: true }] }];
var WC = {};
Ue(WC, { json: () => OK });
var OK = [{ tfOpName: "StringNGrams", category: "string", inputs: [{ start: 0, name: "data", type: "tensor" }, { start: 1, name: "dataSplits", type: "tensor" }], attrs: [{ tfName: "separator", name: "separator", type: "string" }, { tfName: "ngram_widths", name: "nGramWidths", type: "number[]" }, { tfName: "left_pad", name: "leftPad", type: "string" }, { tfName: "right_pad", name: "rightPad", type: "string" }, { tfName: "pad_width", name: "padWidth", type: "number" }, { tfName: "preserve_short_sequences", name: "preserveShortSequences", type: "bool" }], outputs: ["ngrams", "ngrams_splits"] }, { tfOpName: "StringSplit", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }, { start: 1, name: "delimiter", type: "tensor" }], attrs: [{ tfName: "skip_empty", name: "skipEmpty", type: "bool" }], outputs: ["indices", "values", "shape"] }, { tfOpName: "StringToHashBucketFast", category: "string", inputs: [{ start: 0, name: "input", type: "tensor" }], attrs: [{ tfName: "num_buckets", name: "numBuckets", type: "number" }] }];
var UC = {};
Ue(UC, { json: () => PK });
var PK = [{ tfOpName: "Cast", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "SrcT", name: "sdtype", type: "dtype", notSupported: true }, { tfName: "DstT", name: "dtype", type: "dtype" }] }, { tfOpName: "ExpandDims", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "axis", type: "number" }] }, { tfOpName: "MirrorPad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "mode", name: "mode", type: "string" }] }, { tfOpName: "Pad", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }], attrs: [{ tfName: "constant_value", name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "PadV2", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "padding", type: "number[]" }, { start: 2, name: "constantValue", type: "number", defaultValue: 0 }] }, { tfOpName: "Reshape", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }] }, { tfOpName: "Squeeze", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "axis", tfDeprecatedName: "squeeze_dims", name: "axis", type: "number[]" }] }, { tfOpName: "SpaceToBatchND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "paddings", type: "number[]" }] }, { tfOpName: "BatchToSpaceND", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "blockShape", type: "number[]" }, { start: 2, name: "crops", type: "number[]" }] }, { tfOpName: "DepthToSpace", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }], attrs: [{ tfName: "block_size", name: "blockSize", type: "number" }, { tfName: "data_format", name: "dataFormat", type: "string" }] }, { tfOpName: "BroadcastTo", category: "transformation", inputs: [{ start: 0, name: "x", type: "tensor" }, { start: 1, name: "shape", type: "number[]" }], attrs: [] }, { tfOpName: "BroadcastArgs", category: "transformation", inputs: [{ start: 0, name: "s0", type: "tensor" }, { start: 1, name: "s1", type: "tensor" }], attrs: [] }];
var pl = class {
  constructor() {
    let e = [kC, NC, TC, _C, EC, $C, AC, RC, FC, DC, OC, PC, MC, LC, BC, VC, zC, WC, UC], t6 = [].concat(...e.map((o) => o.json));
    this.opMappers = t6.reduce((o, n) => (o[n.tfOpName] = n, o), {});
  }
  static get Instance() {
    return this._instance || (this._instance = new this());
  }
  transformGraph(e, t6 = {}) {
    let o = e.node, n = [], s = [], a = [], i = o.reduce((h, g) => (h[g.name] = this.mapNode(g), g.op.startsWith("Placeholder") ? n.push(h[g.name]) : g.op === "Const" ? s.push(h[g.name]) : (g.input == null || g.input.length === 0) && a.push(h[g.name]), h), {}), p = [], u = [], c = {}, l = {};
    t6 != null && (c = this.mapSignatureEntries(t6.inputs), l = this.mapSignatureEntries(t6.outputs));
    let m = Object.keys(i);
    m.forEach((h) => {
      let g = i[h];
      g.inputNames.forEach((x, b) => {
        let [C, , w] = ss(x), k = i[C];
        if (k.outputs != null) {
          let _ = k.outputs.indexOf(w);
          if (_ !== -1) {
            let $ = `${C}:${_}`;
            g.inputNames[b] = $;
          }
        }
        g.inputs.push(k), k.children.push(g);
      });
    }), Object.keys(l).length === 0 ? m.forEach((h) => {
      let g = i[h];
      g.children.length === 0 && u.push(g);
    }) : Object.keys(l).forEach((h) => {
      let [g] = ss(h), x = i[g];
      x != null && (x.signatureKey = l[h], u.push(x));
    }), Object.keys(c).length > 0 ? Object.keys(c).forEach((h) => {
      let [g] = ss(h), x = i[g];
      x && (x.signatureKey = c[h], p.push(x));
    }) : p = n;
    let d = {};
    e.library != null && e.library.function != null && (d = e.library.function.reduce((h, g) => (h[g.signature.name] = this.mapFunction(g), h), {}));
    let f = { nodes: i, inputs: p, outputs: u, weights: s, placeholders: n, signature: t6, functions: d };
    return a.length > 0 && (f.initNodes = a), f;
  }
  mapSignatureEntries(e) {
    return Object.keys(e || {}).reduce((t6, o) => (t6[e[o].name] = o, t6), {});
  }
  mapNode(e) {
    let t6 = Gd(e.op) || this.opMappers[e.op] || {};
    e.attr == null && (e.attr = {});
    let o = { name: e.name, op: e.op, category: t6.category, inputNames: (e.input || []).map((n) => n.startsWith("^") ? n.slice(1) : n), inputs: [], children: [], inputParams: {}, attrParams: {}, rawAttrs: e.attr, outputs: t6.outputs };
    return t6.inputs != null && (o.inputParams = t6.inputs.reduce((n, s) => (n[s.name] = { type: s.type, inputIndexStart: s.start, inputIndexEnd: s.end }, n), {})), t6.attrs != null && (o.attrParams = t6.attrs.reduce((n, s) => {
      let a = s.type, i;
      switch (s.type) {
        case "string":
          i = qd(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = qd(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "string[]":
          i = Jd(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = Jd(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "number":
          i = jd(e.attr, s.tfName, s.defaultValue || 0), i === void 0 && !!s.tfDeprecatedName && (i = jd(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "number[]":
          i = Zd(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = Zd(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "bool":
          i = Kd(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = Kd(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "bool[]":
          i = tf(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = tf(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "shape":
          i = Qd(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = Qd(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "shape[]":
          i = ef(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = ef(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "dtype":
          i = Xd(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = Xd(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "dtype[]":
          i = Yd(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = Yd(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "func":
          i = kN(e.attr, s.tfName, s.defaultValue), i === void 0 && !!s.tfDeprecatedName && (i = kN(e.attr, s.tfDeprecatedName, s.defaultValue));
          break;
        case "tensor":
        case "tensors":
          break;
        default:
          throw new Error(`Unsupported param type: ${s.type} for op: ${e.op}`);
      }
      return n[s.name] = { value: i, type: a }, n;
    }, {})), o;
  }
  mapFunction(e) {
    let t6 = e.nodeDef, o = [], n = [], s = {};
    t6 != null && (s = t6.reduce((l, m) => (l[m.name] = this.mapNode(m), m.op === "Const" && n.push(l[m.name]), l), {}));
    let a = [], i = [];
    e.signature.inputArg.forEach((l) => {
      let [m] = ss(l.name), d = { name: m, op: "Placeholder", inputs: [], inputNames: [], category: "graph", inputParams: {}, attrParams: { dtype: { value: GC(l.type), type: "dtype" } }, children: [] };
      d.signatureKey = l.name, a.push(d), s[m] = d;
    }), Object.keys(s).forEach((l) => {
      let m = s[l];
      m.inputNames.forEach((d, f) => {
        let [h, , g] = ss(d), x = s[h];
        if (x.outputs != null) {
          let b = x.outputs.indexOf(g);
          if (b !== -1) {
            let C = `${h}:${b}`;
            m.inputNames[f] = C;
          }
        }
        m.inputs.push(x), x.children.push(m);
      });
    });
    let u = e.ret;
    e.signature.outputArg.forEach((l) => {
      let [m, d] = ss(u[l.name]), f = s[m];
      f != null && (f.defaultOutput = d, i.push(f));
    });
    let c = this.mapArgsToSignature(e);
    return { nodes: s, inputs: a, outputs: i, weights: n, placeholders: o, signature: c };
  }
  mapArgsToSignature(e) {
    return { methodName: e.signature.name, inputs: e.signature.inputArg.reduce((t6, o) => (t6[o.name] = this.mapArgToTensorInfo(o), t6), {}), outputs: e.signature.outputArg.reduce((t6, o) => (t6[o.name] = this.mapArgToTensorInfo(o, e.ret), t6), {}) };
  }
  mapArgToTensorInfo(e, t6) {
    let o = e.name;
    return t6 != null && (o = t6[o]), { name: o, dtype: e.type };
  }
};
function MK(r) {
  let e = O().global;
  if (typeof e.atob != "undefined")
    return e.atob(r);
  if (typeof Buffer != "undefined")
    return new Buffer(r, "base64").toString();
  throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()");
}
function NN(r, e) {
  let t6 = Array.isArray(r) ? String.fromCharCode.apply(null, r) : MK(r);
  return e ? t6 : t6.toLowerCase();
}
function qd(r, e, t6, o = false) {
  let n = r[e];
  return n != null ? NN(n.s, o) : t6;
}
function Kd(r, e, t6) {
  let o = r[e];
  return o ? o.b : t6;
}
function jd(r, e, t6) {
  let o = r[e] || {}, n = o.i != null ? o.i : o.f != null ? o.f : t6;
  return typeof n == "number" ? n : parseInt(n, 10);
}
function GC(r) {
  switch (typeof r == "string" && (r = ao[r]), r) {
    case ao.DT_FLOAT:
    case ao.DT_HALF:
      return "float32";
    case ao.DT_INT32:
    case ao.DT_INT64:
    case ao.DT_INT8:
    case ao.DT_UINT8:
      return "int32";
    case ao.DT_BOOL:
      return "bool";
    case ao.DT_DOUBLE:
      return "float32";
    case ao.DT_STRING:
      return "string";
    default:
      return null;
  }
}
function kN(r, e, t6) {
  let o = r[e];
  return o && o.func ? o.func.name : t6;
}
function Xd(r, e, t6) {
  let o = r[e];
  return o && o.type ? GC(o.type) : t6;
}
function Yd(r, e, t6) {
  let o = r[e];
  return o && o.list && o.list.type ? o.list.type.map((n) => GC(n)) : t6;
}
function TN(r) {
  if (!r.unknownRank)
    return r.dim != null ? r.dim.map((e) => typeof e.size == "number" ? e.size : parseInt(e.size, 10)) : [];
}
function Qd(r, e, t6) {
  let o = r[e];
  return o && o.shape ? TN(o.shape) : t6;
}
function Zd(r, e, t6) {
  let o = r[e];
  return o ? ((o.list.f && o.list.f.length ? o.list.f : o.list.i) || []).map((n) => typeof n == "number" ? n : parseInt(n, 10)) : t6;
}
function Jd(r, e, t6, o = false) {
  let n = r[e];
  return n && n.list && n.list.s ? n.list.s.map((s) => NN(s, o)) : t6;
}
function ef(r, e, t6) {
  let o = r[e];
  return o && o.list && o.list.shape ? o.list.shape.map((n) => TN(n)) : t6;
}
function tf(r, e, t6) {
  let o = r[e];
  return o && o.list && o.list.b ? o.list.b : t6;
}
var rf = class {
  constructor(e, t6, o) {
    this.node = e, this.tensorMap = t6, this.context = o, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map((n) => this.getInput(n)), e.rawAttrs != null && (this.attrs = Object.keys(e.rawAttrs).reduce((n, s) => (n[s] = this.getAttr(s), n), {}));
  }
  getInput(e) {
    return Gt(e, this.tensorMap, this.context);
  }
  getAttr(e, t6) {
    let o = this.node.rawAttrs[e];
    if (o.tensor != null)
      return Gt(e, this.tensorMap, this.context);
    if (o.i != null || o.f != null)
      return jd(this.node.rawAttrs, e, t6);
    if (o.s != null)
      return qd(this.node.rawAttrs, e, t6);
    if (o.b != null)
      return Kd(this.node.rawAttrs, e, t6);
    if (o.shape != null)
      return Qd(this.node.rawAttrs, e, t6);
    if (o.type != null)
      return Xd(this.node.rawAttrs, e, t6);
    if (o.list != null) {
      if (o.list.i != null || o.list.f != null)
        return Zd(this.node.rawAttrs, e, t6);
      if (o.list.s != null)
        return Jd(this.node.rawAttrs, e, t6);
      if (o.list.shape != null)
        return ef(this.node.rawAttrs, e, t6);
      if (o.list.b != null)
        return tf(this.node.rawAttrs, e, t6);
      if (o.list.type != null)
        return Yd(this.node.rawAttrs, e, t6);
    }
    return t6;
  }
};
var Ye = {};
Ue(Ye, { OP_SCOPE_SUFFIX: () => Lb, abs: () => Yt, acos: () => fv, acosh: () => hv, add: () => xe, addN: () => gv, all: () => xv, any: () => yv, argMax: () => bv, argMin: () => Cv, asin: () => Sv, asinh: () => wv, atan: () => Iv, atan2: () => vv, atanh: () => kv, avgPool: () => td, avgPool3d: () => _v, basicLSTMCell: () => Ev, batchNorm: () => wi, batchNorm2d: () => Av, batchNorm3d: () => Rv, batchNorm4d: () => Fv, batchToSpaceND: () => rd, bincount: () => od, booleanMaskAsync: () => XG, broadcastArgs: () => Dv, broadcastTo: () => Ii, buffer: () => le, cast: () => Ke, ceil: () => Ov, clipByValue: () => Pv, clone: () => Br, complex: () => Tr, concat: () => gt, concat1d: () => Mv, concat2d: () => Lv, concat3d: () => Bv, concat4d: () => Vv, conv1d: () => zv, conv2d: () => vi, conv2dTranspose: () => Wv, conv3d: () => Uv, conv3dTranspose: () => Hv, cos: () => qv, cosh: () => Kv, cosineWindow: () => il, cumprod: () => jv, cumsum: () => Xv, denseBincount: () => Yv, depthToSpace: () => Qv, depthwiseConv2d: () => Bp, diag: () => Zv, dilation2d: () => Jv, div: () => Ge, divNoNan: () => ek, dot: () => tk, dropout: () => aH, einsum: () => rk, elu: () => ad, enclosingPowerOfTwo: () => xC, equal: () => sd, erf: () => ok, euclideanNorm: () => ak, exp: () => Co, expandDims: () => Fa, expm1: () => ik, eye: () => id, fft: () => zp, fill: () => Ws, floor: () => ud, floorDiv: () => Jm, fused: () => yC, gather: () => pd, gatherND: () => nH, greater: () => cu, greaterEqual: () => cd, ifft: () => hu, imag: () => Si, image: () => uq, inTopKAsync: () => uH, irfft: () => Fd, isFinite: () => uk, isInf: () => pk, isNaN: () => ck, leakyRelu: () => ld, less: () => lk, lessEqual: () => Vp, linalg: () => pq, linspace: () => mk, localResponseNormalization: () => dk, log: () => Da, log1p: () => md, logSigmoid: () => fk, logSoftmax: () => hk, logSumExp: () => hd, logicalAnd: () => lu, logicalNot: () => gd, logicalOr: () => xd, logicalXor: () => gk, losses: () => cq, lowerBound: () => xk, matMul: () => Xe, max: () => Us, maxPool: () => bd, maxPool3d: () => yk, maxPoolWithArgmax: () => bk, maximum: () => Cd, mean: () => mu, meshgrid: () => Ck, min: () => sl, minimum: () => Sd, mirrorPad: () => Sk, mod: () => wk, moments: () => Ik, movingAverage: () => QG, mul: () => ae, multiRNNCell: () => vk, multinomial: () => kk, neg: () => yr, norm: () => pu, notEqual: () => wd, oneHot: () => tl, ones: () => Gs, onesLike: () => Nk, op: () => N, outerProduct: () => Tk, pad: () => Hs, pad1d: () => _k, pad2d: () => Ek, pad3d: () => $k, pad4d: () => Ak, pool: () => Rk, pow: () => Ra, prelu: () => vd, print: () => Gm, prod: () => Fk, raggedGather: () => Dk, raggedRange: () => Ok, raggedTensorToTensor: () => Pk, rand: () => Mk, randomGamma: () => e1, randomNormal: () => Ed, randomStandardNormal: () => t1, randomUniform: () => $d, range: () => Ni, real: () => $a, reciprocal: () => r1, relu: () => Ti, relu6: () => Ad, reshape: () => z, reverse: () => no, reverse1d: () => o1, reverse2d: () => n1, reverse3d: () => s1, reverse4d: () => a1, rfft: () => Wp, round: () => Rd, rsqrt: () => i1, scalar: () => be, scatterND: () => JG, searchSorted: () => al, selu: () => u1, separableConv2d: () => p1, setdiff1dAsync: () => c1, sigmoid: () => zs, sign: () => l1, signal: () => iq, sin: () => m1, sinh: () => d1, slice: () => He, slice1d: () => f1, slice2d: () => h1, slice3d: () => g1, slice4d: () => x1, softmax: () => y1, softplus: () => fd, spaceToBatchND: () => Id, sparse: () => lq, sparseToDense: () => rH, spectral: () => aq, split: () => Oa, sqrt: () => $r, square: () => Qt, squaredDifference: () => Dd, squeeze: () => Up, stack: () => Sr, step: () => Od, stridedSlice: () => b1, string: () => mq, sub: () => Ne, sum: () => et, tan: () => C1, tanh: () => nl, tensor: () => nr, tensor1d: () => mr, tensor2d: () => _i, tensor3d: () => Xm, tensor4d: () => S1, tensor5d: () => w1, tensor6d: () => I1, tile: () => ki, topk: () => v1, transpose: () => Mp, truncatedNormal: () => k1, unique: () => N1, unsortedSegmentSum: () => T1, unstack: () => so, upperBound: () => _1, variable: () => E1, where: () => os, whereAsync: () => Md, zeros: () => Vr, zerosLike: () => Ut });
var _N = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "BiasAdd":
    case "AddV2":
    case "Add":
      return [o.add(I("a", r, e, t6), I("b", r, e, t6))];
    case "AddN":
      return [o.addN(I("tensors", r, e, t6))];
    case "FloorMod":
    case "Mod":
      return [o.mod(I("a", r, e, t6), I("b", r, e, t6))];
    case "Mul":
      return [o.mul(I("a", r, e, t6), I("b", r, e, t6))];
    case "RealDiv":
    case "Div":
      return [o.div(I("a", r, e, t6), I("b", r, e, t6))];
    case "DivNoNan":
      return [o.divNoNan(I("a", r, e, t6), I("b", r, e, t6))];
    case "FloorDiv":
      return [o.floorDiv(I("a", r, e, t6), I("b", r, e, t6))];
    case "Sub":
      return [o.sub(I("a", r, e, t6), I("b", r, e, t6))];
    case "Minimum":
      return [o.minimum(I("a", r, e, t6), I("b", r, e, t6))];
    case "Maximum":
      return [o.maximum(I("a", r, e, t6), I("b", r, e, t6))];
    case "Pow":
      return [o.pow(I("a", r, e, t6), I("b", r, e, t6))];
    case "SquaredDifference":
      return [o.squaredDifference(I("a", r, e, t6), I("b", r, e, t6))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var EN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "Abs":
    case "ComplexAbs":
      return [o.abs(I("x", r, e, t6))];
    case "Acos":
      return [o.acos(I("x", r, e, t6))];
    case "Acosh":
      return [o.acosh(I("x", r, e, t6))];
    case "Asin":
      return [o.asin(I("x", r, e, t6))];
    case "Asinh":
      return [o.asinh(I("x", r, e, t6))];
    case "Atan":
      return [o.atan(I("x", r, e, t6))];
    case "Atan2":
      return [o.atan2(I("x", r, e, t6), I("y", r, e, t6))];
    case "Atanh":
      return [o.atanh(I("x", r, e, t6))];
    case "Ceil":
      return [o.ceil(I("x", r, e, t6))];
    case "Complex":
      return [o.complex(I("real", r, e, t6), I("imag", r, e, t6))];
    case "Cos":
      return [o.cos(I("x", r, e, t6))];
    case "Cosh":
      return [o.cosh(I("x", r, e, t6))];
    case "Elu":
      return [o.elu(I("x", r, e, t6))];
    case "Erf":
      return [o.erf(I("x", r, e, t6))];
    case "Exp":
      return [o.exp(I("x", r, e, t6))];
    case "Expm1":
      return [o.expm1(I("x", r, e, t6))];
    case "Floor":
      return [o.floor(I("x", r, e, t6))];
    case "Log":
      return [o.log(I("x", r, e, t6))];
    case "Log1p":
      return [o.log1p(I("x", r, e, t6))];
    case "Imag":
      return [o.imag(I("x", r, e, t6))];
    case "Neg":
      return [o.neg(I("x", r, e, t6))];
    case "Reciprocal":
      return [o.reciprocal(I("x", r, e, t6))];
    case "Real":
      return [o.real(I("x", r, e, t6))];
    case "Relu":
      return [o.relu(I("x", r, e, t6))];
    case "Round":
      return [o.round(I("x", r, e, t6))];
    case "Selu":
      return [o.selu(I("x", r, e, t6))];
    case "Sigmoid":
      return [o.sigmoid(I("x", r, e, t6))];
    case "Sin":
      return [o.sin(I("x", r, e, t6))];
    case "Sign":
      return [o.sign(I("x", r, e, t6))];
    case "Sinh":
      return [o.sinh(I("x", r, e, t6))];
    case "Softplus":
      return [o.softplus(I("x", r, e, t6))];
    case "Sqrt":
      return [o.sqrt(I("x", r, e, t6))];
    case "Square":
      return [o.square(I("x", r, e, t6))];
    case "Tanh":
      return [o.tanh(I("x", r, e, t6))];
    case "Tan":
      return [o.tan(I("x", r, e, t6))];
    case "ClipByValue":
      return [o.clipByValue(I("x", r, e, t6), I("clipValueMin", r, e, t6), I("clipValueMax", r, e, t6))];
    case "Relu6":
      return [o.relu6(I("x", r, e, t6))];
    case "Rsqrt":
      return [o.rsqrt(Gt(r.inputNames[0], e, t6))];
    case "Prod":
      return [o.prod(I("x", r, e, t6), I("axes", r, e, t6))];
    case "LeakyRelu":
      return [o.leakyRelu(I("x", r, e, t6), I("alpha", r, e, t6))];
    case "Prelu":
      return [o.prelu(I("x", r, e, t6), I("alpha", r, e, t6))];
    case "IsNan":
      return [o.isNaN(Gt(r.inputNames[0], e, t6))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function zr(r, e, t6 = "") {
  if (!(typeof r == "number" || typeof e == "number")) {
    y.assert(r.length === e.length, () => t6 + ` Shapes ${r} and ${e} must match`);
    for (let o = 0; o < r.length; o++) {
      let n = r[o], s = e[o];
      y.assert(n < 0 || s < 0 || n === s, () => t6 + ` Shapes ${r} and ${e} must match`);
    }
  }
}
function $N(r) {
  return !(typeof r == "number" || r.some((e) => e < 0));
}
function Gp(r, e, t6) {
  let o = of(r, t6), n = !$N(o);
  if (n && e.length === 0)
    throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${o}`);
  if (n && e.forEach((s) => {
    o = of(s.shape, o);
  }), !$N(o))
    throw new Error(`Non-fully-defined elementShape: ${o}`);
  return o;
}
function of(r, e) {
  if (typeof r == "number")
    return e;
  if (typeof e == "number")
    return r;
  if (r.length !== e.length)
    throw new Error(`Incompatible ranks during merge: ${r} vs. ${e}`);
  let t6 = [];
  for (let o = 0; o < r.length; ++o) {
    let n = r[o], s = e[o];
    if (n >= 0 && s >= 0 && n !== s)
      throw new Error(`Incompatible shape during merge: ${r} vs. ${e}`);
    t6[o] = n >= 0 ? n : s;
  }
  return t6;
}
var nf = class {
  constructor(e, t6, o, n, s, a, i) {
    this.name = e, this.dtype = t6, this.maxSize = o, this.elementShape = n, this.identicalElementShapes = s, this.dynamicSize = a, this.clearAfterRead = i, this.tensors = [], this.closed_ = false, this.idTensor = be(0), _r(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  get closed() {
    return this.closed_;
  }
  clearAndClose(e) {
    this.tensors.forEach((t6) => {
      (e == null || !e.has(t6.tensor.id)) && t6.tensor.dispose();
    }), this.tensors = [], this.closed_ = true, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  read(e) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || e >= this.size())
      throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);
    let t6 = this.tensors[e];
    if (t6.cleared)
      throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);
    return this.clearAfterRead && (t6.cleared = true), t6.read = true, t6.tensor;
  }
  readMany(e) {
    return e.map((t6) => this.read(t6));
  }
  write(e, t6) {
    if (this.closed_)
      throw new Error(`TensorArray ${this.name} has already been closed.`);
    if (e < 0 || !this.dynamicSize && e >= this.maxSize)
      throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);
    let o = this.tensors[e] || {};
    if (t6.dtype !== this.dtype)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},
          because the value dtype is ${t6.dtype}, but TensorArray dtype is ${this.dtype}.`);
    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0) && (this.elementShape = t6.shape), zr(this.elementShape, t6.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${e}.`), o.read)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);
    if (o.written)
      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);
    o.tensor = t6, _r(t6), o.written = true, this.tensors[e] = o;
  }
  writeMany(e, t6) {
    if (e.length !== t6.length)
      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t6.length}.`);
    e.forEach((o, n) => this.write(o, t6[n]));
  }
  gather(e, t6) {
    if (!!t6 && t6 !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t6}`);
    if (e)
      e = e.slice(0, this.size());
    else {
      e = [];
      for (let n = 0; n < this.size(); n++)
        e.push(n);
    }
    if (e.length === 0)
      return nr([], [0].concat(this.elementShape));
    let o = this.readMany(e);
    return zr(this.elementShape, o[0].shape, "TensorArray shape mismatch: "), Sr(o, 0);
  }
  concat(e) {
    if (!!e && e !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);
    if (this.size() === 0)
      return nr([], [0].concat(this.elementShape));
    let t6 = [];
    for (let n = 0; n < this.size(); n++)
      t6.push(n);
    let o = this.readMany(t6);
    return zr(this.elementShape, o[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${o[0].shape})`), gt(o, 0);
  }
  scatter(e, t6) {
    if (t6.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t6.dtype}`);
    if (e.length !== t6.shape[0])
      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t6.shape[0]}`);
    let o = Math.max(...e);
    if (!this.dynamicSize && o >= this.maxSize)
      throw new Error(`Max index must be < array size (${o}  vs. ${this.maxSize})`);
    this.writeMany(e, so(t6, 0));
  }
  split(e, t6) {
    if (t6.dtype !== this.dtype)
      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t6.dtype}`);
    let o = 0, n = e.map((p) => (o += p, o));
    if (o !== t6.shape[0])
      throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${t6.shape}`);
    if (!this.dynamicSize && e.length !== this.maxSize)
      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);
    let s = o === 0 ? 0 : t6.size / o, a = [];
    Ee(() => {
      t6 = z(t6, [1, o, s]);
      for (let p = 0; p < e.length; ++p) {
        let c = [0, p === 0 ? 0 : n[p - 1], 0], l = [1, e[p], s];
        a[p] = z(He(t6, c, l), this.elementShape);
      }
      return a;
    });
    let i = [];
    for (let p = 0; p < e.length; p++)
      i[p] = p;
    this.writeMany(i, a);
  }
};
var Pa = class {
  constructor(e, t6, o, n = -1) {
    this.tensors = e, this.elementShape = t6, this.elementDtype = o, e != null && e.forEach((s) => {
      if (o !== s.dtype)
        throw new Error(`Invalid data types; op elements ${o}, but list elements ${s.dtype}`);
      zr(t6, s.shape, "TensorList shape mismatch: "), _r(s);
    }), this.idTensor = be(0), this.maxNumElements = n, _r(this.idTensor);
  }
  get id() {
    return this.idTensor.id;
  }
  copy() {
    return new Pa([...this.tensors], this.elementShape, this.elementDtype);
  }
  clearAndClose(e) {
    this.tensors.forEach((t6) => {
      (e == null || !e.has(t6.id)) && t6.dispose();
    }), this.tensors.length = 0, this.idTensor.dispose();
  }
  size() {
    return this.tensors.length;
  }
  stack(e, t6, o = -1) {
    if (t6 !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t6}, but list elements ${this.elementDtype}`);
    if (o !== -1 && this.tensors.length !== o)
      throw new Error(`Operation expected a list with ${o} elements but got a list with ${this.tensors.length} elements.`);
    zr(e, this.elementShape, "TensorList shape mismatch: ");
    let n = Gp(this.elementShape, this.tensors, e);
    return Ee(() => {
      let s = this.tensors.map((a) => z(a, n));
      return Sr(s, 0);
    });
  }
  popBack(e, t6) {
    if (t6 !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t6}, but list elements ${this.elementDtype}`);
    if (this.size() === 0)
      throw new Error("Trying to pop from an empty list.");
    let o = Gp(this.elementShape, this.tensors, e), n = this.tensors.pop();
    return n.kept = false, zr(n.shape, e, "TensorList shape mismatch: "), z(n, o);
  }
  pushBack(e) {
    if (e.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);
    if (zr(e.shape, this.elementShape, "TensorList shape mismatch: "), this.maxNumElements === this.size())
      throw new Error("Trying to push element into a full list.");
    _r(e), this.tensors.push(e);
  }
  resize(e) {
    if (e < 0)
      throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);
    if (this.maxNumElements !== -1 && e > this.maxNumElements)
      throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);
    let t6 = new Pa([], this.elementShape, this.elementDtype, this.maxNumElements);
    t6.tensors.length = e;
    for (let o = 0; o < Math.min(this.tensors.length, e); ++o)
      t6.tensors[o] = this.tensors[o];
    return t6;
  }
  getItem(e, t6, o) {
    if (o !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${o}, but list elements ${this.elementDtype}`);
    if (e < 0 || e > this.tensors.length)
      throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);
    if (this.tensors[e] == null)
      throw new Error(`element at index ${e} is null.`);
    zr(this.tensors[e].shape, t6, "TensorList shape mismatch: ");
    let n = Gp(this.elementShape, this.tensors, t6);
    return z(this.tensors[e], n);
  }
  setItem(e, t6) {
    if (t6.dtype !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t6.dtype}, but list elements ${this.elementDtype}`);
    if (e < 0 || this.maxNumElements !== -1 && e >= this.maxNumElements)
      throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);
    zr(this.elementShape, t6.shape, "TensorList shape mismatch: "), _r(t6), this.tensors[e] != null && (this.tensors[e].kept = false), this.tensors[e] = t6;
  }
  gather(e, t6, o) {
    if (t6 !== this.elementDtype)
      throw new Error(`Invalid data types; op elements ${t6}, but list elements ${this.elementDtype}`);
    zr(this.elementShape, o, "TensorList shape mismatch: "), e = e.slice(0, this.size());
    let n = Gp(this.elementShape, this.tensors, o);
    return e.length === 0 ? nr([], [0].concat(n)) : Ee(() => {
      let s = e.map((a) => z(this.tensors[a], n));
      return Sr(s, 0);
    });
  }
  concat(e, t6) {
    if (!!e && e !== this.elementDtype)
      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);
    zr(this.elementShape, t6, "TensorList shape mismatch: ");
    let o = Gp(this.elementShape, this.tensors, t6);
    return this.size() === 0 ? nr([], [0].concat(o)) : Ee(() => {
      let n = this.tensors.map((s) => z(s, o));
      return gt(n, 0);
    });
  }
};
function AN(r, e, t6) {
  let o = r.dtype;
  if (r.shape.length < 1)
    throw new Error(`Tensor must be at least a vector, but saw shape: ${r.shape}`);
  if (r.dtype !== t6)
    throw new Error(`Invalid data types; op elements ${r.dtype}, but list elements ${t6}`);
  let n = r.shape.slice(1);
  zr(n, e, "TensorList shape mismatch: ");
  let s = so(r);
  return new Pa(s, e, o);
}
function RN(r, e, t6, o) {
  return new Pa([], r, e, o);
}
function FN(r, e, t6, o) {
  if (e.length !== r.shape[0])
    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${r.shape[0]}`);
  let n = Math.max(...e);
  if (o != null && o !== -1 && n >= o)
    throw new Error(`Max index must be < array size (${n}  vs. ${o})`);
  let s = new Pa([], t6, r.dtype, o), a = so(r, 0);
  return e.forEach((i, p) => {
    s.setItem(i, a[p]);
  }), s;
}
function DN(r, e, t6) {
  let o = 0, n = e.map((c) => (o += c, o));
  if (o !== r.shape[0])
    throw new Error(`Expected sum of lengths to be equal to
          tensor.shape[0], but sum of lengths is
        ${o}, and tensor's shape is: ${r.shape}`);
  let s = r.shape.slice(1), a = of(s, t6), i = o === 0 ? 0 : r.size / o, p = Ee(() => {
    let c = [];
    r = z(r, [1, o, i]);
    for (let l = 0; l < e.length; ++l) {
      let d = [0, l === 0 ? 0 : n[l - 1], 0], f = [1, e[l], i];
      c[l] = z(He(r, d, f), a);
    }
    return r.dispose(), c;
  }), u = new Pa([], t6, r.dtype, e.length);
  for (let c = 0; c < p.length; c++)
    u.setItem(c, p[c]);
  return u;
}
var ON = async (r, e, t6) => {
  switch (r.op) {
    case "If":
    case "StatelessIf": {
      let o = I("thenBranch", r, e, t6), n = I("elseBranch", r, e, t6), s = I("cond", r, e, t6), a = I("args", r, e, t6);
      return (await s.data())[0] ? t6.functionMap[o].executeFunctionAsync(a, t6.tensorArrayMap, t6.tensorListMap) : t6.functionMap[n].executeFunctionAsync(a, t6.tensorArrayMap, t6.tensorListMap);
    }
    case "While":
    case "StatelessWhile": {
      let o = I("body", r, e, t6), n = I("cond", r, e, t6), s = I("args", r, e, t6), a = await t6.functionMap[n].executeFunctionAsync(s, t6.tensorArrayMap, t6.tensorListMap), i = s.map((c) => c.id), p = await a[0].data();
      a.forEach((c) => {
        !c.kept && i.indexOf(c.id) === -1 && c.dispose();
      });
      let u = s;
      for (; p[0]; ) {
        let c = u;
        u = await t6.functionMap[o].executeFunctionAsync(u, t6.tensorArrayMap, t6.tensorListMap);
        let l = u.map((d) => d.id);
        c.forEach((d) => {
          !d.kept && i.indexOf(d.id) === -1 && l.indexOf(d.id) === -1 && d.dispose();
        });
        let m = await t6.functionMap[n].executeFunctionAsync(u, t6.tensorArrayMap, t6.tensorListMap);
        p = await m[0].data(), m.forEach((d) => {
          !d.kept && i.indexOf(d.id) === -1 && l.indexOf(d.id) === -1 && d.dispose();
        });
      }
      return u;
    }
    case "LoopCond": {
      let o = I("pred", r, e, t6);
      return [as(o)];
    }
    case "Switch": {
      let o = I("pred", r, e, t6), n = I("data", r, e, t6);
      return n.kept || (n = as(n)), (await o.data())[0] ? [void 0, n] : [n, void 0];
    }
    case "Merge": {
      let o = r.inputNames.find((n) => Gt(n, e, t6) !== void 0);
      if (o) {
        let n = Gt(o, e, t6);
        return [as(n)];
      }
      return;
    }
    case "Enter": {
      let o = I("frameName", r, e, t6), n = I("tensor", r, e, t6);
      return t6.enterFrame(o), [as(n)];
    }
    case "Exit": {
      let o = I("tensor", r, e, t6);
      return t6.exitFrame(), [as(o)];
    }
    case "NextIteration": {
      let o = I("tensor", r, e, t6);
      return t6.nextIteration(), [as(o)];
    }
    case "TensorArrayV3": {
      let o = I("size", r, e, t6), n = I("dtype", r, e, t6), s = I("elementShape", r, e, t6), a = I("dynamicSize", r, e, t6), i = I("clearAfterRead", r, e, t6), p = I("identicalElementShapes", r, e, t6), u = I("name", r, e, t6), c = new nf(u, n, o, s, p, a, i);
      return t6.addTensorArray(c), [c.idTensor, be(1)];
    }
    case "TensorArrayWriteV3": {
      let o = I("tensorArrayId", r, e, t6), n = I("index", r, e, t6), s = I("tensor", r, e, t6), a = t6.getTensorArray(o.id);
      return a.write(n, s), [a.idTensor];
    }
    case "TensorArrayReadV3": {
      let o = I("tensorArrayId", r, e, t6), n = I("index", r, e, t6);
      return [t6.getTensorArray(o.id).read(n)];
    }
    case "TensorArrayGatherV3": {
      let o = I("tensorArrayId", r, e, t6), n = I("indices", r, e, t6), s = I("dtype", r, e, t6);
      return [t6.getTensorArray(o.id).gather(n, s)];
    }
    case "TensorArrayScatterV3": {
      let o = I("tensorArrayId", r, e, t6), n = I("indices", r, e, t6), s = I("tensor", r, e, t6), a = t6.getTensorArray(o.id);
      return a.scatter(n, s), [a.idTensor];
    }
    case "TensorArrayConcatV3": {
      let o = I("tensorArrayId", r, e, t6), n = t6.getTensorArray(o.id), s = I("dtype", r, e, t6);
      return [n.concat(s)];
    }
    case "TensorArraySplitV3": {
      let o = I("tensorArrayId", r, e, t6), n = I("tensor", r, e, t6), s = I("lengths", r, e, t6), a = t6.getTensorArray(o.id);
      return a.split(s, n), [a.idTensor];
    }
    case "TensorArraySizeV3": {
      let o = I("tensorArrayId", r, e, t6), n = t6.getTensorArray(o.id);
      return [be(n.size(), "int32")];
    }
    case "TensorArrayCloseV3": {
      let o = I("tensorArrayId", r, e, t6), n = t6.getTensorArray(o.id);
      return n.clearAndClose(), [n.idTensor];
    }
    case "TensorListSetItem": {
      let o = I("tensorListId", r, e, t6), n = I("index", r, e, t6), s = I("tensor", r, e, t6), a = t6.getTensorList(o.id);
      return a.setItem(n, s), [a.idTensor];
    }
    case "TensorListGetItem": {
      let o = I("tensorListId", r, e, t6), n = I("index", r, e, t6), s = I("elementShape", r, e, t6), a = I("elementDType", r, e, t6);
      return [t6.getTensorList(o.id).getItem(n, s, a)];
    }
    case "TensorListScatterV2":
    case "TensorListScatter": {
      let o = I("indices", r, e, t6), n = I("tensor", r, e, t6), s = I("elementShape", r, e, t6), a = I("numElements", r, e, t6), i = FN(n, o, s, a);
      return t6.addTensorList(i), [i.idTensor];
    }
    case "TensorListReserve":
    case "EmptyTensorList": {
      let o = I("elementShape", r, e, t6), n = I("elementDType", r, e, t6), s;
      r.op === "TensorListReserve" ? s = "numElements" : s = "maxNumElements";
      let a = I(s, r, e, t6), i = r.op === "TensorListReserve" ? -1 : a, p = RN(o, n, a, i);
      return t6.addTensorList(p), [p.idTensor];
    }
    case "TensorListGather": {
      let o = I("tensorListId", r, e, t6), n = I("indices", r, e, t6), s = I("elementShape", r, e, t6), a = I("elementDType", r, e, t6);
      return [t6.getTensorList(o.id).gather(n, a, s)];
    }
    case "TensorListStack": {
      let o = I("tensorListId", r, e, t6), n = I("elementShape", r, e, t6), s = I("elementDType", r, e, t6), a = I("numElements", r, e, t6);
      return [t6.getTensorList(o.id).stack(n, s, a)];
    }
    case "TensorListFromTensor": {
      let o = I("tensor", r, e, t6), n = I("elementShape", r, e, t6), s = I("elementDType", r, e, t6), a = AN(o, n, s);
      return t6.addTensorList(a), [a.idTensor];
    }
    case "TensorListConcat":
    case "TensorListConcatV2": {
      let o = I("tensorListId", r, e, t6), n = t6.getTensorList(o.id), s = I("dtype", r, e, t6), a = I("elementShape", r, e, t6);
      return [n.concat(s, a)];
    }
    case "TensorListPushBack": {
      let o = I("tensorListId", r, e, t6), n = I("tensor", r, e, t6), s = t6.getTensorList(o.id);
      return s.pushBack(n), [s.idTensor];
    }
    case "TensorListPopBack": {
      let o = I("tensorListId", r, e, t6), n = I("elementShape", r, e, t6), s = I("elementDType", r, e, t6);
      return [t6.getTensorList(o.id).popBack(n, s)];
    }
    case "TensorListSplit": {
      let o = I("tensor", r, e, t6), n = I("elementShape", r, e, t6), s = I("lengths", r, e, t6), a = DN(o, s, n);
      return t6.addTensorList(a), [a.idTensor];
    }
    case "TensorListLength": {
      let o = I("tensorListId", r, e, t6), n = t6.getTensorList(o.id);
      return [be(n.size(), "int32")];
    }
    case "TensorListResize": {
      let o = I("tensorListId", r, e, t6), n = I("size", r, e, t6), a = t6.getTensorList(o.id).resize(n);
      return t6.addTensorList(a), [a.idTensor];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function PN(r, e, t6) {
  let [o, n] = I("fusedOps", r, e, t6), s = o === "biasadd", a = !s, i = n === "prelu", p = o === "fusedbatchnorm", u = I("numArgs", r, e, t6);
  if (s) {
    if (i && u !== 2)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
    if (!i && s && u !== 1)
      throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.");
  }
  if (p)
    throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");
  let c = I("strides", r, e, t6), l = ul(r, e, t6), m = I("dataFormat", r, e, t6).toUpperCase(), d = I("dilations", r, e, t6), [f, h] = I("args", r, e, t6);
  a && (h = f, f = void 0);
  let g = I("leakyreluAlpha", r, e, t6);
  return { stride: c, pad: l, dataFormat: m, dilations: d, biasArg: f, preluArg: h, activationFunc: n, leakyreluAlpha: g };
}
var MN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "Conv1D": {
      let n = I("stride", r, e, t6), s = I("pad", r, e, t6), a = I("dataFormat", r, e, t6).toUpperCase(), i = I("dilation", r, e, t6);
      return [o.conv1d(I("x", r, e, t6), I("filter", r, e, t6), n, s, a, i)];
    }
    case "Conv2D": {
      let n = I("strides", r, e, t6), s = ul(r, e, t6), a = I("dataFormat", r, e, t6).toUpperCase(), i = I("dilations", r, e, t6);
      return [o.conv2d(I("x", r, e, t6), I("filter", r, e, t6), [n[1], n[2]], s, a, [i[1], i[2]])];
    }
    case "_FusedConv2D": {
      let { stride: n, pad: s, dataFormat: a, dilations: i, biasArg: p, preluArg: u, activationFunc: c, leakyreluAlpha: l } = PN(r, e, t6);
      return [o.fused.conv2d({ x: I("x", r, e, t6), filter: I("filter", r, e, t6), strides: [n[1], n[2]], pad: s, dataFormat: a, dilations: [i[1], i[2]], bias: p, activation: c, preluActivationWeights: u, leakyreluAlpha: l })];
    }
    case "FusedDepthwiseConv2dNative": {
      let { stride: n, pad: s, dataFormat: a, dilations: i, biasArg: p, preluArg: u, activationFunc: c, leakyreluAlpha: l } = PN(r, e, t6);
      return [o.fused.depthwiseConv2d({ x: I("x", r, e, t6), filter: I("filter", r, e, t6), strides: [n[1], n[2]], pad: s, dataFormat: a, dilations: [i[1], i[2]], bias: p, activation: c, preluActivationWeights: u, leakyreluAlpha: l })];
    }
    case "Conv2DBackpropInput":
    case "Conv2dTranspose": {
      let n = I("outputShape", r, e, t6), s = I("strides", r, e, t6), a = ul(r, e, t6);
      return [o.conv2dTranspose(I("x", r, e, t6), I("filter", r, e, t6), n, [s[1], s[2]], a)];
    }
    case "DepthwiseConv2dNative":
    case "DepthwiseConv2d": {
      let n = I("strides", r, e, t6), s = ul(r, e, t6), a = I("dilations", r, e, t6), i = I("dataFormat", r, e, t6).toUpperCase();
      return [o.depthwiseConv2d(I("input", r, e, t6), I("filter", r, e, t6), [n[1], n[2]], s, i, [a[1], a[2]])];
    }
    case "Conv3D": {
      let n = I("strides", r, e, t6), s = I("pad", r, e, t6), a = I("dataFormat", r, e, t6).toUpperCase(), i = I("dilations", r, e, t6);
      return [o.conv3d(I("x", r, e, t6), I("filter", r, e, t6), [n[1], n[2], n[3]], s, a, [i[1], i[2], i[3]])];
    }
    case "AvgPool": {
      let n = I("strides", r, e, t6), s = I("pad", r, e, t6), a = I("kernelSize", r, e, t6);
      return [o.avgPool(I("x", r, e, t6), [a[1], a[2]], [n[1], n[2]], s)];
    }
    case "MaxPool": {
      let n = I("strides", r, e, t6), s = I("pad", r, e, t6), a = I("kernelSize", r, e, t6);
      return [o.maxPool(I("x", r, e, t6), [a[1], a[2]], [n[1], n[2]], s)];
    }
    case "MaxPoolWithArgmax": {
      let n = I("strides", r, e, t6), s = I("pad", r, e, t6), a = I("kernelSize", r, e, t6), i = I("includeBatchInIndex", r, e, t6), { result: p, indexes: u } = o.maxPoolWithArgmax(I("x", r, e, t6), [a[1], a[2]], [n[1], n[2]], s, i);
      return [p, u];
    }
    case "AvgPool3D": {
      let n = I("strides", r, e, t6), s = I("pad", r, e, t6), a = I("kernelSize", r, e, t6);
      return [o.avgPool3d(I("x", r, e, t6), [a[1], a[2], a[3]], [n[1], n[2], n[3]], s)];
    }
    case "MaxPool3D": {
      let n = I("strides", r, e, t6), s = I("pad", r, e, t6), a = I("kernelSize", r, e, t6);
      return [o.maxPool3d(I("x", r, e, t6), [a[1], a[2], a[3]], [n[1], n[2], n[3]], s)];
    }
    case "Dilation2D": {
      let n = I("strides", r, e, t6), s = I("pad", r, e, t6), a = I("dilations", r, e, t6), i = n[1], p = n[2], u = a[1], c = a[2];
      return [o.dilation2d(I("x", r, e, t6), I("filter", r, e, t6), [i, p], s, [u, c], "NHWC")];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var LN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "Fill": {
      let n = I("shape", r, e, t6), s = I("dtype", r, e, t6), a = I("value", r, e, t6);
      return [o.fill(n, a, s)];
    }
    case "LinSpace": {
      let n = I("start", r, e, t6), s = I("stop", r, e, t6), a = I("num", r, e, t6);
      return [o.linspace(n, s, a)];
    }
    case "Multinomial": {
      let n = I("logits", r, e, t6), s = I("numSamples", r, e, t6), a = I("seed", r, e, t6);
      return [o.multinomial(n, s, a)];
    }
    case "OneHot": {
      let n = I("indices", r, e, t6), s = I("depth", r, e, t6), a = I("onValue", r, e, t6), i = I("offValue", r, e, t6), p = I("dtype", r, e, t6);
      return [o.oneHot(n, s, a, i, p)];
    }
    case "Ones":
      return [o.ones(I("shape", r, e, t6), I("dtype", r, e, t6))];
    case "OnesLike":
      return [o.onesLike(I("x", r, e, t6))];
    case "RandomStandardNormal":
      return [o.randomStandardNormal(I("shape", r, e, t6), I("dtype", r, e, t6), I("seed", r, e, t6))];
    case "RandomUniform":
      return [o.randomUniform(I("shape", r, e, t6), I("minval", r, e, t6), I("maxval", r, e, t6), I("dtype", r, e, t6))];
    case "Range": {
      let n = I("start", r, e, t6), s = I("stop", r, e, t6), a = I("step", r, e, t6);
      return [o.range(n, s, a, I("dtype", r, e, t6))];
    }
    case "TruncatedNormal": {
      let n = I("shape", r, e, t6), s = I("mean", r, e, t6), a = I("stdDev", r, e, t6), i = I("seed", r, e, t6);
      return [o.truncatedNormal(n, s, a, I("dtype", r, e, t6), i)];
    }
    case "Zeros":
      return [o.zeros(I("shape", r, e, t6), I("dtype", r, e, t6))];
    case "ZerosLike":
      return [o.zerosLike(I("x", r, e, t6))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function HC(r, e, t6) {
  let o = I("boxes", r, e, t6), n = I("scores", r, e, t6), s = I("maxOutputSize", r, e, t6), a = I("iouThreshold", r, e, t6), i = I("scoreThreshold", r, e, t6), p = I("softNmsSigma", r, e, t6);
  return { boxes: o, scores: n, maxOutputSize: s, iouThreshold: a, scoreThreshold: i, softNmsSigma: p };
}
var BN = async (r, e, t6, o, n = Ye) => {
  switch (r.op) {
    case "NonMaxSuppressionV5": {
      let { boxes: s, scores: a, maxOutputSize: i, iouThreshold: p, scoreThreshold: u, softNmsSigma: c } = HC(r, e, t6), l = await n.image.nonMaxSuppressionWithScoreAsync(s, a, i, p, u, c);
      return [l.selectedIndices, l.selectedScores];
    }
    case "NonMaxSuppressionV4": {
      let { boxes: s, scores: a, maxOutputSize: i, iouThreshold: p, scoreThreshold: u } = HC(r, e, t6), c = I("padToMaxOutputSize", r, e, t6), l = await n.image.nonMaxSuppressionPaddedAsync(s, a, i, p, u, c);
      return [l.selectedIndices, l.validOutputs];
    }
    case "NonMaxSuppressionV3":
    case "NonMaxSuppressionV2": {
      let { boxes: s, scores: a, maxOutputSize: i, iouThreshold: p, scoreThreshold: u } = HC(r, e, t6);
      return [await n.image.nonMaxSuppressionAsync(s, a, i, p, u)];
    }
    case "Where": {
      let s = n.cast(I("condition", r, e, t6), "bool"), a = [await n.whereAsync(s)];
      return s.dispose(), a;
    }
    case "ListDiff":
      return n.setdiff1dAsync(I("x", r, e, t6), I("y", r, e, t6));
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var VN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "LowerBound": {
      let n = I("sortedSequence", r, e, t6), s = I("values", r, e, t6);
      return [o.lowerBound(n, s)];
    }
    case "TopKV2": {
      let n = I("x", r, e, t6), s = I("k", r, e, t6), a = I("sorted", r, e, t6), i = o.topk(n, s, a);
      return [i.values, i.indices];
    }
    case "UpperBound": {
      let n = I("sortedSequence", r, e, t6), s = I("values", r, e, t6);
      return [o.upperBound(n, s)];
    }
    case "Unique": {
      let n = I("x", r, e, t6), s = o.unique(n);
      return [s.values, s.indices];
    }
    case "UniqueV2": {
      let n = I("x", r, e, t6), s = I("axis", r, e, t6), a = o.unique(n, s);
      return [a.values, a.indices];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var zN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "Const":
      return e[r.name];
    case "PlaceholderWithDefault":
      let n = I("default", r, e, t6);
      return [Gt(r.name, e, t6) || n];
    case "Placeholder":
      return [Gt(r.name, e, t6)];
    case "Identity":
    case "StopGradient":
    case "FakeQuantWithMinMaxVars": {
      let c = I("x", r, e, t6);
      return [as(c)];
    }
    case "IdentityN":
      return I("x", r, e, t6).map((c) => as(c));
    case "Snapshot":
      let s = I("x", r, e, t6);
      return [as(s)];
    case "Shape":
      return [o.tensor1d(I("x", r, e, t6).shape, "int32")];
    case "ShapeN":
      return I("x", r, e, t6).map((c) => o.tensor1d(c.shape));
    case "Size":
      return [o.scalar(I("x", r, e, t6).size, "int32")];
    case "Rank":
      return [o.scalar(I("x", r, e, t6).rank, "int32")];
    case "NoOp":
      return [o.scalar(1)];
    case "Print":
      let a = I("x", r, e, t6), i = I("data", r, e, t6), p = I("message", r, e, t6), u = I("summarize", r, e, t6);
      console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."), console.log(p);
      for (let c = 0; c < i.length; c++)
        console.log(Array.prototype.slice.call(i[c].dataSync()).slice(0, u));
      return [a];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var sf = class {
  constructor(e, t6) {
    this.keyDType = e, this.valueDType = t6, this.handle = be(0), this.tensorMap = /* @__PURE__ */ new Map(), _r(this.handle);
  }
  get id() {
    return this.handle.id;
  }
  clearAndClose() {
    this.tensorMap.forEach((e) => e.dispose()), this.tensorMap.clear(), this.handle.dispose();
  }
  size() {
    return this.tensorMap.size;
  }
  tensorSize() {
    return be(this.size(), "int32");
  }
  async import(e, t6) {
    this.checkKeyAndValueTensor(e, t6);
    let o = await e.data();
    return this.tensorMap.forEach((n) => n.dispose()), this.tensorMap.clear(), Ee(() => {
      let n = so(t6), s = o.length, a = n.length;
      y.assert(s === a, () => `The number of elements doesn't match, keys has ${s} elements, the values has ${a} elements.`);
      for (let i = 0; i < s; i++) {
        let p = o[i], u = n[i];
        _r(u), this.tensorMap.set(p, u);
      }
      return this.handle;
    });
  }
  async find(e, t6) {
    this.checkKeyAndValueTensor(e, t6);
    let o = await e.data();
    return Ee(() => {
      let n = [];
      for (let s = 0; s < o.length; s++) {
        let a = o[s], i = this.findWithDefault(a, t6);
        n.push(i);
      }
      return Sr(n);
    });
  }
  findWithDefault(e, t6) {
    let o = this.tensorMap.get(e);
    return o != null ? o : t6;
  }
  checkKeyAndValueTensor(e, t6) {
    if (e.dtype !== this.keyDType)
      throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);
    if (t6.dtype !== this.valueDType)
      throw new Error(`Expect value dtype ${this.valueDType}, but got ${t6.dtype}`);
  }
};
var WN = async (r, e, t6, o) => {
  switch (r.op) {
    case "HashTable":
    case "HashTableV2": {
      let n = o.getHashTableHandleByName(r.name);
      if (n != null)
        return [n];
      {
        let s = I("keyDType", r, e, t6), a = I("valueDType", r, e, t6), i = new sf(s, a);
        return o.addHashTable(r.name, i), [i.handle];
      }
    }
    case "InitializeTable":
    case "InitializeTableV2":
    case "LookupTableImport":
    case "LookupTableImportV2": {
      let n = I("tableHandle", r, e, t6, o), s = I("keys", r, e, t6), a = I("values", r, e, t6);
      return [await o.getHashTableById(n.id).import(s, a)];
    }
    case "LookupTableFind":
    case "LookupTableFindV2": {
      let n = I("tableHandle", r, e, t6, o), s = I("keys", r, e, t6), a = I("defaultValue", r, e, t6);
      return [await o.getHashTableById(n.id).find(s, a)];
    }
    case "LookupTableSize":
    case "LookupTableSizeV2": {
      let n = I("tableHandle", r, e, t6, o);
      return [o.getHashTableById(n.id).tensorSize()];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var UN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "ResizeBilinear": {
      let n = I("images", r, e, t6), s = I("size", r, e, t6), a = I("alignCorners", r, e, t6), i = I("halfPixelCenters", r, e, t6);
      return [o.image.resizeBilinear(n, [s[0], s[1]], a, i)];
    }
    case "ResizeNearestNeighbor": {
      let n = I("images", r, e, t6), s = I("size", r, e, t6), a = I("alignCorners", r, e, t6), i = I("halfPixelCenters", r, e, t6);
      return [o.image.resizeNearestNeighbor(n, [s[0], s[1]], a, i)];
    }
    case "CropAndResize": {
      let n = I("image", r, e, t6), s = I("boxes", r, e, t6), a = I("boxInd", r, e, t6), i = I("cropSize", r, e, t6), p = I("method", r, e, t6), u = I("extrapolationValue", r, e, t6);
      return [o.image.cropAndResize(n, s, a, i, p, u)];
    }
    case "ImageProjectiveTransformV3": {
      let n = I("images", r, e, t6), s = I("transforms", r, e, t6), a = I("outputShape", r, e, t6), i = I("fillValue", r, e, t6), p = I("interpolation", r, e, t6), u = I("fillMode", r, e, t6);
      return [o.image.transform(n, s, p.toLowerCase(), u.toLowerCase(), i, a)];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var GN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "Equal":
      return [o.equal(I("a", r, e, t6), I("b", r, e, t6))];
    case "NotEqual":
      return [o.notEqual(I("a", r, e, t6), I("b", r, e, t6))];
    case "Greater":
      return [o.greater(I("a", r, e, t6), I("b", r, e, t6))];
    case "GreaterEqual":
      return [o.greaterEqual(I("a", r, e, t6), I("b", r, e, t6))];
    case "Less":
      return [o.less(I("a", r, e, t6), I("b", r, e, t6))];
    case "LessEqual":
      return [o.lessEqual(I("a", r, e, t6), I("b", r, e, t6))];
    case "LogicalAnd":
      return [o.logicalAnd(I("a", r, e, t6), I("b", r, e, t6))];
    case "LogicalNot":
      return [o.logicalNot(I("a", r, e, t6))];
    case "LogicalOr":
      return [o.logicalOr(I("a", r, e, t6), I("b", r, e, t6))];
    case "Select":
    case "SelectV2":
      return [o.where(I("condition", r, e, t6), I("a", r, e, t6), I("b", r, e, t6))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var HN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "BatchMatMul":
    case "BatchMatMulV2":
    case "MatMul":
      return [o.matMul(I("a", r, e, t6), I("b", r, e, t6), I("transposeA", r, e, t6), I("transposeB", r, e, t6))];
    case "Einsum":
      return [o.einsum(I("equation", r, e, t6), ...I("tensors", r, e, t6))];
    case "Transpose":
      return [o.transpose(I("x", r, e, t6), I("perm", r, e, t6))];
    case "_FusedMatMul":
      let [n, s] = I("fusedOps", r, e, t6), a = n === "biasadd", i = s === "prelu", p = I("numArgs", r, e, t6), u = I("leakyreluAlpha", r, e, t6);
      if (a) {
        if (i && p !== 2)
          throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");
        if (!i && p !== 1)
          throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.");
      }
      let [c, l] = I("args", r, e, t6);
      return [o.fused.matMul({ a: I("a", r, e, t6), b: I("b", r, e, t6), transposeA: I("transposeA", r, e, t6), transposeB: I("transposeB", r, e, t6), bias: c, activation: s, preluActivationWeights: l, leakyreluAlpha: u })];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var qN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "EuclideanNorm":
      return [o.euclideanNorm(I("x", r, e, t6), I("axis", r, e, t6), I("keepDims", r, e, t6))];
    case "FusedBatchNorm":
    case "FusedBatchNormV2":
      return [o.batchNorm(I("x", r, e, t6), I("mean", r, e, t6), I("variance", r, e, t6), I("offset", r, e, t6), I("scale", r, e, t6), I("epsilon", r, e, t6))];
    case "FusedBatchNormV3":
      return [o.batchNorm(I("x", r, e, t6), I("mean", r, e, t6), I("variance", r, e, t6), I("offset", r, e, t6), I("scale", r, e, t6), I("epsilon", r, e, t6))];
    case "LRN":
      return [o.localResponseNormalization(I("x", r, e, t6), I("radius", r, e, t6), I("bias", r, e, t6), I("alpha", r, e, t6), I("beta", r, e, t6))];
    case "Softmax":
      return [o.softmax(I("x", r, e, t6))];
    case "LogSoftmax":
      return [o.logSoftmax(I("x", r, e, t6))];
    case "SparseToDense":
      return [o.sparseToDense(I("sparseIndices", r, e, t6), I("outputShape", r, e, t6), I("sparseValues", r, e, t6), I("defaultValue", r, e, t6))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var KN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "RaggedGather": {
      let { outputNestedSplits: n, outputDenseValues: s } = o.raggedGather(I("paramsNestedSplits", r, e, t6), I("paramsDenseValues", r, e, t6), I("indices", r, e, t6), I("outputRaggedRank", r, e, t6));
      return n.concat(s);
    }
    case "RaggedRange": {
      let { rtNestedSplits: n, rtDenseValues: s } = o.raggedRange(I("starts", r, e, t6), I("limits", r, e, t6), I("splits", r, e, t6));
      return [n, s];
    }
    case "RaggedTensorToTensor":
      return [o.raggedTensorToTensor(I("shape", r, e, t6), I("values", r, e, t6), I("defaultValue", r, e, t6), I("rowPartitionTensors", r, e, t6), I("rowPartitionTypes", r, e, t6))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var jN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "Max": {
      let i = I("axis", r, e, t6), p = I("keepDims", r, e, t6);
      return [o.max(I("x", r, e, t6), i, p)];
    }
    case "Mean": {
      let i = I("axis", r, e, t6), p = I("keepDims", r, e, t6);
      return [o.mean(I("x", r, e, t6), i, p)];
    }
    case "Min": {
      let i = I("axis", r, e, t6), p = I("keepDims", r, e, t6);
      return [o.min(I("x", r, e, t6), i, p)];
    }
    case "Sum": {
      let i = I("axis", r, e, t6), p = I("keepDims", r, e, t6);
      return [o.sum(I("x", r, e, t6), i, p)];
    }
    case "All": {
      let i = I("axis", r, e, t6), p = I("keepDims", r, e, t6);
      return [o.all(I("x", r, e, t6), i, p)];
    }
    case "Any": {
      let i = I("axis", r, e, t6), p = I("keepDims", r, e, t6);
      return [o.any(I("x", r, e, t6), i, p)];
    }
    case "ArgMax": {
      let i = I("axis", r, e, t6);
      return [o.argMax(I("x", r, e, t6), i)];
    }
    case "ArgMin": {
      let i = I("axis", r, e, t6);
      return [o.argMin(I("x", r, e, t6), i)];
    }
    case "Prod": {
      let i = I("axis", r, e, t6), p = I("keepDims", r, e, t6);
      return [o.prod(I("x", r, e, t6), i, p)];
    }
    case "Cumprod": {
      let i = I("axis", r, e, t6), p = I("exclusive", r, e, t6), u = I("reverse", r, e, t6);
      return [o.cumprod(I("x", r, e, t6), i, p, u)];
    }
    case "Cumsum": {
      let i = I("axis", r, e, t6), p = I("exclusive", r, e, t6), u = I("reverse", r, e, t6);
      return [o.cumsum(I("x", r, e, t6), i, p, u)];
    }
    case "Bincount":
      let n = I("x", r, e, t6), s = I("weights", r, e, t6), a = I("size", r, e, t6);
      return [o.bincount(n, s, a)];
    case "DenseBincount": {
      let i = I("x", r, e, t6), p = I("weights", r, e, t6), u = I("size", r, e, t6), c = I("binaryOutput", r, e, t6);
      return [o.denseBincount(i, p, u, c)];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var XN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "ConcatV2":
    case "Concat": {
      let n = I("n", r, e, t6), s = I("axis", r, e, t6), a = I("tensors", r, e, t6);
      return a = a.slice(0, n), [o.concat(a, s)];
    }
    case "Gather": {
      let n = I("x", r, e, t6), s = I("indices", r, e, t6);
      return [o.gather(n, o.cast(s, "int32"), 0)];
    }
    case "GatherV2": {
      let n = I("axis", r, e, t6), s = I("batchDims", r, e, t6), a = I("x", r, e, t6), i = I("indices", r, e, t6);
      return [o.gather(a, o.cast(i, "int32"), n, s)];
    }
    case "Reverse": {
      let n = I("dims", r, e, t6), s = [];
      for (let i = 0; i < n.length; i++)
        n[i] && s.push(i);
      let a = I("x", r, e, t6);
      return [o.reverse(a, s)];
    }
    case "ReverseV2": {
      let n = I("axis", r, e, t6), s = I("x", r, e, t6);
      return [o.reverse(s, n)];
    }
    case "Slice": {
      let n = I("begin", r, e, t6), s = I("size", r, e, t6);
      return [o.slice(I("x", r, e, t6), n, s)];
    }
    case "StridedSlice": {
      let n = I("begin", r, e, t6), s = I("end", r, e, t6), a = I("strides", r, e, t6), i = I("beginMask", r, e, t6), p = I("endMask", r, e, t6), u = I("ellipsisMask", r, e, t6), c = I("newAxisMask", r, e, t6), l = I("shrinkAxisMask", r, e, t6), m = I("x", r, e, t6);
      return [o.stridedSlice(m, n, s, a, i, p, u, c, l)];
    }
    case "Pack":
      return Ee(() => {
        let n = I("axis", r, e, t6), s = I("tensors", r, e, t6), a = s[0].shape, i = o.squeeze(s[0]).shape, p = s.map((u) => {
          let c = y.arraysEqual(u.shape, a);
          if (!c && !y.arraysEqual(o.squeeze(u).shape, i))
            throw new Error("the input tensors shape does not match");
          return c ? u : o.reshape(u, a);
        });
        return [o.stack(p, n)];
      });
    case "Unpack": {
      let n = I("axis", r, e, t6), s = I("tensor", r, e, t6);
      return o.unstack(s, n);
    }
    case "Tile": {
      let n = I("reps", r, e, t6);
      return [o.tile(I("x", r, e, t6), n)];
    }
    case "Split":
    case "SplitV": {
      let n = I("axis", r, e, t6), s = I("numOrSizeSplits", r, e, t6), a = I("x", r, e, t6);
      return o.split(a, s, n);
    }
    case "ScatterNd": {
      let n = I("indices", r, e, t6), s = I("values", r, e, t6), a = I("shape", r, e, t6);
      return [o.scatterND(n, s, a)];
    }
    case "GatherNd": {
      let n = I("x", r, e, t6), s = I("indices", r, e, t6);
      return [o.gatherND(n, s)];
    }
    case "SparseToDense": {
      let n = I("sparseIndices", r, e, t6), s = I("outputShape", r, e, t6), a = I("sparseValues", r, e, t6), i = I("defaultValue", r, e, t6);
      return [o.sparseToDense(n, a, s, a.dtype === i.dtype ? i : o.cast(i, a.dtype))];
    }
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var YN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "SparseFillEmptyRows": {
      let { outputIndices: n, outputValues: s, emptyRowIndicator: a, reverseIndexMap: i } = o.sparse.sparseFillEmptyRows(I("indices", r, e, t6), I("values", r, e, t6), I("denseShape", r, e, t6), I("defaultValue", r, e, t6));
      return [n, s, a, i];
    }
    case "SparseReshape": {
      let { outputIndices: n, outputShape: s } = o.sparse.sparseReshape(I("inputIndices", r, e, t6), I("inputShape", r, e, t6), I("newShape", r, e, t6));
      return [n, s];
    }
    case "SparseSegmentMean":
      return [o.sparse.sparseSegmentMean(I("data", r, e, t6), I("indices", r, e, t6), I("segmentIds", r, e, t6))];
    case "SparseSegmentSum":
      return [o.sparse.sparseSegmentSum(I("data", r, e, t6), I("indices", r, e, t6), I("segmentIds", r, e, t6))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var QN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "FFT":
      return [o.fft(I("x", r, e, t6))];
    case "IFFT":
      return [o.ifft(I("x", r, e, t6))];
    case "RFFT":
      return [o.rfft(I("x", r, e, t6))];
    case "IRFFT":
      return [o.irfft(I("x", r, e, t6))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var ZN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "StringNGrams": {
      let { nGrams: n, nGramsSplits: s } = o.string.stringNGrams(I("data", r, e, t6), I("dataSplits", r, e, t6), I("separator", r, e, t6), I("nGramWidths", r, e, t6), I("leftPad", r, e, t6), I("rightPad", r, e, t6), I("padWidth", r, e, t6), I("preserveShortSequences", r, e, t6));
      return [n, s];
    }
    case "StringSplit": {
      let { indices: n, values: s, shape: a } = o.string.stringSplit(I("input", r, e, t6), I("delimiter", r, e, t6), I("skipEmpty", r, e, t6));
      return [n, s, a];
    }
    case "StringToHashBucketFast":
      return [o.string.stringToHashBucketFast(I("input", r, e, t6), I("numBuckets", r, e, t6))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
var JN = (r, e, t6, o = Ye) => {
  switch (r.op) {
    case "Cast":
      return [o.cast(I("x", r, e, t6), I("dtype", r, e, t6))];
    case "ExpandDims": {
      let n = I("axis", r, e, t6);
      return [o.expandDims(I("x", r, e, t6), n)];
    }
    case "Squeeze": {
      let n = I("axis", r, e, t6);
      return [o.squeeze(I("x", r, e, t6), n)];
    }
    case "Reshape":
      return [o.reshape(I("x", r, e, t6), I("shape", r, e, t6))];
    case "MirrorPad":
      return [o.mirrorPad(I("x", r, e, t6), I("padding", r, e, t6), I("mode", r, e, t6))];
    case "PadV2":
    case "Pad":
      return [o.pad(I("x", r, e, t6), I("padding", r, e, t6), I("constantValue", r, e, t6))];
    case "SpaceToBatchND": {
      let n = I("blockShape", r, e, t6), s = I("paddings", r, e, t6);
      return [o.spaceToBatchND(I("x", r, e, t6), n, s)];
    }
    case "BatchToSpaceND": {
      let n = I("blockShape", r, e, t6), s = I("crops", r, e, t6);
      return [o.batchToSpaceND(I("x", r, e, t6), n, s)];
    }
    case "DepthToSpace": {
      let n = I("blockSize", r, e, t6), s = I("dataFormat", r, e, t6).toUpperCase();
      return [o.depthToSpace(I("x", r, e, t6), n, s)];
    }
    case "BroadcastTo":
      return [o.broadcastTo(I("x", r, e, t6), I("shape", r, e, t6))];
    case "BroadcastArgs":
      return [o.broadcastArgs(I("s0", r, e, t6), I("s1", r, e, t6))];
    default:
      throw TypeError(`Node type ${r.op} is not implemented`);
  }
};
function qC(r, e, t6, o, n = Ee) {
  let s = ((a, i, p) => {
    switch (a.category) {
      case "arithmetic":
        return n(() => _N(a, i, p));
      case "basic_math":
        return n(() => EN(a, i, p));
      case "control":
        return ON(a, i, p);
      case "convolution":
        return n(() => MN(a, i, p));
      case "creation":
        return n(() => LN(a, i, p));
      case "dynamic":
        return BN(a, i, p);
      case "evaluation":
        return n(() => VN(a, i, p));
      case "image":
        return n(() => UN(a, i, p));
      case "graph":
        return n(() => zN(a, i, p));
      case "logical":
        return n(() => GN(a, i, p));
      case "matrices":
        return n(() => HN(a, i, p));
      case "normalization":
        return n(() => qN(a, i, p));
      case "ragged":
        return n(() => KN(a, i, p));
      case "reduction":
        return n(() => jN(a, i, p));
      case "slice_join":
        return n(() => XN(a, i, p));
      case "sparse":
        return n(() => YN(a, i, p));
      case "spectral":
        return n(() => QN(a, i, p));
      case "string":
        return n(() => ZN(a, i, p));
      case "transformation":
        return n(() => JN(a, i, p));
      case "hash_table":
        return WN(a, i, p, o);
      case "custom":
        let u = Gd(a.op);
        if (u && u.customExecutor)
          return u.customExecutor(new rf(a, i, p));
        throw TypeError(`Custom op ${a.op} is not registered.`);
      default:
        throw TypeError(`Unknown op '${a.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`);
    }
  })(r, e, t6);
  return y.isPromise(s) ? s.then((a) => [].concat(a)) : [].concat(s);
}
var cl = class {
  constructor(e = {}, t6 = {}, o = {}, n = {}) {
    this.weightMap = e, this.tensorArrayMap = t6, this.tensorListMap = o, this.functionMap = n, this.rootContext = { id: 0, frameName: "", iterationId: 0 }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();
  }
  newFrame(e, t6) {
    return { id: e, frameName: t6, iterationId: 0 };
  }
  set currentContext(e) {
    this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());
  }
  get currentContext() {
    return this.contexts;
  }
  get currentContextId() {
    return this._currentContextIds[0];
  }
  get currentContextIds() {
    return this._currentContextIds;
  }
  generateCurrentContextIds() {
    let e = [];
    for (let t6 = 0; t6 < this.contexts.length - 1; t6++) {
      let o = this.contexts.slice(0, this.contexts.length - t6);
      e.push(this.contextIdforContexts(o));
    }
    e.push(""), this._currentContextIds = e;
  }
  contextIdforContexts(e) {
    return e ? e.map((t6) => t6.id === 0 && t6.iterationId === 0 ? "" : `${t6.frameName}-${t6.iterationId}`).join("/") : "";
  }
  enterFrame(e) {
    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));
  }
  exitFrame() {
    if (this.contexts && this.contexts.length > 1)
      this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();
    else
      throw new Error("Cannot exit frame, the context is empty");
  }
  nextIteration() {
    if (this.contexts && this.contexts.length > 0) {
      this.contexts = this.contexts.slice(), this.lastId++;
      let e = Object.assign({}, this.contexts[this.contexts.length - 1]);
      e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));
    } else
      throw new Error("Cannot increase frame iteration, the context is empty");
  }
  getWeight(e) {
    return this.weightMap[e];
  }
  addTensorArray(e) {
    this.tensorArrayMap[e.id] = e;
  }
  getTensorArray(e) {
    return this.tensorArrayMap[e];
  }
  addTensorList(e) {
    this.tensorListMap[e.id] = e;
  }
  getTensorList(e) {
    return this.tensorListMap[e];
  }
  dispose(e) {
    for (let t6 in this.tensorArrayMap)
      this.tensorArrayMap[t6].clearAndClose(e);
    for (let t6 in this.tensorListMap)
      this.tensorListMap[t6].clearAndClose(e);
  }
};
function KC(r, e, t6, o) {
  let n = /* @__PURE__ */ new Set(), s = [], a = null, i = null, p = /* @__PURE__ */ new Set(), u = Object.keys(r).map((m) => Ir(m)[0]), c = [];
  o != null && (c = o.map((m) => Ir(m.name)[0]));
  let l = [...e];
  for (; l.length > 0; ) {
    let m = l.pop();
    if ((jC(m) || i6(m) || u6(m)) && a == null && (a = m, i = a.children.map((d) => d.name).filter((d) => n.has(d))), n.add(m.name), t6[m.name] == null && u.indexOf(m.name) === -1 && c.indexOf(m.name) === -1) {
      if (m.inputs.length === 0) {
        s.push(m.name);
        continue;
      }
      m.inputs.forEach((d) => {
        p.has(d.name) || (p.add(d.name), l.push(d));
      });
    }
  }
  return { inputs: r, outputs: e, usedNodes: n, missingInputs: s, dynamicNode: a, syncInputs: i };
}
function eT(r, e, t6) {
  let { usedNodes: o, inputs: n } = t6, s = [], a = Object.keys(n).map((c) => Ir(c)[0]).map((c) => r.nodes[c]), i = r.initNodes;
  a.forEach((c) => {
    o.has(c.name) && s.push(c);
  }), r.weights.forEach((c) => {
    o.has(c.name) && s.push(c);
  }), i != null && i.forEach((c) => {
    o.has(c.name) && s.push(c);
  });
  let p = /* @__PURE__ */ new Set(), u = [];
  for (; s.length > 0; ) {
    let c = s.pop();
    p.add(c.name), e[c.name] || u.push(c), c.children.forEach((l) => {
      !p.has(l.name) && o.has(l.name) && l.inputs.every((m) => p.has(m.name)) && s.push(l);
    });
  }
  return u;
}
var n6 = ["Switch", "Merge", "Enter", "Exit", "NextIteration", "StatelessIf", "StatelessWhile", "if", "While"];
var s6 = ["NonMaxSuppressionV2", "NonMaxSuppressionV3", "NonMaxSuppressionV5", "Where"];
var a6 = ["HashTable", "HashTableV2", "LookupTableImport", "LookupTableImportV2", "LookupTableFind", "LookupTableFindV2", "LookupTableSize", "LookupTableSizeV2"];
function jC(r) {
  return n6.indexOf(r.op) >= 0;
}
function i6(r) {
  return s6.indexOf(r.op) >= 0;
}
function u6(r) {
  return a6.indexOf(r.op) >= 0;
}
var Cu = class {
  constructor(e, t6) {
    this.graph = e, this.parent = t6, this.compiledMap = /* @__PURE__ */ new Map(), this._weightMap = {}, this.SEPERATOR = ",", this._functions = {}, this._functionExecutorMap = {}, this.keepIntermediateTensors = false, this._outputs = e.outputs, this._inputs = e.inputs, this._initNodes = e.initNodes, this._signature = e.signature, this._functions = e.functions, e.functions != null && Object.keys(e.functions).forEach((o) => {
      this._functionExecutorMap[o] = new Cu(e.functions[o], this);
    });
  }
  get weightIds() {
    return this.parent ? this.parent.weightIds : this._weightIds;
  }
  get functionExecutorMap() {
    return this.parent ? this.parent.functionExecutorMap : this._functionExecutorMap;
  }
  get weightMap() {
    return this.parent ? this.parent.weightMap : this._weightMap;
  }
  set weightMap(e) {
    let t6 = Object.keys(e).map((o) => e[o].map((n) => n.id));
    this._weightIds = [].concat(...t6), this._weightMap = e;
  }
  set resourceManager(e) {
    this._resourceManager = e;
  }
  get inputs() {
    return this._inputs.map((e) => ({ name: e.name, shape: e.attrParams.shape ? e.attrParams.shape.value : void 0, dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0 }));
  }
  get outputs() {
    return this._outputs.map((e) => ({ name: e.name, shape: e.attrParams.shape ? e.attrParams.shape.value : void 0, dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0 }));
  }
  get inputNodes() {
    return this._inputs.map((e) => e.signatureKey || e.name);
  }
  get outputNodes() {
    return this._outputs.map((e) => {
      let t6 = e.signatureKey || e.name;
      return e.defaultOutput ? `${t6}:${e.defaultOutput}` : t6;
    });
  }
  get functions() {
    return Object.keys(this._functions).reduce((e, t6) => (e[t6] = this._functions[t6].signature, e), {});
  }
  getCompilationKey(e, t6) {
    let o = e.map((s) => s.name).sort(), n = t6.map((s) => s.name).sort();
    return o.join(this.SEPERATOR) + "--" + n.join(this.SEPERATOR);
  }
  compile(e, t6) {
    let o = KC(e, t6, this.weightMap, this._initNodes), { missingInputs: n, dynamicNode: s, syncInputs: a } = o;
    if (s != null)
      throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);
    if (n.length > 0) {
      let i = t6.map((u) => u.name), p = Object.keys(e);
      throw new Error(`Cannot compute the outputs [${i}] from the provided inputs [${p}]. Missing the following inputs: [${n}]`);
    }
    return eT(this.graph, this.weightMap, o);
  }
  cloneAndKeepTensor(e) {
    if (e == null)
      return null;
    let t6 = e.clone();
    return _r(t6), t6;
  }
  cloneTensorList(e) {
    return e ? e.map((o) => this.cloneAndKeepTensor(o)) : null;
  }
  cloneTensorMap(e) {
    return Object.fromEntries(Object.entries(e).map(([t6, o]) => [t6, this.cloneTensorList(o)]));
  }
  execute(e, t6) {
    this.disposeIntermediateTensors(), e = this.mapInputs(e);
    let o = Object.keys(e).sort();
    this.checkInputs(e), this.checkInputShapeAndType(e), t6 = this.mapOutputs(t6), this.checkOutputs(t6);
    let n = o.map((l) => this.graph.nodes[Ir(l)[0]]), s = t6.map((l) => Ir(l)[0]), a = s.map((l) => this.graph.nodes[l]);
    a.length === 0 && (a = this._outputs);
    let i = this.getCompilationKey(n, a), p = this.compiledMap.get(i);
    p == null && (p = this.compile(e, a), this.compiledMap.set(i, p));
    try {
      this.keepIntermediateTensors = O().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (l) {
      this.keepIntermediateTensors = false, console.warn(l.message);
    }
    let u = {}, c = {};
    return Ee(() => {
      let l = new cl(this.weightMap, u, c, this.functionExecutorMap), m = Object.assign({}, this.weightMap);
      this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap)), Object.keys(e).forEach((h) => {
        let [g, x] = Ir(h), b = [];
        b[x] = e[h], m[g] = b, this.keepIntermediateTensors && (this.clonedTensorsMap[g] = this.cloneTensorList(b));
      });
      let d = this.getFrozenTensorIds(m), f = {};
      for (let h = 0; h < p.length; h++) {
        let g = p[h];
        if (!m[g.name]) {
          let x = qC(g, m, l, this._resourceManager);
          if (y.isPromise(x))
            throw new Error(`The execution of the op '${g.op}' returned a promise. Please use model.executeAsync() instead.`);
          m[g.name] = x, this.keepIntermediateTensors && (this.clonedTensorsMap[g.name] = this.cloneTensorList(x)), this.checkTensorForDisposal(g.name, g, m, l, d, s, f);
        }
      }
      return this.parent == null && l.dispose(d), t6.map((h) => Gt(h, m, l));
    });
  }
  getFrozenTensorIds(e) {
    let t6 = [].concat.apply([], Object.keys(e).map((o) => e[o]).map((o) => o.map((n) => n.id)));
    return new Set(t6);
  }
  checkTensorForDisposal(e, t6, o, n, s, a, i) {
    t6.category === "control" || a.indexOf(e) !== -1 || (o[e].forEach((p) => {
      p != null && (i[p.id] = (i[p.id] || 0) + t6.children.length);
    }), t6.inputs.forEach((p) => {
      if (p.category !== "control") {
        let u = vN(p.name, o, n);
        u != null && u.forEach((c) => {
          if (c && !c.kept && !s.has(c.id)) {
            let l = i[c.id];
            l === 1 ? (c.dispose(), delete i[c.id]) : l != null && i[c.id]--;
          }
        });
      }
    }));
  }
  async executeAsync(e, t6) {
    return this._executeAsync(e, t6);
  }
  disposeIntermediateTensors() {
    !this.clonedTensorsMap || (Object.values(this.clonedTensorsMap).forEach((e) => {
      for (let t6 of e)
        t6 && !t6.isDisposed && t6.dispose();
    }), this.clonedTensorsMap = null);
  }
  getIntermediateTensors() {
    return this.clonedTensorsMap;
  }
  async _executeAsync(e, t6, o = false, n = {}, s = {}) {
    this.disposeIntermediateTensors(), o || (e = this.mapInputs(e), this.checkInputs(e), this.checkInputShapeAndType(e), t6 = this.mapOutputs(t6), this.checkOutputs(t6));
    try {
      this.keepIntermediateTensors = O().getBool("KEEP_INTERMEDIATE_TENSORS");
    } catch (m) {
      this.keepIntermediateTensors = false, console.warn(m.message);
    }
    let a = new cl(this.weightMap, n, s, this.functionExecutorMap);
    this.keepIntermediateTensors && (this.clonedTensorsMap = this.cloneTensorMap(this.weightMap));
    let i = await this.executeWithControlFlow(e, a, t6, o), p = t6.map((m) => Gt(m, i, a)), u = p.map((m) => m.id), c = Object.keys(e).map((m) => e[m].id), l = /* @__PURE__ */ new Set([...u, ...c, ...this.weightIds]);
    return Object.values(i).forEach((m) => {
      m.forEach((d) => {
        d && !d.isDisposed && !l.has(d.id) && d.dispose();
      });
    }), this.parent == null && a.dispose(l), p;
  }
  async executeFunctionAsync(e, t6, o) {
    let n = e.reduce((s, a, i) => (s[this.inputs[i].name] = a, s), {});
    return this._executeAsync(n, this.outputNodes, true, t6, o);
  }
  async executeWithControlFlow(e, t6, o, n) {
    let s = Object.keys(e), a = s.map((C) => this.graph.nodes[Ir(C)[0]]), i = o.map((C) => Ir(C)[0]), p = i.map((C) => this.graph.nodes[C]);
    p.length === 0 && (p = this._outputs);
    let { usedNodes: u, missingInputs: c, dynamicNode: l, syncInputs: m } = KC(e, p, this.weightMap, this._initNodes), d = [...a, ...this.graph.weights, ...this._initNodes || []].map((C) => ({ node: C, contexts: t6.currentContext })), f = Object.assign({}, this.weightMap);
    Object.keys(e).forEach((C) => {
      let [w, k] = Ir(C), _ = [];
      _[k] = e[C], f[w] = _;
    });
    let h = {}, g = this.getFrozenTensorIds(f), x = {};
    for (; d.length > 0; ) {
      let C = this.processStack(a, d, t6, f, x, g, i, h, u);
      await Promise.all(C);
    }
    l == null && !n && console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");
    let b = p.filter((C) => !jC(C) && !Gt(C.name, f, t6)).map((C) => C.name);
    if (b.length > 0) {
      let C = "";
      throw l != null && (C = `Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${m}]`), new Error(`Cannot compute the outputs [${b}] from the provided inputs [${s}]. Consider providing the following inputs: [${c}]. ${C}`);
    }
    return f;
  }
  processStack(e, t6, o, n, s, a, i, p, u) {
    let c = [];
    for (; t6.length > 0; ) {
      let l = t6.pop();
      o.currentContext = l.contexts;
      let m = "";
      if (l.node.op === "Enter" && I("isConstant", l.node, n, o) && ([m] = ss(l.node.name, o)), n[l.node.name] == null) {
        let d = qC(l.node, n, o, this._resourceManager);
        m || ([m] = ss(l.node.name, o));
        let f = o.currentContext;
        y.isPromise(d) ? c.push(d.then((h) => (n[m] = h, this.keepIntermediateTensors && (this.clonedTensorsMap[m] = this.cloneTensorList(h)), o.currentContext = f, this.checkTensorForDisposal(m, l.node, n, o, a, i, p), this.processChildNodes(l.node, t6, o, n, s, u), h))) : (n[m] = d, this.keepIntermediateTensors && (this.clonedTensorsMap[m] = this.cloneTensorList(d)), this.checkTensorForDisposal(m, l.node, n, o, a, i, p), this.processChildNodes(l.node, t6, o, n, s, u));
      } else
        this.processChildNodes(l.node, t6, o, n, s, u);
    }
    return c;
  }
  processChildNodes(e, t6, o, n, s, a) {
    e.children.forEach((i) => {
      let [p] = ss(i.name, o);
      s[p] || !a.has(i.name) || (i.op === "Merge" ? i.inputNames.some((u) => !!Gt(u, n, o)) && (s[p] = true, t6.push({ contexts: o.currentContext, node: i })) : i.inputNames.every((u) => !!Gt(u, n, o)) && (s[p] = true, t6.push({ contexts: o.currentContext, node: i })));
    });
  }
  dispose() {
    Object.keys(this.weightMap).forEach((e) => this.weightMap[e].forEach((t6) => t6.dispose()));
  }
  checkInputShapeAndType(e) {
    Object.keys(e).forEach((t6) => {
      let o = e[t6], [n] = Ir(t6), s = this.graph.nodes[n];
      if (s.attrParams.shape && s.attrParams.shape.value) {
        let a = s.attrParams.shape.value, i = a.length === o.shape.length && o.shape.every((p, u) => a[u] === -1 || a[u] === p);
        y.assert(i, () => `The shape of dict['${s.name}'] provided in model.execute(dict) must be [${a}], but was [${o.shape}]`);
      }
      s.attrParams.dtype && s.attrParams.dtype.value && y.assert(o.dtype === s.attrParams.dtype.value, () => `The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${o.dtype}`);
    });
  }
  mapInputs(e) {
    var t6, o;
    let n = {};
    for (let s in e) {
      let a = (o = (t6 = this._signature) === null || t6 === void 0 ? void 0 : t6.inputs) === null || o === void 0 ? void 0 : o[s];
      a != null ? n[a.name] = e[s] : n[s] = e[s];
    }
    return n;
  }
  checkInputs(e) {
    let t6 = Object.keys(e).filter((o) => {
      let [n] = Ir(o);
      return this.graph.nodes[n] == null;
    });
    if (t6.length > 0)
      throw new Error(`The dict provided in model.execute(dict) has keys: [${t6}] that are not part of graph`);
  }
  mapOutputs(e) {
    return e.map((t6) => {
      var o, n;
      let s = (n = (o = this._signature) === null || o === void 0 ? void 0 : o.outputs) === null || n === void 0 ? void 0 : n[t6];
      return s != null ? s.name : t6;
    }, {});
  }
  checkOutputs(e) {
    e.forEach((t6) => {
      let [o] = Ir(t6);
      if (!this.graph.nodes[o])
        throw new Error(`The output '${t6}' is not found in the graph`);
    });
  }
};
var af = class {
  constructor(e = {}, t6 = {}) {
    this.hashTableNameToHandle = e, this.hashTableMap = t6;
  }
  addHashTable(e, t6) {
    this.hashTableNameToHandle[e] = t6.handle, this.hashTableMap[t6.id] = t6;
  }
  getHashTableHandleByName(e) {
    return this.hashTableNameToHandle[e];
  }
  getHashTableById(e) {
    return this.hashTableMap[e];
  }
  dispose() {
    for (let e in this.hashTableMap)
      this.hashTableMap[e].clearAndClose(), delete this.hashTableMap[e];
    for (let e in this.hashTableNameToHandle)
      this.hashTableNameToHandle[e].dispose(), delete this.hashTableNameToHandle[e];
  }
};
var p6 = "?tfjs-format=file";
var c6 = "model.json";
var ll = class {
  constructor(e, t6 = {}, o = Ea) {
    this.modelUrl = e, this.loadOptions = t6, this.version = "n/a", this.io = o, t6 == null && (this.loadOptions = {}), this.resourceManager = new af();
  }
  get modelVersion() {
    return this.version;
  }
  get inputNodes() {
    return this.executor.inputNodes;
  }
  get outputNodes() {
    return this.executor.outputNodes;
  }
  get inputs() {
    return this.executor.inputs;
  }
  get outputs() {
    return this.executor.outputs;
  }
  get weights() {
    return this.executor.weightMap;
  }
  get metadata() {
    return this.artifacts.userDefinedMetadata;
  }
  get modelSignature() {
    return this.signature;
  }
  get modelStructuredOutputKeys() {
    return this.structuredOutputKeys;
  }
  findIOHandler() {
    let e = this.modelUrl;
    if (e.load != null)
      this.handler = e;
    else if (this.loadOptions.requestInit != null)
      this.handler = this.io.browserHTTPRequest(e, this.loadOptions);
    else {
      let t6 = this.io.getLoadHandlers(e, this.loadOptions);
      if (t6.length === 0)
        t6.push(this.io.browserHTTPRequest(e, this.loadOptions));
      else if (t6.length > 1)
        throw new Error(`Found more than one (${t6.length}) load handlers for URL '${[e]}'`);
      this.handler = t6[0];
    }
  }
  load() {
    if (this.findIOHandler(), this.handler.load == null)
      throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");
    let e = this.handler.load();
    return y.isPromise(e) ? e.then((t6) => this.loadSync(t6)) : this.loadSync(e);
  }
  loadSync(e) {
    this.artifacts = e;
    let t6 = this.artifacts.modelTopology, o = this.artifacts.signature;
    if (this.artifacts.userDefinedMetadata != null) {
      let s = this.artifacts.userDefinedMetadata;
      s.signature != null && (o = s.signature), s.structuredOutputKeys != null && (this.structuredOutputKeys = s.structuredOutputKeys);
    }
    this.signature = o, this.version = `${t6.versions.producer}.${t6.versions.minConsumer}`;
    let n = this.io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);
    if (this.executor = new Cu(pl.Instance.transformGraph(t6, this.signature)), this.executor.weightMap = this.convertTensorMapToTensorsMap(n), this.executor.resourceManager = this.resourceManager, e.modelInitializer != null && e.modelInitializer.node != null) {
      let s = pl.Instance.transformGraph(e.modelInitializer);
      this.initializer = new Cu(s), this.initializer.weightMap = this.executor.weightMap, this.initializer.resourceManager = this.resourceManager, this.initializerSignature = e.initializerSignature;
    }
    return true;
  }
  async save(e, t6) {
    if (typeof e == "string") {
      let o = this.io.getSaveHandlers(e);
      if (o.length === 0)
        throw new Error(`Cannot find any save handlers for URL '${e}'`);
      if (o.length > 1)
        throw new Error(`Found more than one (${o.length}) save handlers for URL '${e}'`);
      e = o[0];
    }
    if (e.save == null)
      throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");
    return e.save(this.artifacts);
  }
  addStructuredOutputNames(e) {
    if (this.structuredOutputKeys) {
      let t6 = e instanceof it ? [e] : e, o = {};
      return t6.forEach((n, s) => o[this.structuredOutputKeys[s]] = n), o;
    }
    return e;
  }
  predict(e, t6) {
    let o = this.execute(e, this.outputNodes);
    return this.addStructuredOutputNames(o);
  }
  async predictAsync(e, t6) {
    let o = await this.executeAsync(e, this.outputNodes);
    return this.addStructuredOutputNames(o);
  }
  normalizeInputs(e) {
    var t6;
    if (!(e instanceof it) && !Array.isArray(e)) {
      let s = (t6 = this.signature) === null || t6 === void 0 ? void 0 : t6.inputs;
      if (s != null)
        for (let a in s) {
          let i = s[a];
          i.resourceId != null && (e[a] = this.resourceIdToCapturedInput[i.resourceId]);
        }
      return e;
    }
    e = Array.isArray(e) ? e : [e];
    let o = Object.keys(this.resourceIdToCapturedInput).length;
    if (e.length + o !== this.inputNodes.length)
      throw new Error(`Input tensor count mismatch, the graph model has ${this.inputNodes.length - o} non-resource placeholders, while there are ${e.length} input tensors provided.`);
    let n = 0;
    return this.inputNodes.reduce((s, a) => {
      var i, p, u;
      let c = (u = (p = (i = this.signature) === null || i === void 0 ? void 0 : i.inputs) === null || p === void 0 ? void 0 : p[a]) === null || u === void 0 ? void 0 : u.resourceId;
      return c != null ? s[a] = this.resourceIdToCapturedInput[c] : s[a] = e[n++], s;
    }, {});
  }
  normalizeOutputs(e) {
    return e = e || this.outputNodes, Array.isArray(e) ? e : [e];
  }
  executeInitializerGraph() {
    return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.execute({}, []) : this.initializer.execute({}, Object.keys(this.initializerSignature.outputs));
  }
  async executeInitializerGraphAsync() {
    return this.initializer == null ? [] : this.initializerSignature == null ? this.initializer.executeAsync({}, []) : this.initializer.executeAsync({}, Object.keys(this.initializerSignature.outputs));
  }
  setResourceIdToCapturedInput(e) {
    if (this.resourceIdToCapturedInput = {}, this.initializerSignature) {
      let t6 = this.initializerSignature.outputs, o = Object.keys(t6);
      for (let n = 0; n < o.length; n++) {
        let s = o[n], a = t6[s];
        this.resourceIdToCapturedInput[a.resourceId] = e[n];
      }
    }
  }
  execute(e, t6) {
    this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(this.executeInitializerGraph()), e = this.normalizeInputs(e), t6 = this.normalizeOutputs(t6);
    let o = this.executor.execute(e, t6);
    return o.length > 1 ? o : o[0];
  }
  async executeAsync(e, t6) {
    this.resourceIdToCapturedInput == null && this.setResourceIdToCapturedInput(await this.executeInitializerGraphAsync()), e = this.normalizeInputs(e), t6 = this.normalizeOutputs(t6);
    let o = await this.executor.executeAsync(e, t6);
    return o.length > 1 ? o : o[0];
  }
  getIntermediateTensors() {
    return this.executor.getIntermediateTensors();
  }
  disposeIntermediateTensors() {
    this.executor.disposeIntermediateTensors();
  }
  convertTensorMapToTensorsMap(e) {
    return Object.keys(e).reduce((t6, o) => (t6[o] = [e[o]], t6), {});
  }
  dispose() {
    this.executor.dispose(), this.initializer && (this.initializer.dispose(), this.resourceIdToCapturedInput && Dt(this.resourceIdToCapturedInput)), this.resourceManager.dispose();
  }
};
async function l6(r, e = {}, t6 = Ea) {
  if (r == null)
    throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");
  e == null && (e = {}), e.fromTFHub && typeof r == "string" && (r = d6(r));
  let o = new ll(r, e, t6);
  return await o.load(), o;
}
function m6(r) {
  if (r == null)
    throw new Error("modelUrl in loadGraphModelSync() cannot be null. Please provide model artifacts or an IOHandler that loads the model");
  let e;
  if (r instanceof Array) {
    let [o, n] = r;
    if (!o)
      throw new Error("modelJSON must be the first element of the array");
    if (!n || !(n instanceof ArrayBuffer))
      throw new Error("An ArrayBuffer of weights must be the second element of the array");
    if (!("modelTopology" in o))
      throw new Error("Model JSON is missing 'modelTopology'");
    if (!("weightsManifest" in o))
      throw new Error("Model JSON is missing 'weightsManifest'");
    let s = Ea.getWeightSpecs(o.weightsManifest), a = Ea.getModelArtifactsForJSONSync(o, s, n);
    e = Ea.fromMemorySync(a);
  } else if ("load" in r)
    e = r;
  else if ("modelTopology" in r && "weightSpecs" in r && "weightData" in r)
    e = Ea.fromMemorySync(r);
  else
    throw new Error("Unknown model format");
  let t6 = new ll(e);
  return t6.load(), t6;
}
function d6(r) {
  return r.endsWith("/") || (r = r + "/"), `${r}${c6}${p6}`;
}
var f6 = "4.1.0";
function K(r, e) {
  Array.isArray(r) || (r = [r]), r.forEach((t6) => {
    t6 != null && y.assert(t6.dtype !== "complex64", () => `${e} does not support complex64 tensors in the CPU backend.`);
  });
}
var h6 = Lt.whereImpl;
var Oi = class extends Zr {
  constructor() {
    super(), this.blockSize = 48, this.firstUse = true, this.data = new Do(this, cr());
  }
  nextDataId() {
    return Oi.nextDataId++;
  }
  write(e, t6, o) {
    this.firstUse && (this.firstUse = false, O().get("IS_NODE") && S.warn(`
============================
Hi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. 
============================`));
    let n = { id: this.nextDataId() };
    return this.data.set(n, { values: e, dtype: o, refCount: 1 }), n;
  }
  makeTensorInfo(e, t6, o) {
    let n;
    if (t6 === "string" && o != null && o.length > 0 && y.isString(o[0])) {
      let s = o.map((a) => y.encodeString(a));
      n = this.write(s, e, t6);
    } else
      n = this.write(o, e, t6);
    return { dataId: n, shape: e, dtype: t6 };
  }
  refCount(e) {
    return this.data.has(e) ? this.data.get(e).refCount : 0;
  }
  incRef(e) {
    let t6 = this.data.get(e);
    t6.refCount++;
  }
  decRef(e) {
    if (this.data.has(e)) {
      let t6 = this.data.get(e);
      t6.refCount--;
    }
  }
  move(e, t6, o, n, s) {
    this.data.set(e, { values: t6, dtype: n, refCount: s });
  }
  numDataIds() {
    return this.data.numDataIds();
  }
  async read(e) {
    return this.readSync(e);
  }
  readSync(e) {
    let { dtype: t6, complexTensorInfos: o } = this.data.get(e);
    if (t6 === "complex64") {
      let n = this.readSync(o.real.dataId), s = this.readSync(o.imag.dataId);
      return S.mergeRealAndImagArrays(n, s);
    }
    return this.data.get(e).values;
  }
  bufferSync(e) {
    let t6 = this.readSync(e.dataId);
    if (e.dtype === "string")
      try {
        let o = t6.map((n) => y.decodeString(n));
        return le(e.shape, e.dtype, o);
      } catch (o) {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return le(e.shape, e.dtype, t6);
  }
  makeOutput(e, t6, o) {
    return cr().makeTensorFromTensorInfo(this.makeTensorInfo(t6, o, e), this);
  }
  disposeData(e, t6 = false) {
    if (this.data.has(e)) {
      if (this.data.get(e).refCount--, !t6 && this.data.get(e).refCount > 0)
        return false;
      let { complexTensorInfos: o } = this.data.get(e);
      o != null && (this.disposeData(o.real.dataId, true), this.disposeData(o.imag.dataId, true)), this.data.delete(e);
    }
    return true;
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  async time(e) {
    let t6 = y.now();
    return e(), { kernelMs: y.now() - t6 };
  }
  memory() {
    return { unreliable: true, reasons: ["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."] };
  }
  where(e) {
    K([e], "where");
    let t6 = this.readSync(e.dataId);
    return h6(e.shape, t6);
  }
  dispose() {
  }
  floatPrecision() {
    return 32;
  }
  epsilon() {
    return super.epsilon();
  }
};
Oi.nextDataId = 0;
var Qp = {};
Ue(Qp, { addImpl: () => QC, bincountImpl: () => Kp, bincountReduceImpl: () => uf, castImpl: () => YC, ceilImpl: () => ZC, concatImpl: () => Su, equalImpl: () => JC, expImpl: () => tS, expm1Impl: () => oS, floorImpl: () => nS, gatherNdImpl: () => pf, gatherV2Impl: () => cf, greaterEqualImpl: () => aS, greaterImpl: () => sS, lessEqualImpl: () => uS, lessImpl: () => iS, linSpaceImpl: () => lf, logImpl: () => pS, maxImpl: () => mf, maximumImpl: () => cS, minimumImpl: () => lS, multiplyImpl: () => ml, negImpl: () => mS, notEqualImpl: () => dS, prodImpl: () => fS, raggedGatherImpl: () => df, raggedRangeImpl: () => ff, raggedTensorToTensorImpl: () => hf, rangeImpl: () => Iu, rsqrtImpl: () => hS, scatterImpl: () => Ma, sigmoidImpl: () => ET, simpleAbsImpl: () => XC, sliceImpl: () => vu, sparseFillEmptyRowsImpl: () => gf, sparseReshapeImpl: () => xf, sparseSegmentReductionImpl: () => Yp, sqrtImpl: () => RT, squaredDifferenceImpl: () => xS, stridedSliceImpl: () => yf, stringNGramsImpl: () => ku, stringSplitImpl: () => Nu, stringToHashBucketFastImpl: () => Tu, subImpl: () => bS, tileImpl: () => bf, topKImpl: () => Cf, transposeImpl: () => jp, uniqueImpl: () => Sf });
function XC(r) {
  let e = new Float32Array(r.length);
  for (let t6 = 0; t6 < r.length; ++t6)
    e[t6] = Math.abs(r[t6]);
  return e;
}
var g6 = (r) => {
  let { x: e } = r.inputs, t6 = r.backend;
  K(e, "abs");
  let o = new Float32Array(y.sizeFromShape(e.shape)), n = t6.data.get(e.dataId).values;
  return o = XC(n), t6.makeOutput(o, e.shape, e.dtype);
};
var tT = { kernelName: gs, backendName: "cpu", kernelFunc: g6 };
function Be(r) {
  return (e, t6, o, n, s) => {
    let a = S.assertAndGetBroadcastShape(e, t6), i = a.length, p = y.computeStrides(a), u = y.sizeFromShape(a), c = y.getTypedArrayFromDType(s, u), l = e.length, m = t6.length, d = y.computeStrides(e), f = y.computeStrides(t6), h = S.getBroadcastDims(e, a), g = S.getBroadcastDims(t6, a);
    if (h.length + g.length === 0)
      for (let x = 0; x < c.length; ++x)
        c[x] = r(o[x % o.length], n[x % n.length]);
    else
      for (let x = 0; x < c.length; ++x) {
        let b = y.indexToLoc(x, i, p), C = b.slice(-l);
        h.forEach(($) => C[$] = 0);
        let w = y.locToIndex(C, l, d), k = b.slice(-m);
        g.forEach(($) => k[$] = 0);
        let _ = y.locToIndex(k, m, f);
        c[x] = r(o[w], n[_]);
      }
    return [c, a];
  };
}
function Ht(r) {
  let { inputs: e, backend: t6 } = r, { real: o, imag: n } = e, s = t6.data.get(o.dataId).values, a = t6.data.get(n.dataId).values, i = t6.makeTensorInfo(o.shape, "complex64"), p = t6.data.get(i.dataId);
  return p.complexTensorInfos = { real: t6.makeTensorInfo(o.shape, "float32", s), imag: t6.makeTensorInfo(n.shape, "float32", a) }, i;
}
var rT = { kernelName: ei, backendName: "cpu", kernelFunc: Ht };
function Hp(r, e, t6 = "float32") {
  if (t6 === "complex64") {
    let n = Hp(r, e, "float32"), s = Hp(r, e, "float32");
    return Ht({ inputs: { real: n, imag: s }, backend: r });
  }
  let o = y.makeZerosTypedArray(y.sizeFromShape(e), t6);
  return r.makeTensorInfo(e, t6, o);
}
function ar(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  return t6.incRef(o.dataId), { dataId: o.dataId, shape: o.shape, dtype: o.dtype };
}
var oT = { kernelName: mo, backendName: "cpu", kernelFunc: ar };
function wo(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e, n = t6.data.get(o.dataId).complexTensorInfos.real, s = t6.data.get(n.dataId).values;
  return t6.makeTensorInfo(n.shape, n.dtype, s);
}
var nT = { kernelName: ai, backendName: "cpu", kernelFunc: wo };
function YC(r, e, t6, o) {
  if (o === "int32") {
    let n = Int32Array.from(r);
    return [e, "int32", n];
  }
  if (o === "bool") {
    let n = y.toTypedArray([0], t6), [s, a] = Be((i, p) => i !== p ? 1 : 0)(e, [], r, n, "bool");
    return [a, "bool", s];
  }
  throw new Error(`Error in Cast: failed to cast ${t6} to ${o}`);
}
function Io(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { dtype: s } = o;
  if (s === "complex64") {
    if (n.dtype === "complex64")
      return ar({ inputs: { x: n }, backend: t6 });
    let c = Hp(t6, n.shape, n.dtype), l = Io({ inputs: { x: n }, backend: t6, attrs: { dtype: "float32" } }), m = Ht({ inputs: { real: l, imag: c }, backend: t6 });
    return t6.disposeIntermediateTensorInfo(c), t6.disposeIntermediateTensorInfo(l), m;
  }
  if (n.dtype === "complex64") {
    let c = wo({ inputs: { input: n }, backend: t6 }), l = Io({ inputs: { x: c }, backend: t6, attrs: { dtype: s } });
    return t6.disposeIntermediateTensorInfo(c), l;
  }
  if (!y.hasEncodingLoss(n.dtype, s)) {
    let c = ar({ inputs: { x: n }, backend: t6 });
    return { dataId: c.dataId, shape: c.shape, dtype: s };
  }
  let a = t6.data.get(n.dataId).values, [i, p, u] = YC(a, n.shape, n.dtype, s);
  return t6.makeTensorInfo(i, p, u);
}
var sT = { kernelName: co, backendName: "cpu", kernelFunc: Io };
function Qe(r, e, t6, o) {
  return t6 == null ? ({ inputs: n, backend: s }) => {
    let { a, b: i } = n, p = s;
    K([a, i], r);
    let u = p.data.get(a.dataId).values, c = p.data.get(i.dataId).values, l = a.dtype === "string" ? S.fromUint8ToStringArray(u) : u, m = a.dtype === "string" ? S.fromUint8ToStringArray(c) : c, d = o || a.dtype, [f, h] = e(a.shape, i.shape, l, m, d);
    return p.makeTensorInfo(h, d, f);
  } : ({ inputs: n, backend: s }) => {
    let { a, b: i } = n, p = s;
    if (a.dtype === "complex64" || i.dtype === "complex64") {
      let u = Io({ inputs: { x: a }, backend: p, attrs: { dtype: "complex64" } }), c = p.data.get(u.dataId), l = c.complexTensorInfos.real, m = c.complexTensorInfos.imag, d = p.data.get(l.dataId).values, f = p.data.get(m.dataId).values, h = Io({ inputs: { x: i }, backend: p, attrs: { dtype: "complex64" } }), g = p.data.get(h.dataId), x = g.complexTensorInfos.real, b = g.complexTensorInfos.imag, C = p.data.get(x.dataId).values, w = p.data.get(b.dataId).values, [k, _, $] = t6(a.shape, i.shape, d, f, C, w), A = p.makeTensorInfo($, "float32", k), R = p.makeTensorInfo($, "float32", _), D = Ht({ inputs: { real: A, imag: R }, backend: p });
      return p.disposeIntermediateTensorInfo(u), p.disposeIntermediateTensorInfo(h), p.disposeIntermediateTensorInfo(A), p.disposeIntermediateTensorInfo(R), D;
    } else {
      let u = p.data.get(a.dataId).values, c = p.data.get(i.dataId).values, l = o || a.dtype, [m, d] = e(a.shape, i.shape, u, c, l);
      return p.makeTensorInfo(d, l, m);
    }
  };
}
function qp(r) {
  return (e, t6, o, n, s, a) => {
    let i = S.assertAndGetBroadcastShape(e, t6), p = y.sizeFromShape(i), u = i.length, c = y.computeStrides(i), l = y.getTypedArrayFromDType("float32", p), m = y.getTypedArrayFromDType("float32", p), d = S.getBroadcastDims(e, i), f = S.getBroadcastDims(t6, i), h = S.mergeRealAndImagArrays(o, n), g = S.mergeRealAndImagArrays(s, a), x = e.length, b = y.computeStrides(e), C = t6.length, w = y.computeStrides(t6);
    if (d.length + f.length === 0)
      for (let k = 0; k < l.length; k++) {
        let _ = k % h.length, $ = k % g.length, A = r(h[_ * 2], h[_ * 2 + 1], g[$ * 2], g[$ * 2 + 1]);
        l[k] = A.real, m[k] = A.imag;
      }
    else
      for (let k = 0; k < l.length; k++) {
        let _ = y.indexToLoc(k, u, c), $ = _.slice(-x);
        d.forEach((M) => $[M] = 0);
        let A = y.locToIndex($, x, b), R = _.slice(-C);
        f.forEach((M) => R[M] = 0);
        let D = y.locToIndex(R, C, w), P = r(h[A * 2], h[A * 2 + 1], g[D * 2], g[D * 2 + 1]);
        l[k] = P.real, m[k] = P.imag;
      }
    return [l, m, i];
  };
}
var QC = Be((r, e) => r + e);
var x6 = qp((r, e, t6, o) => ({ real: r + t6, imag: e + o }));
var js = Qe(eo, QC, x6);
var aT = { kernelName: eo, backendName: "cpu", kernelFunc: js };
function Kp(r, e, t6, o, n) {
  let s = y.sizeFromShape(o), a = y.makeZerosTypedArray(n, t6);
  for (let i = 0; i < r.length; i++) {
    let p = r[i];
    if (p < 0)
      throw new Error("Input x must be non-negative!");
    p >= n || (s > 0 ? a[p] += e[i] : a[p] += 1);
  }
  return a;
}
function uf(r, e, t6, o = false) {
  let n = r.shape[0], s = r.shape[1], a = le([n, t6], e.dtype);
  for (let i = 0; i < n; i++)
    for (let p = 0; p < s; p++) {
      let u = r.get(i, p);
      if (u < 0)
        throw new Error("Input x must be non-negative!");
      u >= t6 || (o ? a.set(1, i, u) : e.size > 0 ? a.set(a.get(i, u) + e.get(i, p), i, u) : a.set(a.get(i, u) + 1, i, u));
    }
  return a;
}
function vr(r) {
  return (e, t6, o) => {
    let n = y.getTypedArrayFromDType(t6, e.length);
    for (let s = 0; s < e.length; ++s)
      n[s] = r(e[s], o);
    return n;
  };
}
function Ie(r, e, t6) {
  return ({ inputs: o, attrs: n, backend: s }) => {
    let { x: a } = o;
    if (K(a, r), a.dtype === "string" || t6 === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    let i = s, p = i.data.get(a.dataId).values, u = y.sizeFromShape(a.shape), c = t6 || a.dtype, l = y.getArrayFromDType(c, u);
    for (let m = 0; m < u; ++m)
      l[m] = e(p[m], n);
    return i.makeTensorInfo(a.shape, c, l);
  };
}
function vo(r, e, t6) {
  return ({ inputs: o, attrs: n, backend: s }) => {
    let { x: a } = o;
    if (K(a, r), a.dtype === "string" || t6 === "string")
      throw new Error("unaryKernelFunc does not support string input/output");
    let i = s, p = i.data.get(a.dataId).values, u = t6 || a.dtype, c = e(p, u, n);
    return i.makeTensorInfo(a.shape, u, c);
  };
}
var ZC = vr((r) => Math.ceil(r));
var y6 = vo(Uo, ZC);
var iT = { kernelName: Uo, backendName: "cpu", kernelFunc: y6 };
function Su(r, e, t6, o) {
  let n = y.getArrayFromDType(t6, y.sizeFromShape(e));
  if (o && t6 !== "string") {
    let s = 0;
    r.forEach((a) => {
      let i = y.sizeFromShape(a.shape);
      n.set(a.vals, s), s += i;
    });
  } else {
    let s = 0;
    r.forEach((a) => {
      let i = t6 === "string" ? S.fromUint8ToStringArray(a.vals) : a.vals, p = 0;
      for (let u = 0; u < a.shape[0]; ++u) {
        let c = u * e[1] + s;
        for (let l = 0; l < a.shape[1]; ++l)
          n[c + l] = i[p++];
      }
      s += a.shape[1];
    });
  }
  return n;
}
var JC = Be((r, e) => r === e ? 1 : 0);
var eS = Qe(tn, JC, null, "bool");
var uT = { kernelName: tn, backendName: "cpu", kernelFunc: eS };
var tS = vr((r) => Math.exp(r));
var rS = vo(rn, tS, "float32");
var pT = { kernelName: rn, backendName: "cpu", kernelFunc: rS };
var oS = vr((r) => Math.expm1(r));
var b6 = vo(da, oS);
var cT = { kernelName: da, backendName: "cpu", kernelFunc: b6 };
var nS = vr((r) => Math.floor(r));
var C6 = vo(nn, nS);
var lT = { kernelName: nn, backendName: "cpu", kernelFunc: C6 };
function pf(r, e, t6, o, n, s, a, i, p) {
  let u = le([o, s], t6);
  for (let c = 0; c < o; c++) {
    let l = [], m = 0;
    for (let d = 0; d < n; d++) {
      let f = r[c * n + d];
      m += f * a[d], l.push(f);
    }
    if (m < 0 || m >= p / s)
      throw new Error(`Invalid indices: ${l} does not index into ${i}`);
    for (let d = 0; d < s; d++)
      u.values[c * s + d] = e.get(...e.indexToLoc(m * s + d));
  }
  return u;
}
function cf(r, e, t6) {
  let o = le(t6, r.dtype);
  for (let n = 0; n < o.size; ++n) {
    let a = o.indexToLoc(n).slice(), i = a[0], p = a[2], u = e.locToIndex([i, p]);
    a[2] = e.values[u];
    let c = r.locToIndex(a);
    0 <= c && c < r.values.length && (o.values[n] = r.values[c]);
  }
  return o;
}
var sS = Be((r, e) => r > e ? 1 : 0);
var S6 = Qe(pn, sS, null, "bool");
var mT = { kernelName: pn, backendName: "cpu", kernelFunc: S6 };
var aS = Be((r, e) => r >= e ? 1 : 0);
var w6 = Qe(cn, aS, null, "bool");
var dT = { kernelName: cn, backendName: "cpu", kernelFunc: w6 };
var iS = Be((r, e) => r < e ? 1 : 0);
var I6 = Qe(dn, iS, null, "bool");
var fT = { kernelName: dn, backendName: "cpu", kernelFunc: I6 };
var uS = Be((r, e) => r <= e ? 1 : 0);
var v6 = Qe(fn, uS, null, "bool");
var hT = { kernelName: fn, backendName: "cpu", kernelFunc: v6 };
function lf(r, e, t6) {
  let o = (e - r) / (t6 - 1), n = y.makeZerosTypedArray(t6, "float32");
  n[0] = r;
  for (let s = 1; s < n.length; s++)
    n[s] = n[s - 1] + o;
  return n;
}
var pS = vr((r) => Math.log(r));
var k6 = vo(hn, pS);
var gT = { kernelName: hn, backendName: "cpu", kernelFunc: k6 };
function mf(r, e, t6, o) {
  let n = y.getTypedArrayFromDType(o, y.sizeFromShape(t6));
  for (let s = 0; s < n.length; ++s) {
    let a = s * e, i = r[a];
    for (let p = 0; p < e; ++p) {
      let u = r[a + p];
      (Number.isNaN(u) || u > i) && (i = u);
    }
    n[s] = i;
  }
  return n;
}
var cS = Be((r, e) => Math.max(r, e));
var N6 = Qe(bn, cS);
var xT = { kernelName: bn, backendName: "cpu", kernelFunc: N6 };
var lS = Be((r, e) => Math.min(r, e));
var T6 = Qe(In, lS);
var yT = { kernelName: In, backendName: "cpu", kernelFunc: T6 };
var ml = Be((r, e) => r * e);
var _6 = qp((r, e, t6, o) => ({ real: r * t6 - e * o, imag: r * o + e * t6 }));
var wu = Qe(kn, ml, _6);
var bT = { kernelName: kn, backendName: "cpu", kernelFunc: wu };
function mS(r, e, t6) {
  let o = y.createScalarValue(-1, t6);
  return ml([], e, o, r, t6);
}
function E6(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  K(o, "neg");
  let n = t6.data.get(o.dataId).values, [s, a] = mS(n, o.shape, o.dtype);
  return t6.makeTensorInfo(a, o.dtype, s);
}
var CT = { kernelName: ws, backendName: "cpu", kernelFunc: E6 };
var dS = Be((r, e) => r !== e ? 1 : 0);
var $6 = Qe(Nn, dS, null, "bool");
var ST = { kernelName: Nn, backendName: "cpu", kernelFunc: $6 };
function jp(r, e, t6, o, n) {
  let s = e.length, a = y.sizeFromShape(e), i = y.computeStrides(e), p = y.computeStrides(n), u = y.getTypedArrayFromDType(t6, y.sizeFromShape(n));
  for (let c = 0; c < a; ++c) {
    let l = y.indexToLoc(c, s, i), m = new Array(l.length);
    for (let f = 0; f < m.length; f++)
      m[f] = l[o[f]];
    let d = y.locToIndex(m, s, p);
    u[d] = r[c];
  }
  return u;
}
function Ct(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { x: n } = e, { perm: s } = t6;
  K(n, "transpose");
  let a = n.shape.length, i = new Array(a);
  for (let l = 0; l < i.length; l++)
    i[l] = n.shape[s[l]];
  let p = o.data.get(n.dataId).values, u = jp(p, n.shape, n.dtype, s, i);
  return { dataId: o.write(u, i, n.dtype), shape: i, dtype: n.dtype };
}
var wT = { kernelName: ro, backendName: "cpu", kernelFunc: Ct };
function fS(r, e, t6, o) {
  let [n, s] = S.computeOutAndReduceShapes(r, o), a = dt(e, "int32"), i = y.makeZerosTypedArray(y.sizeFromShape(n), a), p = y.sizeFromShape(s);
  for (let u = 0; u < i.length; ++u) {
    let c = u * p, l = 1;
    for (let m = 0; m < p; ++m)
      l *= t6[c + m];
    i[u] = l;
  }
  return { outVals: i, outShape: n, outDtype: a };
}
function A6(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o;
  K(n, "prod");
  let i = n.shape.length, p = y.parseAxisParam(s, n.shape), u = S.getAxesPermutation(p, i), c = p, l = n, m = [];
  u != null && (l = Ct({ inputs: { x: n }, backend: t6, attrs: { perm: u } }), m.push(l), c = S.getInnerMostAxes(c.length, i));
  let d = t6.data.get(l.dataId).values, { outVals: f, outShape: h, outDtype: g } = fS(l.shape, l.dtype, d, c), x = h;
  return a && (x = S.expandShapeToKeepDim(h, p)), m.forEach((b) => t6.disposeIntermediateTensorInfo(b)), t6.makeTensorInfo(x, g, f);
}
var IT = { kernelName: Fn, backendName: "cpu", kernelFunc: A6 };
function R6(r, e, t6) {
  r.forEach((o, n) => {
    if (o < 0 || o >= t6) {
      let s = y.indexToLoc(n, e.length, y.computeStrides(e)).join(",");
      throw new Error(`indices[${s}] = ${o} is not in [0, ${t6})`);
    }
  });
}
function F6(r, e) {
  for (let t6 = 0; t6 < r.length; ++t6) {
    let o = r[t6], n = t6 === r.length - 1 ? e : r[t6 + 1].length;
    if (o.length === 0)
      throw new Error("Ragged splits may not be empty");
    if (o[0] < 0)
      throw new Error("Ragged splits must be non-negative");
    if (o[o.length - 1] > n)
      throw new Error("Ragged splits must not point past values");
    for (let s = 1; s < o.length; ++s)
      if (o[s - 1] > o[s])
        throw new Error("Ragged splits must be sorted in ascending order");
  }
}
function D6(r, e, t6, o) {
  let n = [], s = 0, a = e.length - 1 + t6.length, i = new Array(a).fill(null).map(() => [0]);
  F6(t6, o);
  let p = 1;
  for (let u = 0; u < e.length - 1; ++u) {
    p *= e[u];
    let c = e[u + 1];
    for (let l = 1; l < p + 1; ++l)
      i[u].push(l * c);
  }
  for (let u = 0; u < r.length; ++u) {
    let c = r[u], l = r[u] + 1;
    for (let m = 0; m < t6.length; ++m) {
      let d = t6[m], f = m + e.length - 1;
      if (f >= 0) {
        let h = i[f], g = h[h.length - 1] - d[c];
        for (let x = c; x < l; ++x)
          i[f].push(d[x + 1] + g);
      }
      c = d[c], l = d[l];
    }
    l !== c && (n.push([c, l]), s += l - c);
  }
  return { outSplits: i, valueSlices: n, numValues: s };
}
function O6(r) {
  let e = [];
  for (let t6 = 0; t6 < r.length; ++t6) {
    let o = r[t6].length, n = y.getArrayFromDType("int32", o);
    e.push(n), r[t6].forEach((s, a) => n[a] = s);
  }
  return e;
}
function vT(r, e) {
  let t6 = r.slice(0, e);
  for (; t6.length < e; )
    t6.push(1);
  for (let o = e; o < r.length; o++)
    t6[e - 1] *= r[o];
  return t6;
}
function P6(r, e, t6, o, n, s) {
  let a = vT(e, 2)[1], i = vT(s, 2)[1], p = 0;
  for (let u of t6)
    for (let c = u[0]; c < u[1]; ++c) {
      for (let l = 0; l < o; ++l)
        n[p * i + l] = r[c * a + l];
      ++p;
    }
}
function M6(r, e, t6, o, n) {
  let s = e.slice();
  s[0] = n;
  let a = y.getArrayFromDType(t6, y.sizeFromShape(s)), i = r.length, p = i === 0 ? 0 : i / e[0];
  return P6(r, e, o, p, a, s), [a, s];
}
function df(r, e, t6, o, n, s, a, i) {
  if (r.length === 0)
    throw new Error("paramsNestedSplits must be non empty");
  if (e[0].length === 0)
    throw new Error("Split tensors must not be scalars");
  let p = e[0][0] - 1;
  if (R6(s, a, p), o.length === 0)
    throw new Error("params.rank must be nonzero");
  let u = o[0], { outSplits: c, valueSlices: l, numValues: m } = D6(s, a, r, u), d = O6(c), f = M6(t6, o, n, l, m);
  return [d, f[0], f[1]];
}
var kT = 2147483647;
function ff(r, e, t6, o, n, s, a) {
  if (e.length > 1)
    throw new Error("starts must be a scalar or vector");
  if (n.length > 1)
    throw new Error("limits must be a scalar or vector");
  if (a.length > 1)
    throw new Error("deltas must be a scalar or vector");
  let i = e.length === 0, p = n.length === 0, u = a.length === 0, c = [];
  i || c.push(e[0]), p || c.push(n[0]), u || c.push(a[0]);
  for (let g = 1; g < c.length; ++g)
    if (c[g] !== c[g - 1])
      throw new Error("starts, limits, and deltas must have the same shape");
  let l = c.length === 0 ? 1 : c[0], m = y.getArrayFromDType("int32", l + 1);
  m[0] = 0;
  for (let g = 0; g < l; ++g) {
    let x = i ? r[0] : r[g], b = p ? o[0] : o[g], C = u ? s[0] : s[g];
    if (C === 0)
      throw new Error("Requires delta != 0");
    let w;
    if (C > 0 && b < x || C < 0 && b > x)
      w = 0;
    else if (w = Math.ceil(Math.abs((b - x) / C)), w > kT)
      throw new Error(`Requires ((limit - start) / delta) <= ${kT}`);
    m[g + 1] = m[g] + w;
  }
  let d = m[l], f = y.getArrayFromDType(t6, d), h = 0;
  for (let g = 0; g < l; ++g) {
    let x = m[g + 1] - m[g], b = i ? r[0] : r[g], C = u ? s[0] : s[g];
    for (let w = 0; w < x; ++w)
      f[h++] = b, b += C;
  }
  return [m, f];
}
var ko = S.RowPartitionType;
var Xp = class {
  constructor(e, t6, o, n, s, a, i, p, u, c) {
    this.shape = e, this.shapeShape = t6, this.values = o, this.valuesShape = n, this.valuesDType = s, this.defaultValue = a, this.defaultValueShape = i, this.rowPartitionValues = p, this.rowPartitionValuesShapes = u, this.rowPartitionTypes = S.getRowPartitionTypesHelper(c), this.raggedRank = S.getRaggedRank(this.rowPartitionTypes);
  }
  getRowPartitionTypeByDimension(e) {
    return this.rowPartitionTypes[0] === ko.FIRST_DIM_SIZE ? this.rowPartitionTypes[e + 1] : this.rowPartitionTypes[e];
  }
  getRowPartitionTensor(e) {
    return this.rowPartitionTypes[0] === ko.FIRST_DIM_SIZE ? this.rowPartitionValues[e + 1] : this.rowPartitionValues[e];
  }
  getMaxWidth(e) {
    let t6 = this.getRowPartitionTensor(e - 1);
    switch (this.getRowPartitionTypeByDimension(e - 1)) {
      case ko.VALUE_ROWIDS:
        return Xp.getMaxWidthValueRowID(t6);
      case ko.ROW_SPLITS:
        return Xp.getMaxWidthRowSplit(t6);
      default:
        throw new Error(`Cannot handle partition type ${ko[this.getRowPartitionTypeByDimension(e - 1)]}`);
    }
  }
  static getMaxWidthRowSplit(e) {
    let t6 = e.length;
    if (t6 === 0 || t6 === 1)
      return 0;
    let o = 0;
    for (let n = 0; n < t6 - 1; ++n) {
      let s = e[n + 1] - e[n];
      s > o && (o = s);
    }
    return o;
  }
  static getMaxWidthValueRowID(e) {
    let t6 = e.length;
    if (t6 === 0)
      return 0;
    let o = 0, n = e[0], s = 0;
    for (let a = 1; a < t6; ++a) {
      let i = e[a];
      i !== n && (n = i, s = Math.max(a - o, s), o = a);
    }
    return Math.max(t6 - o, s);
  }
  tensorShapeFromTensor(e, t6, o = true) {
    if (t6.length === 0) {
      if (e[0] === -1)
        return [];
      throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.");
    }
    return TT(e, o);
  }
  calculateOutputSize(e) {
    let t6 = this.valuesShape, o = this.defaultValueShape;
    S.validateDefaultValueShape(o, t6);
    let n = this.tensorShapeFromTensor(this.shape, this.shapeShape), a = S.combineRaggedTensorToTensorShapes(this.raggedRank, n, t6);
    a[0] < 0 && (a[0] = e);
    for (let i = 1; i <= this.raggedRank; ++i)
      a[i] < 0 && (a[i] = this.getMaxWidth(i));
    return a;
  }
  calculateFirstParentOutputIndex(e, t6, o) {
    let n = Math.min(e, o), s = [], a = 0;
    for (let i = 0; i < n; ++i, a += t6)
      s.push(a);
    for (let i = n; i < e; ++i)
      s.push(-1);
    return y.assert(s.length === e, () => "Final length of result must be equal to firstDimension."), s;
  }
  calculateOutputIndexRowSplit(e, t6, o, n) {
    let s = e.length, a = [];
    for (let i = 0; i < s - 1; ++i) {
      let p = e[i + 1] - e[i], u = Math.min(n, p), c = t6[i];
      c === -1 && (u = 0);
      for (let l = 0; l < u; ++l)
        a.push(c), c += o;
      for (let l = 0; l < p - u; ++l)
        a.push(-1);
    }
    if (s > 0 && a.length !== e[s - 1])
      throw new Error("Invalid row split size.");
    return a;
  }
  calculateOutputIndexValueRowID(e, t6, o, n) {
    let s = e.length, a = [];
    if (s === 0)
      return [];
    let i = 0, p = e[0];
    if (p >= t6.length)
      throw new Error(`Got currentValueRowId=${p}, which is not less than ${t6.length}`);
    let u = t6[p];
    a.push(u);
    for (let c = 1; c < s; ++c) {
      let l = e[c];
      if (l === p)
        u >= 0 && (++i, i < n ? u += o : u = -1);
      else {
        if (i = 0, p = l, l >= t6.length)
          throw new Error(`Got nextValueRowId=${l} which is not less than ${t6.length}`);
        u = t6[l];
      }
      a.push(u);
    }
    if (a.length !== e.length)
      throw new Error("Invalid row ids.");
    return a;
  }
  calculateOutputIndex(e, t6, o, n) {
    let s = this.getRowPartitionTensor(e), a = this.getRowPartitionTypeByDimension(e);
    switch (a) {
      case ko.VALUE_ROWIDS:
        return this.calculateOutputIndexValueRowID(s, t6, o, n);
      case ko.ROW_SPLITS:
        if (s.length - 1 > t6.length)
          throw new Error(`Row partition size is greater than output size: ${s.length - 1} > ${t6.length}`);
        return this.calculateOutputIndexRowSplit(s, t6, o, n);
      default:
        throw new Error(`Unsupported partition type: ${ko[a]}`);
    }
  }
  getFirstDimensionSize() {
    let e = this.rowPartitionValues[0];
    if (this.rowPartitionTypes.length === 0)
      throw new Error("No row_partition_types given.");
    let t6 = this.rowPartitionTypes[0];
    switch (t6) {
      case ko.FIRST_DIM_SIZE:
        return e[0];
      case ko.VALUE_ROWIDS:
        throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");
      case ko.ROW_SPLITS:
        return this.rowPartitionValuesShapes[0][0] - 1;
      default:
        throw new Error(`Cannot handle type ${ko[t6]}`);
    }
  }
  compute() {
    if (this.rowPartitionValues[0].length <= 0)
      throw new Error("Invalid first partition input. Tensor requires at least one element.");
    let t6 = this.getFirstDimensionSize(), o = this.calculateOutputSize(t6), n = new Array(this.raggedRank + 1);
    n[n.length - 1] = 1;
    for (let p = n.length - 2; p >= 0; --p)
      n[p] = n[p + 1] * o[p + 1];
    let s = TT(o, false), a = y.getArrayFromDType(this.valuesDType, y.sizeFromShape(s));
    if (n[0] * o[0] > 0) {
      let p = this.calculateFirstParentOutputIndex(t6, n[0], o[0]);
      for (let u = 1; u <= this.raggedRank; ++u)
        p = this.calculateOutputIndex(u - 1, p, n[u], o[u]);
      this.setOutput(this.raggedRank, p, a, s);
    }
    return [s, a];
  }
  setOutput(e, t6, o, n) {
    if (o.length === 0)
      return;
    let s = this.values, a = o, i = n.slice();
    i = i.slice(e + 1);
    let p = y.sizeFromShape(i), u = t6.length, c = this.defaultValue;
    if (c.length !== p && c.length !== 1) {
      let f = this.defaultValueShape;
      Ee(() => {
        let h = z(c, f);
        c = Ii(h, i).dataSync();
      });
    }
    let l = 0, m = 0, d = 0;
    for (let f = 0; f <= u; ++f) {
      let h = f < u ? t6[f] : -1;
      if (h === d) {
        ++d;
        continue;
      }
      if (m < d) {
        let g = s.subarray(l * p), x = a.subarray(m * p), b = (d - m) * p;
        NT(x, g, b);
      }
      if (f >= u) {
        let g = o.length;
        h = Math.floor(g / p);
      }
      if (h > d)
        if (this.defaultValue.length === 1)
          a.subarray(d * p, h * p).fill(this.defaultValue[0]), d = h;
        else
          for (; h > d; ) {
            let g = a.slice(d * p);
            NT(g, c, p), ++d;
          }
      h < 0 ? (l = f + 1, m = d) : (l = f, m = d, d = m + 1);
    }
  }
};
function NT(r, e, t6) {
  for (let o = 0; o < t6; o++)
    r[o] = e[o];
}
function TT(r, e) {
  let t6 = [];
  for (let o of r) {
    if (o < 0) {
      if (!e)
        throw new Error(`Dimension ${o} must be >= 0`);
      if (o < -1)
        throw new Error(`Dimension ${o} must be >= -1`);
      o = -1;
    }
    t6.push(o);
  }
  return t6;
}
function hf(r, e, t6, o, n, s, a, i, p, u) {
  return new Xp(r, e, t6, o, n, s, a, i, p, u).compute();
}
function Iu(r, e, t6, o) {
  let n = r === e, s = r < e && t6 < 0, a = e < r && t6 > 1;
  if (n || s || a)
    return y.makeZerosTypedArray(0, o);
  let i = Math.abs(Math.ceil((e - r) / t6)), p = y.makeZerosTypedArray(i, o);
  e < r && t6 === 1 && (t6 = -1), p[0] = r;
  for (let u = 1; u < p.length; u++)
    p[u] = p[u - 1] + t6;
  return p;
}
var hS = vr((r) => 1 / Math.sqrt(r));
var L6 = vo(Vn, hS);
var _T = { kernelName: Vn, backendName: "cpu", kernelFunc: L6 };
function Ma(r, e, t6, o, n, s, a, i, p, u) {
  let c = [o / n, n], l = r.values, m = e.values;
  if (o === 0)
    return le(t6, e.dtype);
  let d = le(c, e.dtype);
  typeof p == "string" || typeof p == "number" ? d.values.fill(p) : typeof p == "boolean" && d.values.fill(+p);
  for (let f = 0; f < s; f++) {
    let h = [], g = 0;
    for (let x = 0; x < a; x++) {
      let b = l[f * a + x];
      h.push(b), g += b * i[x];
    }
    if (g < 0 || g >= o / n)
      throw new Error(`Invalid indices: ${h} does not index into ${t6}`);
    for (let x = 0; x < n; x++)
      u ? d.values[g * n + x] += m[f * n + x] : d.values[g * n + x] = e.rank === 0 ? m[0] : m[f * n + x];
  }
  return d;
}
var ET = vr((r) => 1 / (1 + Math.exp(-r)));
var gS = Ie(Un, (r) => 1 / (1 + Math.exp(-r)));
var $T = { kernelName: Un, backendName: "cpu", kernelFunc: gS };
function vu(r, e, t6, o, n) {
  let s = ut.isSliceContinous(o, e, t6), a = y.sizeFromShape(t6), i = y.computeStrides(o);
  if (s) {
    let l = ut.computeFlatOffset(e, i);
    return n === "string" ? r.slice(l, l + a) : r.subarray(l, l + a);
  }
  let p = n === "string" ? S.fromUint8ToStringArray(r) : r, u = le(o, n, p), c = le(t6, n);
  for (let l = 0; l < c.size; ++l) {
    let m = c.indexToLoc(l), d = m.map((f, h) => f + e[h]);
    c.set(u.get(...d), ...m);
  }
  return n === "string" ? S.fromStringArrayToUint8(c.values) : c.values;
}
function No(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { begin: s, size: a } = o;
  K(n, "slice");
  let [i, p] = ut.parseSliceParams(n, s, a);
  ut.assertParamsValid(n, i, p);
  let u = t6.data.get(n.dataId).values, c = vu(u, i, p, n.shape, n.dtype);
  return t6.makeTensorInfo(p, n.dtype, c);
}
var AT = { kernelName: _s, backendName: "cpu", kernelFunc: No };
function gf(r, e, t6, o, n, s, a) {
  let i = e[0], p = s[0], u = new Array(p), c = new Array(i), l = e[1];
  if (p === 0) {
    if (i !== 0)
      throw new Error(S.getSparseFillEmptyRowsIndicesDenseShapeMismatch(i));
    let g = y.getArrayFromDType(t6, 0), x = y.getArrayFromDType(n, 0);
    return [g, [0, l], x, u, c];
  }
  let m = true, d = 0, f = new Array(p).fill(0);
  for (let g = 0; g < i; ++g) {
    let x = r[g * l];
    if (x < 0)
      throw new Error(S.getSparseFillEmptyRowsNegativeIndexErrorMessage(g, x));
    if (x >= p)
      throw new Error(S.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(g, x, p));
    ++f[x], m = m && x >= d, d = x;
  }
  let h = true;
  for (let g = 0; g < p; ++g) {
    let x = f[g] === 0;
    u[g] = x, h = h && !x, f[g] = Math.max(f[g], 1), g > 0 && (f[g] += f[g - 1]);
  }
  if (h && m) {
    let g = r, x = o;
    for (let b = 0; b < i; ++b)
      c[b] = b;
    return [g, [i, l], x, u, c];
  } else {
    let g = f[p - 1], x = y.getArrayFromDType(t6, g * l), b = y.getArrayFromDType(n, g), C = new Array(p).fill(0);
    for (let w = 0; w < i; ++w) {
      let k = r[w * l], _ = C[k], $ = (k === 0 ? 0 : f[k - 1]) + _;
      C[k]++;
      for (let A = 0; A < l; ++A)
        x[$ * l + A] = r[w * l + A];
      b[$] = o[w], c[w] = $;
    }
    for (let w = 0; w < p; ++w)
      if (C[w] === 0) {
        let _ = w === 0 ? 0 : f[w - 1];
        x[_ * l + 0] = w;
        for (let $ = 1; $ < l; ++$)
          x[_ * l + $] = 0;
        b[_] = a;
      }
    return [x, [g, l], b, u, c];
  }
}
function xf(r, e, t6, o, n) {
  let s = y.sizeFromShape(o), a = e[0], i = n.length, p = [], u = 1, c = -1;
  for (let g = 0; g < i; ++g) {
    let x = n[g];
    if (x === -1) {
      if (c !== -1)
        throw new Error(S.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(c, g));
      c = g, p.push(1);
    } else {
      if (x < 0)
        throw new Error(S.getSparseReshapeNegativeOutputDimErrorMessage(g, x));
      u *= x, p.push(x);
    }
  }
  if (c !== -1) {
    if (u <= 0)
      throw new Error(S.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());
    let g = Math.trunc(s / u);
    if (u * g !== s)
      throw new Error(S.getSparseReshapeInputOutputMultipleErrorMessage(o, p));
    p[c] = g;
  }
  if (y.sizeFromShape(p) !== s)
    throw new Error(S.getSparseReshapeInputOutputMismatchErrorMessage(o, p));
  let m = o.length, d = [];
  if (m > 0) {
    d[m - 1] = 1;
    for (let g = m - 2; g >= 0; --g)
      d[g] = d[g + 1] * o[g + 1];
  }
  let f = [];
  if (i > 0) {
    f[i - 1] = 1;
    for (let g = i - 2; g >= 0; --g)
      f[g] = f[g + 1] * p[g + 1];
  }
  let h = y.getArrayFromDType(t6, a * i);
  for (let g = 0; g < a; ++g) {
    let x = 0;
    for (let b = 0; b < m; ++b)
      x += r[g * m + b] * d[b];
    for (let b = 0; b < i; ++b)
      h[g * i + b] = Math.trunc(x / f[b]), x %= f[b];
  }
  return [h, [a, i], p];
}
function Yp(r, e, t6, o, n, s = false, a = 0) {
  let i = o.length, p = [e[0], r.length / e[0]], u = p[1], l = i > 0 ? n[i - 1] + 1 : 0;
  if (l < 0)
    throw new Error(S.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let m = e.slice();
  m[0] = l;
  let d = m.reduce((C, w) => C * w, 1), f = y.getArrayFromDType(t6, d);
  if (i === 0)
    return l > 0 && f.fill(a), [f, m];
  if (l <= 0)
    throw new Error(S.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let h = 0, g = 1, x = 0, b = n[h];
  for (; ; ) {
    let C = 0;
    if (g < i) {
      if (C = n[g], b === C) {
        ++g;
        continue;
      }
      if (b >= C)
        throw new Error(S.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage());
    }
    if (b < 0 || b >= l)
      throw new Error(S.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b, l));
    b > x && f.fill(a, x * u, b * u);
    for (let w = h; w < g; ++w) {
      let k = o[w];
      if (k < 0 || k >= p[0])
        throw new Error(S.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(w, o[w], p[0]));
      for (let _ = 0; _ < u; _++)
        f[b * u + _] += r[k * u + _];
    }
    if (s)
      for (let w = 0; w < u; w++)
        f[b * u + w] /= g - h;
    if (h = g, ++g, x = b + 1, b = C, g > i)
      break;
  }
  return x < l && f.fill(a, x * u, l * u), [f, m];
}
var RT = vr((r) => Math.sqrt(r));
var B6 = Ie(Gn, (r) => Math.sqrt(r));
var FT = { kernelName: Gn, backendName: "cpu", kernelFunc: B6 };
var xS = Be((r, e) => {
  let t6 = r - e;
  return t6 * t6;
});
var V6 = Qe(Kn, xS);
var DT = { kernelName: Kn, backendName: "cpu", kernelFunc: V6 };
function yf(r, e, t6, o) {
  let n = le(r, e.dtype);
  for (let s = 0; s < n.size; s++) {
    let a = n.indexToLoc(s), i = new Array(a.length);
    for (let p = 0; p < i.length; p++)
      i[p] = a[p] * t6[p] + o[p];
    n.set(e.get(...i), ...a);
  }
  return n;
}
var yS = class {
  constructor(e, t6, o, n, s, a) {
    this.separator = y.encodeString(e), this.nGramWidths = t6, this.leftPad = y.encodeString(o), this.rightPad = y.encodeString(n), this.padWidth = s, this.preserveShort = a;
  }
  getPadWidth(e) {
    return Math.min(this.padWidth < 0 ? e - 1 : this.padWidth, e - 1);
  }
  getNumNGrams(e, t6) {
    let o = this.getPadWidth(t6);
    return Math.max(0, e + 2 * o - t6 + 1);
  }
  createNGrams(e, t6, o, n, s, a) {
    for (let i = 0; i < s; ++i) {
      let p = this.getPadWidth(a), u = Math.max(0, p - i), c = Math.max(0, p - (s - (i + 1))), l = a - (u + c), m = t6 + (u > 0 ? 0 : i - p), d = 0;
      d += u * this.leftPad.length;
      for (let b = 0; b < l; ++b)
        d += e[m + b].length;
      d += c * this.rightPad.length;
      let f = u + c + l - 1;
      d += f * this.separator.length, o[n + i] = new Uint8Array(d);
      let h = o[n + i], g = 0, x = (b) => b.forEach((C) => h[g++] = C);
      for (let b = 0; b < u; ++b)
        x(this.leftPad), x(this.separator);
      for (let b = 0; b < l - 1; ++b)
        x(e[m + b]), x(this.separator);
      if (l > 0) {
        x(e[m + l - 1]);
        for (let b = 0; b < c; ++b)
          x(this.separator), x(this.rightPad);
      } else {
        for (let b = 0; b < c - 1; ++b)
          x(this.rightPad), x(this.separator);
        x(this.rightPad);
      }
    }
  }
  compute(e, t6) {
    let o = e.length, n = t6.length;
    if (n > 0) {
      let p = t6[0];
      if (p !== 0)
        throw new Error(`First split value must be 0, got ${p}`);
      for (let u = 1; u < n; ++u) {
        let c = t6[u] >= p;
        if (c = c && t6[u] <= o, !c)
          throw new Error(`Invalid split value ${t6[u]}, must be in [${p}, ${o}]`);
        p = t6[u];
      }
      if (p !== o)
        throw new Error(`Last split value must be data size. Expected ${o}, got ${p}`);
    }
    let s = n - 1, a = y.getArrayFromDType("int32", n);
    if (o === 0 || n === 0) {
      let p = new Array(o);
      for (let u = 0; u <= s; ++u)
        a[u] = 0;
      return [p, a];
    }
    a[0] = 0;
    for (let p = 1; p <= s; ++p) {
      let u = t6[p] - t6[p - 1], c = 0;
      this.nGramWidths.forEach((l) => {
        c += this.getNumNGrams(u, l);
      }), this.preserveShort && u > 0 && c === 0 && (c = 1), a[p] = a[p - 1] + c;
    }
    let i = new Array(a[s]);
    for (let p = 0; p < s; ++p) {
      let u = t6[p], c = a[p];
      if (this.nGramWidths.forEach((l) => {
        let m = t6[p + 1] - t6[p], d = this.getNumNGrams(m, l);
        this.createNGrams(e, u, i, c, d, l), c += d;
      }), this.preserveShort && c === a[p]) {
        let l = t6[p + 1] - t6[p];
        if (l === 0)
          continue;
        let m = l + 2 * this.padWidth, d = 1;
        this.createNGrams(e, u, i, c, d, m);
      }
    }
    return [i, a];
  }
};
function ku(r, e, t6, o, n, s, a, i) {
  return new yS(t6, o, n, s, a, i).compute(r, e);
}
function z6(r, e, t6, o) {
  if (!r.length)
    return;
  if (e.length === 0) {
    for (let s = 0; s < r.length; ++s)
      o.push(r.subarray(s, s + 1));
    return;
  }
  if (e.length === 1) {
    let s = e[0], a = r.indexOf(s);
    for (; a !== -1; ) {
      let i = r.subarray(0, a);
      (!t6 || i.length !== 0) && o.push(i), r = r.subarray(a + 1), a = r.indexOf(s);
    }
    (!t6 || r.length !== 0) && o.push(r);
    return;
  }
  let n = 0;
  for (let s = 0; s < r.length + 1; s++)
    if (s === r.length || e.indexOf(r[s]) !== -1) {
      let a = r.subarray(n, s);
      (!t6 || a.length !== 0) && o.push(a), n = s + 1;
    }
}
function Nu(r, e, t6) {
  let o = r.length, n = [], s = 0, a = 0, i = new Array(o);
  for (let m = 0; m < o; ++m) {
    let d = n.length;
    z6(r[m], e, t6, n);
    let f = n.length - d;
    i[m] = f, s += f, a = Math.max(a, f);
  }
  let p = y.getArrayFromDType("int32", s * 2), u = new Array(s), c = [o, a], l = 0;
  for (let m = 0; m < o; ++m)
    for (let d = 0; d < i[m]; ++d)
      p[l * 2] = m, p[l * 2 + 1] = d, u[l] = n[l], ++l;
  return [p, u, c];
}
function Tu(r, e) {
  let t6 = y.getArrayFromDType("int32", r.length);
  for (let o = 0; o < r.length; ++o)
    t6[o] = y.fingerPrint64(r[o]).modulo(e).getLowBitsUnsigned();
  return t6;
}
var bS = Be((r, e) => r - e);
var W6 = qp((r, e, t6, o) => ({ real: r - t6, imag: e - o }));
var dl = Qe(Xn, bS, W6);
var OT = { kernelName: Xn, backendName: "cpu", kernelFunc: dl };
function bf(r, e) {
  let t6 = new Array(r.rank);
  for (let n = 0; n < t6.length; n++)
    t6[n] = r.shape[n] * e[n];
  let o = le(t6, r.dtype);
  for (let n = 0; n < o.values.length; ++n) {
    let s = o.indexToLoc(n), a = new Array(r.rank);
    for (let p = 0; p < a.length; p++)
      a[p] = s[p] % r.shape[p];
    let i = r.locToIndex(a);
    o.values[n] = r.values[i];
  }
  return o;
}
var fl = (r, e) => {
  let t6 = e.value - r.value;
  return t6 === 0 ? r.index - e.index : t6;
};
function PT(r, e, t6 = 0, o = r.length - 1) {
  for (; o > t6; ) {
    if (o - t6 > 600) {
      let i = o - t6 + 1, p = e - t6 + 1, u = Math.log(i), c = 0.5 * Math.exp(2 * u / 3), l = 0.5 * Math.sqrt(u * c * (i - c) / i) * Math.sign(p - i / 2), m = Math.max(t6, Math.floor(e - p * c / i + l)), d = Math.min(o, Math.floor(e + (i - p) * c / i + l));
      PT(r, e, m, d);
    }
    let n = r[e], s = t6, a = o;
    for (y.swap(r, t6, e), fl(r[o], n) > 0 && y.swap(r, t6, o); s < a; ) {
      for (y.swap(r, s, a), s++, a--; fl(r[s], n) < 0; )
        s = s + 1;
      for (; fl(r[a], n) > 0; )
        a = a - 1;
    }
    fl(r[t6], n) === 0 ? y.swap(r, t6, a) : (a = a + 1, y.swap(r, a, o)), a <= e && (t6 = a + 1), e <= a && (o = a - 1);
  }
}
function Cf(r, e, t6, o, n) {
  let s = e[e.length - 1], [a, i] = [r.length / s, s], p = y.getTypedArrayFromDType(t6, a * o), u = y.getTypedArrayFromDType("int32", a * o);
  for (let l = 0; l < a; l++) {
    let m = l * i, d = r.subarray(m, m + i), f = new Array(d.length);
    d.forEach((b, C) => f[C] = { value: b, index: C }), o < f.length && (PT(f, o), f = f.slice(0, o)), n && f.sort(fl);
    let h = l * o, g = p.subarray(h, h + o), x = u.subarray(h, h + o);
    for (let b = 0; b < o; b++)
      g[b] = f[b].value, x[b] = f[b].index;
  }
  let c = e.slice();
  return c[c.length - 1] = o, [le(c, t6, p), le(c, "int32", u)];
}
function Sf(r, e, t6, o) {
  let n = y.parseAxisParam(e, t6)[0], s = [1, t6[0], 1];
  for (let f = 0; f < n; f++)
    s[0] *= t6[f];
  s[1] = t6[n];
  for (let f = n + 1; f < t6.length; f++)
    s[2] *= t6[f];
  let a = {}, i = new Int32Array(t6[n]), p = new st(s, o, r), u = [], c = s[0] === 1 && s[2] === 1;
  for (let f = 0; f < t6[n]; f++) {
    let h;
    if (c)
      h = r[f].toString();
    else {
      let g = [];
      for (let x = 0; x < s[0]; x++)
        for (let b = 0; b < s[2]; b++)
          g.push(p.get(x, f, b));
      h = g.join(",");
    }
    if (a[h] !== void 0)
      i[f] = a[h];
    else {
      let g = Object.keys(a).length;
      a[h] = g, i[f] = g, u.push(f);
    }
  }
  let l = s.slice();
  l[1] = Object.keys(a).length;
  let m = new st(l, o);
  u.forEach((f, h) => {
    for (let g = 0; g < s[0]; g++)
      for (let x = 0; x < s[2]; x++)
        m.set(p.get(g, f, x), g, h, x);
  });
  let d = t6.slice();
  return d[n] = l[1], { outputValues: m.values, outputShape: d, indices: i };
}
var U6 = "4.1.0";
Ci("cpu", () => new Oi(), 1);
var CS = Ie(en, (r) => r >= 0 ? r : Math.exp(r) - 1);
var MT = { kernelName: en, backendName: "cpu", kernelFunc: CS };
function SS(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { alpha: s } = o;
  K([n], "leakyRelu");
  let a = y.sizeFromShape(n.shape), i = t6.data.get(n.dataId).values, p = y.getTypedArrayFromDType("float32", a);
  for (let u = 0; u < i.length; u++)
    p[u] = i[u] < 0 ? s * i[u] : i[u];
  return t6.makeTensorInfo(n.shape, "float32", p);
}
var LT = { kernelName: mn, backendName: "cpu", kernelFunc: SS };
var G6 = Be((r, e) => r < 0 ? e * r : r);
function wS(r) {
  let { inputs: e, backend: t6 } = r, { x: o, alpha: n } = e;
  K([o, n], "prelu");
  let s = t6.data.get(o.dataId).values, a = t6.data.get(n.dataId).values, [i, p] = G6(o.shape, n.shape, s, a, "float32");
  return t6.makeTensorInfo(p, "float32", i);
}
var BT = { kernelName: Rn, backendName: "cpu", kernelFunc: wS };
var IS = Ie(On, (r) => Math.max(0, r));
var VT = { kernelName: On, backendName: "cpu", kernelFunc: IS };
var vS = Ie(Ln, (r) => Math.min(Math.max(0, r), 6));
var zT = { kernelName: Ln, backendName: "cpu", kernelFunc: vS };
function _u(r, e, t6, o, n) {
  if (t6 === "linear")
    return ar({ inputs: { x: e }, backend: r });
  if (t6 === "relu")
    return IS({ inputs: { x: e }, backend: r });
  if (t6 === "elu")
    return CS({ inputs: { x: e }, backend: r });
  if (t6 === "relu6")
    return vS({ inputs: { x: e }, backend: r });
  if (t6 === "prelu")
    return wS({ inputs: { x: e, alpha: o }, backend: r });
  if (t6 === "leakyrelu")
    return SS({ inputs: { x: e }, backend: r, attrs: { alpha: n } });
  if (t6 === "sigmoid")
    return gS({ inputs: { x: e }, backend: r });
  throw new Error(`Activation ${t6} has not been implemented for the CPU backend.`);
}
function Me(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { shape: s } = o, a = y.sizeFromShape(n.shape), i = y.inferFromImplicitShape(s, a), p = y.sizeFromShape(i);
  y.assert(a === p, () => `The new shape (${i}) has ${p} elements and the old shape (${n.shape}) has ${a} elements. The new shape and old shape must have the same number of elements.`), t6.incRef(n.dataId);
  let u = t6.data.get(n.dataId);
  if (u.complexTensorInfos != null) {
    let c = u.complexTensorInfos.real, l = u.complexTensorInfos.imag;
    c.shape = i, l.shape = i;
  }
  return { dataId: n.dataId, shape: i, dtype: n.dtype };
}
var WT = { kernelName: Ns, backendName: "cpu", kernelFunc: Me };
function kS(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { a: n, b: s } = e, { transposeA: a, transposeB: i } = o;
  K([n, s], "matMul");
  let p = n.shape.length, u = s.shape.length, c = a ? n.shape[p - 2] : n.shape[p - 1], l = i ? s.shape[u - 1] : s.shape[u - 2], m = a ? n.shape[p - 1] : n.shape[p - 2], d = i ? s.shape[u - 2] : s.shape[u - 1], f = n.shape.slice(0, -2), h = s.shape.slice(0, -2), g = y.sizeFromShape(f), x = y.sizeFromShape(h), C = br.assertAndGetBroadcastShape(n.shape.slice(0, -2), s.shape.slice(0, -2)).concat([m, d]);
  y.assert(c === l, () => `Error in matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${a} and transposeB=${i} must match.`);
  let w = a ? [g, c, m] : [g, m, c], k = i ? [x, d, l] : [x, l, d], _ = Me({ inputs: { x: n }, backend: t6, attrs: { shape: w } }), $ = Me({ inputs: { x: s }, backend: t6, attrs: { shape: k } }), A = a ? _.shape[1] : _.shape[2], R = a ? _.shape[2] : _.shape[1], D = i ? $.shape[1] : $.shape[2], P = Math.max(g, x), M = t6.data.get(_.dataId).values, L = t6.data.get($.dataId).values, W = y.computeStrides(_.shape), V = y.computeStrides($.shape), [U, q, H] = a ? [W[0], 1, W[1]] : [W[0], W[1], 1], [j, X, Z] = i ? [1, V[1], V[0]] : [V[1], 1, V[0]], ee = R * D, Y = le([P, R, D], _.dtype), J = Y.values, ie = t6.blockSize;
  for (let pe = 0; pe < P; pe++)
    for (let he = 0; he < R; he += ie)
      for (let we = 0; we < D; we += ie)
        for (let ve = 0; ve < A; ve += ie) {
          let $e = Math.min(he + ie, R), Le = Math.min(we + ie, D), nt = Math.min(ve + ie, A);
          for (let pt = he; pt < $e; pt++)
            for (let Oe = we; Oe < Le; Oe++) {
              let mt = 0;
              for (let at = ve; at < nt; at++) {
                let ft = Math.min(pe, g - 1) * U, wt = Math.min(pe, x - 1) * Z, Fr = M[ft + pt * q + at * H], Ot = L[at * j + Oe * X + wt];
                mt += Fr * Ot;
              }
              J[pe * ee + (pt * D + Oe)] += mt;
            }
        }
  return t6.disposeIntermediateTensorInfo(_), t6.disposeIntermediateTensorInfo($), t6.makeTensorInfo(C, Y.dtype, Y.values);
}
var UT = { kernelName: Wo, backendName: "cpu", kernelFunc: kS };
function H6(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { a: n, b: s, bias: a, preluActivationWeights: i } = e, { transposeA: p, transposeB: u, activation: c, leakyreluAlpha: l } = o, m, d, f, h = [];
  m = kS({ inputs: { a: n, b: s }, attrs: { transposeA: p, transposeB: u }, backend: t6 }), a && (d = js({ inputs: { a: m, b: a }, backend: t6 }), h.push(m), m = d), c && (f = _u(t6, m, c, i, l), h.push(m), m = f);
  for (let x of h)
    t6.disposeIntermediateTensorInfo(x);
  return m;
}
var GT = { kernelName: fo, backendName: "cpu", kernelFunc: H6 };
var q6 = Ie(sa, (r) => Math.acos(r));
var HT = { kernelName: sa, backendName: "cpu", kernelFunc: q6 };
var K6 = Ie(aa, (r) => Math.acosh(r));
var qT = { kernelName: aa, backendName: "cpu", kernelFunc: K6 };
function j6(r) {
  let { inputs: e, backend: t6 } = r, o = e;
  K(e, "addN");
  let n = o.map((i) => t6.data.get(i.dataId).values), s = le(o[0].shape, o[0].dtype), a = s.values;
  for (let i = 0; i < o.length; i++) {
    let p = n[i];
    for (let u = 0; u < a.length; u++)
      a[u] += p[u];
  }
  return t6.makeTensorInfo(s.shape, s.dtype, s.values);
}
var KT = { kernelName: Mo, backendName: "cpu", kernelFunc: j6 };
function X6(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o;
  K(n, "all");
  let i = y.parseAxisParam(s, n.shape), p = i, u = S.getAxesPermutation(p, n.shape.length), c = n;
  u != null && (c = Ct({ inputs: { x: n }, backend: t6, attrs: { perm: u } }), p = S.getInnerMostAxes(p.length, n.shape.length)), S.assertAxesAreInnerMostDims("all", p, c.shape.length);
  let [l, m] = S.computeOutAndReduceShapes(c.shape, p), d = y.sizeFromShape(m), f = y.makeZerosTypedArray(y.sizeFromShape(l), c.dtype), h = t6.data.get(c.dataId).values;
  for (let x = 0; x < f.length; ++x) {
    let b = x * d, C = h[b];
    for (let w = 0; w < d; ++w) {
      let k = h[b + w];
      C = C && k;
    }
    f[x] = C;
  }
  u != null && t6.disposeIntermediateTensorInfo(c);
  let g = t6.makeTensorInfo(l, c.dtype, f);
  if (a) {
    let x = S.expandShapeToKeepDim(l, i), b = Me({ inputs: { x: g }, backend: t6, attrs: { shape: x } });
    return t6.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
var jT = { kernelName: Lo, backendName: "cpu", kernelFunc: X6 };
function Y6(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o;
  K(n, "any");
  let i = y.parseAxisParam(s, n.shape), p = i, u = S.getAxesPermutation(p, n.shape.length), c = n;
  u != null && (c = Ct({ inputs: { x: n }, backend: t6, attrs: { perm: u } }), p = S.getInnerMostAxes(p.length, n.shape.length)), S.assertAxesAreInnerMostDims("any", p, c.shape.length);
  let [l, m] = S.computeOutAndReduceShapes(c.shape, p), d = y.sizeFromShape(m), f = y.makeZerosTypedArray(y.sizeFromShape(l), c.dtype), h = t6.data.get(c.dataId).values;
  for (let x = 0; x < f.length; ++x) {
    let b = x * d, C = h[b];
    for (let w = 0; w < d; ++w) {
      let k = h[b + w];
      C = C || k;
    }
    f[x] = C;
  }
  u != null && t6.disposeIntermediateTensorInfo(c);
  let g = t6.makeTensorInfo(l, c.dtype, f);
  if (a) {
    let x = S.expandShapeToKeepDim(l, i), b = Me({ inputs: { x: g }, backend: t6, attrs: { shape: x } });
    return t6.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
var XT = { kernelName: Bo, backendName: "cpu", kernelFunc: Y6 };
function Q6(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s } = o;
  K(n, "argMax");
  let a = y.parseAxisParam(s, n.shape), i = S.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = Ct({ inputs: { x: n }, backend: t6, attrs: { perm: i } }), u.push(p), a = S.getInnerMostAxes(a.length, p.shape.length)), a = [a[0]], S.assertAxesAreInnerMostDims("argMax", a, p.shape.length);
  let [c, l] = S.computeOutAndReduceShapes(p.shape, a), m = y.sizeFromShape(c), d = y.makeZerosTypedArray(m, "int32"), f = y.sizeFromShape(l), h = t6.data.get(p.dataId).values;
  for (let g = 0; g < d.length; ++g) {
    let x = g * f, b = h[x], C = 0;
    for (let w = 0; w < f; ++w) {
      let k = h[x + w];
      k > b && (b = k, C = w);
    }
    d[g] = C;
  }
  return u.forEach((g) => t6.disposeIntermediateTensorInfo(g)), t6.makeTensorInfo(c, "int32", d);
}
var YT = { kernelName: Vo, backendName: "cpu", kernelFunc: Q6 };
function Z6(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s } = o;
  K(n, "argMin");
  let a = y.parseAxisParam(s, n.shape), i = S.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = Ct({ inputs: { x: n }, backend: t6, attrs: { perm: i } }), u.push(p), a = S.getInnerMostAxes(a.length, p.shape.length)), a = [a[0]], S.assertAxesAreInnerMostDims("argMin", a, p.shape.length);
  let [c, l] = S.computeOutAndReduceShapes(p.shape, a), m = y.sizeFromShape(c), d = y.makeZerosTypedArray(m, "int32"), f = y.sizeFromShape(l), h = t6.data.get(p.dataId).values;
  for (let g = 0; g < d.length; ++g) {
    let x = g * f, b = h[x], C = 0;
    for (let w = 0; w < f; ++w) {
      let k = h[x + w];
      k < b && (b = k, C = w);
    }
    d[g] = C;
  }
  return u.forEach((g) => t6.disposeIntermediateTensorInfo(g)), t6.makeTensorInfo(c, "int32", d);
}
var QT = { kernelName: Za, backendName: "cpu", kernelFunc: Z6 };
var J6 = Ie(ia, (r) => Math.asin(r));
var ZT = { kernelName: ia, backendName: "cpu", kernelFunc: J6 };
var ej = Ie(ua, (r) => Math.asinh(r));
var JT = { kernelName: ua, backendName: "cpu", kernelFunc: ej };
var tj = Ie(pa, (r) => Math.atan(r));
var e2 = { kernelName: pa, backendName: "cpu", kernelFunc: tj };
var rj = Be((r, e) => Math.atan2(r, e));
var oj = Qe(la, rj);
var t2 = { kernelName: la, backendName: "cpu", kernelFunc: oj };
var nj = Ie(ca, (r) => Math.atanh(r));
var r2 = { kernelName: ca, backendName: "cpu", kernelFunc: nj };
function Zp(r, e, t6, o, n, s) {
  let a = n.strideHeight, i = n.strideWidth, p = n.dilationHeight, u = n.dilationWidth, c = n.effectiveFilterHeight, l = n.effectiveFilterWidth, m = n.padInfo.top, d = n.padInfo.left, f = s === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, h = le(n.outShape, t6), g = h.values, x = n.outShape[1] * n.outShape[2] * n.outShape[3], b = n.outShape[2] * n.outShape[3], C = n.outShape[3];
  for (let w = 0; w < n.batchSize; ++w) {
    let k = w * x, _ = w * o[0];
    for (let $ = 0; $ < n.inChannels; ++$)
      for (let A = 0; A < n.outHeight; ++A) {
        let R = A * a - m, D = Math.max(0, R), P = Math.min(n.inHeight, c + R), M = k + A * b;
        for (let L = 0; L < n.outWidth; ++L) {
          let W = L * i - d, V = Math.max(0, W), U = Math.min(n.inWidth, l + W), q = f, H = 0, j = 0;
          for (let Z = D; Z < P; Z += p) {
            let ee = _ + Z * o[1];
            for (let Y = V; Y < U; Y += u) {
              let J = ee + Y * o[2], ie = r[J + $];
              s === "max" && ie > q ? q = ie : s === "avg" && (H += ie, j++);
            }
            if (isNaN(q))
              break;
          }
          let X = M + L * C + $;
          g[X] = s === "avg" ? H / j : q;
        }
      }
  }
  return h;
}
function wf(r, e, t6, o, n = false, s = false) {
  let a = le(o.outShape, "int32"), i = o.strideHeight, p = o.strideWidth, u = o.dilationHeight, c = o.dilationWidth, l = o.effectiveFilterHeight, m = o.effectiveFilterWidth, d = o.padInfo.top, f = o.padInfo.left, h = le(e, t6, r);
  for (let g = 0; g < o.batchSize; ++g)
    for (let x = 0; x < o.inChannels; ++x)
      for (let b = 0; b < o.outHeight; ++b) {
        let C = b * i - d, w = C;
        for (; w < 0; )
          w += u;
        let k = Math.min(o.inHeight, l + C);
        for (let _ = 0; _ < o.outWidth; ++_) {
          let $ = _ * p - f, A = $;
          for (; A < 0; )
            A += c;
          let R = Math.min(o.inWidth, m + $), D = Number.NEGATIVE_INFINITY, P = -1;
          for (let M = w; M < k; M += u) {
            let L = M - C;
            for (let W = A; W < R; W += c) {
              let V = W - $, U = h.get(g, M, W, x);
              U > D && (D = U, n ? P = s ? ((g * o.inHeight + M) * o.inWidth + W) * o.inChannels + x : (M * o.inWidth + W) * o.inChannels + x : P = L * m + V);
            }
          }
          a.set(P, g, b, _, x);
        }
      }
  return a;
}
function If(r, e, t6, o, n, s) {
  let a = n.strideDepth, i = n.strideHeight, p = n.strideWidth, u = n.dilationDepth, c = n.dilationHeight, l = n.dilationWidth, m = n.effectiveFilterDepth, d = n.effectiveFilterHeight, f = n.effectiveFilterWidth, h = n.padInfo.front, g = n.padInfo.top, x = n.padInfo.left, b = s === "max" ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY, C = le(n.outShape, t6), w = C.values, k = n.outShape[1] * n.outShape[2] * n.outShape[3] * n.outShape[4], _ = n.outShape[2] * n.outShape[3] * n.outShape[4], $ = n.outShape[3] * n.outShape[4], A = n.outShape[4];
  for (let R = 0; R < n.batchSize; ++R) {
    let D = R * k, P = R * o[0];
    for (let M = 0; M < n.inChannels; ++M)
      for (let L = 0; L < n.outDepth; ++L) {
        let W = L * a - h, V = W;
        for (; V < 0; )
          V += u;
        let U = Math.min(n.inDepth, m + W), q = D + L * _;
        for (let H = 0; H < n.outHeight; ++H) {
          let j = H * i - g, X = j;
          for (; X < 0; )
            X += c;
          let Z = Math.min(n.inHeight, d + j), ee = q + H * $;
          for (let Y = 0; Y < n.outWidth; ++Y) {
            let J = Y * p - x, ie = J;
            for (; ie < 0; )
              ie += l;
            let pe = Math.min(n.inWidth, f + J), he = ee + Y * A, we = b, ve = 0, $e = 0;
            for (let nt = V; nt < U; nt += u) {
              let pt = P + nt * o[1];
              for (let Oe = X; Oe < Z; Oe += c) {
                let mt = pt + Oe * o[2];
                for (let at = ie; at < pe; at += l) {
                  let ft = mt + at * o[3], wt = r[ft + M];
                  if (s === "max" && wt > we ? we = wt : s === "avg" && (ve += wt, $e++), isNaN(we))
                    break;
                }
                if (isNaN(we))
                  break;
              }
              if (isNaN(we))
                break;
            }
            let Le = he + M;
            w[Le] = s === "avg" ? ve / $e : we;
          }
        }
      }
  }
  return C;
}
function o2(r, e) {
  let t6 = le(e.outShape, "int32"), o = e.strideDepth, n = e.strideHeight, s = e.strideWidth, a = e.dilationDepth, i = e.dilationHeight, p = e.dilationWidth, u = e.effectiveFilterDepth, c = e.effectiveFilterHeight, l = e.effectiveFilterWidth, m = e.padInfo.front, d = e.padInfo.top, f = e.padInfo.left;
  for (let h = 0; h < e.batchSize; ++h)
    for (let g = 0; g < e.inChannels; ++g)
      for (let x = 0; x < e.outDepth; ++x) {
        let b = x * o - m, C = b;
        for (; C < 0; )
          C += a;
        let w = Math.min(e.inDepth, u + b);
        for (let k = 0; k < e.outHeight; ++k) {
          let _ = k * n - d, $ = _;
          for (; $ < 0; )
            $ += i;
          let A = Math.min(e.inHeight, c + _);
          for (let R = 0; R < e.outWidth; ++R) {
            let D = R * s - f, P = D;
            for (; P < 0; )
              P += p;
            let M = Math.min(e.inWidth, l + D), L = Number.NEGATIVE_INFINITY, W = -1;
            for (let V = C; V < w; V += a) {
              let U = V - b;
              for (let q = $; q < A; q += i) {
                let H = q - _;
                for (let j = P; j < M; j += p) {
                  let X = j - D, Z = r.get(h, V, q, j, g);
                  Z >= L && (L = Z, W = U * c * l + H * c + X);
                }
              }
            }
            t6.set(W, h, x, k, R, g);
          }
        }
      }
  return t6;
}
function sj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e;
  K(n, "avgPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1;
  y.assert(S.eitherStridesOrDilationsAreOne(a, u), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = S.computePool2DInfo(n.shape, s, a, u, i, p), l;
  if (c.filterWidth === 1 && c.filterHeight === 1 && y.arraysEqual(c.inShape, c.outShape))
    l = ar({ inputs: { x: n }, backend: t6 });
  else {
    let m = t6.data.get(n.dataId).values, d = y.computeStrides(n.shape), f = Zp(m, n.shape, n.dtype, d, c, "avg");
    l = t6.makeTensorInfo(c.outShape, n.dtype, f.values);
  }
  return l;
}
var n2 = { kernelName: zo, backendName: "cpu", kernelFunc: sj };
function aj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { filterSize: s, strides: a, pad: i, dimRoundingMode: p, dataFormat: u } = o;
  K(n, "avgPool3d");
  let c = S.computePool3DInfo(n.shape, s, a, 1, i, p, u), l = t6.data.get(n.dataId).values, m = If(l, n.shape, n.dtype, y.computeStrides(n.shape), c, "avg");
  return t6.makeTensorInfo(m.shape, "float32", m.values);
}
var s2 = { kernelName: ip, backendName: "cpu", kernelFunc: aj };
function ij(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, input: s } = e, { filterSize: a, strides: i, pad: p, dimRoundingMode: u } = o;
  K([n, s], "avgPool3DGrad");
  let c = S.computePool3DInfo(s.shape, a, i, 1, p, u), l = c.strideDepth, m = c.strideHeight, d = c.strideWidth, f = c.filterDepth, h = c.filterHeight, g = c.filterWidth, x = c.dilationDepth, b = c.dilationHeight, C = c.dilationWidth, w = c.effectiveFilterDepth, k = c.effectiveFilterHeight, _ = c.effectiveFilterWidth, $ = w - 1 - c.padInfo.front, A = _ - 1 - c.padInfo.left, R = k - 1 - c.padInfo.top, D = le(s.shape, "float32"), P = 1 / (f * h * g), M = t6.bufferSync(n);
  for (let L = 0; L < c.batchSize; ++L)
    for (let W = 0; W < c.inChannels; ++W)
      for (let V = 0; V < c.inDepth; ++V)
        for (let U = 0; U < c.inHeight; ++U)
          for (let q = 0; q < c.inWidth; ++q) {
            let H = V - $, j = U - R, X = q - A, Z = 0;
            for (let ee = 0; ee < w; ee += x) {
              let Y = (H + ee) / l;
              if (!(Y < 0 || Y >= c.outDepth || Math.floor(Y) !== Y))
                for (let J = 0; J < k; J += b) {
                  let ie = (j + J) / m;
                  if (!(ie < 0 || ie >= c.outHeight || Math.floor(ie) !== ie))
                    for (let pe = 0; pe < _; pe += C) {
                      let he = (X + pe) / d;
                      if (he < 0 || he >= c.outWidth || Math.floor(he) !== he)
                        continue;
                      let we = M.get(L, Y, ie, he, W);
                      Z += we;
                    }
                }
            }
            D.set(Z * P, L, V, U, q, W);
          }
  return t6.makeTensorInfo(D.shape, D.dtype, D.values);
}
var a2 = { kernelName: Im, backendName: "cpu", kernelFunc: ij };
function uj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, input: s } = e, a = s;
  K([n, s], "avgPoolGrad");
  let { filterSize: i, strides: p, pad: u } = o, c = S.computePool2DInfo(a.shape, i, p, 1, u), l = c.strideHeight, m = c.strideWidth, d = c.filterHeight, f = c.filterWidth, h = c.dilationHeight, g = c.dilationWidth, x = c.effectiveFilterHeight, b = c.effectiveFilterWidth, C = b - 1 - c.padInfo.left, w = x - 1 - c.padInfo.top, k = le(a.shape, "float32"), _ = 1 / (d * f), $ = t6.data.get(n.dataId).values, A = le(n.shape, "float32", $);
  for (let R = 0; R < c.batchSize; ++R)
    for (let D = 0; D < c.inChannels; ++D)
      for (let P = 0; P < c.inHeight; ++P)
        for (let M = 0; M < c.inWidth; ++M) {
          let L = P - w, W = M - C, V = 0;
          for (let U = 0; U < x; U += h) {
            let q = (L + U) / l;
            if (!(q < 0 || q >= c.outHeight || Math.floor(q) !== q))
              for (let H = 0; H < b; H += g) {
                let j = (W + H) / m;
                if (j < 0 || j >= c.outWidth || Math.floor(j) !== j)
                  continue;
                let X = A.get(R, q, j, D);
                V += X;
              }
          }
          k.set(V * _, R, P, M, D);
        }
  return t6.makeTensorInfo(k.shape, k.dtype, k.values);
}
var i2 = { kernelName: wm, backendName: "cpu", kernelFunc: uj };
function pj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, scale: s, offset: a, mean: i, variance: p } = e;
  y.assert(i.shape.length === p.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), y.assert(a == null || i.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), y.assert(s == null || i.shape.length === s.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks."), K([n, i, p, s, a], "batchNorm");
  let { varianceEpsilon: u } = o;
  u == null && (u = 1e-3);
  let c = t6.data.get(n.dataId).values, l = t6.data.get(i.dataId).values, m = t6.data.get(p.dataId).values, d = s ? t6.data.get(s.dataId).values : new Float32Array([1]), f = a ? t6.data.get(a.dataId).values : new Float32Array([0]), h = new Float32Array(c.length), g = f.length, x = d.length, b = m.length, C = l.length, w = 0, k = 0, _ = 0, $ = 0;
  for (let A = 0; A < c.length; ++A)
    h[A] = f[w++] + (c[A] - l[k++]) * d[_++] / Math.sqrt(m[$++] + u), w >= g && (w = 0), k >= C && (k = 0), _ >= x && (_ = 0), $ >= b && ($ = 0);
  return t6.makeTensorInfo(n.shape, n.dtype, h);
}
var u2 = { kernelName: an, backendName: "cpu", kernelFunc: pj };
function cj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { blockShape: s, crops: a } = o;
  K([n], "batchToSpaceND");
  let i = s.reduce((x, b) => x * b), p = S.getReshaped(n.shape, s, i), u = S.getPermuted(p.length, s.length), c = S.getReshapedPermuted(n.shape, s, i), l = S.getSliceBeginCoords(a, s.length), m = S.getSliceSize(c, a, s.length), d = Me({ inputs: { x: n }, backend: t6, attrs: { shape: p } }), f = Ct({ inputs: { x: d }, backend: t6, attrs: { perm: u } }), h = Me({ inputs: { x: f }, backend: t6, attrs: { shape: c } }), g = No({ inputs: { x: h }, backend: t6, attrs: { begin: l, size: m } });
  return t6.disposeIntermediateTensorInfo(d), t6.disposeIntermediateTensorInfo(f), t6.disposeIntermediateTensorInfo(h), g;
}
var p2 = { kernelName: xs, backendName: "cpu", kernelFunc: cj };
function lj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, weights: s } = e, { size: a } = o, i = t6.data.get(n.dataId).values, p = t6.data.get(s.dataId).values, u = Kp(i, p, s.dtype, s.shape, a);
  return t6.makeTensorInfo([a], s.dtype, u);
}
var c2 = { kernelName: Ja, backendName: "cpu", kernelFunc: lj };
function mj(r) {
  let { inputs: e, backend: t6 } = r, { s0: o, s1: n } = e, s = t6.data.get(o.dataId).values, a = t6.data.get(n.dataId).values, i = S.assertAndGetBroadcastShape(Array.from(s), Array.from(a));
  return t6.makeTensorInfo([i.length], "int32", Int32Array.from(i));
}
var l2 = { kernelName: up, backendName: "cpu", kernelFunc: mj };
var dj = Ie(lo, (r, e) => {
  let t6 = e;
  return r > t6.clipValueMax ? t6.clipValueMax : r < t6.clipValueMin ? t6.clipValueMin : r;
});
var m2 = { kernelName: lo, backendName: "cpu", kernelFunc: dj };
var fj = (r) => {
  let { x: e } = r.inputs, t6 = r.backend, o = new Float32Array(y.sizeFromShape(e.shape)), n = t6.data.get(e.dataId), s = n.complexTensorInfos.real, a = n.complexTensorInfos.imag, i = t6.data.get(s.dataId).values, p = t6.data.get(a.dataId).values;
  for (let u = 0; u < i.length; u++) {
    let c = i[u], l = p[u];
    o[u] = Math.hypot(c, l);
  }
  return t6.makeOutput(o, e.shape, "float32");
};
var d2 = { kernelName: pp, backendName: "cpu", kernelFunc: fj };
function Xs(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e, n = t6.data.get(o.dataId).complexTensorInfos.imag, s = t6.data.get(n.dataId).values;
  return t6.makeTensorInfo(n.shape, n.dtype, s);
}
var f2 = { kernelName: si, backendName: "cpu", kernelFunc: Xs };
function Pi(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { axis: n } = o, s = y.parseAxisParam(n, e[0].shape)[0], a = e.map((h) => h.shape);
  S.assertParamsConsistent(a, s);
  let i = S.computeOutShape(e.map((h) => h.shape), s);
  if (y.sizeFromShape(i) === 0)
    return t6.makeTensorInfo(i, e[0].dtype, []);
  let p = e.filter((h) => y.sizeFromShape(h.shape) > 0);
  if (p.length === 1)
    return ar({ inputs: { x: p[0] }, backend: t6 });
  if (p[0].dtype === "complex64") {
    let h = p.map((w) => wo({ inputs: { input: w }, backend: t6 })), g = p.map((w) => Xs({ inputs: { input: w }, backend: t6 })), x = Pi({ inputs: h, backend: t6, attrs: { axis: s } }), b = Pi({ inputs: g, backend: t6, attrs: { axis: s } }), C = Ht({ inputs: { real: x, imag: b }, backend: t6 });
    return h.forEach((w) => t6.disposeIntermediateTensorInfo(w)), g.forEach((w) => t6.disposeIntermediateTensorInfo(w)), t6.disposeIntermediateTensorInfo(x), t6.disposeIntermediateTensorInfo(b), C;
  }
  let u = p.map((h) => {
    let x = [-1, y.sizeFromShape(h.shape.slice(s))];
    return Me({ inputs: { x: h }, backend: t6, attrs: { shape: x } });
  }), c = u.map((h) => ({ vals: t6.data.get(h.dataId).values, shape: h.shape }));
  i = S.computeOutShape(u.map((h) => h.shape), 1);
  let l = u[0].shape[0] === 1, m = Su(c, i, e[0].dtype, l), d = S.computeOutShape(p.map((h) => h.shape), s), f = t6.makeTensorInfo(d, e[0].dtype, m);
  return u.forEach((h) => t6.disposeIntermediateTensorInfo(h)), f;
}
var h2 = { kernelName: ys, backendName: "cpu", kernelFunc: Pi };
function NS(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s } = e, { strides: a, pad: i, dataFormat: p, dilations: u, dimRoundingMode: c } = o;
  K([n, s], "conv2d");
  let l = S.convertConv2DDataFormat(p), m = S.computeConv2DInfo(n.shape, s.shape, a, u, i, c, false, l), d = m.filterHeight, f = m.filterWidth, h = m.dilationHeight, g = m.dilationWidth, x = m.padInfo.left, b = m.padInfo.top, C = m.dataFormat === "channelsLast", w = new st(m.outShape, n.dtype), k = y.computeStrides(n.shape), _ = y.computeStrides(s.shape), $ = k[0], A = C ? k[1] : k[2], R = C ? k[2] : 1, D = C ? 1 : k[1], P = w.strides[0], M = C ? w.strides[1] : w.strides[2], L = C ? w.strides[2] : 1, W = C ? 1 : w.strides[1], V = t6.data.get(n.dataId).values, U = t6.data.get(s.dataId).values, q = w.values;
  for (let H = 0; H < m.batchSize; ++H) {
    let j = H * $, X = H * P;
    for (let Z = 0; Z < m.outHeight; ++Z) {
      let ee = X + Z * M, Y = Z * m.strideHeight - b;
      for (let J = 0; J < d; ++J) {
        let ie = Y + J * h;
        if (ie < 0 || ie >= m.inHeight)
          continue;
        let pe = J * _[0], he = j + ie * A;
        for (let we = 0; we < m.outWidth; ++we) {
          let ve = ee + we * L, $e = we * m.strideWidth - x;
          for (let Le = 0; Le < f; ++Le) {
            let nt = $e + Le * g;
            if (nt < 0 || nt >= m.inWidth)
              continue;
            let pt = pe + Le * _[1], Oe = he + nt * R, mt = pt;
            for (let at = 0; at < m.inChannels; ++at) {
              let ft = V[Oe + at * D];
              for (let wt = 0; wt < m.outChannels; ++wt)
                q[ve + wt * W] += ft * U[mt + wt];
              mt += m.outChannels;
            }
          }
        }
      }
    }
  }
  return t6.makeTensorInfo(w.shape, w.dtype, q);
}
var g2 = { kernelName: Go, backendName: "cpu", kernelFunc: NS };
function hj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, dy: s } = e, { strides: a, pad: i, dataFormat: p, dimRoundingMode: u, filterShape: c } = o;
  K([n, s], "conv2dBackpropFilter");
  let l = S.convertConv2DDataFormat(p), m = S.computeConv2DInfo(n.shape, c, a, 1, i, u, false, l), { strideHeight: d, strideWidth: f, filterHeight: h, filterWidth: g } = m, x = m.dataFormat === "channelsLast", b = new st(m.filterShape, "float32"), C = m.padInfo.left, w = m.padInfo.top, k = t6.data.get(n.dataId).values, _ = t6.data.get(s.dataId).values, $ = new st(n.shape, n.dtype, k), A = new st(s.shape, s.dtype, _);
  for (let R = 0; R < h; ++R) {
    let D = Math.max(0, Math.ceil((w - R) / d)), P = Math.min(m.outHeight, (m.inHeight + w - R) / d);
    for (let M = 0; M < g; ++M) {
      let L = Math.max(0, Math.ceil((C - M) / f)), W = Math.min(m.outWidth, (m.inWidth + C - M) / f);
      for (let V = 0; V < m.inChannels; ++V)
        for (let U = 0; U < m.outChannels; ++U) {
          let q = 0;
          for (let H = 0; H < m.batchSize; ++H)
            for (let j = D; j < P; ++j) {
              let X = R + j * d - w;
              for (let Z = L; Z < W; ++Z) {
                let ee = M + Z * f - C;
                x ? q += $.get(H, X, ee, V) * A.get(H, j, Z, U) : q += $.get(H, V, X, ee) * A.get(H, U, j, Z);
              }
            }
          b.set(q, R, M, V, U);
        }
    }
  }
  return t6.makeTensorInfo(b.shape, b.dtype, b.values);
}
var x2 = { kernelName: cp, backendName: "cpu", kernelFunc: hj };
function gj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, filter: s } = e, { inputShape: a, strides: i, pad: p, dataFormat: u, dimRoundingMode: c } = o;
  K([n, s], "conv2dBackpropInput");
  let l = y.computeStrides(s.shape), m = y.computeStrides(n.shape), d = S.convertConv2DDataFormat(u), f = S.computeConv2DInfo(a, s.shape, i, 1, p, c, false, d), h = new st(f.inShape, "float32"), g = h.values, x = t6.data.get(n.dataId).values, b = t6.data.get(s.dataId).values, [C, w, k] = l, { batchSize: _, filterHeight: $, filterWidth: A, inChannels: R, inHeight: D, inWidth: P, outChannels: M, outHeight: L, outWidth: W, strideHeight: V, strideWidth: U } = f;
  d = f.dataFormat;
  let q = $ - 1 - f.padInfo.top, H = A - 1 - f.padInfo.left, j = d === "channelsLast", X = h.strides[0], Z = j ? h.strides[1] : h.strides[2], ee = j ? h.strides[2] : 1, Y = j ? 1 : h.strides[1], J = m[0], ie = j ? m[1] : m[2], pe = j ? m[2] : 1, he = j ? 1 : m[1];
  for (let we = 0; we < _; ++we)
    for (let ve = 0; ve < R; ++ve)
      for (let $e = 0; $e < D; ++$e) {
        let Le = $e - q, nt = Math.max(0, Math.ceil(Le / V)), pt = Math.min(L, ($ + Le) / V);
        for (let Oe = 0; Oe < P; ++Oe) {
          let mt = Oe - H, at = Math.max(0, Math.ceil(mt / U)), ft = Math.min(W, (A + mt) / U), wt = 0;
          for (let Ot = nt; Ot < pt; ++Ot) {
            let Kr = Ot * V - Le;
            for (let er = at; er < ft; ++er) {
              let Nt = er * U - mt, tr = J * we + ie * Ot + pe * er, rr = C * ($ - 1 - Kr) + w * (A - 1 - Nt) + k * ve;
              for (let jr = 0; jr < M; ++jr) {
                let Xr = x[tr + he * jr], pr = b[rr + jr];
                wt += Xr * pr;
              }
            }
          }
          let Fr = X * we + Z * $e + ee * Oe + Y * ve;
          g[Fr] = wt;
        }
      }
  return t6.makeTensorInfo(h.shape, h.dtype, h.values);
}
var y2 = { kernelName: Ho, backendName: "cpu", kernelFunc: gj };
function xj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s } = e, { strides: a, pad: i, dilations: p } = o;
  K([n, s], "conv3d");
  let u = S.computeConv3DInfo(n.shape, s.shape, a, p, i), { filterDepth: c, filterHeight: l, filterWidth: m, dilationDepth: d, dilationHeight: f, dilationWidth: h, padInfo: g } = u, x = g.front, b = g.left, C = g.top, w = new st(u.outShape, n.dtype), k = t6.data.get(n.dataId).values, _ = t6.data.get(s.dataId).values, $ = w.values, A = y.computeStrides(n.shape), R = y.computeStrides(s.shape);
  for (let D = 0; D < u.batchSize; ++D) {
    let P = D * A[0], M = D * w.strides[0];
    for (let L = 0; L < u.outDepth; ++L) {
      let W = M + L * w.strides[1], V = L * u.strideDepth - x;
      for (let U = 0; U < c; ++U) {
        let q = V + U * d;
        if (q < 0 || q >= u.inDepth)
          continue;
        let H = U * R[0], j = P + q * A[1];
        for (let X = 0; X < u.outHeight; ++X) {
          let Z = W + X * w.strides[2], ee = X * u.strideHeight - C;
          for (let Y = 0; Y < l; ++Y) {
            let J = ee + Y * f;
            if (J < 0 || J >= u.inHeight)
              continue;
            let ie = H + Y * R[1], pe = j + J * A[2];
            for (let he = 0; he < u.outWidth; ++he) {
              let we = Z + he * u.outChannels, ve = he * u.strideWidth - b;
              for (let $e = 0; $e < m; ++$e) {
                let Le = ve + $e * h;
                if (Le < 0 || Le >= u.inWidth)
                  continue;
                let nt = ie + $e * R[2], pt = pe + Le * u.inChannels, Oe = nt;
                for (let mt = 0; mt < u.inChannels; ++mt) {
                  let at = k[pt + mt];
                  for (let ft = 0; ft < u.outChannels; ++ft)
                    $[we + ft] += at * _[Oe + ft];
                  Oe += u.outChannels;
                }
              }
            }
          }
        }
      }
    }
  }
  return t6.makeTensorInfo(w.shape, w.dtype, w.values);
}
var b2 = { kernelName: lp, backendName: "cpu", kernelFunc: xj };
function yj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, dy: s } = e, { strides: a, pad: i, filterShape: p } = o;
  K([n, s], "conv3dBackpropFilterV2");
  let u = y.computeStrides(n.shape), c = y.computeStrides(s.shape), l = S.computeConv3DInfo(n.shape, p, a, 1, i), m = l.strideDepth, d = l.strideHeight, f = l.strideWidth, h = l.filterDepth, g = l.filterHeight, x = l.filterWidth, b = new st(l.filterShape, "float32"), C = b.values, [w, k, _, $] = b.strides, A = t6.data.get(s.dataId).values, [R, D, P, M] = c, L = t6.data.get(n.dataId).values, [W, V, U, q] = u, H = l.padInfo.front, j = l.padInfo.left, X = l.padInfo.top;
  for (let Z = 0; Z < h; ++Z) {
    let ee = Math.max(0, Math.ceil((H - Z) / m)), Y = Math.min(l.outDepth, (l.inDepth + H - Z) / m), J = Z * w;
    for (let ie = 0; ie < g; ++ie) {
      let pe = Math.max(0, Math.ceil((X - ie) / d)), he = Math.min(l.outHeight, (l.inHeight + X - ie) / d), we = ie * k + J;
      for (let ve = 0; ve < x; ++ve) {
        let $e = Math.max(0, Math.ceil((j - ve) / f)), Le = Math.min(l.outWidth, (l.inWidth + j - ve) / f), nt = ve * _ + we;
        for (let pt = 0; pt < l.inChannels; ++pt) {
          let Oe = pt * $ + nt;
          for (let mt = 0; mt < l.outChannels; ++mt) {
            let at = 0;
            for (let ft = 0; ft < l.batchSize; ++ft) {
              let wt = ft * W, Fr = ft * R;
              for (let Ot = ee; Ot < Y; ++Ot) {
                let er = (Z + Ot * m - H) * V + wt, Nt = Ot * D + Fr;
                for (let tr = pe; tr < he; ++tr) {
                  let jr = (ie + tr * d - X) * U + er, Xr = tr * P + Nt;
                  for (let pr = $e; pr < Le; ++pr) {
                    let Fo = (ve + pr * f - j) * q + jr, Ka = pr * M + Xr;
                    at += L[Fo + pt] * A[Ka + mt];
                  }
                }
              }
            }
            C[Oe + mt] = at;
          }
        }
      }
    }
  }
  return t6.makeTensorInfo(b.shape, b.dtype, b.values);
}
var C2 = { kernelName: vm, backendName: "cpu", kernelFunc: yj };
function bj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, filter: s } = e, { pad: a, strides: i, inputShape: p } = o;
  K([n], "conv3dBackpropInputV2");
  let u = y.computeStrides(n.shape), c = y.computeStrides(s.shape), l = S.computeConv3DInfo(p, s.shape, i, 1, a), m = new st(l.inShape, "float32"), d = m.values, [f, h, g, x] = m.strides, b = t6.data.get(n.dataId).values, [C, w, k, _] = u, $ = t6.data.get(s.dataId).values, [A, R, D, P] = c, { batchSize: M, filterDepth: L, filterHeight: W, filterWidth: V, inChannels: U, inDepth: q, inHeight: H, inWidth: j, outChannels: X, outDepth: Z, outHeight: ee, outWidth: Y, strideDepth: J, strideHeight: ie, strideWidth: pe } = l, he = L - 1 - l.padInfo.front, we = W - 1 - l.padInfo.top, ve = V - 1 - l.padInfo.left;
  for (let $e = 0; $e < M; ++$e)
    for (let Le = 0; Le < U; ++Le)
      for (let nt = 0; nt < q; ++nt) {
        let pt = nt - he, Oe = Math.max(0, Math.ceil(pt / J)), mt = Math.min(Z, (L + pt) / J);
        for (let at = 0; at < H; ++at) {
          let ft = at - we, wt = Math.max(0, Math.ceil(ft / ie)), Fr = Math.min(ee, (W + ft) / ie);
          for (let Ot = 0; Ot < j; ++Ot) {
            let Kr = Ot - ve, er = Math.max(0, Math.ceil(Kr / pe)), Nt = Math.min(Y, (V + Kr) / pe), tr = 0;
            for (let rr = Oe; rr < mt; ++rr) {
              let jr = rr * J - pt;
              for (let Xr = wt; Xr < Fr; ++Xr) {
                let pr = Xr * ie - ft;
                for (let Js = er; Js < Nt; ++Js) {
                  let Fo = Js * pe - Kr, Ka = C * $e + w * rr + k * Xr + _ * Js, Kt = A * (L - 1 - jr) + R * (W - 1 - pr) + D * (V - 1 - Fo) + P * Le;
                  for (let ea = 0; ea < X; ++ea) {
                    let Ac = b[Ka + ea], Rc = $[Kt + ea];
                    tr += Ac * Rc;
                  }
                }
              }
            }
            d[f * $e + h * nt + g * at + x * Ot + Le] = tr;
          }
        }
      }
  return t6.makeTensorInfo(m.shape, m.dtype, m.values);
}
var S2 = { kernelName: mp, backendName: "cpu", kernelFunc: bj };
var Cj = Ie(qo, (r) => Math.cos(r));
var w2 = { kernelName: qo, backendName: "cpu", kernelFunc: Cj };
var Sj = Ie(Ko, (r) => Math.cosh(r));
var I2 = { kernelName: Ko, backendName: "cpu", kernelFunc: Sj };
function wj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { image: n, boxes: s, boxInd: a } = e, { cropSize: i, method: p, extrapolationValue: u } = o, [c, l, m, d] = n.shape, f = s.shape[0], [h, g] = i, x = le([f, h, g, d], "float32"), b = t6.data.get(s.dataId).values, C = t6.data.get(a.dataId).values, w = t6.data.get(n.dataId).values, k = y.computeStrides(n.shape), _ = y.computeStrides(x.shape);
  for (let $ = 0; $ < f; $++) {
    let A = $ * 4, R = b[A], D = b[A + 1], P = b[A + 2], M = b[A + 3], L = C[$];
    if (L >= c)
      continue;
    let W = h > 1 ? (P - R) * (l - 1) / (h - 1) : 0, V = g > 1 ? (M - D) * (m - 1) / (g - 1) : 0;
    for (let U = 0; U < h; U++) {
      let q = h > 1 ? R * (l - 1) + U * W : 0.5 * (R + P) * (l - 1);
      if (q < 0 || q > l - 1) {
        for (let H = 0; H < g; H++)
          for (let j = 0; j < d; j++) {
            let X = j + H * _[2] + U * _[1] + $ * _[0];
            x.values[X] = u;
          }
        continue;
      }
      if (p === "bilinear") {
        let H = Math.floor(q), j = Math.ceil(q), X = q - H;
        for (let Z = 0; Z < g; Z++) {
          let ee = g > 1 ? D * (m - 1) + Z * V : 0.5 * (D + M) * (m - 1);
          if (ee < 0 || ee > m - 1) {
            for (let pe = 0; pe < d; pe++) {
              let he = pe + Z * _[2] + U * _[1] + $ * _[0];
              x.values[he] = u;
            }
            continue;
          }
          let Y = Math.floor(ee), J = Math.ceil(ee), ie = ee - Y;
          for (let pe = 0; pe < d; pe++) {
            let he = pe + Y * k[2] + H * k[1] + L * k[0], we = w[he];
            he = pe + J * k[2] + H * k[1] + L * k[0];
            let ve = w[he];
            he = pe + Y * k[2] + j * k[1] + L * k[0];
            let $e = w[he];
            he = pe + J * k[2] + j * k[1] + L * k[0];
            let Le = w[he], nt = we + (ve - we) * ie, pt = $e + (Le - $e) * ie;
            he = pe + Z * _[2] + U * _[1] + $ * _[0], x.values[he] = nt + (pt - nt) * X;
          }
        }
      } else
        for (let H = 0; H < g; ++H) {
          let j = g > 1 ? D * (m - 1) + H * V : 0.5 * (D + M) * (m - 1);
          if (j < 0 || j > m - 1) {
            for (let ee = 0; ee < d; ee++) {
              let Y = ee + H * _[2] + U * _[1] + $ * _[0];
              x.values[Y] = u;
            }
            continue;
          }
          let X = Math.round(j), Z = Math.round(q);
          for (let ee = 0; ee < d; ee++) {
            let Y = ee + X * k[2] + Z * k[1] + L * k[0], J = ee + H * _[2] + U * _[1] + $ * _[0];
            x.values[J] = w[Y];
          }
        }
    }
  }
  return t6.makeTensorInfo(x.shape, x.dtype, x.values);
}
var v2 = { kernelName: Yo, backendName: "cpu", kernelFunc: wj };
function Ij(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, exclusive: a, reverse: i } = o;
  K(n, "cumprod");
  let p = S.getAxesPermutation([s], n.shape.length), u = n;
  p != null && (u = Ct({ inputs: { x: n }, backend: t6, attrs: { perm: p } }));
  let c = S.getInnerMostAxes(1, n.shape.length)[0];
  if (c !== u.shape.length - 1)
    throw new Error(`backend.cumprod in CPU expects an inner-most axis=${u.shape.length - 1} but got axis=${c}`);
  let l = dt(u.dtype, "int32"), m = y.makeOnesTypedArray(y.sizeFromShape(u.shape), l), d = t6.data.get(u.dataId).values, f = u.shape[u.shape.length - 1], h = i ? (x, b) => x + f - b - 1 : (x, b) => x + b;
  for (let x = 0; x < d.length; x += f)
    for (let b = 0; b < f; b++) {
      let C = h(x, b);
      if (b === 0)
        m[C] = a ? 1 : d[C];
      else {
        let w = h(x, b - 1);
        m[C] = a ? d[w] * m[w] : d[C] * m[w];
      }
    }
  let g = t6.makeTensorInfo(u.shape, l, m);
  if (p != null) {
    let x = S.getUndoAxesPermutation(p), b = Ct({ inputs: { x: g }, backend: t6, attrs: { perm: x } });
    return t6.disposeIntermediateTensorInfo(g), t6.disposeIntermediateTensorInfo(u), b;
  }
  return g;
}
var k2 = { kernelName: jo, backendName: "cpu", kernelFunc: Ij };
function vj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, exclusive: a, reverse: i } = o;
  K(n, "cumsum");
  let p = S.getAxesPermutation([s], n.shape.length), u = n;
  p != null && (u = Ct({ inputs: { x: n }, backend: t6, attrs: { perm: p } }));
  let c = S.getInnerMostAxes(1, n.shape.length)[0];
  if (c !== u.shape.length - 1)
    throw new Error(`backend.cumsum in CPU expects an inner-most axis=${u.shape.length - 1} but got axis=${c}`);
  let l = dt(u.dtype, "int32"), m = y.makeZerosTypedArray(y.sizeFromShape(u.shape), l), d = t6.data.get(u.dataId).values, f = u.shape[u.shape.length - 1], h = i ? (x, b) => x + f - b - 1 : (x, b) => x + b;
  for (let x = 0; x < d.length; x += f)
    for (let b = 0; b < f; b++) {
      let C = h(x, b);
      if (b === 0)
        m[C] = a ? 0 : d[C];
      else {
        let w = h(x, b - 1);
        m[C] = a ? d[w] + m[w] : d[C] + m[w];
      }
    }
  let g = t6.makeTensorInfo(u.shape, l, m);
  if (p != null) {
    let x = S.getUndoAxesPermutation(p), b = Ct({ inputs: { x: g }, backend: t6, attrs: { perm: x } });
    return t6.disposeIntermediateTensorInfo(g), t6.disposeIntermediateTensorInfo(u), b;
  }
  return g;
}
var N2 = { kernelName: Xo, backendName: "cpu", kernelFunc: vj };
function kj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, weights: s } = e, { size: a, binaryOutput: i } = o;
  if (n.shape.length === 1) {
    let p = t6.data.get(n.dataId).values, u = t6.data.get(s.dataId).values, c = Kp(p, u, s.dtype, s.shape, a);
    return t6.makeTensorInfo([a], s.dtype, c);
  } else if (n.shape.length === 2) {
    let p = t6.bufferSync(n), u = t6.bufferSync(s), c = uf(p, u, a, i);
    return t6.makeTensorInfo(c.shape, s.dtype, c.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`);
}
var T2 = { kernelName: ti, backendName: "cpu", kernelFunc: kj };
function Nj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { blockSize: s, dataFormat: a } = o;
  y.assert(a === "NHWC", () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${a}`);
  let i = n.shape[0], p = n.shape[1], u = n.shape[2], c = n.shape[3], l = p * s, m = u * s, d = c / (s * s), f = t6.data.get(n.dataId).values, h = new Float32Array(i * l * m * d), g = 0;
  for (let x = 0; x < i; ++x)
    for (let b = 0; b < l; ++b) {
      let C = Math.floor(b / s), w = b % s;
      for (let k = 0; k < m; ++k) {
        let _ = Math.floor(k / s), $ = k % s, A = (w * s + $) * d;
        for (let R = 0; R < d; ++R) {
          let P = R + A + c * (_ + u * (C + p * x));
          h[g++] = f[P];
        }
      }
    }
  return t6.makeTensorInfo([i, l, m, d], n.dtype, h);
}
var _2 = { kernelName: Qo, backendName: "cpu", kernelFunc: Nj };
function TS(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s } = e, { strides: a, pad: i, dilations: p, dimRoundingMode: u } = o;
  K([n, s], "depthwiseConv2DNative");
  let c = y.computeStrides(n.shape), l = y.computeStrides(s.shape), m = p;
  m == null && (m = [1, 1]), y.assert(S.eitherStridesOrDilationsAreOne(a, m), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${m}'`);
  let d = S.computeConv2DInfo(n.shape, s.shape, a, m, i, u, true), { filterHeight: f, filterWidth: h, dilationHeight: g, dilationWidth: x, padInfo: b } = d, C = b.left, w = b.top, k = d.outChannels / d.inChannels, _ = new st(d.outShape, n.dtype), $ = t6.data.get(n.dataId).values, A = t6.data.get(s.dataId).values, R = _.values;
  for (let D = 0; D < d.batchSize; ++D) {
    let P = D * c[0], M = D * _.strides[0];
    for (let L = 0; L < d.outHeight; ++L) {
      let W = M + L * _.strides[1], V = L * d.strideHeight - w;
      for (let U = 0; U < f; ++U) {
        let q = V + U * g;
        if (q < 0 || q >= d.inHeight)
          continue;
        let H = U * l[0], j = P + q * c[1];
        for (let X = 0; X < d.outWidth; ++X) {
          let Z = W + X * _.strides[2], ee = X * d.strideWidth - C;
          for (let Y = 0; Y < h; ++Y) {
            let J = ee + Y * x;
            if (J < 0 || J >= d.inWidth)
              continue;
            let ie = H + Y * l[1], pe = j + J * d.inChannels, he = Z, we = ie;
            for (let ve = 0; ve < d.inChannels; ++ve) {
              let $e = $[pe + ve];
              for (let Le = 0; Le < k; ++Le)
                R[he + Le] += $e * A[we + Le];
              he += k, we += k;
            }
          }
        }
      }
    }
  }
  return t6.makeTensorInfo(_.shape, _.dtype, _.values);
}
var E2 = { kernelName: Zo, backendName: "cpu", kernelFunc: TS };
function Tj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, dy: s } = e, { strides: a, dilations: i, pad: p, dimRoundingMode: u, filterShape: c } = o;
  K([n, s], "depthwiseConv2dNativeBackpropFilter");
  let l = S.computeConv2DInfo(n.shape, c, a, i, p, u, true), { strideHeight: m, strideWidth: d, filterHeight: f, filterWidth: h } = l, g = new st(l.filterShape, "float32"), x = l.padInfo.left, b = l.padInfo.top, C = l.outChannels / l.inChannels, w = t6.data.get(n.dataId).values, k = new st(n.shape, n.dtype, w), _ = t6.data.get(s.dataId).values, $ = new st(s.shape, s.dtype, _);
  for (let A = 0; A < f; ++A) {
    let R = Math.max(0, Math.ceil((b - A) / m)), D = Math.min(l.outHeight, (l.inHeight + b - A) / m);
    for (let P = 0; P < h; ++P) {
      let M = Math.max(0, Math.ceil((x - P) / d)), L = Math.min(l.outWidth, (l.inWidth + x - P) / d);
      for (let W = 0; W < l.outChannels; ++W) {
        let V = Math.trunc(W / C), U = W % C, q = 0;
        for (let H = 0; H < l.batchSize; ++H)
          for (let j = R; j < D; ++j) {
            let X = A + j * m - b;
            for (let Z = M; Z < L; ++Z) {
              let ee = P + Z * d - x;
              q += k.get(H, X, ee, V) * $.get(H, j, Z, W);
            }
          }
        g.set(q, A, P, V, U);
      }
    }
  }
  return t6.makeTensorInfo(g.shape, g.dtype, g.values);
}
var $2 = { kernelName: dp, backendName: "cpu", kernelFunc: Tj };
function _j(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, filter: s } = e, { strides: a, dilations: i, pad: p, dimRoundingMode: u, inputShape: c } = o;
  K([n, s], "depthwiseConv2DNativeBackpropInput");
  let l = y.computeStrides(n.shape), m = y.computeStrides(s.shape), d = S.computeConv2DInfo(c, s.shape, a, i, p, u, true), f = new st(d.inShape, "float32"), h = f.values, [g, x, b] = f.strides, C = t6.data.get(n.dataId).values, [w, k, _] = l, $ = t6.data.get(s.dataId).values, [A, R, D] = m, { batchSize: P, filterHeight: M, filterWidth: L, inChannels: W, inHeight: V, inWidth: U, outChannels: q, outHeight: H, outWidth: j, strideHeight: X, strideWidth: Z } = d, ee = M - 1 - d.padInfo.top, Y = L - 1 - d.padInfo.left, J = q / W;
  for (let ie = 0; ie < P; ++ie)
    for (let pe = 0; pe < W; ++pe)
      for (let he = 0; he < V; ++he) {
        let we = he - ee, ve = Math.max(0, Math.ceil(we / X)), $e = Math.min(H, (M + we) / X);
        for (let Le = 0; Le < U; ++Le) {
          let nt = Le - Y, pt = Math.max(0, Math.ceil(nt / Z)), Oe = Math.min(j, (L + nt) / Z), mt = 0;
          for (let at = ve; at < $e; ++at) {
            let ft = at * X - we;
            for (let wt = pt; wt < Oe; ++wt) {
              let Fr = wt * Z - nt, Ot = w * ie + k * at + _ * wt, Kr = A * (M - 1 - ft) + R * (L - 1 - Fr) + D * pe;
              for (let er = 0; er < J; ++er) {
                let Nt = pe * J + er, tr = C[Ot + Nt], rr = $[Kr + er];
                mt += tr * rr;
              }
            }
          }
          h[g * ie + x * he + b * Le + pe] = mt;
        }
      }
  return t6.makeTensorInfo(f.shape, f.dtype, f.values);
}
var A2 = { kernelName: fp, backendName: "cpu", kernelFunc: _j };
function Ej(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e, n = y.sizeFromShape(o.shape), s = t6.data.get(o.dataId).values, a = le([n, n], o.dtype), i = a.values;
  for (let u = 0; u < s.length; u++)
    i[u * n + u] = s[u];
  let p = [...o.shape, ...o.shape];
  return t6.makeTensorInfo(p, a.dtype, a.values);
}
var R2 = { kernelName: hp, backendName: "cpu", kernelFunc: Ej };
var F2 = { kernelName: gp, backendName: "cpu", kernelFunc: ({ inputs: r, backend: e, attrs: t6 }) => {
  let { x: o, filter: n } = r, { strides: s, pad: a, dilations: i } = t6, p = e, u = p.data.get(o.dataId).values, c = o.shape.length, l = p.data.get(n.dataId).values, m = n.shape.length, { batchSize: d, inHeight: f, inWidth: h, inChannels: g, outHeight: x, outWidth: b, padInfo: C, strideHeight: w, strideWidth: k, filterHeight: _, filterWidth: $, dilationHeight: A, dilationWidth: R, outShape: D } = S.computeDilation2DInfo(o.shape, n.shape, s, a, "NHWC", i), P = y.sizeFromShape(D), M = D.length, L = y.getArrayFromDType(o.dtype, P);
  for (let V = 0; V < d; ++V)
    for (let U = 0; U < x; ++U) {
      let q = U * w - C.top;
      for (let H = 0; H < b; ++H) {
        let j = H * k - C.left;
        for (let X = 0; X < g; ++X) {
          let Z = Number.MIN_SAFE_INTEGER;
          for (let Y = 0; Y < _; ++Y) {
            let J = q + Y * A;
            if (J >= 0 && J < f)
              for (let ie = 0; ie < $; ++ie) {
                let pe = j + ie * R;
                if (pe >= 0 && pe < h) {
                  let he = y.locToIndex([V, J, pe, X], c, y.computeStrides(o.shape)), we = y.locToIndex([Y, ie, X], m, y.computeStrides(n.shape)), ve = u[he] + l[we];
                  ve > Z && (Z = ve);
                }
              }
          }
          let ee = y.locToIndex([V, U, H, X], M, y.computeStrides(D));
          L[ee] = Z;
        }
      }
    }
  return { dataId: p.write(y.toTypedArray(L, o.dtype), D, o.dtype), shape: D, dtype: o.dtype };
} };
var D2 = { kernelName: bb, backendName: "cpu", kernelFunc: ({ inputs: r, backend: e, attrs: t6 }) => {
  let { x: o, filter: n, dy: s } = r, { strides: a, pad: i, dilations: p } = t6, u = e, c = y.toNestedArray(o.shape, u.data.get(o.dataId).values), l = y.toNestedArray(n.shape, u.data.get(n.dataId).values), { batchSize: m, inHeight: d, inWidth: f, inChannels: h, outHeight: g, outWidth: x, padInfo: b, strideHeight: C, strideWidth: w, filterHeight: k, filterWidth: _, dilationHeight: $, dilationWidth: A, outShape: R } = S.computeDilation2DInfo(o.shape, n.shape, a, i, "NHWC", p);
  y.assert(s.rank === R.length, () => `Error in ${bb}, dy must have the same rank as output ${R.length}, but got ${s.rank}`);
  let D = y.toNestedArray(R, u.data.get(s.dataId).values), P = y.makeZerosNestedTypedArray(n.shape, n.dtype);
  for (let L = 0; L < m; ++L)
    for (let W = 0; W < g; ++W) {
      let V = W * C - b.top;
      for (let U = 0; U < x; ++U) {
        let q = U * w - b.left;
        for (let H = 0; H < h; ++H) {
          let j = Number.MIN_SAFE_INTEGER, X = 0, Z = 0;
          for (let ee = 0; ee < k; ++ee) {
            let Y = V + ee * $;
            if (Y >= 0 && Y < d)
              for (let J = 0; J < _; ++J) {
                let ie = q + J * A;
                if (ie >= 0 && ie < f) {
                  let pe = c[L][Y][ie][H] + l[ee][J][H];
                  pe > j && (j = pe, X = ee, Z = J);
                }
              }
          }
          P[X][Z][H] += D[L][W][U][H];
        }
      }
    }
  return { dataId: u.write(y.toTypedArray(P, o.dtype), n.shape, n.dtype), shape: n.shape, dtype: n.dtype };
} };
var O2 = { kernelName: yb, backendName: "cpu", kernelFunc: ({ inputs: r, backend: e, attrs: t6 }) => {
  let { x: o, filter: n, dy: s } = r, { strides: a, pad: i, dilations: p } = t6, u = e, c = y.toNestedArray(o.shape, u.data.get(o.dataId).values), l = y.toNestedArray(n.shape, u.data.get(n.dataId).values), { batchSize: m, inHeight: d, inWidth: f, inChannels: h, outHeight: g, outWidth: x, padInfo: b, strideHeight: C, strideWidth: w, filterHeight: k, filterWidth: _, dilationHeight: $, dilationWidth: A, outShape: R } = S.computeDilation2DInfo(o.shape, n.shape, a, i, "NHWC", p);
  y.assert(s.rank === R.length, () => `Error in ${yb}, dy must have the same rank as output ${R.length}, but got ${s.rank}`);
  let D = y.toNestedArray(R, u.data.get(s.dataId).values), P = y.makeZerosNestedTypedArray(o.shape, o.dtype);
  for (let L = 0; L < m; ++L)
    for (let W = 0; W < g; ++W) {
      let V = W * C - b.top;
      for (let U = 0; U < x; ++U) {
        let q = U * w - b.left;
        for (let H = 0; H < h; ++H) {
          let j = Number.MIN_SAFE_INTEGER, X = V < 0 ? 0 : V, Z = q < 0 ? 0 : q;
          for (let ee = 0; ee < k; ++ee) {
            let Y = V + ee * $;
            if (Y >= 0 && Y < d)
              for (let J = 0; J < _; ++J) {
                let ie = q + J * A;
                if (ie >= 0 && ie < f) {
                  let pe = c[L][Y][ie][H] + l[ee][J][H];
                  pe > j && (j = pe, X = Y, Z = ie);
                }
              }
          }
          P[L][X][Z][H] += D[L][W][U][H];
        }
      }
    }
  return { dataId: u.write(y.toTypedArray(P, o.dtype), o.shape, o.dtype), shape: o.shape, dtype: o.dtype };
} };
function La(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o;
  K(n, "sum");
  let i;
  n.dtype === "bool" ? i = Io({ inputs: { x: n }, backend: t6, attrs: { dtype: "int32" } }) : i = ar({ inputs: { x: n }, backend: t6 });
  let p = i.shape.length, u = y.parseAxisParam(s, i.shape), c = S.getAxesPermutation(u, p), l = u, m = i;
  c != null && (m = Ct({ inputs: { x: i }, backend: t6, attrs: { perm: c } }), l = S.getInnerMostAxes(l.length, p)), S.assertAxesAreInnerMostDims("sum", l, m.shape.length);
  let [d, f] = S.computeOutAndReduceShapes(m.shape, l), h = S.upcastType(m.dtype, "int32"), g = Hp(t6, d, h), x = y.sizeFromShape(f), b = t6.data.get(g.dataId).values, C = t6.data.get(m.dataId).values;
  for (let w = 0; w < b.length; ++w) {
    let k = w * x, _ = 0;
    for (let $ = 0; $ < x; ++$)
      _ += C[k + $];
    b[w] = _;
  }
  if (a) {
    let w = S.expandShapeToKeepDim(g.shape, u), k = g;
    g = Me({ inputs: { x: g }, backend: t6, attrs: { shape: w } }), t6.disposeIntermediateTensorInfo(k);
  }
  return t6.disposeIntermediateTensorInfo(i), c != null && t6.disposeIntermediateTensorInfo(m), g;
}
var P2 = { kernelName: Hn, backendName: "cpu", kernelFunc: La };
function $j(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { equation: n } = o, s = e, { allDims: a, summedDims: i, idDims: p } = S.decodeEinsumEquation(n, s.length);
  S.checkEinsumDimSizes(a.length, p, s);
  let { path: u, steps: c } = S.getEinsumComputePath(i, p), l = c.length, m = null, d = a.length, f = [];
  for (let h = 0; h < l; ++h) {
    for (let g of c[h]) {
      let { permutationIndices: x, expandDims: b } = S.getEinsumPermutation(d, p[g]), C;
      S.isIdentityPermutation(x) ? C = s[g] : (C = Ct({ inputs: { x: s[g] }, backend: t6, attrs: { perm: x } }), f.push(C));
      let w = C.shape.slice();
      for (let k = 0; k < b.length; ++k)
        w.splice(b[k], 0, 1);
      y.arraysEqual(C.shape, w) || (C = Me({ inputs: { x: C }, backend: t6, attrs: { shape: w } }), f.push(C)), m === null ? m = C : (m = wu({ inputs: { a: C, b: m }, backend: t6 }), f.push(m));
    }
    h < l - 1 && (u[h] >= 0 && (m = La({ inputs: { x: m }, backend: t6, attrs: { axis: u[h] - (a.length - d), keepDims: false } }), f.push(m)), d--);
  }
  for (let h of f)
    h !== m && t6.disposeIntermediateTensorInfo(h);
  return m;
}
var M2 = { kernelName: ri, backendName: "cpu", kernelFunc: $j };
function Aj(r) {
  let { inputs: e, backend: t6 } = r, { dy: o, y: n } = e;
  K([o, n], "eluGrad");
  let s = new Float32Array(y.sizeFromShape(n.shape)), a = t6.data.get(n.dataId).values, i = t6.data.get(o.dataId).values;
  for (let p = 0; p < a.length; ++p) {
    let u = a[p];
    u >= 1 ? s[p] = i[p] : s[p] = i[p] * (u + 1);
  }
  return t6.makeTensorInfo(n.shape, "float32", s);
}
var L2 = { kernelName: km, backendName: "cpu", kernelFunc: Aj };
var Rj = S.ERF_P;
var Fj = S.ERF_A1;
var Dj = S.ERF_A2;
var Oj = S.ERF_A3;
var Pj = S.ERF_A4;
var Mj = S.ERF_A5;
var Lj = Ie(ma, (r) => {
  let e = Math.sign(r), t6 = Math.abs(r), o = 1 / (1 + Rj * t6);
  return e * (1 - ((((Mj * o + Pj) * o + Oj) * o + Dj) * o + Fj) * o * Math.exp(-t6 * t6));
});
var B2 = { kernelName: ma, backendName: "cpu", kernelFunc: Lj };
function Jp(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { input: n } = e, { dim: s } = o, a = n.shape.length, i = n.shape.slice(), p = s;
  return s < 0 && (y.assert(-(a + 1) <= s, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), p = a + s + 1), i.splice(p, 0, 1), Me({ inputs: { x: n }, backend: t6, attrs: { shape: i } });
}
var V2 = { kernelName: bs, backendName: "cpu", kernelFunc: Jp };
var Bj = Be((r, e) => r / e);
var hl = Qe(Jo, Bj);
var gl = { kernelName: Jo, backendName: "cpu", kernelFunc: hl };
function vf(r, e, t6) {
  let o = r.shape, n = o[0], s = o[1], a = t6.data.get(r.dataId), i = a.complexTensorInfos.real, p = a.complexTensorInfos.imag, u = [n, s], c = y.sizeFromShape(u), l = y.getTypedArrayFromDType("float32", c), m = y.getTypedArrayFromDType("float32", c);
  for (let g = 0; g < n; g++) {
    let x = No({ inputs: { x: i }, backend: t6, attrs: { begin: [g, 0], size: [1, s] } }), b = No({ inputs: { x: p }, backend: t6, attrs: { begin: [g, 0], size: [1, s] } }), C = Ht({ inputs: { real: x, imag: b }, backend: t6 }), { real: w, imag: k } = Vj(C, e, t6), _ = S.mergeRealAndImagArrays(w, k);
    for (let $ = 0; $ < s; $++) {
      let A = S.getComplexWithIndex(_, $);
      l[g * s + $] = A.real, m[g * s + $] = A.imag;
    }
    t6.disposeIntermediateTensorInfo(x), t6.disposeIntermediateTensorInfo(b), t6.disposeIntermediateTensorInfo(C);
  }
  let d = t6.makeTensorInfo(u, "float32", l), f = t6.makeTensorInfo(u, "float32", m), h = Ht({ inputs: { real: d, imag: f }, backend: t6 });
  return t6.disposeIntermediateTensorInfo(d), t6.disposeIntermediateTensorInfo(f), h;
}
function Vj(r, e, t6) {
  let o = y.sizeFromShape(r.shape), n = t6.data.get(r.dataId), s = t6.data.get(n.complexTensorInfos.real.dataId).values, a = t6.data.get(n.complexTensorInfos.imag.dataId).values;
  if (zj(o)) {
    let i = _S(s, a, o, e, t6), p = [r.shape[0], r.shape[1]];
    if (e) {
      let u = t6.makeTensorInfo(p, "float32", i.real), c = t6.makeTensorInfo(p, "float32", i.imag), l = t6.makeTensorInfo([], "float32", y.createScalarValue(o, "float32")), m = ar({ inputs: { x: l }, backend: t6 }), d = gl.kernelFunc({ inputs: { a: u, b: l }, backend: t6 }), f = gl.kernelFunc({ inputs: { a: c, b: m }, backend: t6 }), h = t6.data.get(d.dataId).values, g = t6.data.get(f.dataId).values;
      return t6.disposeIntermediateTensorInfo(u), t6.disposeIntermediateTensorInfo(c), t6.disposeIntermediateTensorInfo(l), t6.disposeIntermediateTensorInfo(m), t6.disposeIntermediateTensorInfo(d), t6.disposeIntermediateTensorInfo(f), { real: h, imag: g };
    }
    return i;
  } else {
    let i = S.mergeRealAndImagArrays(s, a), p = Wj(i, o, e);
    return S.splitRealAndImagArrays(p);
  }
}
function zj(r) {
  return (r & r - 1) === 0;
}
function _S(r, e, t6, o, n) {
  if (t6 === 1)
    return { real: r, imag: e };
  let s = S.mergeRealAndImagArrays(r, e), a = t6 / 2, i = S.complexWithEvenIndex(s), p = i.real, u = i.imag, c = [p.length], l = n.makeTensorInfo(c, "float32", p), m = n.makeTensorInfo(c, "float32", u), d = Ht({ inputs: { real: l, imag: m }, backend: n }), f = S.complexWithOddIndex(s), h = f.real, g = f.imag, x = [h.length], b = n.makeTensorInfo(x, "float32", h), C = n.makeTensorInfo(x, "float32", g), w = Ht({ inputs: { real: b, imag: C }, backend: n }), k = _S(p, u, a, o, n), _ = k.real, $ = k.imag, A = [_.length], R = n.makeTensorInfo(A, "float32", _), D = n.makeTensorInfo(A, "float32", $), P = Ht({ inputs: { real: R, imag: D }, backend: n }), M = _S(h, g, a, o, n), L = M.real, W = M.imag, V = [L.length], U = n.makeTensorInfo(V, "float32", L), q = n.makeTensorInfo(V, "float32", W), H = Ht({ inputs: { real: U, imag: q }, backend: n }), j = S.exponents(t6, o), X = [j.real.length], Z = n.makeTensorInfo(X, "float32", j.real), ee = n.makeTensorInfo(X, "float32", j.imag), Y = Ht({ inputs: { real: Z, imag: ee }, backend: n }), J = wu({ inputs: { a: Y, b: H }, backend: n }), ie = js({ inputs: { a: P, b: J }, backend: n }), pe = dl({ inputs: { a: P, b: J }, backend: n }), he = wo({ inputs: { input: ie }, backend: n }), we = wo({ inputs: { input: pe }, backend: n }), ve = Xs({ inputs: { input: ie }, backend: n }), $e = Xs({ inputs: { input: pe }, backend: n }), Le = Pi({ inputs: [he, we], backend: n, attrs: { axis: 0 } }), nt = Pi({ inputs: [ve, $e], backend: n, attrs: { axis: 0 } }), pt = n.data.get(Le.dataId).values, Oe = n.data.get(nt.dataId).values;
  return n.disposeIntermediateTensorInfo(l), n.disposeIntermediateTensorInfo(m), n.disposeIntermediateTensorInfo(d), n.disposeIntermediateTensorInfo(b), n.disposeIntermediateTensorInfo(C), n.disposeIntermediateTensorInfo(w), n.disposeIntermediateTensorInfo(R), n.disposeIntermediateTensorInfo(D), n.disposeIntermediateTensorInfo(P), n.disposeIntermediateTensorInfo(U), n.disposeIntermediateTensorInfo(q), n.disposeIntermediateTensorInfo(H), n.disposeIntermediateTensorInfo(Z), n.disposeIntermediateTensorInfo(ee), n.disposeIntermediateTensorInfo(Y), n.disposeIntermediateTensorInfo(J), n.disposeIntermediateTensorInfo(ie), n.disposeIntermediateTensorInfo(pe), n.disposeIntermediateTensorInfo(he), n.disposeIntermediateTensorInfo(ve), n.disposeIntermediateTensorInfo(we), n.disposeIntermediateTensorInfo($e), n.disposeIntermediateTensorInfo(Le), n.disposeIntermediateTensorInfo(nt), { real: pt, imag: Oe };
}
function Wj(r, e, t6) {
  let o = new Float32Array(e * 2);
  for (let n = 0; n < e; n++) {
    let s = 0, a = 0;
    for (let i = 0; i < e; i++) {
      let p = S.exponent(n * i, e, t6), u = S.getComplexWithIndex(r, i);
      s += u.real * p.real - u.imag * p.imag, a += u.real * p.imag + u.imag * p.real;
    }
    t6 && (s /= e, a /= e), S.assignToTypedArray(o, s, a, n);
  }
  return o;
}
function Uj(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e, n = y.sizeFromShape(o.shape), s = o.shape[o.shape.length - 1], a = n / s, i = Me({ inputs: { x: o }, backend: t6, attrs: { shape: [a, s] } }), p = vf(i, false, t6), u = Me({ inputs: { x: p }, backend: t6, attrs: { shape: o.shape } });
  return t6.disposeIntermediateTensorInfo(i), t6.disposeIntermediateTensorInfo(p), u;
}
var z2 = { kernelName: oi, backendName: "cpu", kernelFunc: Uj };
function xl(r) {
  let { backend: e, attrs: t6 } = r, { shape: o, value: n, dtype: s } = t6, a = s || y.inferDtype(n), i = y.getArrayFromDType(a, y.sizeFromShape(o));
  return Gj(i, n, a), e.makeTensorInfo(o, a, i);
}
var W2 = { kernelName: Cs, backendName: "cpu", kernelFunc: xl };
function Gj(r, e, t6) {
  r.fill(e);
}
var U2 = { kernelName: on, backendName: "cpu", kernelFunc: ({ inputs: r, attrs: e, backend: t6 }) => {
  let { image: o } = r, n = t6, s = y.getTypedArrayFromDType(o.dtype, y.sizeFromShape(o.shape)), [a, i, p, u] = o.shape, c = n.data.get(o.dataId).values;
  for (let m = 0; m < a; m++) {
    let d = m * p * i * u;
    for (let f = 0; f < i; f++) {
      let h = f * (p * u);
      for (let g = 0; g < p; g++) {
        let x = g * u;
        for (let b = 0; b < u; b++) {
          let C = Math.round(p - g - 1), w = d + h + x + b, k = c[w];
          if (C >= 0 && C < p) {
            let _ = C * u, $ = d + h + _ + b;
            k = c[$];
          }
          s[w] = k;
        }
      }
    }
  }
  return { dataId: n.write(s, o.shape, o.dtype), shape: o.shape, dtype: o.dtype };
} };
var Hj = Be((r, e) => Math.floor(r / e));
var qj = Qe(sn, Hj, null, "int32");
var G2 = { kernelName: sn, backendName: "cpu", kernelFunc: qj };
function Kj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = e, { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = o, h = NS({ inputs: { x: n, filter: s }, backend: t6, attrs: { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m } });
  if (a) {
    let g = h;
    if (c === "NCHW" && a.shape.length === 1 && a.shape[0] !== 1) {
      let x = Me({ inputs: { x: a }, backend: t6, attrs: { shape: [a.shape[0], 1, 1] } });
      h = js({ inputs: { a: h, b: x }, backend: t6 }), t6.disposeIntermediateTensorInfo(x);
    } else
      h = js({ inputs: { a: h, b: a }, backend: t6 });
    t6.disposeIntermediateTensorInfo(g);
  }
  if (d) {
    let g = h;
    if (c === "NCHW" && d === "prelu" && i.shape.length === 1 && i.shape[0] !== 1) {
      let x = Me({ inputs: { x: i }, backend: t6, attrs: { shape: [i.shape[0], 1, 1] } });
      h = _u(t6, h, d, x, f), t6.disposeIntermediateTensorInfo(x);
    } else
      h = _u(t6, h, d, i, f);
    t6.disposeIntermediateTensorInfo(g);
  }
  return h;
}
var H2 = { kernelName: ho, backendName: "cpu", kernelFunc: Kj };
function jj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = e, { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = o, h = TS({ inputs: { x: n, filter: s }, backend: t6, attrs: { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m } });
  if (a) {
    let g = h;
    h = js({ inputs: { a: h, b: a }, backend: t6 }), t6.disposeIntermediateTensorInfo(g);
  }
  if (d) {
    let g = h;
    h = _u(t6, h, d, i, f), t6.disposeIntermediateTensorInfo(g);
  }
  return h;
}
var q2 = { kernelName: go, backendName: "cpu", kernelFunc: jj };
function Xj(r) {
  let { inputs: e, backend: t6 } = r, { params: o, indices: n } = e, s = y.sizeFromShape(o.shape), a = n.shape, i = a[a.length - 1], [p, u, c, l] = S.prepareAndValidate(o, n);
  if (u === 0)
    return t6.makeTensorInfo(p, o.dtype, []);
  let m = t6.data.get(n.dataId).values, d = t6.bufferSync(o), f = pf(m, d, o.dtype, u, i, c, l, o.shape, s);
  return t6.makeTensorInfo(p, o.dtype, f.values);
}
var K2 = { kernelName: un, backendName: "cpu", kernelFunc: Xj };
function Yj(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, indices: s } = e, { axis: a, batchDims: i } = o;
  K([n, s], "gatherV2");
  let p = y.parseAxisParam(a, n.shape)[0], u = t6.data.get(s.dataId).values, c = n.shape[p];
  for (let w = 0; w < u.length; ++w) {
    let k = u[w];
    y.assert(k <= c - 1 && k >= 0, () => `GatherV2: the index value ${k} is not in [0, ${c - 1}]`);
  }
  let l = i;
  i == null && (l = 0);
  let m = y.sizeFromShape(s.shape), d = S.segment_util.collectGatherOpShapeInfo(n, s, p, l), f = Me({ inputs: { x: n }, backend: t6, attrs: { shape: [d.batchSize, d.outerSize, d.dimSize, d.sliceSize] } }), h = Me({ inputs: { x: s }, backend: t6, attrs: { shape: [d.batchSize, m / d.batchSize] } }), g = [d.batchSize, d.outerSize, m / d.batchSize, d.sliceSize], x = t6.bufferSync(h), b = t6.bufferSync(f), C = cf(b, x, g);
  return t6.disposeIntermediateTensorInfo(f), t6.disposeIntermediateTensorInfo(h), t6.makeTensorInfo(d.outputShape, C.dtype, C.values);
}
var j2 = { kernelName: Ss, backendName: "cpu", kernelFunc: Yj };
function Qj(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e, n = y.sizeFromShape(o.shape), s = o.shape[o.shape.length - 1], a = n / s, i = Me({ inputs: { x: o }, backend: t6, attrs: { shape: [a, s] } }), p = vf(i, true, t6), u = Me({ inputs: { x: p }, backend: t6, attrs: { shape: o.shape } });
  return t6.disposeIntermediateTensorInfo(i), t6.disposeIntermediateTensorInfo(p), u;
}
var X2 = { kernelName: ni, backendName: "cpu", kernelFunc: Qj };
var Zj = Ie(fa, (r) => Number.isFinite(r) ? 1 : 0, "bool");
var Y2 = { kernelName: fa, backendName: "cpu", kernelFunc: Zj };
var Jj = Ie(ha, (r) => Math.abs(r) === 1 / 0 ? 1 : 0, "bool");
var Q2 = { kernelName: ha, backendName: "cpu", kernelFunc: Jj };
var eX = Ie(ln, (r) => Number.isNaN(r) ? 1 : 0, "bool");
var Z2 = { kernelName: ln, backendName: "cpu", kernelFunc: eX };
function tX(r) {
  let { backend: e, attrs: t6 } = r, { start: o, stop: n, num: s } = t6, a = lf(o, n, s);
  return e.makeTensorInfo([a.length], "float32", a);
}
var J2 = { kernelName: xp, backendName: "cpu", kernelFunc: tX };
var rX = Ie(ga, (r) => Math.log1p(r));
var e_ = { kernelName: ga, backendName: "cpu", kernelFunc: rX };
var oX = Be((r, e) => r && e);
var nX = Qe(gn, oX, null, "bool");
var t_ = { kernelName: gn, backendName: "cpu", kernelFunc: nX };
var sX = Ie(xn, (r) => r ? 0 : 1, "bool");
var r_ = { kernelName: xn, backendName: "cpu", kernelFunc: sX };
var aX = Be((r, e) => r || e);
var iX = Qe(xa, aX, null, "bool");
var o_ = { kernelName: xa, backendName: "cpu", kernelFunc: iX };
function uX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { depthRadius: s, bias: a, alpha: i, beta: p } = o;
  K(n, "LRN");
  let u = n.shape[3], c = u - 1, l = t6.data.get(n.dataId).values, m = y.sizeFromShape(n.shape), d = new Float32Array(m);
  function f(h) {
    let g = h % u, x = h - g + Math.max(0, g - s), b = h - g + Math.min(g + s, c), C = 0;
    for (; x <= b; x++) {
      let w = l[x];
      C += w * w;
    }
    return C;
  }
  for (let h = 0; h < m; h++) {
    let g = f(h), x = l[h] * Math.pow(a + i * g, -p);
    d[h] = x;
  }
  return t6.makeTensorInfo(n.shape, n.dtype, d);
}
var n_ = { kernelName: yp, backendName: "cpu", kernelFunc: uX };
function pX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, y: s, dy: a } = e, { depthRadius: i, bias: p, alpha: u, beta: c } = o;
  K(a, "LRNGrad");
  let l = y.sizeFromShape(a.shape), m = a.shape[3], d = t6.data.get(a.dataId).values, f = t6.data.get(n.dataId).values, h = t6.data.get(s.dataId).values, g = new Float32Array(l), x = l;
  for (let b = 0; b < x; b++) {
    let C = b % m, w = b - C + Math.max(0, C - i), k = b - C + Math.min(m, C + i + 1), _ = 0;
    for (let $ = w; $ < k; $++)
      _ += Math.pow(f[$], 2);
    _ = u * _ + p;
    for (let $ = w; $ < k; $++) {
      let A = -2 * u * c * f[$] * h[b] / _;
      b === $ && (A += Math.pow(_, -c)), A *= d[b], g[$] += A;
    }
  }
  return t6.makeTensorInfo(a.shape, n.dtype, g);
}
var s_ = { kernelName: Nm, backendName: "cpu", kernelFunc: pX };
function ES(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { reductionIndices: s, keepDims: a } = o, i = t6, p = n.shape, u = p.length, c = y.parseAxisParam(s, p), l = c, m = S.getAxesPermutation(l, u), d = i.data.get(n.dataId).values;
  if (m != null) {
    let w = new Array(u);
    for (let k = 0; k < w.length; k++)
      w[k] = p[m[k]];
    d = jp(d, p, n.dtype, m, w), l = S.getInnerMostAxes(l.length, u), p = w;
  }
  K(n, "max"), S.assertAxesAreInnerMostDims("max", l, u);
  let [f, h] = S.computeOutAndReduceShapes(p, l), g = y.sizeFromShape(h), x = mf(d, g, f, n.dtype), b = i.write(x, f, n.dtype), C = f;
  return a && (C = S.expandShapeToKeepDim(f, c)), { dataId: b, shape: C, dtype: n.dtype };
}
var a_ = { kernelName: yn, backendName: "cpu", kernelFunc: ES };
function cX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e;
  K(n, "maxPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1;
  y.assert(S.eitherStridesOrDilationsAreOne(a, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = S.computePool2DInfo(n.shape, s, a, u, i, p), l;
  if (c.filterWidth === 1 && c.filterHeight === 1 && y.arraysEqual(c.inShape, c.outShape))
    l = ar({ inputs: { x: n }, backend: t6 });
  else {
    let m = t6.data.get(n.dataId).values, d = y.computeStrides(n.shape), f = Zp(m, n.shape, n.dtype, d, c, "max");
    l = t6.makeTensorInfo(c.outShape, n.dtype, f.values);
  }
  return l;
}
var i_ = { kernelName: Cn, backendName: "cpu", kernelFunc: cX };
function lX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { filterSize: s, strides: a, pad: i, dimRoundingMode: p, dataFormat: u } = o;
  K(n, "maxPool3d");
  let c = S.computePool3DInfo(n.shape, s, a, 1, i, p, u), l = t6.data.get(n.dataId).values, m = If(l, n.shape, n.dtype, y.computeStrides(n.shape), c, "max");
  return t6.makeTensorInfo(m.shape, "float32", m.values);
}
var u_ = { kernelName: bp, backendName: "cpu", kernelFunc: lX };
function mX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, input: s } = e, { filterSize: a, strides: i, pad: p, dimRoundingMode: u } = o;
  K([n, s], "maxPool3DGrad");
  let c = S.computePool3DInfo(s.shape, a, i, 1, p, u), l = t6.bufferSync(s), m = o2(l, c), d = c.strideDepth, f = c.strideHeight, h = c.strideWidth, g = c.dilationDepth, x = c.dilationHeight, b = c.dilationWidth, C = c.effectiveFilterDepth, w = c.effectiveFilterHeight, k = c.effectiveFilterWidth, _ = C - 1 - c.padInfo.front, $ = k - 1 - c.padInfo.left, A = w - 1 - c.padInfo.top, R = le(s.shape, "float32"), D = t6.bufferSync(n);
  for (let P = 0; P < c.batchSize; ++P)
    for (let M = 0; M < c.inChannels; ++M)
      for (let L = 0; L < c.inDepth; ++L)
        for (let W = 0; W < c.inHeight; ++W)
          for (let V = 0; V < c.inWidth; ++V) {
            let U = L - _, q = W - A, H = V - $, j = 0;
            for (let X = 0; X < C; X += g) {
              let Z = (U + X) / d;
              if (!(Z < 0 || Z >= c.outDepth || Math.floor(Z) !== Z))
                for (let ee = 0; ee < w; ee += x) {
                  let Y = (q + ee) / f;
                  if (!(Y < 0 || Y >= c.outHeight || Math.floor(Y) !== Y))
                    for (let J = 0; J < k; J += b) {
                      let ie = (H + J) / h;
                      if (ie < 0 || ie >= c.outWidth || Math.floor(ie) !== ie)
                        continue;
                      let pe = C * w * k - 1 - m.get(P, Z, Y, ie, M), he = X * w * k + ee * k + J, we = pe === he ? 1 : 0;
                      if (we === 0)
                        continue;
                      let ve = D.get(P, Z, Y, ie, M);
                      j += ve * we;
                    }
                }
            }
            R.set(j, P, L, W, V, M);
          }
  return t6.makeTensorInfo(R.shape, R.dtype, R.values);
}
var p_ = { kernelName: _m, backendName: "cpu", kernelFunc: mX };
function dX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, input: s, output: a } = e, i = s;
  K([s, a], "maxPoolGrad");
  let { filterSize: p, strides: u, pad: c, dimRoundingMode: l } = o, m = S.computePool2DInfo(i.shape, p, u, 1, c, l), d = t6.data.get(i.dataId).values, f = le(m.outShape, i.dtype, wf(d, i.shape, i.dtype, m).values), h = m.strideHeight, g = m.strideWidth, x = m.dilationHeight, b = m.dilationWidth, C = m.effectiveFilterHeight, w = m.effectiveFilterWidth, k = w - 1 - m.padInfo.left, _ = C - 1 - m.padInfo.top, $ = le(i.shape, "float32"), A = t6.data.get(n.dataId).values, R = le(n.shape, "float32", A);
  for (let D = 0; D < m.batchSize; ++D)
    for (let P = 0; P < m.inChannels; ++P)
      for (let M = 0; M < m.inHeight; ++M)
        for (let L = 0; L < m.inWidth; ++L) {
          let W = M - _, V = L - k, U = 0;
          for (let q = 0; q < C; q += x) {
            let H = (W + q) / h;
            if (!(H < 0 || H >= m.outHeight || Math.floor(H) !== H))
              for (let j = 0; j < w; j += b) {
                let X = (V + j) / g;
                if (X < 0 || X >= m.outWidth || Math.floor(X) !== X)
                  continue;
                let Z = C * w - 1 - f.get(D, H, X, P), ee = q * w + j, Y = Z === ee ? 1 : 0;
                if (Y === 0)
                  continue;
                let J = R.get(D, H, X, P);
                U += J * Y;
              }
          }
          $.set(U, D, M, L, P);
        }
  return t6.makeTensorInfo($.shape, $.dtype, $.values);
}
var c_ = { kernelName: Tm, backendName: "cpu", kernelFunc: dX };
function l_(r, e, t6, o, n) {
  let s = y.computeStrides(e), a = Zp(r, e, t6, s, n, "max"), i = wf(r, e, t6, n, true, o);
  return [a.values, i.values];
}
var m_ = { kernelName: Cp, backendName: "cpu", kernelFunc: ({ inputs: r, attrs: e, backend: t6 }) => {
  let { x: o } = r, { filterSize: n, strides: s, pad: a, includeBatchInIndex: i } = e, p = t6;
  K(o, "MaxPoolWithArgmax");
  let u = p.data.get(o.dataId).values, c = S.computePool2DInfo(o.shape, n, s, [1, 1], a), [l, m] = l_(u, o.shape, o.dtype, i, c), d = p.write(l, c.outShape, o.dtype), f = p.write(m, c.outShape, o.dtype);
  return [{ dataId: d, shape: c.outShape, dtype: o.dtype }, { dataId: f, shape: c.outShape, dtype: "int32" }];
} };
function fX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o, i = y.parseAxisParam(s, n.shape), u = S.computeOutAndReduceShapes(n.shape, i)[1], c = y.sizeFromShape(u), l = [], m = t6.makeTensorInfo([], "float32", new Float32Array([c]));
  l.push(m);
  let d = Io({ inputs: { x: n }, backend: t6, attrs: { dtype: "float32" } });
  l.push(d);
  let f = hl({ inputs: { a: d, b: m }, backend: t6 });
  l.push(f);
  let h = La({ inputs: { x: f }, backend: t6, attrs: { axis: s, keepDims: a } });
  return l.forEach((g) => t6.disposeIntermediateTensorInfo(g)), h;
}
var d_ = { kernelName: Sn, backendName: "cpu", kernelFunc: fX };
function hX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o;
  K(n, "min");
  let i = y.parseAxisParam(s, n.shape), p = i, u = S.getAxesPermutation(p, n.shape.length), c = n;
  u != null && (c = Ct({ inputs: { x: n }, backend: t6, attrs: { perm: u } }), p = S.getInnerMostAxes(p.length, n.shape.length)), S.assertAxesAreInnerMostDims("min", p, c.shape.length);
  let [l, m] = S.computeOutAndReduceShapes(c.shape, p), d = y.sizeFromShape(m), f = y.makeZerosTypedArray(y.sizeFromShape(l), c.dtype), h = t6.data.get(c.dataId).values;
  for (let x = 0; x < f.length; ++x) {
    let b = x * d, C = h[b];
    for (let w = 0; w < d; ++w) {
      let k = h[b + w];
      (Number.isNaN(k) || k < C) && (C = k);
    }
    f[x] = C;
  }
  u != null && t6.disposeIntermediateTensorInfo(c);
  let g = t6.makeTensorInfo(l, c.dtype, f);
  if (a) {
    let x = S.expandShapeToKeepDim(l, i), b = Me({ inputs: { x: g }, backend: t6, attrs: { shape: x } });
    return t6.disposeIntermediateTensorInfo(g), b;
  }
  return g;
}
var f_ = { kernelName: wn, backendName: "cpu", kernelFunc: hX };
function gX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { paddings: s, mode: a } = o;
  K(n, "mirrorPad");
  let i = s.map((C, w) => C[0] + n.shape[w] + C[1]), p = s.map((C) => C[0]), u = s.map((C, w) => C[0] + n.shape[w]), c = a === "reflect" ? 0 : 1, l = t6.data.get(n.dataId).values, m = n.shape.length, d = y.computeStrides(n.shape), f = y.sizeFromShape(i), h = i.length, g = y.computeStrides(i), x = y.getTypedArrayFromDType(n.dtype, f);
  for (let C = 0; C < f; C++) {
    let w = y.indexToLoc(C, h, g);
    for (let _ = 0; _ < h; _++)
      w[_] < p[_] ? w[_] = p[_] * 2 - w[_] - c : w[_] >= u[_] && (w[_] = (u[_] - 1) * 2 - w[_] + c);
    w = w.map((_, $) => _ - p[$]);
    let k = y.locToIndex(w, m, d);
    x[C] = l[k];
  }
  return { dataId: t6.write(x, i, n.dtype), shape: i, dtype: n.dtype };
}
var h_ = { kernelName: vn, backendName: "cpu", kernelFunc: gX };
var xX = Be((r, e) => {
  let t6 = r % e;
  return r < 0 && e < 0 || r >= 0 && e >= 0 ? t6 : (t6 + e) % e;
});
var yX = Qe(ya, xX);
var g_ = { kernelName: ya, backendName: "cpu", kernelFunc: yX };
var y_ = rp(gC());
function $S(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { logits: n } = e, { dim: s } = o, a = n.shape.length, i = s;
  if (i === -1 && (i = a - 1), i !== a - 1)
    throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${a} and dim was ${i}`);
  let p = y.parseAxisParam([i], n.shape), u = ES({ inputs: { x: n }, backend: t6, attrs: { reductionIndices: p, keepDims: false } }), c = S.expandShapeToKeepDim(u.shape, p), l = Me({ inputs: { x: u }, backend: t6, attrs: { shape: c } }), m = dl({ inputs: { a: n, b: l }, backend: t6 }), d = rS({ inputs: { x: m }, backend: t6 }), f = La({ inputs: { x: d }, backend: t6, attrs: { axis: p, keepDims: false } }), h = Me({ inputs: { x: f }, backend: t6, attrs: { shape: c } }), g = hl({ inputs: { a: d, b: h }, backend: t6 });
  return t6.disposeIntermediateTensorInfo(u), t6.disposeIntermediateTensorInfo(l), t6.disposeIntermediateTensorInfo(m), t6.disposeIntermediateTensorInfo(d), t6.disposeIntermediateTensorInfo(f), t6.disposeIntermediateTensorInfo(h), g;
}
var x_ = { kernelName: qn, backendName: "cpu", kernelFunc: $S };
function bX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { logits: n } = e, { numSamples: s, seed: a, normalized: i } = o;
  K(n, "multinomial");
  let p = i ? n : $S({ inputs: { logits: n }, backend: t6, attrs: { dim: -1 } }), u = p.shape[0], c = p.shape[1], l = t6.data.get(p.dataId).values, m = [u, s], d = y.makeZerosTypedArray(y.sizeFromShape(m), "int32");
  for (let f = 0; f < u; ++f) {
    let h = f * c, g = new Float32Array(c - 1);
    g[0] = l[h];
    for (let C = 1; C < g.length; ++C)
      g[C] = g[C - 1] + l[h + C];
    let x = y_.alea(a.toString()), b = f * s;
    for (let C = 0; C < s; ++C) {
      let w = x();
      d[b + C] = g.length;
      for (let k = 0; k < g.length; k++)
        if (w < g[k]) {
          d[b + C] = k;
          break;
        }
    }
  }
  return i || t6.disposeIntermediateTensorInfo(p), t6.makeTensorInfo(m, "int32", d);
}
var b_ = { kernelName: Sp, backendName: "cpu", kernelFunc: bX };
var CX = Lt.nonMaxSuppressionV3Impl;
function SX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { boxes: n, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p } = o;
  K(n, "NonMaxSuppression");
  let u = t6.data.get(n.dataId).values, c = t6.data.get(s.dataId).values, { selectedIndices: l } = CX(u, c, a, i, p);
  return t6.makeTensorInfo([l.length], "int32", new Int32Array(l));
}
var C_ = { kernelName: Tn, backendName: "cpu", kernelFunc: SX };
var wX = Lt.nonMaxSuppressionV4Impl;
function IX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { boxes: n, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p, padToMaxOutputSize: u } = o;
  K(n, "NonMaxSuppressionPadded");
  let c = t6.data.get(n.dataId).values, l = t6.data.get(s.dataId).values, { selectedIndices: m, validOutputs: d } = wX(c, l, a, i, p, u);
  return [t6.makeTensorInfo([m.length], "int32", new Int32Array(m)), t6.makeTensorInfo([], "int32", new Int32Array([d]))];
}
var S_ = { kernelName: ba, backendName: "cpu", kernelFunc: IX };
var vX = Lt.nonMaxSuppressionV5Impl;
function kX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { boxes: n, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p, softNmsSigma: u } = o;
  K(n, "NonMaxSuppressionWithScore");
  let c = t6.data.get(n.dataId).values, l = t6.data.get(s.dataId).values, m = a, d = i, f = p, h = u, { selectedIndices: g, selectedScores: x } = vX(c, l, m, d, f, h);
  return [t6.makeTensorInfo([g.length], "int32", new Int32Array(g)), t6.makeTensorInfo([x.length], "float32", new Float32Array(x))];
}
var w_ = { kernelName: _n, backendName: "cpu", kernelFunc: kX };
function NX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { indices: n } = e, { dtype: s, depth: a, onValue: i, offValue: p } = o;
  K(n, "oneHot");
  let u = y.sizeFromShape(n.shape), c = new Float32Array(u * a);
  c.fill(p);
  let l = t6.data.get(n.dataId).values;
  for (let m = 0; m < u; ++m)
    l[m] >= 0 && l[m] < a && (c[m * a + l[m]] = i);
  return t6.makeTensorInfo([...n.shape, a], s, c);
}
var I_ = { kernelName: En, backendName: "cpu", kernelFunc: NX };
function yl(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  if (o.dtype === "string")
    throw new Error("zerosLike is not supported for string tensors");
  if (o.dtype === "complex64") {
    let n = wo({ inputs: { input: o }, backend: t6 }), s = yl({ inputs: { x: n }, backend: t6 }), a = Xs({ inputs: { input: o }, backend: t6 }), i = yl({ inputs: { x: a }, backend: t6 }), p = Ht({ inputs: { real: s, imag: i }, backend: t6 });
    return t6.disposeIntermediateTensorInfo(n), t6.disposeIntermediateTensorInfo(s), t6.disposeIntermediateTensorInfo(a), t6.disposeIntermediateTensorInfo(i), p;
  } else
    return xl({ backend: t6, attrs: { shape: o.shape, value: 0, dtype: o.dtype } });
}
var v_ = { kernelName: Fs, backendName: "cpu", kernelFunc: yl };
function k_(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  if (o.dtype === "string")
    throw new Error("onesLike is not supported for string tensors");
  if (o.dtype === "complex64") {
    let n = wo({ inputs: { input: o }, backend: t6 }), s = k_({ inputs: { x: n }, backend: t6 }), a = Xs({ inputs: { input: o }, backend: t6 }), i = yl({ inputs: { x: a }, backend: t6 }), p = Ht({ inputs: { real: s, imag: i }, backend: t6 });
    return t6.disposeIntermediateTensorInfo(n), t6.disposeIntermediateTensorInfo(s), t6.disposeIntermediateTensorInfo(a), t6.disposeIntermediateTensorInfo(i), p;
  } else
    return xl({ backend: t6, attrs: { shape: o.shape, value: 1, dtype: o.dtype } });
}
var N_ = { kernelName: Is, backendName: "cpu", kernelFunc: k_ };
function AS(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { axis: n } = o;
  if (e.length === 1)
    return Jp({ inputs: { input: e[0] }, backend: t6, attrs: { dim: n } });
  let s = e[0].shape, a = e[0].dtype;
  e.forEach((c) => {
    y.assertShapesMatch(s, c.shape, "All tensors passed to stack must have matching shapes"), y.assert(a === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let i = [], p = e.map((c) => {
    let l = Jp({ inputs: { input: c }, backend: t6, attrs: { dim: n } });
    return i.push(l), l;
  }), u = Pi({ inputs: p, backend: t6, attrs: { axis: n } });
  return i.forEach((c) => t6.disposeIntermediateTensorInfo(c)), u;
}
var T_ = { kernelName: vs, backendName: "cpu", kernelFunc: AS };
function TX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { paddings: s, constantValue: a } = o;
  K(n, "pad");
  let i = s.map((b, C) => b[0] + n.shape[C] + b[1]), p = s.map((b) => b[0]), u = t6.data.get(n.dataId).values, c = y.sizeFromShape(n.shape), l = n.shape.length, m = y.computeStrides(n.shape), d = y.sizeFromShape(i), f = i.length, h = y.computeStrides(i), g = y.getTypedArrayFromDType(n.dtype, d);
  a !== 0 && g.fill(a);
  for (let b = 0; b < c; b++) {
    let w = y.indexToLoc(b, l, m).map((_, $) => _ + p[$]), k = y.locToIndex(w, f, h);
    g[k] = u[b];
  }
  return { dataId: t6.write(g, i, n.dtype), shape: i, dtype: n.dtype };
}
var kf = { kernelName: $n, backendName: "cpu", kernelFunc: TX };
var _X = Be((r, e) => Math.pow(r, e));
var EX = Qe(An, _X);
var __ = { kernelName: An, backendName: "cpu", kernelFunc: EX };
function $X(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { paramsNestedSplits: n, paramsDenseValues: s, indices: a } = e, { outputRaggedRank: i } = o, p = n.map((x) => t6.data.get(x.dataId).values), u = n.map((x) => x.shape), c = t6.data.get(s.dataId).values, l = t6.data.get(a.dataId).values, [m, d, f] = df(p, u, c, s.shape, s.dtype, l, a.shape, i), h = m.map((x) => t6.makeTensorInfo([x.length], "int32", x)), g = t6.makeTensorInfo(f, s.dtype, d);
  return h.concat([g]);
}
var E_ = { kernelName: wp, backendName: "cpu", kernelFunc: $X };
function AX(r) {
  let { inputs: e, backend: t6 } = r, { starts: o, limits: n, deltas: s } = e, a = t6.data.get(o.dataId).values, i = t6.data.get(n.dataId).values, p = t6.data.get(s.dataId).values, [u, c] = ff(a, o.shape, o.dtype, i, n.shape, p, s.shape), l = t6.makeTensorInfo([u.length], "int32", u), m = t6.makeTensorInfo([c.length], o.dtype, c);
  return [l, m];
}
var $_ = { kernelName: Ip, backendName: "cpu", kernelFunc: AX };
function RX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { shape: n, values: s, defaultValue: a, rowPartitionTensors: i } = e, { rowPartitionTypes: p } = o, u = t6.data.get(n.dataId).values, c = t6.data.get(s.dataId).values, l = t6.data.get(a.dataId).values, m = i.map((g) => t6.data.get(g.dataId).values), d = i.map((g) => g.shape), [f, h] = hf(u, n.shape, c, s.shape, s.dtype, l, a.shape, m, d, p);
  return t6.makeTensorInfo(f, s.dtype, h);
}
var A_ = { kernelName: vp, backendName: "cpu", kernelFunc: RX };
function FX(r) {
  let { backend: e, attrs: t6 } = r, { start: o, stop: n, dtype: s, step: a } = t6, i = Iu(o, n, a, s);
  return e.makeTensorInfo([i.length], s, i);
}
var R_ = { kernelName: ks, backendName: "cpu", kernelFunc: FX };
var DX = Ie(Dn, (r) => 1 / r);
var F_ = { kernelName: Dn, backendName: "cpu", kernelFunc: DX };
function OX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { images: n } = e, { alignCorners: s, halfPixelCenters: a, size: i } = o;
  K(n, "resizeBilinear");
  let p = y.computeStrides(n.shape), [u, c] = i, [l, m, d, f] = n.shape, h = t6.data.get(n.dataId).values, g = new Float32Array(y.sizeFromShape([l, u, c, f])), x = [s && u > 1 ? m - 1 : m, s && c > 1 ? d - 1 : d], b = [s && u > 1 ? u - 1 : u, s && c > 1 ? c - 1 : c], C = 0, w = x[0] / b[0], k = x[1] / b[1];
  for (let _ = 0; _ < l; _++)
    for (let $ = 0; $ < u; $++) {
      let A;
      a ? A = w * ($ + 0.5) - 0.5 : A = w * $;
      let R = Math.max(0, Math.floor(A)), D = A - R, P = Math.min(m - 1, Math.ceil(A)), M = _ * p[0] + R * p[1], L = _ * p[0] + P * p[1];
      for (let W = 0; W < c; W++) {
        let V;
        a ? V = k * (W + 0.5) - 0.5 : V = k * W;
        let U = Math.max(0, Math.floor(V)), q = V - U, H = Math.min(d - 1, Math.ceil(V)), j = M + U * p[2], X = L + U * p[2], Z = M + H * p[2], ee = L + H * p[2];
        for (let Y = 0; Y < f; Y++) {
          let J = h[j + Y], ie = h[X + Y], pe = h[Z + Y], he = h[ee + Y], we = J + (pe - J) * q, ve = ie + (he - ie) * q, $e = we + (ve - we) * D;
          g[C++] = $e;
        }
      }
    }
  return t6.makeTensorInfo([l, u, c, f], "float32", g);
}
var D_ = { kernelName: Mn, backendName: "cpu", kernelFunc: OX };
function PX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { images: n, dy: s } = e, { alignCorners: a } = o;
  K([s, n], "resizeBilinearGrad");
  let i = y.computeStrides(n.shape), [p, u, c, l] = n.shape, [, m, d] = s.shape, f = new Float32Array(p * u * c * l), h = [a && m > 1 ? u - 1 : u, a && d > 1 ? c - 1 : c], g = [a && m > 1 ? m - 1 : m, a && d > 1 ? d - 1 : d], x = h[0] / g[0], b = h[1] / g[1], C = t6.data.get(s.dataId).values, w = 0;
  for (let k = 0; k < p; k++) {
    let _ = k * i[0];
    for (let $ = 0; $ < m; $++) {
      let A = $ * x, R = Math.floor(A), D = Math.min(Math.ceil(A), u - 1), P = _ + R * i[1], M = _ + D * i[1], L = A - R, W = 1 - L;
      for (let V = 0; V < d; V++) {
        let U = V * b, q = Math.floor(U), H = Math.min(Math.ceil(U), c - 1), j = U - q, X = 1 - j, Z = P + q * i[2], ee = P + H * i[2], Y = M + q * i[2], J = M + H * i[2], ie = W * X, pe = W * j, he = L * X, we = L * j;
        for (let ve = 0; ve < l; ve++) {
          let $e = C[w++];
          f[Z + ve] += $e * ie, f[ee + ve] += $e * pe, f[Y + ve] += $e * he, f[J + ve] += $e * we;
        }
      }
    }
  }
  return t6.makeTensorInfo([p, c, u, l], "float32", f);
}
var O_ = { kernelName: $m, backendName: "cpu", kernelFunc: PX };
function MX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { images: n } = e, { alignCorners: s, halfPixelCenters: a, size: i } = o;
  K(n, "resizeNearestNeighbor");
  let p = y.computeStrides(n.shape), [u, c] = i, [l, m, d, f] = n.shape, h = t6.data.get(n.dataId).values, g = new Float32Array(l * u * c * f), x = [s && u > 1 ? m - 1 : m, s && c > 1 ? d - 1 : d], b = [s && u > 1 ? u - 1 : u, s && c > 1 ? c - 1 : c], C = x[0] / b[0], w = x[1] / b[1], k = 0;
  for (let _ = 0; _ < l; _++) {
    let $ = _ * p[0];
    for (let A = 0; A < u; A++) {
      let R = a ? C * (A + 0.5) : C * A, D = Math.min(m - 1, s ? Math.round(R) : Math.floor(R));
      a && (D = Math.max(0, D));
      let P = $ + D * p[1];
      for (let M = 0; M < c; M++) {
        let L = a ? w * (M + 0.5) : w * M, W = Math.min(d - 1, s ? Math.round(L) : Math.floor(L));
        a && (W = Math.max(0, W));
        let V = P + W * p[2];
        for (let U = 0; U < f; U++) {
          let q = h[V + U];
          g[k++] = q;
        }
      }
    }
  }
  return t6.makeTensorInfo([l, u, c, f], n.dtype, g);
}
var P_ = { kernelName: Pn, backendName: "cpu", kernelFunc: MX };
function LX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { images: n, dy: s } = e, { alignCorners: a } = o;
  K([s, n], "resizeNearestNeighborGrad");
  let i = y.computeStrides(n.shape), p = y.computeStrides(s.shape), [u, c, l, m] = n.shape, [, d, f] = s.shape, h = new Float32Array(u * c * l * m), g = t6.data.get(s.dataId).values, x = [a && d > 1 ? c - 1 : c, a && f > 1 ? l - 1 : l], b = [a && d > 1 ? d - 1 : d, a && f > 1 ? f - 1 : f], C = x[0] / b[0], w = x[1] / b[1], k = 1 / C, _ = 1 / w, $ = Math.ceil(k) * 2 + 2, A = Math.ceil(_) * 2 + 2;
  for (let R = 0; R < u; R++) {
    let D = R * i[0];
    for (let P = 0; P < c; P++) {
      let M = D + P * i[1], L = Math.floor(P * k), W = Math.floor(L - $ / 2);
      for (let V = 0; V < l; V++) {
        let U = M + V * i[2], q = Math.floor(V * _), H = Math.floor(q - A / 2);
        for (let j = 0; j < m; j++) {
          let X = 0;
          for (let Z = 0; Z < $; Z++) {
            let ee = Z + W;
            if (ee < 0 || ee >= d)
              continue;
            let Y = D + ee * p[1], J = ee * C, ie = Math.min(c - 1, a ? Math.round(J) : Math.floor(J));
            if (P === ie)
              for (let pe = 0; pe < A; pe++) {
                let he = pe + H;
                if (he < 0 || he >= f)
                  continue;
                let we = Y + he * p[2], ve = he * w, $e = Math.min(l - 1, a ? Math.round(ve) : Math.floor(ve));
                V === $e && (X += g[we + j]);
              }
          }
          h[U + j] = X;
        }
      }
    }
  }
  return t6.makeTensorInfo(n.shape, n.dtype, h);
}
var M_ = { kernelName: Em, backendName: "cpu", kernelFunc: LX };
function BX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { dims: s } = o;
  K(n, "reverse");
  let a = n.shape.length, i = y.parseAxisParam(s, n.shape);
  if (a === 0)
    return ar({ inputs: { x: n }, backend: t6 });
  let p = new st(n.shape, n.dtype), u = t6.bufferSync(n);
  for (let c = 0; c < p.size; c++) {
    let l = p.indexToLoc(c), m = l.slice();
    i.forEach((d) => m[d] = n.shape[d] - 1 - m[d]), p.set(u.get(...m), ...l);
  }
  return t6.makeTensorInfo(p.shape, p.dtype, p.values);
}
var L_ = { kernelName: Bn, backendName: "cpu", kernelFunc: BX };
var B_ = { kernelName: es, backendName: "cpu", kernelFunc: ({ inputs: r, attrs: e, backend: t6 }) => {
  let { image: o } = r, { radians: n, fillValue: s, center: a } = e, i = t6, p = y.getTypedArrayFromDType(o.dtype, y.sizeFromShape(o.shape)), [u, c, l, m] = o.shape, [d, f] = S.getImageCenter(a, c, l), h = 255, g = Math.sin(n), x = Math.cos(n), b = i.data.get(o.dataId).values;
  for (let w = 0; w < u; w++) {
    let k = w * l * c * m;
    for (let _ = 0; _ < c; _++) {
      let $ = _ * (l * m);
      for (let A = 0; A < l; A++) {
        let R = A * m;
        for (let D = 0; D < m; D++) {
          let P = [u, _, A, D], M = P[2], L = P[1], W = (M - d) * x - (L - f) * g, V = (M - d) * g + (L - f) * x;
          W = Math.round(W + d), V = Math.round(V + f);
          let U = s;
          if (typeof s != "number" && (D === 3 ? U = h : U = s[D]), W >= 0 && W < l && V >= 0 && V < c) {
            let H = V * (l * m), j = W * m, X = k + H + j + D;
            U = b[X];
          }
          let q = k + $ + R + D;
          p[q] = U;
        }
      }
    }
  }
  return { dataId: i.write(p, o.shape, o.dtype), shape: o.shape, dtype: o.dtype };
} };
var VX = Ie(Ca, (r) => {
  let e = Math.floor(r);
  return r - e < 0.5 ? Math.floor(r) : r - e > 0.5 ? Math.ceil(r) : e % 2 === 0 ? e : e + 1;
});
var V_ = { kernelName: Ca, backendName: "cpu", kernelFunc: VX };
function zX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { indices: n, updates: s } = e, { shape: a } = o, { sliceRank: i, numUpdates: p, sliceSize: u, strides: c, outputSize: l } = S.calculateShapes(s, n, a), m = true, d = t6.bufferSync(n), f = t6.bufferSync(s), h = Ma(d, f, a, l, u, p, i, c, 0, m);
  return t6.makeTensorInfo(a, h.dtype, h.values);
}
var z_ = { kernelName: zn, backendName: "cpu", kernelFunc: zX };
function WX(r, e) {
  let t6 = 0, o = r.length, n = 0;
  for (; t6 < o; )
    n = Math.floor((t6 + o) / 2), r[n] < e ? t6 = n + 1 : o = n;
  return o;
}
function UX(r, e) {
  let t6 = 0, o = r.length, n = 0;
  for (; t6 < o; )
    n = Math.floor((t6 + o) / 2), r[n] <= e ? t6 = n + 1 : o = n;
  return o;
}
function W_(r, e, t6, o, n, s) {
  let a = y.getArrayFromDType("int32", t6 * n);
  for (let i = 0; i < t6; ++i) {
    let p = r.slice(i * o, (i + 1) * o), u = i * n;
    for (let c = 0; c < n; ++c)
      a[u + c] = s === "left" ? WX(p, e[c + u]) : UX(p, e[c + u]);
  }
  return a;
}
function GX(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { sortedSequence: n, values: s } = e, { side: a } = o, i = t6.data.get(n.dataId).values, p = t6.data.get(s.dataId).values, u = W_(i, p, n.shape[0], n.shape[1], s.shape[1], a);
  return t6.makeTensorInfo(s.shape, "int32", u);
}
var U_ = { kernelName: ii, backendName: "cpu", kernelFunc: GX };
function HX(r) {
  let { inputs: e, backend: t6 } = r, { condition: o, t: n, e: s } = e;
  K([o, n, s], "select");
  let a = o.shape.length, i = t6.data.get(o.dataId).values, p = t6.data.get(n.dataId).values, u = t6.data.get(s.dataId).values, c = dt(n.dtype, s.dtype), l = y.makeZerosTypedArray(y.sizeFromShape(n.shape), c), m = 0, d = a === 0 || a > 1 || n.shape.length === 1 ? 1 : y.sizeFromShape(n.shape.slice(1));
  for (let f = 0; f < i.length; f++)
    for (let h = 0; h < d; h++)
      i[f] === 1 ? l[m++] = p[f] : l[m++] = u[f];
  return t6.makeTensorInfo(n.shape, c, l);
}
var G_ = { kernelName: Ts, backendName: "cpu", kernelFunc: HX };
var qX = S.SELU_SCALEALPHA;
var KX = S.SELU_SCALE;
var jX = Ie(Xi, (r) => r >= 0 ? KX * r : qX * (Math.exp(r) - 1));
var H_ = { kernelName: Xi, backendName: "cpu", kernelFunc: jX };
var XX = Ie(Yi, (r) => r < 0 ? -1 : r > 0 ? 1 : 0);
var q_ = { kernelName: Yi, backendName: "cpu", kernelFunc: XX };
var YX = Ie(Wn, (r) => Math.sin(r));
var K_ = { kernelName: Wn, backendName: "cpu", kernelFunc: YX };
var QX = Ie(Sa, (r) => Math.sinh(r));
var j_ = { kernelName: Sa, backendName: "cpu", kernelFunc: QX };
var ZX = 11920928955078125e-23;
var X_ = Math.log(ZX) + 2;
var JX = Ie(Qi, (r) => {
  let e = r > -X_, t6 = r < X_, o = Math.exp(r), n;
  return t6 ? n = o : e ? n = r : n = Math.log(1 + o), n;
});
var Y_ = { kernelName: Qi, backendName: "cpu", kernelFunc: JX };
function e5(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { blockShape: s, paddings: a } = o;
  K([n], "spaceToBatchND");
  let i = y.sizeFromShape(s), p = [[0, 0]];
  p.push(...a);
  for (let _ = 1 + s.length; _ < n.shape.length; ++_)
    p.push([0, 0]);
  let u = kf.kernelFunc({ inputs: { x: n }, backend: t6, attrs: { paddings: p, constantValue: 0 } }), c = S.getReshaped(u.shape, s, i, false), l = S.getPermuted(c.length, s.length, false), m = S.getReshapedPermuted(u.shape, s, i, false), h = Me({ inputs: { x: u }, backend: t6, attrs: { shape: c } }), b = Ct({ inputs: { x: h }, backend: t6, attrs: { perm: l } }), k = Me({ inputs: { x: b }, backend: t6, attrs: { shape: m } });
  return t6.disposeIntermediateTensorInfo(u), t6.disposeIntermediateTensorInfo(h), t6.disposeIntermediateTensorInfo(b), k;
}
var Q_ = { kernelName: Es, backendName: "cpu", kernelFunc: e5 };
function t5(r) {
  let { inputs: e, backend: t6 } = r, { indices: o, values: n, denseShape: s, defaultValue: a } = e;
  if (s.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
        ${s.shape}`);
  if (o.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
        ${o.shape}`);
  if (n.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
        ${n.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);
  let i = t6.data.get(o.dataId).values, p = t6.data.get(n.dataId).values, u = t6.data.get(s.dataId).values, c = t6.data.get(a.dataId).values[0], [l, m, d, f, h] = gf(i, o.shape, o.dtype, p, n.dtype, u, c);
  return [t6.makeTensorInfo(m, o.dtype, l), t6.makeTensorInfo([m[0]], n.dtype, d), t6.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))), t6.makeTensorInfo([h.length], o.dtype, new Int32Array(h))];
}
var Z_ = { kernelName: ui, backendName: "cpu", kernelFunc: t5 };
function r5(r) {
  let { inputs: e, backend: t6 } = r, { inputIndices: o, inputShape: n, newShape: s } = e;
  if (o.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);
  if (n.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${s.shape}`);
  let a = Array.from(t6.data.get(n.dataId).values), i = t6.data.get(o.dataId).values, p = Array.from(t6.data.get(s.dataId).values), [u, c, l] = xf(i, o.shape, o.dtype, a, p);
  return [t6.makeTensorInfo(c, o.dtype, u), t6.makeTensorInfo([l.length], s.dtype, new Int32Array(l))];
}
var J_ = { kernelName: wa, backendName: "cpu", kernelFunc: r5 };
function o5(r) {
  let { inputs: e, backend: t6 } = r, { data: o, indices: n, segmentIds: s } = e;
  if (o.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
          ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
          ${s.shape}`);
  if (n.shape[0] !== s.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  let a = t6.data.get(o.dataId).values, i = t6.data.get(n.dataId).values, p = t6.data.get(s.dataId).values, [u, c] = Yp(a, o.shape, o.dtype, i, p, true);
  return t6.makeTensorInfo(c, o.dtype, u);
}
var eE = { kernelName: pi, backendName: "cpu", kernelFunc: o5 };
function n5(r) {
  let { inputs: e, backend: t6 } = r, { data: o, indices: n, segmentIds: s } = e;
  if (o.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
         ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
         ${s.shape}`);
  if (n.shape[0] !== s.shape[0])
    throw new Error("segmentIds and indices should have same size.");
  let a = t6.data.get(o.dataId).values, i = t6.data.get(n.dataId).values, p = t6.data.get(s.dataId).values, [u, c] = Yp(a, o.shape, o.dtype, i, p);
  return t6.makeTensorInfo(c, o.dtype, u);
}
var tE = { kernelName: ci, backendName: "cpu", kernelFunc: n5 };
function s5(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { sparseIndices: n, sparseValues: s, defaultValue: a } = e, { outputShape: i } = o, { sliceRank: p, numUpdates: u, sliceSize: c, strides: l, outputSize: m } = S.calculateShapes(s, n, i), d = false, f = t6.bufferSync(n), h;
  switch (s.dtype) {
    case "bool": {
      let g = t6.bufferSync(s), x = Boolean(t6.data.get(a.dataId).values[0]);
      h = Ma(f, g, i, m, c, u, p, l, x, d);
      break;
    }
    case "float32": {
      let g = t6.bufferSync(s), x = t6.data.get(a.dataId).values[0];
      h = Ma(f, g, i, m, c, u, p, l, x, d);
      break;
    }
    case "int32": {
      let g = t6.bufferSync(s), x = t6.data.get(a.dataId).values[0];
      h = Ma(f, g, i, m, c, u, p, l, x, d);
      break;
    }
    case "string": {
      let g = t6.bufferSync(s), x = y.decodeString(t6.data.get(a.dataId).values[0]);
      h = Ma(f, g, i, m, c, u, p, l, x, d);
      break;
    }
    default:
      throw new Error(`Unsupported type ${s.dtype}`);
  }
  return t6.makeTensorInfo(i, h.dtype, h.values);
}
var rE = { kernelName: li, backendName: "cpu", kernelFunc: s5 };
function a5(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { numOrSizeSplits: s, axis: a } = o, i = y.parseAxisParam(a, n.shape)[0], p = S.prepareSplitSize(n, s, i), u = new Array(n.shape.length).fill(0), c = n.shape.slice();
  return p.map((l) => {
    let m = [...c];
    m[i] = l;
    let d = No({ inputs: { x: n }, backend: t6, attrs: { begin: u, size: m } });
    return u[i] += l, d;
  });
}
var oE = { kernelName: $s, backendName: "cpu", kernelFunc: a5 };
var nE = { kernelName: mi, backendName: "cpu", kernelFunc: ({ inputs: r, backend: e }) => {
  let { x: t6 } = r, o = e;
  K(t6, "square");
  let n = o.data.get(t6.dataId).values, s = new Float32Array(n.length);
  for (let i = 0; i < n.length; ++i) {
    let p = n[i];
    s[i] = p * p;
  }
  return { dataId: o.write(s, t6.shape, t6.dtype), shape: t6.shape, dtype: t6.dtype };
} };
var i5 = Ie(Ds, (r, e) => {
  let t6 = e;
  return isNaN(r) ? NaN : r > 0 ? 1 : t6.alpha;
});
var sE = { kernelName: Ds, backendName: "cpu", kernelFunc: i5 };
function u5(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { begin: s, end: a, strides: i, beginMask: p, endMask: u, ellipsisMask: c, newAxisMask: l, shrinkAxisMask: m } = o;
  K(n, "stridedSlice");
  let { finalShapeSparse: d, finalShape: f, isIdentity: h, sliceDim0: g, isSimpleSlice: x, begin: b, end: C, strides: w } = ut.sliceInfo(n.shape, s, a, i, p, u, c, l, m), k;
  if (h)
    k = Me({ inputs: { x: n }, backend: t6, attrs: { shape: f } });
  else if (g || x) {
    y.assert(n.shape.length >= 1, () => `Input must have rank at least 1, got: ${n.shape.length}`);
    let _ = ut.computeOutShape(b, C, w), $ = No({ inputs: { x: n }, backend: t6, attrs: { begin: b, size: _ } });
    k = Me({ inputs: { x: $ }, backend: t6, attrs: { shape: f } }), t6.disposeIntermediateTensorInfo($);
  } else {
    let _ = t6.bufferSync(n), $ = yf(d, _, w, b);
    k = t6.makeTensorInfo(f, $.dtype, $.values);
  }
  return k;
}
var aE = { kernelName: jn, backendName: "cpu", kernelFunc: u5 };
function p5(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { separator: n, nGramWidths: s, leftPad: a, rightPad: i, padWidth: p, preserveShortSequences: u } = o, { data: c, dataSplits: l } = e, m = t6.data.get(c.dataId).values, d = t6.data.get(l.dataId).values, [f, h] = ku(m, d, n, s, a, i, p, u);
  return [t6.makeTensorInfo([f.length], "string", f), t6.makeTensorInfo(l.shape, "int32", h)];
}
var iE = { kernelName: As, backendName: "cpu", kernelFunc: p5 };
function c5(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { skipEmpty: n } = o, { input: s, delimiter: a } = e;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (s.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${s.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);
  let i = t6.data.get(s.dataId).values, p = t6.data.get(a.dataId).values[0], [u, c, l] = Nu(i, p, n), m = c.length;
  return [t6.makeTensorInfo([m, 2], "int32", u), t6.makeTensorInfo([m], "string", c), t6.makeTensorInfo([2], "int32", new Int32Array(l))];
}
var uE = { kernelName: di, backendName: "cpu", kernelFunc: c5 };
function l5(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { numBuckets: n } = o, { input: s } = e;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (n <= 0)
    throw new Error("Number of buckets must be at least 1");
  let a = t6.data.get(s.dataId).values, i = Tu(a, n);
  return t6.makeTensorInfo(s.shape, "int32", i);
}
var pE = { kernelName: fi, backendName: "cpu", kernelFunc: l5 };
var m5 = Ie(Yn, (r) => Math.tan(r));
var cE = { kernelName: Yn, backendName: "cpu", kernelFunc: m5 };
var d5 = Ie(Qn, (r) => Math.tanh(r));
var lE = { kernelName: Qn, backendName: "cpu", kernelFunc: d5 };
function f5(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { reps: s } = o;
  K(n, "tile");
  let a = bf(t6.bufferSync(n), s);
  return t6.makeTensorInfo(a.shape, a.dtype, a.values);
}
var mE = { kernelName: to, backendName: "cpu", kernelFunc: f5 };
function h5(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { k: s, sorted: a } = o;
  K(n, "topk");
  let i = t6.data.get(n.dataId).values, [p, u] = Cf(i, n.shape, n.dtype, s, a);
  return [t6.makeTensorInfo(p.shape, p.dtype, p.values), t6.makeTensorInfo(u.shape, u.dtype, u.values)];
}
var dE = { kernelName: Zn, backendName: "cpu", kernelFunc: h5 };
function g5(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { image: n, transforms: s } = e, { interpolation: a, fillMode: i, fillValue: p, outputShape: u } = t6, [c, l, m, d] = n.shape, [f, h] = u != null ? u : [l, m], g = [c, f, h, d], x = y.computeStrides(n.shape), b = x[0], C = x[1], w = x[2], k = y.computeStrides(g), _ = k[0], $ = k[1], A = k[2], R = y.getTypedArrayFromDType(n.dtype, y.sizeFromShape(g));
  R.fill(p);
  let D = o.data.get(n.dataId).values, P = o.data.get(s.dataId).values;
  for (let L = 0; L < c; ++L) {
    let W = s.shape[0] === 1 ? P : P.subarray(L * 8, L * 8 + 8);
    for (let V = 0; V < f; ++V)
      for (let U = 0; U < h; ++U)
        for (let q = 0; q < d; ++q) {
          let H, j = W[6] * U + W[7] * V + 1;
          if (j === 0)
            continue;
          let X = (W[0] * U + W[1] * V + W[2]) / j, Z = (W[3] * U + W[4] * V + W[5]) / j, ee = fE(X, m, i), Y = fE(Z, l, i);
          switch (a) {
            case "nearest":
              H = S5(D, l, m, b, C, w, L, Y, ee, q, p);
              break;
            case "bilinear":
              H = w5(D, l, m, b, C, w, L, Y, ee, q, p);
              break;
            default:
              throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${a}`);
          }
          let J = L * _ + V * $ + U * A + q;
          R[J] = H;
        }
    return o.makeTensorInfo(g, n.dtype, R);
  }
  return { dataId: o.write(R, g, n.dtype), shape: n.shape, dtype: n.dtype };
}
var hE = { kernelName: Jn, backendName: "cpu", kernelFunc: g5 };
function fE(r, e, t6) {
  switch (t6) {
    case "reflect":
      return x5(r, e);
    case "wrap":
      return y5(r, e);
    case "nearest":
      return C5(r, e);
    case "constant":
    default:
      return b5(r, e);
  }
}
function x5(r, e) {
  let t6 = r;
  if (t6 < 0)
    if (e <= 1)
      t6 = 0;
    else {
      let o = 2 * e;
      t6 < o && (t6 = o * Math.trunc(-t6 / o) + t6), t6 = t6 < -e ? t6 + o : -t6 - 1;
    }
  else if (t6 > e - 1)
    if (e <= 1)
      t6 = 0;
    else {
      let o = 2 * e;
      t6 -= o * Math.trunc(t6 / o), t6 >= e && (t6 = o - t6 - 1);
    }
  return y.clamp(0, t6, e - 1);
}
function y5(r, e) {
  let t6 = r;
  if (t6 < 0)
    if (e <= 1)
      t6 = 0;
    else {
      let o = e - 1;
      t6 += e * (Math.trunc(-t6 / o) + 1);
    }
  else if (t6 > e - 1)
    if (e <= 1)
      t6 = 0;
    else {
      let o = e - 1;
      t6 -= e * Math.trunc(t6 / o);
    }
  return y.clamp(0, t6, e - 1);
}
function b5(r, e) {
  return r;
}
function C5(r, e) {
  return y.clamp(0, r, e - 1);
}
function bl(r, e, t6, o, n, s, a, i, p, u, c) {
  let l = a * o + i * n + p * s + u;
  return 0 <= i && i < e && 0 <= p && p < t6 ? r[l] : c;
}
function S5(r, e, t6, o, n, s, a, i, p, u, c) {
  let l = Math.round(i), m = Math.round(p);
  return bl(r, e, t6, o, n, s, a, l, m, u, c);
}
function w5(r, e, t6, o, n, s, a, i, p, u, c) {
  let l = Math.floor(i), m = Math.floor(p), d = l + 1, f = m + 1, h = (f - p) * bl(r, e, t6, o, n, s, a, l, m, u, c) + (p - m) * bl(r, e, t6, o, n, s, a, l, f, u, c), g = (f - p) * bl(r, e, t6, o, n, s, a, d, m, u, c) + (p - m) * bl(r, e, t6, o, n, s, a, d, f, u, c);
  return (d - i) * h + (i - l) * g;
}
function I5(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { axis: n } = t6, { x: s } = e;
  K(s, "unique");
  let a = o.data.get(s.dataId).values, { outputValues: i, outputShape: p, indices: u } = Sf(a, n, s.shape, s.dtype);
  return [o.makeTensorInfo(p, s.dtype, i), o.makeTensorInfo([u.length], "int32", u)];
}
var gE = { kernelName: kp, backendName: "cpu", kernelFunc: I5 };
function v5(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { value: n } = e, { axis: s } = o;
  s < 0 && (s += n.shape.length);
  let a = n.shape.length, i = n.shape[s], p = new Array(a - 1), u = 0;
  for (let d = 0; d < a; d++)
    d !== s && (p[u++] = n.shape[d]);
  let c = new Array(a).fill(0), l = n.shape.slice();
  l[s] = 1;
  let m = new Array(i);
  for (let d = 0; d < m.length; d++) {
    c[s] = d;
    let f = No({ inputs: { x: n }, backend: t6, attrs: { begin: c, size: l } });
    m[d] = Me({ inputs: { x: f }, backend: t6, attrs: { shape: p } }), t6.disposeIntermediateTensorInfo(f);
  }
  return m;
}
var xE = { kernelName: Rs, backendName: "cpu", kernelFunc: v5 };
function k5(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, segmentIds: s } = e, { numSegments: a } = o;
  K(n, "unsortedSegmentSum");
  let i = n.shape.length, p = s.shape.length, u = [], c = [], l = i - p, m = s;
  for (let f = 0; f < l; ++f) {
    let h = Jp({ inputs: { input: m }, backend: t6, attrs: { dim: f + 1 } });
    m = h, c.push(h);
  }
  for (let f = 0; f < a; ++f) {
    let h = y.createScalarValue(f, "int32"), g = t6.makeTensorInfo([], "int32", h), x = eS({ inputs: { a: g, b: m }, backend: t6 }), b = Io({ inputs: { x }, backend: t6, attrs: { dtype: "float32" } }), C = wu({ inputs: { a: b, b: n }, backend: t6 }), w = La({ inputs: { x: C }, backend: t6, attrs: { axis: 0, keepDims: false } });
    u.push(w), c.push(g), c.push(x), c.push(b), c.push(C), c.push(w);
  }
  let d = AS({ inputs: u, backend: t6, attrs: { axis: 0 } });
  return c.forEach((f) => t6.disposeIntermediateTensorInfo(f)), d;
}
var yE = { kernelName: Np, backendName: "cpu", kernelFunc: k5 };
var N5 = [GT, tT, HT, qT, aT, KT, jT, XT, YT, QT, ZT, JT, e2, t2, r2, n2, s2, a2, i2, UT, u2, p2, c2, l2, sT, iT, m2, rT, d2, h2, g2, x2, y2, b2, C2, S2, w2, I2, v2, k2, N2, T2, _2, E2, $2, A2, R2, F2, D2, O2, M2, MT, L2, uT, B2, pT, V2, cT, z2, W2, U2, lT, G2, H2, q2, K2, j2, mT, dT, oT, X2, f2, Y2, Q2, Z2, LT, fT, hT, J2, gT, e_, t_, r_, o_, n_, s_, a_, xT, i_, u_, p_, c_, m_, d_, f_, yT, h_, g_, b_, bT, CT, C_, S_, w_, ST, I_, N_, T_, kf, __, BT, IT, E_, $_, A_, R_, nT, gl, F_, VT, zT, WT, D_, O_, P_, M_, L_, B_, V_, _T, z_, U_, G_, H_, $T, q_, K_, j_, AT, x_, Y_, Q_, Z_, J_, eE, tE, rE, oE, FT, nE, DT, sE, aE, iE, uE, pE, OT, P2, cE, lE, mE, dE, hE, wT, gE, xE, yE, v_];
for (let r of N5)
  Ia(r);
var oc = {};
Ue(oc, { assertNotComplex: () => is, bindCanvasToFramebuffer: () => O5, bindColorTextureToFramebuffer: () => Il, bindTextureToProgramUniformSampler: () => KS, bindTextureUnit: () => wE, bindVertexBufferToProgramAttribute: () => Af, callAndCheck: () => ce, canBeRepresented: () => OS, createFragmentShader: () => MS, createFramebuffer: () => GS, createProgram: () => LS, createStaticIndexBuffer: () => zS, createStaticVertexBuffer: () => VS, createTexture: () => WS, createVertexShader: () => PS, getBatchDim: () => Va, getExtensionOrThrow: () => ec, getFramebufferErrorMessage: () => IE, getMaxTexturesInShader: () => YS, getNumChannels: () => F5, getProgramUniformLocation: () => qS, getProgramUniformLocationOrThrow: () => HS, getRowsCols: () => za, getShapeAs3D: () => rc, getTextureShapeFromLogicalShape: () => jS, getWebGLDisjointQueryTimerVersion: () => QS, getWebGLErrorMessage: () => SE, getWebGLMaxTextureSize: () => XS, hasExtension: () => Ur, isCapableOfRenderingToFloatTexture: () => ZS, isDownloadFloatTextureEnabled: () => JS, isReshapeFree: () => Li, isWebGLFenceEnabled: () => ew, isWebGLVersionEnabled: () => Ff, linkProgram: () => BS, logShaderSourceAndInfoLog: () => $f, resetMaxTextureSize: () => P5, resetMaxTexturesInShader: () => M5, unbindColorTextureFromFramebuffer: () => Rf, unbindTextureUnit: () => D5, validateFramebuffer: () => tc, validateProgram: () => wl, validateTextureSize: () => US });
var Eu = {};
var Nf = { alpha: false, antialias: false, premultipliedAlpha: false, preserveDrawingBuffer: false, depth: false, stencil: false, failIfMajorPerformanceCaveat: true };
function RS(r, e) {
  Eu[r] = e;
}
function Wr(r, e) {
  if (!(r in Eu) || e != null) {
    let o = _5(r, e);
    if (o !== null)
      Eu[r] = o;
    else
      return console.log("Could not get context for WebGL version", r), null;
  }
  let t6 = Eu[r];
  return t6 == null || t6.isContextLost() ? (delete Eu[r], Wr(r)) : (t6.disable(t6.DEPTH_TEST), t6.disable(t6.STENCIL_TEST), t6.disable(t6.BLEND), t6.disable(t6.DITHER), t6.disable(t6.POLYGON_OFFSET_FILL), t6.disable(t6.SAMPLE_COVERAGE), t6.enable(t6.SCISSOR_TEST), t6.enable(t6.CULL_FACE), t6.cullFace(t6.BACK), Eu[r]);
}
function T5(r) {
  if (typeof OffscreenCanvas != "undefined" && r === 2)
    return new OffscreenCanvas(300, 150);
  if (typeof document != "undefined")
    return document.createElement("canvas");
  throw new Error("Cannot create a canvas in this context");
}
function _5(r, e) {
  if (r !== 1 && r !== 2)
    throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");
  let t6 = e == null ? T5(r) : e;
  return t6.addEventListener("webglcontextlost", (o) => {
    o.preventDefault(), delete Eu[r];
  }, false), O().getBool("SOFTWARE_WEBGL_ENABLED") && (Nf.failIfMajorPerformanceCaveat = false), r === 1 ? t6.getContext("webgl", Nf) || t6.getContext("experimental-webgl", Nf) : t6.getContext("webgl2", Nf);
}
var Mi;
(function(r) {
  r[r.DENSE = 0] = "DENSE", r[r.SHARED_BATCH = 1] = "SHARED_BATCH";
})(Mi || (Mi = {}));
var ir;
(function(r) {
  r[r.RENDER = 0] = "RENDER", r[r.UPLOAD = 1] = "UPLOAD", r[r.PIXELS = 2] = "PIXELS", r[r.DOWNLOAD = 3] = "DOWNLOAD";
})(ir || (ir = {}));
var Zt;
(function(r) {
  r[r.UNPACKED_FLOAT16 = 0] = "UNPACKED_FLOAT16", r[r.UNPACKED_FLOAT32 = 1] = "UNPACKED_FLOAT32", r[r.PACKED_4X1_UNSIGNED_BYTE = 2] = "PACKED_4X1_UNSIGNED_BYTE", r[r.PACKED_2X2_FLOAT32 = 3] = "PACKED_2X2_FLOAT32", r[r.PACKED_2X2_FLOAT16 = 4] = "PACKED_2X2_FLOAT16";
})(Zt || (Zt = {}));
function $u(r, e) {
  return [e, r];
}
function bE(r, e) {
  return r * e;
}
function Cl(r) {
  let e = y.sizeFromShape(r), t6 = Math.ceil(e / 4);
  return y.sizeToSquarishShape(t6);
}
function Ys(r, e) {
  return [Math.max(1, Math.ceil(e / 2)), Math.max(1, Math.ceil(r / 2))];
}
function CE(r, e) {
  let [t6, o] = Ys(r, e);
  return t6 * o * 4;
}
function Sl(r, e) {
  let t6 = r, o, n, s, a, i, p, u, c, l, m;
  return O().getNumber("WEBGL_VERSION") === 2 ? (o = t6.R32F, n = t6.R16F, s = t6.RGBA16F, a = t6.RGBA32F, i = t6.RED, u = 4, c = 1, l = t6.HALF_FLOAT, m = t6.FLOAT, p = t6.RGBA8) : (o = r.RGBA, n = r.RGBA, s = r.RGBA, a = t6.RGBA, i = r.RGBA, u = 4, c = 4, l = e != null ? e.HALF_FLOAT_OES : null, m = r.FLOAT, p = r.RGBA), { internalFormatFloat: o, internalFormatHalfFloat: n, internalFormatPackedHalfFloat: s, internalFormatPackedFloat: a, textureFormatFloat: i, downloadTextureFormat: p, downloadUnpackNumChannels: u, defaultNumChannels: c, textureTypeHalfFloat: l, textureTypeFloat: m };
}
function ce(r, e) {
  let t6 = e();
  return O().getBool("DEBUG") && E5(r), t6;
}
function E5(r) {
  let e = r.getError();
  if (e !== r.NO_ERROR)
    throw new Error("WebGL Error: " + SE(r, e));
}
var $5 = 596e-10;
var A5 = 65504;
function OS(r) {
  return !!(O().getBool("WEBGL_RENDER_FLOAT32_ENABLED") || r === 0 || $5 < Math.abs(r) && Math.abs(r) < A5);
}
function SE(r, e) {
  switch (e) {
    case r.NO_ERROR:
      return "NO_ERROR";
    case r.INVALID_ENUM:
      return "INVALID_ENUM";
    case r.INVALID_VALUE:
      return "INVALID_VALUE";
    case r.INVALID_OPERATION:
      return "INVALID_OPERATION";
    case r.INVALID_FRAMEBUFFER_OPERATION:
      return "INVALID_FRAMEBUFFER_OPERATION";
    case r.OUT_OF_MEMORY:
      return "OUT_OF_MEMORY";
    case r.CONTEXT_LOST_WEBGL:
      return "CONTEXT_LOST_WEBGL";
    default:
      return `Unknown error code ${e}`;
  }
}
function ec(r, e) {
  return Ba(r, () => r.getExtension(e), 'Extension "' + e + '" not supported on this browser.');
}
function PS(r, e) {
  let t6 = Ba(r, () => r.createShader(r.VERTEX_SHADER), "Unable to create vertex WebGLShader.");
  if (ce(r, () => r.shaderSource(t6, e)), ce(r, () => r.compileShader(t6)), r.getShaderParameter(t6, r.COMPILE_STATUS) === false)
    throw console.log(r.getShaderInfoLog(t6)), new Error("Failed to compile vertex shader.");
  return t6;
}
function MS(r, e) {
  let t6 = Ba(r, () => r.createShader(r.FRAGMENT_SHADER), "Unable to create fragment WebGLShader.");
  if (ce(r, () => r.shaderSource(t6, e)), ce(r, () => r.compileShader(t6)), O().get("ENGINE_COMPILE_ONLY"))
    return t6;
  if (r.getShaderParameter(t6, r.COMPILE_STATUS) === false)
    throw $f(e, r.getShaderInfoLog(t6)), new Error("Failed to compile fragment shader.");
  return t6;
}
var R5 = /ERROR: [0-9]+:([0-9]+):/g;
function $f(r, e) {
  let t6 = R5.exec(e);
  if (t6 == null) {
    console.log(`Couldn't parse line number in error: ${e}`), console.log(r);
    return;
  }
  let o = +t6[1], n = r.split(`
`), s = n.length.toString().length + 2, a = n.map((l, m) => y.rightPad((m + 1).toString(), s) + l), i = 0;
  for (let l = 0; l < a.length; l++)
    i = Math.max(a[l].length, i);
  let p = a.slice(0, o - 1), u = a.slice(o - 1, o), c = a.slice(o);
  console.log(p.join(`
`)), console.log(e.split(`
`)[0]), console.log(`%c ${y.rightPad(u[0], i)}`, "border:1px solid red; background-color:#e3d2d2; color:#a61717"), console.log(c.join(`
`));
}
function LS(r) {
  return Ba(r, () => r.createProgram(), "Unable to create WebGLProgram.");
}
function BS(r, e) {
  if (ce(r, () => r.linkProgram(e)), !O().get("ENGINE_COMPILE_ONLY") && r.getProgramParameter(e, r.LINK_STATUS) === false)
    throw console.log(r.getProgramInfoLog(e)), new Error("Failed to link vertex and fragment shaders.");
}
function wl(r, e) {
  if (ce(r, () => r.validateProgram(e)), r.getProgramParameter(e, r.VALIDATE_STATUS) === false)
    throw console.log(r.getProgramInfoLog(e)), new Error("Shader program validation failed.");
}
function VS(r, e) {
  let t6 = Ba(r, () => r.createBuffer(), "Unable to create WebGLBuffer");
  return ce(r, () => r.bindBuffer(r.ARRAY_BUFFER, t6)), ce(r, () => r.bufferData(r.ARRAY_BUFFER, e, r.STATIC_DRAW)), t6;
}
function zS(r, e) {
  let t6 = Ba(r, () => r.createBuffer(), "Unable to create WebGLBuffer");
  return ce(r, () => r.bindBuffer(r.ELEMENT_ARRAY_BUFFER, t6)), ce(r, () => r.bufferData(r.ELEMENT_ARRAY_BUFFER, e, r.STATIC_DRAW)), t6;
}
function F5() {
  return O().getNumber("WEBGL_VERSION") === 2 ? 1 : 4;
}
function WS(r) {
  return Ba(r, () => r.createTexture(), "Unable to create WebGLTexture.");
}
function US(r, e) {
  let t6 = O().getNumber("WEBGL_MAX_TEXTURE_SIZE");
  if (r <= 0 || e <= 0) {
    let o = `[${r}x${e}]`;
    throw new Error("Requested texture size " + o + " is invalid.");
  }
  if (r > t6 || e > t6) {
    let o = `[${r}x${e}]`, n = `[${t6}x${t6}]`;
    throw new Error("Requested texture size " + o + " greater than WebGL maximum on this browser / GPU " + n + ".");
  }
}
function GS(r) {
  return Ba(r, () => r.createFramebuffer(), "Unable to create WebGLFramebuffer.");
}
function Af(r, e, t6, o, n, s, a) {
  let i = r.getAttribLocation(e, t6);
  return i === -1 ? false : (ce(r, () => r.bindBuffer(r.ARRAY_BUFFER, o)), ce(r, () => r.vertexAttribPointer(i, n, r.FLOAT, false, s, a)), ce(r, () => r.enableVertexAttribArray(i)), true);
}
function wE(r, e, t6) {
  vE(r, t6), ce(r, () => r.activeTexture(r.TEXTURE0 + t6)), ce(r, () => r.bindTexture(r.TEXTURE_2D, e));
}
function D5(r, e) {
  vE(r, e), ce(r, () => r.activeTexture(r.TEXTURE0 + e)), ce(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function HS(r, e, t6) {
  return Ba(r, () => r.getUniformLocation(e, t6), 'uniform "' + t6 + '" not present in program.');
}
function qS(r, e, t6) {
  return r.getUniformLocation(e, t6);
}
function KS(r, e, t6, o) {
  ce(r, () => wE(r, e, o)), ce(r, () => r.uniform1i(t6, o));
}
function O5(r) {
  ce(r, () => r.bindFramebuffer(r.FRAMEBUFFER, null)), ce(r, () => r.viewport(0, 0, r.canvas.width, r.canvas.height)), ce(r, () => r.scissor(0, 0, r.canvas.width, r.canvas.height));
}
function Il(r, e, t6) {
  ce(r, () => r.bindFramebuffer(r.FRAMEBUFFER, t6)), ce(r, () => r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, e, 0));
}
function Rf(r, e) {
  ce(r, () => r.bindFramebuffer(r.FRAMEBUFFER, e)), ce(r, () => r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, null, 0));
}
function tc(r) {
  let e = r.checkFramebufferStatus(r.FRAMEBUFFER);
  if (e !== r.FRAMEBUFFER_COMPLETE)
    throw new Error("Error binding framebuffer: " + IE(r, e));
}
function IE(r, e) {
  switch (e) {
    case r.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_ATTACHMENT";
    case r.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      return "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";
    case r.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
      return "FRAMEBUFFER_INCOMPLETE_DIMENSIONS";
    case r.FRAMEBUFFER_UNSUPPORTED:
      return "FRAMEBUFFER_UNSUPPORTED";
    default:
      return `unknown error ${e}`;
  }
}
function Ba(r, e, t6) {
  let o = ce(r, () => e());
  if (o == null)
    throw new Error(t6);
  return o;
}
function vE(r, e) {
  let t6 = r.MAX_COMBINED_TEXTURE_IMAGE_UNITS - 1, o = e + r.TEXTURE0;
  if (o < r.TEXTURE0 || o > t6) {
    let n = `[gl.TEXTURE0, gl.TEXTURE${t6}]`;
    throw new Error(`textureUnit must be in ${n}.`);
  }
}
function Va(r, e = 2) {
  return y.sizeFromShape(r.slice(0, r.length - e));
}
function za(r) {
  if (r.length === 0)
    throw Error("Cannot get rows and columns of an empty shape array.");
  return [r.length > 1 ? r[r.length - 2] : 1, r[r.length - 1]];
}
function rc(r) {
  let e = [1, 1, 1];
  return r.length === 0 || r.length === 1 && r[0] === 1 || (e = [Va(r), ...za(r)]), e;
}
function jS(r, e = false) {
  let t6 = O().getNumber("WEBGL_MAX_TEXTURE_SIZE"), o = O().getNumber("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE");
  o === 1 / 0 && O().getBool("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE") && (o = t6 / 2), e && (t6 = t6 * 2, o = o * 2, r = r.map((i, p) => p >= r.length - 2 ? y.nearestLargerEven(r[p]) : r[p]), r.length === 1 && (r = [2, r[0]])), r.length !== 2 && (r = y.squeezeShape(r).newShape);
  let n = y.sizeFromShape(r), s = null;
  r.length <= 1 && n <= t6 ? s = [1, n] : r.length === 2 && r[0] <= t6 && r[1] <= t6 ? s = r : r.length === 3 && r[0] * r[1] <= t6 && r[2] <= t6 ? s = [r[0] * r[1], r[2]] : r.length === 3 && r[0] <= t6 && r[1] * r[2] <= t6 ? s = [r[0], r[1] * r[2]] : r.length === 4 && r[0] * r[1] * r[2] <= t6 && r[3] <= t6 ? s = [r[0] * r[1] * r[2], r[3]] : r.length === 4 && r[0] <= t6 && r[1] * r[2] * r[3] <= t6 && (s = [r[0], r[1] * r[2] * r[3]]);
  let a = s != null && Math.max(...s) > o && Math.min(...s) <= (e ? 2 : 1) && Math.min(...s) > 0;
  if (s == null || a)
    if (e) {
      let i = Va(r), p = 2, u = 2;
      r.length && ([p, u] = za(r)), n = i * (p / 2) * (u / 2), s = y.sizeToSquarishShape(n).map((c) => c * 2);
    } else
      s = y.sizeToSquarishShape(n);
  return s;
}
function Tf(r) {
  return r % 2 === 0;
}
function Li(r, e) {
  if (r = r.slice(-2), e = e.slice(-2), y.arraysEqual(r, e) || !r.length || !e.length || r[0] === 0 || r[1] === 0 || e[0] === 0 || e[1] === 0)
    return true;
  if (r.length !== e.length) {
    let t6 = r.slice(-1)[0], o = e.slice(-1)[0];
    if (t6 === o || Tf(t6) && Tf(o) && (r[0] === 1 || e[0] === 1))
      return true;
  }
  return r[1] === e[1] && Tf(r[0]) && Tf(e[0]);
}
var _f;
var Ef;
function XS(r) {
  if (_f == null) {
    let e = Wr(r);
    _f = e.getParameter(e.MAX_TEXTURE_SIZE);
  }
  return _f;
}
function P5() {
  _f = null;
}
function M5() {
  Ef = null;
}
function YS(r) {
  if (Ef == null) {
    let e = Wr(r);
    Ef = e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS);
  }
  return Math.min(16, Ef);
}
function QS(r) {
  if (r === 0)
    return 0;
  let e, t6 = Wr(r);
  return Ur(t6, "EXT_disjoint_timer_query_webgl2") && r === 2 ? e = 2 : Ur(t6, "EXT_disjoint_timer_query") ? e = 1 : e = 0, e;
}
function Ur(r, e) {
  return r.getExtension(e) != null;
}
function Ff(r) {
  try {
    if (Wr(r) != null)
      return true;
  } catch (e) {
    return console.log("Error when getting WebGL context: ", e), false;
  }
  return false;
}
function ZS(r) {
  if (r === 0)
    return false;
  let e = Wr(r);
  if (r === 1) {
    if (!Ur(e, "OES_texture_float"))
      return false;
  } else if (!Ur(e, "EXT_color_buffer_float"))
    return false;
  return DS(e);
}
function JS(r) {
  if (r === 0)
    return false;
  let e = Wr(r);
  if (r === 1) {
    if (!Ur(e, "OES_texture_float") || !Ur(e, "WEBGL_color_buffer_float"))
      return false;
  } else {
    if (Ur(e, "EXT_color_buffer_float"))
      return DS(e);
    let o = "EXT_color_buffer_half_float";
    if (Ur(e, o)) {
      let n = e.getExtension(o);
      return L5(e, n);
    }
    return false;
  }
  return DS(e);
}
function DS(r) {
  let e = Sl(r), t6 = r.createTexture();
  r.bindTexture(r.TEXTURE_2D, t6);
  let o = 1, n = 1;
  r.texImage2D(r.TEXTURE_2D, 0, e.internalFormatFloat, o, n, 0, e.textureFormatFloat, e.textureTypeFloat, null);
  let s = r.createFramebuffer();
  r.bindFramebuffer(r.FRAMEBUFFER, s), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, t6, 0);
  let a = r.checkFramebufferStatus(r.FRAMEBUFFER) === r.FRAMEBUFFER_COMPLETE;
  return r.bindTexture(r.TEXTURE_2D, null), r.bindFramebuffer(r.FRAMEBUFFER, null), r.deleteTexture(t6), r.deleteFramebuffer(s), a;
}
function L5(r, e) {
  let t6 = Sl(r, e), o = r.createTexture();
  r.bindTexture(r.TEXTURE_2D, o);
  let n = 1, s = 1;
  r.texImage2D(r.TEXTURE_2D, 0, t6.internalFormatHalfFloat, n, s, 0, t6.textureFormatFloat, t6.textureTypeHalfFloat, null);
  let a = r.createFramebuffer();
  r.bindFramebuffer(r.FRAMEBUFFER, a), r.framebufferTexture2D(r.FRAMEBUFFER, r.COLOR_ATTACHMENT0, r.TEXTURE_2D, o, 0);
  let i = r.checkFramebufferStatus(r.FRAMEBUFFER) === r.FRAMEBUFFER_COMPLETE;
  return r.bindTexture(r.TEXTURE_2D, null), r.bindFramebuffer(r.FRAMEBUFFER, null), r.deleteTexture(o), r.deleteFramebuffer(a), i;
}
function ew(r) {
  return r !== 2 ? false : Wr(r).fenceSync != null;
}
function is(r, e) {
  Array.isArray(r) || (r = [r]), r.forEach((t6) => {
    t6 != null && y.assert(t6.dtype !== "complex64", () => `${e} does not support complex64 tensors in the WebGL backend.`);
  });
}
var Ce = O();
Ce.registerFlag("HAS_WEBGL", () => Ce.getNumber("WEBGL_VERSION") > 0);
Ce.registerFlag("WEBGL_VERSION", () => Ff(2) ? 2 : Ff(1) ? 1 : 0);
Ce.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS", () => false);
Ce.registerFlag("WEBGL_BUFFER_SUPPORTED", () => Ce.get("WEBGL_VERSION") === 2);
Ce.registerFlag("WEBGL_CPU_FORWARD", () => true);
Ce.registerFlag("WEBGL_FORCE_F16_TEXTURES", () => false);
Ce.registerFlag("WEBGL_PACK", () => Ce.getBool("HAS_WEBGL"));
Ce.registerFlag("WEBGL_PACK_NORMALIZATION", () => Ce.getBool("WEBGL_PACK"));
Ce.registerFlag("WEBGL_PACK_CLIP", () => Ce.getBool("WEBGL_PACK"));
Ce.registerFlag("WEBGL_PACK_DEPTHWISECONV", () => Ce.getBool("WEBGL_PACK"));
Ce.registerFlag("WEBGL_PACK_BINARY_OPERATIONS", () => Ce.getBool("WEBGL_PACK"));
Ce.registerFlag("WEBGL_PACK_UNARY_OPERATIONS", () => Ce.getBool("WEBGL_PACK"));
Ce.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS", () => Ce.getBool("WEBGL_PACK"));
Ce.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS", () => Ce.getBool("WEBGL_PACK"));
Ce.registerFlag("WEBGL_PACK_REDUCE", () => Ce.getBool("WEBGL_PACK"));
Ce.registerFlag("WEBGL_LAZILY_UNPACK", () => Ce.getBool("WEBGL_PACK"));
Ce.registerFlag("WEBGL_CONV_IM2COL", () => Ce.getBool("WEBGL_PACK"));
Ce.registerFlag("WEBGL_MAX_TEXTURE_SIZE", () => XS(Ce.getNumber("WEBGL_VERSION")));
Ce.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER", () => YS(Ce.getNumber("WEBGL_VERSION")));
Ce.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION", () => {
  let r = Ce.getNumber("WEBGL_VERSION");
  return r === 0 ? 0 : QS(r);
});
Ce.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE", () => Ce.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 && !yi.isMobile());
Ce.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE", () => ZS(Ce.getNumber("WEBGL_VERSION")));
Ce.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED", () => Ce.getBool("WEBGL_FORCE_F16_TEXTURES") ? false : Ce.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"));
Ce.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED", () => JS(Ce.getNumber("WEBGL_VERSION")));
Ce.registerFlag("WEBGL_FENCE_API_ENABLED", () => ew(Ce.getNumber("WEBGL_VERSION")));
Ce.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM", () => Ce.getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? 4 : 0);
Ce.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD", () => -1, (r) => {
  if (r < 0 && r !== -1)
    throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${r}.`);
});
Ce.registerFlag("WEBGL_FLUSH_THRESHOLD", () => yi.isMobile() ? 1 : -1, (r) => {
  if (r < 0 && r !== -1)
    throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${r}.`);
});
Ce.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD", () => 128);
Ce.registerFlag("WEBGL_USE_SHAPES_UNIFORMS", () => false);
Ce.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e5);
Ce.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD", () => 128);
Ce.registerFlag("WEBGL_EXP_CONV", () => false);
Ce.registerFlag("SOFTWARE_WEBGL_ENABLED", () => Ce.getBool("IS_TEST"));
Ce.registerFlag("WEBGL_MAX_SIZE_FOR_NARROW_TEXTURE", () => 1 / 0);
Ce.registerFlag("WEBGL_AUTO_SQUARIFY_NARROW_TEXTURE_SHAPE", () => false);
Ce.registerFlag("WEBGL2_ISNAN_CUSTOM", () => false);
Ce.registerFlag("ENGINE_COMPILE_ONLY", () => false);
function St() {
  let r, e, t6, o, n, s, a, i, p, u;
  return O().getNumber("WEBGL_VERSION") === 2 ? (r = "#version 300 es", e = "in", t6 = "out", o = "in", n = "texture", s = "outputColor", a = "out vec4 outputColor;", i = O().getBool("WEBGL2_ISNAN_CUSTOM") ? `
      bool isnan_custom(float val) {
        uint floatToUint = floatBitsToUint(val);
        return (floatToUint & 0x7fffffffu) > 0x7f800000u;
      }

      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan_custom(val.x),
          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));
      }

      #define isnan(value) isnan_custom(value)
    ` : "", p = "", u = `
      #define round(value) newRound(value)
      int newRound(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 newRound(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `) : (r = "", e = "attribute", t6 = "varying", o = "varying", n = "texture2D", s = "gl_FragColor", a = "", i = `
      #define isnan(value) isnan_custom(value)
      bool isnan_custom(float val) {
        return (val > 0. || val < 1. || val == 0.) ? false : true;
      }
      bvec4 isnan_custom(vec4 val) {
        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));
      }
    `, p = `
      uniform float INFINITY;

      bool isinf(float val) {
        return abs(val) == INFINITY;
      }
      bvec4 isinf(vec4 val) {
        return equal(abs(val), vec4(INFINITY));
      }
    `, u = `
      int round(float value) {
        return int(floor(value + 0.5));
      }

      ivec4 round(vec4 value) {
        return ivec4(floor(value + vec4(0.5)));
      }
    `), { version: r, attribute: e, varyingVs: t6, varyingFs: o, texture2D: n, output: s, defineOutput: a, defineSpecialNaN: i, defineSpecialInf: p, defineRound: u };
}
function us(r, e, t6 = "index") {
  let o = y.computeStrides(e);
  return o.map((n, s) => {
    let a = `int ${r[s]} = ${t6} / ${n}`, i = s === o.length - 1 ? `int ${r[s + 1]} = ${t6} - ${r[s]} * ${n}` : `index -= ${r[s]} * ${n}`;
    return `${a}; ${i};`;
  }).join("");
}
function Au(r, e, t6 = "index") {
  let o = y.computeStrides(e);
  return o.map((n, s) => {
    let a = `int ${r[s]} = ${t6} / outShapeStrides[${s}]`, i = s === o.length - 1 ? `int ${r[s + 1]} = ${t6} - ${r[s]} * outShapeStrides[${s}]` : `index -= ${r[s]} * outShapeStrides[${s}]`;
    return `${a}; ${i};`;
  }).join("");
}
function B5(r, e) {
  let t6 = r.length, o = r.map((s) => `${e}[${s}]`), n = new Array(t6 - 1);
  n[t6 - 2] = o[t6 - 1];
  for (let s = t6 - 3; s >= 0; --s)
    n[s] = `(${n[s + 1]} * ${o[s + 1]})`;
  return n;
}
function kE(r, e, t6 = "index") {
  let o = r.map((s, a) => a), n = B5(o, e);
  return n.map((s, a) => {
    let i = `int ${r[a]} = ${t6} / ${n[a]}`, p = a === n.length - 1 ? `int ${r[a + 1]} = ${t6} - ${r[a]} * ${n[a]}` : `index -= ${r[a]} * ${n[a]}`;
    return `${i}; ${p};`;
  }).join("");
}
function nc(r) {
  let e = y.computeStrides(r).map((t6) => t6.toString());
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * ${e[0]} + coords.y * ${e[1]} + coords.z;
  }
`;
}
function sc() {
  return `
  int getFlatIndex(ivec3 coords) {
    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;
  }
`;
}
var Df = `
  const float FLOAT_MAX = 1.70141184e38;
  const float FLOAT_MIN = 1.17549435e-38;

  lowp vec4 encode_float(highp float v) {
    if (isnan(v)) {
      return vec4(255, 255, 255, 255);
    }

    highp float av = abs(v);

    if(av < FLOAT_MIN) {
      return vec4(0.0, 0.0, 0.0, 0.0);
    } else if(v > FLOAT_MAX) {
      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
    } else if(v < -FLOAT_MAX) {
      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
    }

    highp vec4 c = vec4(0,0,0,0);

    highp float e = floor(log2(av));
    highp float m = exp2(fract(log2(av))) - 1.0;

    c[2] = floor(128.0 * m);
    m -= c[2] / 128.0;
    c[1] = floor(32768.0 * m);
    m -= c[1] / 32768.0;
    c[0] = floor(8388608.0 * m);

    highp float ebias = e + 127.0;
    c[3] = floor(ebias / 2.0);
    ebias -= c[3] * 2.0;
    c[2] += floor(ebias) * 128.0;

    c[3] += 128.0 * step(0.0, -v);

    return c / 255.0;
  }
`;
var { getBroadcastDims: NE } = S;
function TE(r, e, t6) {
  let o = [];
  if (r.forEach((d) => {
    let f = y.sizeFromShape(d.shapeInfo.logicalShape);
    if (d.shapeInfo.isUniform ? o.push(`uniform float ${d.name}${f > 1 ? `[${f}]` : ""};`) : (o.push(`uniform sampler2D ${d.name};`), o.push(`uniform int offset${d.name};`)), t6.enableShapeUniforms) {
      let { uniformShape: h } = Of(t6.packedInputs, d.shapeInfo.logicalShape, d.shapeInfo.texShape);
      switch (h.length) {
        case 1:
          o.push(`uniform int ${d.name}Shape;`);
          break;
        case 2:
          o.push(`uniform ivec2 ${d.name}Shape;`);
          break;
        case 3:
          o.push(`uniform ivec3 ${d.name}Shape;`);
          break;
        case 4:
          o.push(`uniform ivec4 ${d.name}Shape;`);
          break;
        default:
          break;
      }
      o.push(`uniform ivec2 ${d.name}TexShape;`);
    }
  }), t6.enableShapeUniforms) {
    switch (e.logicalShape.length) {
      case 1:
        o.push("uniform int outShape;");
        break;
      case 2:
        o.push("uniform ivec2 outShape;"), o.push("uniform int outShapeStrides;");
        break;
      case 3:
        o.push("uniform ivec3 outShape;"), o.push("uniform ivec2 outShapeStrides;");
        break;
      case 4:
        o.push("uniform ivec4 outShape;"), o.push("uniform ivec3 outShapeStrides;");
        break;
      default:
        break;
    }
    o.push("uniform ivec2 outTexShape;");
  }
  t6.customUniforms && t6.customUniforms.forEach((d) => {
    o.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ""};`);
  });
  let n = o.join(`
`), s = r.map((d) => V5(d, e, t6.packedInputs, t6.enableShapeUniforms)).join(`
`), a = e.texShape, i = St(), p = U5(i), u, c, l = q5(i);
  return e.isPacked ? (u = z5(e.logicalShape, a, t6.enableShapeUniforms), c = H5(i)) : (u = W5(e.logicalShape, a, t6.enableShapeUniforms), c = G5(i)), t6.packedInputs && (l += Y5), [l, p, c, n, u, s, t6.userCode].join(`
`);
}
function ic(r, e = false) {
  let t6 = r.shapeInfo.logicalShape;
  switch (t6.length) {
    case 0:
      return u8(r, e);
    case 1:
      return c8(r, e);
    case 2:
      return m8(r, e);
    case 3:
      return f8(r, e);
    case 4:
      return g8(r, e);
    case 5:
      return x8(r);
    case 6:
      return y8(r);
    default:
      throw new Error(`${t6.length}-D input sampling is not yet supported`);
  }
}
function _E(r, e) {
  switch (r.shapeInfo.logicalShape.length) {
    case 0:
      return i8(r);
    case 1:
      return p8(r, e);
    case 2:
      return l8(r, e);
    case 3:
      return d8(r, e);
    default:
      return h8(r, e);
  }
}
function V5(r, e, t6 = false, o) {
  let n = "";
  t6 ? n += _E(r, o) : n += ic(r, o);
  let s = r.shapeInfo.logicalShape, a = e.logicalShape;
  return s.length <= a.length && (t6 ? n += b8(r, e) : n += C8(r, e)), n;
}
function z5(r, e, t6) {
  switch (r.length) {
    case 0:
      return EE();
    case 1:
      return Q5(r, e, t6);
    case 2:
      return s8(r, e, t6);
    case 3:
      return J5(r, e, t6);
    default:
      return t8(r, e, t6);
  }
}
function W5(r, e, t6) {
  switch (r.length) {
    case 0:
      return EE();
    case 1:
      return Z5(r, e, t6);
    case 2:
      return a8(r, e, t6);
    case 3:
      return e8(r, e, t6);
    case 4:
      return r8(r, e, t6);
    case 5:
      return o8(r, e);
    case 6:
      return n8(r, e);
    default:
      throw new Error(`${r.length}-D output sampling is not yet supported`);
  }
}
function U5(r) {
  return `
    float sampleTexture(sampler2D textureSampler, vec2 uv) {
      return ${r.texture2D}(textureSampler, uv).r;
    }
  `;
}
function G5(r) {
  return `
    void setOutput(float val) {
      ${r.output} = vec4(val, 0, 0, 0);
    }
  `;
}
function H5(r) {
  return `
    void setOutput(vec4 val) {
      ${r.output} = val;
    }
  `;
}
function q5(r) {
  return `${r.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${r.varyingFs} vec2 resultUV;
    ${r.defineOutput}
    const vec2 halfCR = vec2(0.5, 0.5);

    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    uniform float NAN;
    ${r.defineSpecialNaN}
    ${r.defineSpecialInf}
    ${r.defineRound}

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    int idiv(int a, int b, float sign) {
      int res = a / b;
      int mod = imod(a, b);
      if (sign < 0. && mod != 0) {
        res -= 1;
      }
      return res;
    }

    //Based on the work of Dave Hoskins
    //https://www.shadertoy.com/view/4djSRW
    #define HASHSCALE1 443.8975
    float random(float seed){
      vec2 p = resultUV * seed;
      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);
      p3 += dot(p3, p3.yzx + 19.19);
      return fract((p3.x + p3.y) * p3.z);
    }

    ${K5}
    ${j5}
    ${X5}
  `;
}
var K5 = `
vec2 uvFromFlat(int texNumR, int texNumC, int index) {
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
  int texelIndex = index / 2;
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var j5 = `
vec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,
  int texNumC, int row, int col) {
  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = texelIndex / texNumC;
  int texC = texelIndex - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var X5 = `
vec2 packedUVfrom3D(int texNumR, int texNumC,
    int texelsInBatch, int texelsInLogicalRow, int b,
    int row, int col) {
  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
  int texR = index / texNumC;
  int texC = index - texR * texNumC;
  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
}
`;
var Y5 = `
  float getChannel(vec4 frag, vec2 innerDims) {
    vec2 modCoord = mod(innerDims, 2.);
    return modCoord.x == 0. ?
      (modCoord.y == 0. ? frag.r : frag.g) :
      (modCoord.y == 0. ? frag.b : frag.a);
  }
  float getChannel(vec4 frag, int dim) {
    float modCoord = mod(float(dim), 2.);
    return modCoord == 0. ? frag.r : frag.g;
  }
`;
function EE() {
  return `
    int getOutputCoords() {
      return 0;
    }
  `;
}
function Q5(r, e, t6) {
  let o = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
  return o[0] === 1 ? t6 ? `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.x * ${o[1]}.0);
      }
    ` : o[1] === 1 ? t6 ? `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));
      }
    ` : `
      int getOutputCoords() {
        return 2 * int(resultUV.y * ${o[0]}.0);
      }
    ` : t6 ? `
    int getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      return 2 * (resTexRC.x * ${o[1]} + resTexRC.y);
    }
  `;
}
function Z5(r, e, t6) {
  return e[0] === 1 ? t6 ? `
      int getOutputCoords() {
        return int(resultUV.x * float(outTexShape[1]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.x * ${e[1]}.0);
      }
    ` : e[1] === 1 ? t6 ? `
      int getOutputCoords() {
        return int(resultUV.y * float(outTexShape[0]));
      }
    ` : `
      int getOutputCoords() {
        return int(resultUV.y * ${e[0]}.0);
      }
    ` : t6 ? `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      return resTexRC.x * outTexShape[1] + resTexRC.y;
    }
  ` : `
    int getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      return resTexRC.x * ${e[1]} + resTexRC.y;
    }
  `;
}
function J5(r, e, t6) {
  if (t6)
    return `
    ivec3 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec3(b, r, c);
    }
  `;
  let o = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)], n = Math.ceil(r[2] / 2), s = n * Math.ceil(r[1] / 2);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec3(b, r, c);
    }
  `;
}
function e8(r, e, t6) {
  if (t6)
    return `
  ivec3 getOutputCoords() {
    ivec2 resTexRC = ivec2(resultUV.yx *
                           vec2(outTexShape[0], outTexShape[1]));
    int index = resTexRC.x * outTexShape[1] + resTexRC.y;
    ${Au(["r", "c", "d"], r)}
    return ivec3(r, c, d);
  }
`;
  let o = us(["r", "c", "d"], r);
  return `
    ivec3 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${o}
      return ivec3(r, c, d);
    }
  `;
}
function t8(r, e, t6) {
  if (t6)
    return `
    ivec4 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));
      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;

      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));
      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));
      int texelsInBatchN = texelsInBatch * outShape[1];

      int b2 = index / texelsInBatchN;
      index -= b2 * texelsInBatchN;

      int b = index / texelsInBatch;
      index -= b * texelsInBatch;

      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec4(b2, b, r, c);
    }
  `;
  let o = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)], n = Math.ceil(r[r.length - 1] / 2), s = n * Math.ceil(r[r.length - 2] / 2), a = s, i = "", p = "b, r, c";
  for (let u = 2; u < r.length - 1; u++)
    a *= r[r.length - u - 1], i = `
      int b${u} = index / ${a};
      index -= b${u} * ${a};
    ` + i, p = `b${u}, ` + p;
  return `
    ivec${r.length} getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));
      int index = resTexRC.x * ${o[1]} + resTexRC.y;

      ${i}

      int b = index / ${s};
      index -= b * ${s};

      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec${r.length}(${p});
    }
  `;
}
function r8(r, e, t6) {
  if (t6)
    return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      ${Au(["r", "c", "d", "d2"], r)}
      return ivec4(r, c, d, d2);
    }
  `;
  let o = us(["r", "c", "d", "d2"], r);
  return `
    ivec4 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      ${o}
      return ivec4(r, c, d, d2);
    }
  `;
}
function o8(r, e) {
  let t6 = us(["r", "c", "d", "d2", "d3"], r);
  return `
    ivec5 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${e[0]},
                             ${e[1]}));

      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t6}

      ivec5 outShape = ivec5(r, c, d, d2, d3);
      return outShape;
    }
  `;
}
function n8(r, e) {
  let t6 = us(["r", "c", "d", "d2", "d3", "d4"], r);
  return `
    ivec6 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
        vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;

      ${t6}

      ivec6 result = ivec6(r, c, d, d2, d3, d4);
      return result;
    }
  `;
}
function s8(r, e, t6) {
  let o = [Math.ceil(e[0] / 2), Math.ceil(e[1] / 2)];
  if (y.arraysEqual(r, e))
    return t6 ? `
      ivec2 getOutputCoords() {
        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return 2 * ivec2(resultUV.yx * vec2(${o[0]}, ${o[1]}));
      }
    `;
  let n = Math.ceil(r[1] / 2);
  return t6 ? `
    ivec2 getOutputCoords() {
      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));
      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(packedTexShape[0], packedTexShape[1]));

      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;
      int r = 2 * (index / texelsInLogicalRow);
      int c = imod(index, texelsInLogicalRow) * 2;

      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${o[0]}, ${o[1]}));

      int index = resTexRC.x * ${o[1]} + resTexRC.y;
      int r = 2 * (index / ${n});
      int c = imod(index, ${n}) * 2;

      return ivec2(r, c);
    }
  `;
}
function a8(r, e, t6) {
  return y.arraysEqual(r, e) ? t6 ? `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));
      }
    ` : `
      ivec2 getOutputCoords() {
        return ivec2(resultUV.yx * vec2(${e[0]}, ${e[1]}));
      }
    ` : r[1] === 1 ? t6 ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(index, 0);
      }
    ` : r[0] === 1 ? t6 ? `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(outTexShape[0], outTexShape[1]));
        int index = resTexRC.x * outTexShape[1] + resTexRC.y;
        return ivec2(0, index);
      }
    ` : `
      ivec2 getOutputCoords() {
        ivec2 resTexRC = ivec2(resultUV.yx *
                               vec2(${e[0]}, ${e[1]}));
        int index = resTexRC.x * ${e[1]} + resTexRC.y;
        return ivec2(0, index);
      }
    ` : t6 ? `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(outTexShape[0], outTexShape[1]));
      int index = resTexRC.x * outTexShape[1] + resTexRC.y;
      int r = index / outShape[1];
      int c = index - r * outShape[1];
      return ivec2(r, c);
    }
  ` : `
    ivec2 getOutputCoords() {
      ivec2 resTexRC = ivec2(resultUV.yx *
                             vec2(${e[0]}, ${e[1]}));
      int index = resTexRC.x * ${e[1]} + resTexRC.y;
      int r = index / ${r[1]};
      int c = index - r * ${r[1]};
      return ivec2(r, c);
    }
  `;
}
function Ru(r) {
  return `offset${r}`;
}
function i8(r) {
  let e = r.name, t6 = "get" + e.charAt(0).toUpperCase() + e.slice(1), o = St();
  return `
    vec4 ${t6}() {
      return ${o.texture2D}(${e}, halfCR);
    }
  `;
}
function u8(r, e) {
  let t6 = r.name, o = "get" + t6.charAt(0).toUpperCase() + t6.slice(1);
  if (r.shapeInfo.isUniform)
    return `float ${o}() {return ${t6};}`;
  let [n, s] = r.shapeInfo.texShape;
  if (n === 1 && s === 1)
    return `
      float ${o}() {
        return sampleTexture(${t6}, halfCR);
      }
    `;
  let a = Ru(t6);
  if (e)
    return `
    float ${o}() {
      vec2 uv = uvFromFlat(${t6}TexShape[0], ${t6}TexShape[1], ${a});
      return sampleTexture(${t6}, uv);
    }
  `;
  let [i, p] = r.shapeInfo.texShape;
  return `
    float ${o}() {
      vec2 uv = uvFromFlat(${i}, ${p}, ${a});
      return sampleTexture(${t6}, uv);
    }
  `;
}
function p8(r, e) {
  let t6 = r.name, o = "get" + t6.charAt(0).toUpperCase() + t6.slice(1), n = r.shapeInfo.texShape, s = St();
  if (e)
    return `
    vec4 ${o}(int index) {
      ivec2 packedTexShape = ivec2(ceil(float(${t6}TexShape[0]) / 2.0), ceil(float(${t6}TexShape[1]) / 2.0));
      vec2 uv = packedUVfrom1D(
        packedTexShape[0], packedTexShape[1], index);
      return ${s.texture2D}(${t6}, uv);
    }
  `;
  let a = [Math.ceil(n[0] / 2), Math.ceil(n[1] / 2)];
  return `
    vec4 ${o}(int index) {
      vec2 uv = packedUVfrom1D(
        ${a[0]}, ${a[1]}, index);
      return ${s.texture2D}(${t6}, uv);
    }
  `;
}
function c8(r, e) {
  let t6 = r.name, o = "get" + t6.charAt(0).toUpperCase() + t6.slice(1);
  if (r.shapeInfo.isUniform)
    return `
      float ${o}(int index) {
        ${uc(r)}
      }
    `;
  let n = r.shapeInfo.texShape, s = n[0], a = n[1];
  if (a === 1 && s === 1)
    return `
      float ${o}(int index) {
        return sampleTexture(${t6}, halfCR);
      }
    `;
  let i = Ru(t6);
  return a === 1 ? e ? `
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${t6}TexShape[0]));
        return sampleTexture(${t6}, uv);
      }
    ` : `
      float ${o}(int index) {
        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);
        return sampleTexture(${t6}, uv);
      }
    ` : s === 1 ? e ? `
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${t6}TexShape[1]), 0.5);
        return sampleTexture(${t6}, uv);
      }
    ` : `
      float ${o}(int index) {
        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${a}.0, 0.5);
        return sampleTexture(${t6}, uv);
      }
    ` : e ? `
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${t6}TexShape[0], ${t6}TexShape[1], index + ${i});
      return sampleTexture(${t6}, uv);
    }
  ` : `
    float ${o}(int index) {
      vec2 uv = uvFromFlat(${s}, ${a}, index + ${i});
      return sampleTexture(${t6}, uv);
    }
  `;
}
function l8(r, e) {
  let t6 = r.shapeInfo.logicalShape, o = r.name, n = "get" + o.charAt(0).toUpperCase() + o.slice(1), s = r.shapeInfo.texShape, a = s[0], i = s[1], p = St();
  if (s != null && y.arraysEqual(t6, s))
    return e ? `
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);

        return ${p.texture2D}(${o}, uv);
      }
    ` : `
      vec4 ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${i}.0, ${a}.0);

        return ${p.texture2D}(${o}, uv);
      }
    `;
  if (e)
    return `
    vec4 ${n}(int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);
      return ${p.texture2D}(${o}, uv);
    }
  `;
  let u = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)], c = Math.ceil(t6[1] / 2);
  return `
    vec4 ${n}(int row, int col) {
      vec2 uv = packedUVfrom2D(${c}, ${u[0]}, ${u[1]}, row, col);
      return ${p.texture2D}(${o}, uv);
    }
  `;
}
function m8(r, e) {
  let t6 = r.shapeInfo.logicalShape, o = r.name, n = "get" + o.charAt(0).toUpperCase() + o.slice(1), s = r.shapeInfo.texShape;
  if (s != null && y.arraysEqual(t6, s)) {
    if (e)
      return `
      float ${n}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    `;
    let m = s[0], d = s[1];
    return `
    float ${n}(int row, int col) {
      vec2 uv = (vec2(col, row) + halfCR) / vec2(${d}.0, ${m}.0);
      return sampleTexture(${o}, uv);
    }
  `;
  }
  let { newShape: a, keptDims: i } = y.squeezeShape(t6), p = a;
  if (p.length < t6.length) {
    let m = pc(r, p), d = ["row", "col"];
    return `
      ${ic(m, e)}
      float ${n}(int row, int col) {
        return ${n}(${cc(d, i)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int row, int col) {
        int index = round(dot(vec2(row, col), vec2(${t6[1]}, 1)));
        ${uc(r)}
      }
    `;
  let u = s[0], c = s[1], l = Ru(o);
  return c === 1 ? e ? `
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${l}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2(0.5, (index + 0.5) / float(${o}TexShape[0]));
        return sampleTexture(${o}, uv);
      }
    ` : `
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${l}), vec3(${t6[1]}, 1, 1));
      vec2 uv = vec2(0.5, (index + 0.5) / ${u}.0);
      return sampleTexture(${o}, uv);
    }
  ` : u === 1 ? e ? `
      float ${n}(int row, int col) {
        float index = dot(vec3(row, col, ${l}), vec3(${o}Shape[1], 1, 1));
        vec2 uv = vec2((index + 0.5) / float(${o}TexShape[1]), 0.5);
        return sampleTexture(${o}, uv);
      }
    ` : `
    float ${n}(int row, int col) {
      float index = dot(vec3(row, col, ${l}), vec3(${t6[1]}, 1, 1));
      vec2 uv = vec2((index + 0.5) / ${c}.0, 0.5);
      return sampleTexture(${o}, uv);
    }
  ` : e ? `
      float ${n}(int row, int col) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${o}Shape[1] + col + ${l};
        vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
        return sampleTexture(${o}, uv);
      }
    ` : `
  float ${n}(int row, int col) {
    // Explicitly use integer operations as dot() only works on floats.
    int index = row * ${t6[1]} + col + ${l};
    vec2 uv = uvFromFlat(${u}, ${c}, index);
    return sampleTexture(${o}, uv);
  }
`;
}
function d8(r, e) {
  let t6 = r.shapeInfo.logicalShape, o = r.name, n = "get" + o.charAt(0).toUpperCase() + o.slice(1), s = r.shapeInfo.texShape, a = [Math.ceil(s[0] / 2), Math.ceil(s[1] / 2)];
  if (t6[0] === 1) {
    let m = t6.slice(1), d = [1, 2], f = pc(r, m), h = ["b", "row", "col"];
    return `
        ${_E(f, e)}
        vec4 ${n}(int b, int row, int col) {
          return ${n}(${cc(h, d)});
        }
      `;
  }
  let i = St();
  if (e)
    return `
    vec4 ${n}(int b, int row, int col) {
      ivec2 packedTexShape = ivec2(ceil(float(${o}TexShape[0]) / 2.0), ceil(float(${o}TexShape[1]) / 2.0));
      int valuesPerRow = int(ceil(float(${o}Shape[2]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${o}Shape[1]) / 2.0));
      vec2 uv = packedUVfrom3D(
        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);
      return ${i.texture2D}(${o}, uv);
    }
  `;
  let p = a[0], u = a[1], c = Math.ceil(t6[2] / 2), l = c * Math.ceil(t6[1] / 2);
  return `
    vec4 ${n}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${p}, ${u}, ${l}, ${c}, b, row, col);
      return ${i.texture2D}(${o}, uv);
    }
  `;
}
function f8(r, e) {
  let t6 = r.shapeInfo.logicalShape, o = r.name, n = "get" + o.charAt(0).toUpperCase() + o.slice(1), s = t6[1] * t6[2], a = t6[2], { newShape: i, keptDims: p } = y.squeezeShape(t6), u = i;
  if (u.length < t6.length) {
    let h = pc(r, u), g = ["row", "col", "depth"];
    return `
        ${ic(h, e)}
        float ${n}(int row, int col, int depth) {
          return ${n}(${cc(g, p)});
        }
      `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int row, int col, int depth) {
        int index = round(dot(vec3(row, col, depth),
                          vec3(${s}, ${a}, 1)));
        ${uc(r)}
      }
    `;
  let c = r.shapeInfo.texShape, l = c[0], m = c[1], d = r.shapeInfo.flatOffset;
  if (m === s && d == null)
    return e ? `
      float ${n}(int row, int col, int depth) {
        int stride1 = ${o}Shape[2];
        float texR = float(row);
        float texC = dot(vec2(col, depth), vec2(stride1, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    ` : `
        float ${n}(int row, int col, int depth) {
          float texR = float(row);
          float texC = dot(vec2(col, depth), vec2(${a}, 1));
          vec2 uv = (vec2(texC, texR) + halfCR) /
                     vec2(${m}.0, ${l}.0);
          return sampleTexture(${o}, uv);
        }
      `;
  if (m === a && d == null)
    return e ? `
      float ${n}(int row, int col, int depth) {
        float texR = dot(vec2(row, col), vec2(${o}Shape[1], 1));
        float texC = float(depth);
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    ` : `
    float ${n}(int row, int col, int depth) {
      float texR = dot(vec2(row, col), vec2(${t6[1]}, 1));
      float texC = float(depth);
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${m}.0, ${l}.0);
      return sampleTexture(${o}, uv);
    }
  `;
  let f = Ru(o);
  return e ? `
    float ${n}(int row, int col, int depth) {
      // Explicitly use integer operations as dot() only works on floats.
      int stride0 = ${o}Shape[1] * ${o}Shape[2];
      int stride1 = ${o}Shape[2];
      int index = row * stride0 + col * stride1 + depth + ${f};
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index);
      return sampleTexture(${o}, uv);
    }
    ` : `
      float ${n}(int row, int col, int depth) {
        // Explicitly use integer operations as dot() only works on floats.
        int index = row * ${s} + col * ${a} + depth + ${f};
        vec2 uv = uvFromFlat(${l}, ${m}, index);
        return sampleTexture(${o}, uv);
      }
  `;
}
function h8(r, e) {
  let t6 = r.name, o = "get" + t6.charAt(0).toUpperCase() + t6.slice(1), n = St();
  if (e)
    return `
    vec4 ${o}(int b2, int b, int row, int col) {
      int valuesPerRow = int(ceil(float(${t6}Shape[3]) / 2.0));
      int texelsInBatch = valuesPerRow * int(ceil(float(${t6}Shape[2]) / 2.0));
      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);
      texelsInBatch *= ${t6}Shape[1];
      index = b2 * texelsInBatch + index;
      ivec2 packedTexShape = ivec2(ceil(float(${t6}TexShape[0]) / 2.0), ceil(float(${t6}TexShape[1]) / 2.0));
      int texR = index / packedTexShape[1];
      int texC = index - texR * packedTexShape[1];
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${n.texture2D}(${t6}, uv);
    }
  `;
  let s = r.shapeInfo.logicalShape, a = s.length, i = r.shapeInfo.texShape, p = [Math.ceil(i[0] / 2), Math.ceil(i[1] / 2)], u = p[0], c = p[1], l = Math.ceil(s[a - 1] / 2), m = l * Math.ceil(s[a - 2] / 2), d = "int b, int row, int col", f = `b * ${m} + (row / 2) * ${l} + (col / 2)`;
  for (let h = 2; h < a - 1; h++)
    d = `int b${h}, ` + d, m *= s[a - h - 1], f = `b${h} * ${m} + ` + f;
  return `
    vec4 ${o}(${d}) {
      int index = ${f};
      int texR = index / ${c};
      int texC = index - texR * ${c};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${u});
      return ${n.texture2D}(${t6}, uv);
    }
  `;
}
function g8(r, e) {
  let t6 = r.shapeInfo.logicalShape, o = r.name, n = "get" + o.charAt(0).toUpperCase() + o.slice(1), s = t6[3], a = t6[2] * s, i = t6[1] * a, { newShape: p, keptDims: u } = y.squeezeShape(t6);
  if (p.length < t6.length) {
    let b = pc(r, p), C = ["row", "col", "depth", "depth2"];
    return `
      ${ic(b, e)}
      float ${n}(int row, int col, int depth, int depth2) {
        return ${n}(${cc(C, u)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${n}(int row, int col, int depth, int depth2) {
        int index = round(dot(vec4(row, col, depth, depth2),
                          vec4(${i}, ${a}, ${s}, 1)));
        ${uc(r)}
      }
    `;
  let c = r.shapeInfo.flatOffset, l = r.shapeInfo.texShape, m = l[0], d = l[1], f = `int stride2 = ${o}Shape[3];`, h = `int stride1 = ${o}Shape[2] * stride2;`, g = `int stride0 = ${o}Shape[1] * stride1;`;
  if (d === i && c == null)
    return e ? `
      float ${n}(int row, int col, int depth, int depth2) {
        ${f}
        ${h}
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(stride1, stride2, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    ` : `
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = float(row);
        float texC =
            dot(vec3(col, depth, depth2),
                vec3(${a}, ${s}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;
  if (d === s && c == null)
    return e ? `
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${o}Shape[1] * ${o}Shape[2], ${o}Shape[2], 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${o}TexShape[1], ${o}TexShape[0]);
        return sampleTexture(${o}, uv);
      }
    ` : `
      float ${n}(int row, int col, int depth, int depth2) {
        float texR = dot(vec3(row, col, depth),
                         vec3(${t6[1] * t6[2]}, ${t6[2]}, 1));
        float texC = float(depth2);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${m}.0);
        return sampleTexture(${o}, uv);
      }
    `;
  let x = Ru(o);
  return e ? `
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      ${f}
      ${h}
      ${g}
      int index = row * stride0 + col * stride1 +
          depth * stride2 + depth2;
      vec2 uv = uvFromFlat(${o}TexShape[0], ${o}TexShape[1], index + ${x});
      return sampleTexture(${o}, uv);
    }
  ` : `
    float ${n}(int row, int col, int depth, int depth2) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} +
          depth * ${s} + depth2;
      vec2 uv = uvFromFlat(${m}, ${d}, index + ${x});
      return sampleTexture(${o}, uv);
    }
  `;
}
function x8(r) {
  let e = r.shapeInfo.logicalShape, t6 = r.name, o = "get" + t6.charAt(0).toUpperCase() + t6.slice(1), n = e[4], s = e[3] * n, a = e[2] * s, i = e[1] * a, { newShape: p, keptDims: u } = y.squeezeShape(e);
  if (p.length < e.length) {
    let h = pc(r, p), g = ["row", "col", "depth", "depth2", "depth3"];
    return `
      ${ic(h)}
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        return ${o}(${cc(g, u)});
      }
    `;
  }
  if (r.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float index = dot(
          vec4(row, col, depth, depth2),
          vec4(${i}, ${a}, ${s}, ${n})) +
          depth3;
        ${uc(r)}
      }
    `;
  let c = r.shapeInfo.flatOffset, l = r.shapeInfo.texShape, m = l[0], d = l[1];
  if (d === i && c == null)
    return `
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
                         vec4(${a}, ${s}, ${n}, 1));
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${d}.0, ${m}.0);
        return sampleTexture(${t6}, uv);
      }
    `;
  if (d === n && c == null)
    return `
      float ${o}(int row, int col, int depth, int depth2, int depth3) {
        float texR = dot(
          vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3]},
               ${e[2] * e[3]}, ${e[3]}, 1));
        int texC = depth3;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${d}.0, ${m}.0);
        return sampleTexture(${t6}, uv);
      }
    `;
  let f = Ru(t6);
  return `
    float ${o}(int row, int col, int depth, int depth2, int depth3) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${i} + col * ${a} + depth * ${s} +
          depth2 * ${n} + depth3 + ${f};
      vec2 uv = uvFromFlat(${m}, ${d}, index);
      return sampleTexture(${t6}, uv);
    }
  `;
}
function y8(r) {
  let e = r.shapeInfo.logicalShape, t6 = r.name, o = "get" + t6.charAt(0).toUpperCase() + t6.slice(1), { newShape: n, keptDims: s } = y.squeezeShape(e);
  if (n.length < e.length) {
    let g = pc(r, n), x = ["row", "col", "depth", "depth2", "depth3", "depth4"];
    return `
      ${ic(g)}
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        return ${o}(${cc(x, s)});
      }
    `;
  }
  let a = e[5], i = e[4] * a, p = e[3] * i, u = e[2] * p, c = e[1] * u;
  if (r.shapeInfo.isUniform)
    return `
      float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
        int index = round(dot(
          vec4(row, col, depth, depth2),
          vec4(${c}, ${u}, ${p}, ${i})) +
          dot(
            vec2(depth3, depth4),
            vec2(${a}, 1)));
        ${uc(r)}
      }
    `;
  let l = r.shapeInfo.flatOffset, m = r.shapeInfo.texShape, d = m[0], f = m[1];
  if (f === c && l == null)
    return `
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        int texR = row;
        float texC = dot(vec4(col, depth, depth2, depth3),
          vec4(${u}, ${p}, ${i}, ${a})) +
               float(depth4);
        vec2 uv = (vec2(texC, texR) + halfCR) /
                   vec2(${f}.0, ${d}.0);
        return sampleTexture(${t6}, uv);
      }
    `;
  if (f === a && l == null)
    return `
      float ${o}(int row, int col, int depth,
                    int depth2, int depth3, int depth4) {
        float texR = dot(vec4(row, col, depth, depth2),
          vec4(${e[1] * e[2] * e[3] * e[4]},
               ${e[2] * e[3] * e[4]},
               ${e[3] * e[4]},
               ${e[4]})) + float(depth3);
        int texC = depth4;
        vec2 uv = (vec2(texC, texR) + halfCR) /
                  vec2(${f}.0, ${d}.0);
        return sampleTexture(${t6}, uv);
      }
    `;
  let h = Ru(t6);
  return `
    float ${o}(int row, int col, int depth,
                  int depth2, int depth3, int depth4) {
      // Explicitly use integer operations as dot() only works on floats.
      int index = row * ${c} + col * ${u} + depth * ${p} +
          depth2 * ${i} + depth3 * ${a} + depth4 + ${h};
      vec2 uv = uvFromFlat(${d}, ${f}, index);
      return sampleTexture(${t6}, uv);
    }
  `;
}
function uc(r) {
  let e = r.name, t6 = y.sizeFromShape(r.shapeInfo.logicalShape);
  return t6 < 2 ? `return ${e};` : `
    for (int i = 0; i < ${t6}; i++) {
      if (i == index) {
        return ${e}[i];
      }
    }
  `;
}
function b8(r, e) {
  let t6 = r.name, o = t6.charAt(0).toUpperCase() + t6.slice(1), n = "get" + o + "AtOutCoords", s = r.shapeInfo.logicalShape.length, a = e.logicalShape.length, i = NE(r.shapeInfo.logicalShape, e.logicalShape), p = _e(a), u = a - s, c, l = ["x", "y", "z", "w", "u", "v"];
  s === 0 ? c = "" : a < 2 && i.length >= 1 ? c = "coords = 0;" : c = i.map((b) => `coords.${l[b + u]} = 0;`).join(`
`);
  let m = "";
  a < 2 && s > 0 ? m = "coords" : m = r.shapeInfo.logicalShape.map((b, C) => `coords.${l[C + u]}`).join(", ");
  let d = "return outputValue;", h = y.sizeFromShape(r.shapeInfo.logicalShape) === 1, x = y.sizeFromShape(e.logicalShape) === 1;
  if (s === 1 && !h && !x)
    d = `
      return vec4(outputValue.xy, outputValue.xy);
    `;
  else if (h && !x)
    a === 1 ? d = `
        return vec4(outputValue.x, outputValue.x, 0., 0.);
      ` : d = `
        return vec4(outputValue.x);
      `;
  else if (i.length) {
    let b = s - 2, C = s - 1;
    i.indexOf(b) > -1 && i.indexOf(C) > -1 ? d = "return vec4(outputValue.x);" : i.indexOf(b) > -1 ? d = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : i.indexOf(C) > -1 && (d = "return vec4(outputValue.xx, outputValue.zz);");
  }
  return `
    vec4 ${n}() {
      ${p} coords = getOutputCoords();
      ${c}
      vec4 outputValue = get${o}(${m});
      ${d}
    }
  `;
}
function C8(r, e) {
  let t6 = r.name, o = t6.charAt(0).toUpperCase() + t6.slice(1), n = "get" + o + "AtOutCoords", s = e.texShape, a = r.shapeInfo.texShape, i = r.shapeInfo.logicalShape.length, p = e.logicalShape.length;
  if (!r.shapeInfo.isUniform && i === p && r.shapeInfo.flatOffset == null && y.arraysEqual(a, s))
    return `
      float ${n}() {
        return sampleTexture(${t6}, resultUV);
      }
    `;
  let u = _e(p), c = NE(r.shapeInfo.logicalShape, e.logicalShape), l = p - i, m, d = ["x", "y", "z", "w", "u", "v"];
  i === 0 ? m = "" : p < 2 && c.length >= 1 ? m = "coords = 0;" : m = c.map((h) => `coords.${d[h + l]} = 0;`).join(`
`);
  let f = "";
  return p < 2 && i > 0 ? f = "coords" : f = r.shapeInfo.logicalShape.map((h, g) => `coords.${d[g + l]}`).join(", "), `
    float ${n}() {
      ${u} coords = getOutputCoords();
      ${m}
      return get${o}(${f});
    }
  `;
}
function _e(r) {
  if (r <= 1)
    return "int";
  if (r === 2)
    return "ivec2";
  if (r === 3)
    return "ivec3";
  if (r === 4)
    return "ivec4";
  if (r === 5)
    return "ivec5";
  if (r === 6)
    return "ivec6";
  throw Error(`GPU for rank ${r} is not yet supported`);
}
function Of(r, e, t6) {
  let { newShape: o, keptDims: n } = y.squeezeShape(e), s = e.length, a = r && s === 3 && e[0] === 1, i = a ? e.slice(1) : o, p = !r && s > 1 && !y.arraysEqual(e, t6) && o.length < s || a;
  return { useSqueezeShape: p, uniformShape: p ? i : e, keptDims: n };
}
function pc(r, e) {
  let t6 = JSON.parse(JSON.stringify(r));
  return t6.shapeInfo.logicalShape = e, t6;
}
function cc(r, e) {
  return e.map((t6) => r[t6]).join(", ");
}
function AE(r, e, t6, o) {
  let n = t6.map((c, l) => {
    let m = { logicalShape: c.shape, texShape: c.isUniform ? null : c.texData.texShape, isUniform: c.isUniform, isPacked: c.isUniform ? false : c.texData.isPacked, flatOffset: null };
    return c.texData != null && c.texData.slice != null && c.texData.slice.flatOffset > 0 && (m.flatOffset = c.texData.slice.flatOffset), { name: e.variableNames[l], shapeInfo: m };
  }), s = n.map((c) => c.shapeInfo), a = { logicalShape: o.shape, texShape: o.texData.texShape, isUniform: false, isPacked: o.texData.isPacked, flatOffset: null }, i = TE(n, a, e), p = MS(r.gl, i), u = r.createProgram(p);
  return O().get("ENGINE_COMPILE_ONLY") ? { program: e, fragmentShader: p, source: i, webGLProgram: u, inShapeInfos: s, outShapeInfo: a, uniformLocations: null, customUniformLocations: null, infLoc: null, nanLoc: null, inShapesLocations: null, inTexShapesLocations: null, outShapeLocation: null, outShapeStridesLocation: null, outTexShapeLocation: null } : Object.assign({ program: e, fragmentShader: p, source: i, webGLProgram: u, inShapeInfos: s, outShapeInfo: a }, tw(r, e, u));
}
function tw(r, e, t6) {
  let o = {}, n = {}, s = {}, a = [], i, p, u, c = null, l = null;
  l = r.getUniformLocation(t6, "NAN", false), O().getNumber("WEBGL_VERSION") === 1 && (c = r.getUniformLocation(t6, "INFINITY", false));
  let m = false;
  for (let d = 0; d < e.variableNames.length; d++) {
    let f = e.variableNames[d];
    o[f] = r.getUniformLocation(t6, f, m), o[`offset${f}`] = r.getUniformLocation(t6, `offset${f}`, m), e.enableShapeUniforms && (n[`${f}Shape`] = r.getUniformLocation(t6, `${f}Shape`, m), s[`${f}TexShape`] = r.getUniformLocation(t6, `${f}TexShape`, m));
  }
  return e.enableShapeUniforms && (i = r.getUniformLocation(t6, "outShape", m), u = r.getUniformLocation(t6, "outShapeStrides", m), p = r.getUniformLocation(t6, "outTexShape", m)), e.customUniforms && e.customUniforms.forEach((d, f) => {
    a[f] = r.getUniformLocation(t6, d.name, m);
  }), { uniformLocations: o, customUniformLocations: a, infLoc: c, nanLoc: l, inShapesLocations: n, inTexShapesLocations: s, outShapeLocation: i, outShapeStridesLocation: u, outTexShapeLocation: p };
}
function $E(r, e) {
  if (r.length !== e.length)
    throw Error(`Binary was compiled with ${r.length} inputs, but was executed with ${e.length} inputs`);
  r.forEach((t6, o) => {
    let n = t6.logicalShape, s = e[o], a = s.shape;
    if (!y.arraysEqual(n, a))
      throw Error(`Binary was compiled with different shapes than the current args. Shapes ${n} and ${a} must match`);
    if (t6.isUniform && s.isUniform)
      return;
    let i = t6.texShape, p = s.isUniform ? null : s.texData.texShape;
    if (!y.arraysEqual(i, p))
      throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${p} must match`);
  });
}
function RE(r, e, t6, o, n) {
  e.program.enableShapeUniforms || ($E(e.inShapeInfos, t6), $E([e.outShapeInfo], [o]));
  let s = o.texData.texture, a = o.texData.texShape;
  o.texData.isPacked ? r.setOutputPackedMatrixTexture(s.texture, a[0], a[1]) : r.setOutputMatrixTexture(s.texture, a[0], a[1]), r.setProgram(e.webGLProgram), O().getNumber("WEBGL_VERSION") === 1 && e.infLoc !== null && r.gl.uniform1f(e.infLoc, 1 / 0), e.nanLoc !== null && r.gl.uniform1f(e.nanLoc, NaN), t6.forEach((p, u) => {
    let c = e.program.variableNames[u], l = e.uniformLocations[c], m = e.uniformLocations[`offset${c}`], d = e.inShapesLocations[`${c}Shape`], f = e.inTexShapesLocations[`${c}TexShape`];
    if (d) {
      let { uniformShape: h } = Of(e.program.packedInputs, p.shape, p.texData.texShape);
      switch (h.length) {
        case 1:
          r.gl.uniform1iv(d, new Int32Array(h));
          break;
        case 2:
          r.gl.uniform2iv(d, new Int32Array(h));
          break;
        case 3:
          r.gl.uniform3iv(d, new Int32Array(h));
          break;
        case 4:
          r.gl.uniform4iv(d, new Int32Array(h));
          break;
        default:
          break;
      }
    }
    if (f && r.gl.uniform2i(f, p.texData.texShape[0], p.texData.texShape[1]), l != null) {
      if (p.isUniform) {
        if (y.sizeFromShape(p.shape) < 2)
          r.gl.uniform1f(l, p.uniformValues[0]);
        else {
          let h = p.uniformValues;
          h instanceof Float32Array || (h = new Float32Array(h)), r.gl.uniform1fv(l, h);
        }
        return;
      }
      p.texData.slice != null && m != null && r.gl.uniform1i(m, p.texData.slice.flatOffset), r.setInputMatrixTexture(p.texData.texture.texture, l, u);
    }
  });
  let i = e.outShapeLocation;
  if (i)
    switch (o.shape.length) {
      case 1:
        r.gl.uniform1iv(i, new Int32Array(o.shape));
        break;
      case 2:
        r.gl.uniform2iv(i, new Int32Array(o.shape));
        break;
      case 3:
        r.gl.uniform3iv(i, new Int32Array(o.shape));
        break;
      case 4:
        r.gl.uniform4iv(i, new Int32Array(o.shape));
        break;
      default:
        break;
    }
  if (e.outShapeStridesLocation) {
    let p = y.computeStrides(o.shape);
    switch (o.shape.length) {
      case 2:
        r.gl.uniform1iv(e.outShapeStridesLocation, new Int32Array(p));
        break;
      case 3:
        r.gl.uniform2iv(e.outShapeStridesLocation, new Int32Array(p));
        break;
      case 4:
        r.gl.uniform3iv(e.outShapeStridesLocation, new Int32Array(p));
        break;
      default:
        break;
    }
  }
  e.outTexShapeLocation && r.gl.uniform2i(e.outTexShapeLocation, o.texData.texShape[0], o.texData.texShape[1]), e.program.customUniforms && n && e.program.customUniforms.forEach((p, u) => {
    let c = e.customUniformLocations[u], l = n[u];
    if (p.type === "float")
      r.gl.uniform1fv(c, l);
    else if (p.type === "vec2")
      r.gl.uniform2fv(c, l);
    else if (p.type === "vec3")
      r.gl.uniform3fv(c, l);
    else if (p.type === "vec4")
      r.gl.uniform4fv(c, l);
    else if (p.type === "int")
      r.gl.uniform1iv(c, l);
    else if (p.type === "ivec2")
      r.gl.uniform2iv(c, l);
    else if (p.type === "ivec3")
      r.gl.uniform3iv(c, l);
    else if (p.type === "ivec4")
      r.gl.uniform4iv(c, l);
    else
      throw Error(`uniform type ${p.type} is not supported yet.`);
  }), r.executeProgram();
}
function FE(r, e, t6) {
  let o = "";
  e.concat(t6).forEach((a) => {
    let i = a.texData != null && a.texData.slice != null && a.texData.slice.flatOffset > 0;
    if (r.enableShapeUniforms && !a.isUniform) {
      let p = a.texData.texShape, { useSqueezeShape: u, uniformShape: c, keptDims: l } = Of(r.packedInputs, a.shape, p), m = "", d = "", f = "";
      if (c.length === 1 && r.packedInputs) {
        let k = [Math.ceil(p[0] / 2), Math.ceil(p[1] / 2)];
        m = `${k[0] > 1}_${k[1] > 1}`;
      } else if (c.length === 2 && !r.packedInputs)
        d = `${c[0] > 1}_${c[1] > 1}`;
      else if (c.length > 2 && !r.packedInputs) {
        let k = y.computeStrides(c);
        f = `${k[0] === p[1]}_${k[k.length - 1] === p[1]}`;
      }
      let h = a.shape.length, g = c.length === 2 && y.arraysEqual(a.shape, p), x = y.sizeFromShape(a.shape) === 1, b = S.getBroadcastDims(a.shape, t6.shape), C = !r.packedInputs && h === t6.shape.length && y.arraysEqual(p, t6.texData.texShape), w = r.packedInputs || c.length > 2 ? "" : `${p[0] > 1}_${p[1] > 1}`;
      o += `${h}_${C}_${u ? l : ""}_${c.length}_${x}_${b}_${g}_${m}_${d}_${f}_${w}_${i}`;
    } else {
      let p = a.isUniform ? "uniform" : a.texData.texShape;
      o += `${a.shape}_${p}_${i}`;
    }
  });
  let n = r.userCode, s = r.constructor.name;
  return s += "_" + o + "_" + n + `${O().getNumber("WEBGL_VERSION")}`, s;
}
function ct(r) {
  return O().getBool("WEBGL_USE_SHAPES_UNIFORMS") && r <= 4;
}
var Pf = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outPackingScheme = Mi.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let t6 = St();
    this.outputShape = e, this.enableShapeUniforms = ct(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Au(["r", "c", "d"], e) : us(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getA(rc.x, rc.y, rc.z);
        }

        ${t6.output} = result;
      }
    `;
  }
};
var Mf = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outPackingScheme = Mi.DENSE, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let t6 = St();
    this.outputShape = e, this.enableShapeUniforms = ct(this.outputShape.length), this.userCode = `
      ivec3 outCoordsFromFlatIndex(int index) {
        ${this.enableShapeUniforms ? Au(["r", "c", "d"], e) : us(["r", "c", "d"], e)}
        return ivec3(r, c, d);
      }

      void main() {
        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));
        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);

        vec4 result = vec4(0.);

        for (int i=0; i<4; i++) {
          int flatIndex = index + i;
          ivec3 rc = outCoordsFromFlatIndex(flatIndex);
          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));
        }

        ${t6.output} = result;
      }
    `;
  }
};
var Lf = class {
  constructor(e) {
    this.variableNames = ["A"], this.outTexUsage = ir.DOWNLOAD;
    let t6 = St();
    this.outputShape = e, this.userCode = `
      ${Df}

      void main() {
        float x = getAAtOutCoords();
        ${t6.output} = encode_float(x);
      }
    `;
  }
};
var Bf = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outTexUsage = ir.DOWNLOAD;
    let t6 = St();
    this.outputShape = e, this.userCode = `
      ${Df}

      void main() {
        ivec3 coords = getOutputCoords();
        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));
        ${t6.output} = encode_float(x);
      }
    `;
  }
};
var I8 = { R: 0, G: 1, B: 2, A: 3 };
var vl = class {
  constructor(e, t6 = false, o = "RGBA") {
    this.variableNames = ["A"], this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let n = St();
    this.outputShape = e, this.enableShapeUniforms = ct(this.outputShape.length);
    let s = "result";
    t6 && (s = "floor(result * 255. + 0.5)");
    let a = "";
    for (let i = 0; i < o.length; i++) {
      let p = o[i];
      a += `
          if(offset == ${i}) {
            result = values[${I8[p]}];
          }`;
    }
    this.userCode = `
      ${this.enableShapeUniforms ? sc() : nc(e)}

      void main() {
        ivec3 coords = getOutputCoords();
        int flatIndex = getFlatIndex(coords);
        float result = 0.;
        int offset = imod(flatIndex, ${o.length});

        flatIndex = idiv(flatIndex, ${o.length}, 1.);

        int r = flatIndex / texShape[1];
        if (r < texShape[0]) {
          int c = imod(flatIndex, texShape[1]);
          vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
          vec4 values = ${n.texture2D}(A, uv);
          ${a}
        }
        ${n.output} = vec4(${s}, 0., 0., 0.);
      }
    `;
  }
};
var Vf = class {
  constructor(e, t6 = false) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.customUniforms = [{ name: "texShape", type: "ivec2" }];
    let o = St();
    this.outputShape = e, this.enableShapeUniforms = ct(this.outputShape.length);
    let n = "", s = "result";
    t6 && (s = "floor(result * 255. + 0.5)");
    for (let a = 0; a <= 1; a++)
      for (let i = 0; i <= 1; i++) {
        let p = a * 2 + i;
        n += `
          localCoords = coords;
          if(localCoords[2] + ${i} < ${this.enableShapeUniforms ? "outShape[2]" : `${e[2]}`}) {
          localCoords[2] += ${i};
          if (localCoords[1] + ${a} < ${this.enableShapeUniforms ? "outShape[1]" : `${e[1]}`}) {
            localCoords[1] += ${a};

            flatIndex = getFlatIndex(localCoords);
            offset = imod(flatIndex, 4);

            flatIndex = idiv(flatIndex, 4, 1.);

            int r = flatIndex / texShape[1];
            int c = imod(flatIndex, texShape[1]);
            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);
            values = ${o.texture2D}(A, uv);

            if (offset == 0) {
              result[${p}] = values[0];
            } else if (offset == 1) {
              result[${p}] = values[1];
            } else if (offset == 2) {
              result[${p}] = values[2];
            } else {
              result[${p}] = values[3];
            }
          }
        }
        `;
      }
    this.userCode = `
        ${this.enableShapeUniforms ? sc() : nc(e)}

        void main() {
          ivec3 coords = getOutputCoords();

          vec4 result = vec4(0.);
          int flatIndex, r, c, offset;
          ivec3 localCoords;
          vec2 uv;
          vec4 values;

          ${n}

          ${o.output} = ${s};
        }
    `;
  }
};
var yw = {};
Ue(yw, { bindVertexProgramAttributeStreams: () => cw, createBufferFromOutputTexture: () => dw, createFloat16MatrixTexture: () => aw, createFloat16PackedMatrixTexture: () => pw, createFloat32MatrixTexture: () => sw, createIndexBuffer: () => nw, createPackedMatrixTexture: () => uw, createUnsignedBytesMatrixTexture: () => iw, createVertexBuffer: () => ow, createVertexShader: () => rw, downloadByteEncodedFloatMatrixFromOutputTexture: () => hw, downloadFloat32MatrixFromBuffer: () => fw, downloadMatrixFromPackedOutputTexture: () => xw, downloadPackedMatrixFromBuffer: () => gw, getInternalFormatForFloat16MatrixTexture: () => Wf, getInternalFormatForFloat16PackedMatrixTexture: () => Hf, getInternalFormatForFloat32MatrixTexture: () => zf, getInternalFormatForPackedMatrixTexture: () => Gf, getInternalFormatForUnsignedBytesMatrixTexture: () => Uf, uploadDenseMatrixToTexture: () => lw, uploadPixelDataToTexture: () => mw });
function rw(r) {
  let e = St(), t6 = `${e.version}
    precision highp float;
    ${e.attribute} vec3 clipSpacePos;
    ${e.attribute} vec2 uv;
    ${e.varyingVs} vec2 resultUV;

    void main() {
      gl_Position = vec4(clipSpacePos, 1);
      resultUV = uv;
    }`;
  return PS(r, t6);
}
function ow(r) {
  let e = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);
  return VS(r, e);
}
function nw(r) {
  let e = new Uint16Array([0, 1, 2, 2, 1, 3]);
  return zS(r, e);
}
function kl(r, e, t6, o, n, s) {
  US(e, t6);
  let a = WS(r), i = r.TEXTURE_2D;
  return ce(r, () => r.bindTexture(i, a)), ce(r, () => r.texParameteri(i, r.TEXTURE_WRAP_S, r.CLAMP_TO_EDGE)), ce(r, () => r.texParameteri(i, r.TEXTURE_WRAP_T, r.CLAMP_TO_EDGE)), ce(r, () => r.texParameteri(i, r.TEXTURE_MIN_FILTER, r.NEAREST)), ce(r, () => r.texParameteri(i, r.TEXTURE_MAG_FILTER, r.NEAREST)), O().getNumber("WEBGL_VERSION") === 1 ? ce(r, () => r.texImage2D(i, 0, o, e, t6, 0, n, s, null)) : ce(r, () => r.texStorage2D(i, 1, o, e, t6)), ce(r, () => r.bindTexture(r.TEXTURE_2D, null)), { texture: a, texShape: [t6, e] };
}
function zf(r) {
  return r.internalFormatFloat;
}
function sw(r, e, t6, o) {
  let [n, s] = $u(e, t6);
  return kl(r, n, s, zf(o), o.textureFormatFloat, r.FLOAT);
}
function Wf(r) {
  return r.internalFormatHalfFloat;
}
function aw(r, e, t6, o) {
  let [n, s] = $u(e, t6);
  return kl(r, n, s, Wf(o), o.textureFormatFloat, o.textureTypeHalfFloat);
}
function Uf(r) {
  return r.downloadTextureFormat;
}
function iw(r, e, t6, o) {
  let [n, s] = $u(e, t6);
  return kl(r, n, s, Uf(o), r.RGBA, r.UNSIGNED_BYTE);
}
function Gf(r) {
  return r.internalFormatPackedFloat;
}
function uw(r, e, t6, o) {
  let [n, s] = Ys(e, t6);
  return kl(r, n, s, Gf(o), r.RGBA, r.FLOAT);
}
function Hf(r) {
  return r.internalFormatPackedHalfFloat;
}
function pw(r, e, t6, o) {
  let [n, s] = Ys(e, t6);
  return kl(r, n, s, Hf(o), r.RGBA, o.textureTypeHalfFloat);
}
function cw(r, e, t6) {
  return ce(r, () => r.bindBuffer(r.ARRAY_BUFFER, t6)), Af(r, e, "clipSpacePos", t6, 3, 20, 0) && Af(r, e, "uv", t6, 2, 20, 12);
}
function lw(r, e, t6, o, n, s) {
  ce(r, () => r.bindTexture(r.TEXTURE_2D, e));
  let a, i, p;
  n instanceof Uint8Array ? (a = new Uint8Array(t6 * o * 4), i = r.UNSIGNED_BYTE, p = r.RGBA) : (a = new Float32Array(t6 * o * 4), i = r.FLOAT, p = s.internalFormatPackedFloat), a.set(n), O().getNumber("WEBGL_VERSION") === 2 ? ce(r, () => r.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, t6, o, r.RGBA, i, a)) : ce(r, () => r.texImage2D(r.TEXTURE_2D, 0, p, t6, o, 0, r.RGBA, i, a)), ce(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function mw(r, e, t6) {
  ce(r, () => r.bindTexture(r.TEXTURE_2D, e)), t6.data instanceof Uint8Array ? O().getNumber("WEBGL_VERSION") === 2 ? ce(r, () => r.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, t6.width, t6.height, r.RGBA, r.UNSIGNED_BYTE, t6.data)) : ce(r, () => r.texImage2D(r.TEXTURE_2D, 0, r.RGBA, t6.width, t6.height, 0, r.RGBA, r.UNSIGNED_BYTE, t6.data)) : O().getNumber("WEBGL_VERSION") === 2 ? ce(r, () => r.texSubImage2D(r.TEXTURE_2D, 0, 0, 0, r.RGBA, r.UNSIGNED_BYTE, t6)) : ce(r, () => r.texImage2D(r.TEXTURE_2D, 0, r.RGBA, r.RGBA, r.UNSIGNED_BYTE, t6)), ce(r, () => r.bindTexture(r.TEXTURE_2D, null));
}
function dw(r, e, t6, o) {
  let n = r.createBuffer();
  ce(r, () => r.bindBuffer(r.PIXEL_PACK_BUFFER, n));
  let i = 4 * 4 * e * t6;
  return ce(r, () => r.bufferData(r.PIXEL_PACK_BUFFER, i, r.STREAM_READ)), ce(r, () => r.readPixels(0, 0, t6, e, r.RGBA, r.FLOAT, 0)), ce(r, () => r.bindBuffer(r.PIXEL_PACK_BUFFER, null)), n;
}
function fw(r, e, t6) {
  let o = r, n = new Float32Array(t6);
  return o.bindBuffer(o.PIXEL_PACK_BUFFER, e), o.getBufferSubData(o.PIXEL_PACK_BUFFER, 0, n), o.bindBuffer(o.PIXEL_PACK_BUFFER, null), n;
}
function hw(r, e, t6, o) {
  let [n, s] = $u(e, t6), a = 4, i = new Uint8Array(bE(e * t6, a));
  return ce(r, () => r.readPixels(0, 0, n, s, o.downloadTextureFormat, r.UNSIGNED_BYTE, i)), new Float32Array(i.buffer);
}
function gw(r, e, t6, o, n, s, a, i) {
  let p = r, u = new Float32Array(CE(s, a));
  return p.bindBuffer(p.PIXEL_PACK_BUFFER, e), p.getBufferSubData(p.PIXEL_PACK_BUFFER, 0, u), p.bindBuffer(p.PIXEL_PACK_BUFFER, null), u;
}
function xw(r, e, t6) {
  let o = new Float32Array(e * t6 * 4);
  return ce(r, () => r.readPixels(0, 0, t6, e, r.RGBA, r.FLOAT, o)), o;
}
var Fu = class {
  constructor(e) {
    this.outputTexture = null, this.program = null, this.disposed = false, this.itemsToPoll = [];
    let t6 = O().getNumber("WEBGL_VERSION");
    if (e != null ? (this.gl = e, RS(t6, e)) : this.gl = Wr(t6), e = this.gl, O().getNumber("WEBGL_VERSION") === 2) {
      let s = e;
      this.createVertexArray = () => ce(s, () => s.createVertexArray()), this.bindVertexArray = (a) => ce(s, () => s.bindVertexArray(a)), this.deleteVertexArray = (a) => ce(s, () => s.deleteVertexArray(a)), this.getVertexArray = () => ce(s, () => s.getParameter(s.VERTEX_ARRAY_BINDING));
    } else if (e != null) {
      let s = e.getExtension("OES_vertex_array_object");
      if (s == null)
        throw new Error("All WebGL1 implementations are expected to offer OES_vertex_array_object.");
      this.createVertexArray = () => ce(e, () => s.createVertexArrayOES()), this.bindVertexArray = (a) => ce(e, () => s.bindVertexArrayOES(a)), this.deleteVertexArray = (a) => ce(e, () => s.deleteVertexArrayOES(a)), this.getVertexArray = () => ce(e, () => e.getParameter(s.VERTEX_ARRAY_BINDING_OES));
    }
    let o = "WEBGL_color_buffer_float", n = "EXT_color_buffer_half_float";
    if (this.parallelCompilationExtension = this.gl.getExtension("KHR_parallel_shader_compile"), O().getNumber("WEBGL_VERSION") === 1) {
      let s = "OES_texture_float", a = "OES_texture_half_float";
      if (this.textureFloatExtension = ec(this.gl, s), Ur(this.gl, a))
        this.textureHalfFloatExtension = ec(this.gl, a);
      else if (O().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
      if (this.colorBufferFloatExtension = this.gl.getExtension(o), Ur(this.gl, n))
        this.colorBufferHalfFloatExtension = ec(this.gl, n);
      else if (O().get("WEBGL_FORCE_F16_TEXTURES"))
        throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");
    } else if (o = "EXT_color_buffer_float", Ur(this.gl, o))
      this.colorBufferFloatExtension = this.gl.getExtension(o);
    else if (Ur(this.gl, n))
      this.colorBufferHalfFloatExtension = this.gl.getExtension(n);
    else
      throw new Error("GL context does not support color renderable floats");
    this.vertexBuffer = ow(this.gl), this.indexBuffer = nw(this.gl), this.framebuffer = GS(this.gl), this.textureConfig = Sl(this.gl, this.textureHalfFloatExtension);
  }
  get debug() {
    return O().getBool("DEBUG");
  }
  dispose() {
    if (this.disposed)
      return;
    this.program != null && console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."), this.outputTexture != null && console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");
    let e = this.gl;
    ce(e, () => e.finish()), ce(e, () => e.bindFramebuffer(e.FRAMEBUFFER, null)), ce(e, () => e.deleteFramebuffer(this.framebuffer)), ce(e, () => e.bindBuffer(e.ARRAY_BUFFER, null)), ce(e, () => e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, null)), ce(e, () => e.deleteBuffer(this.indexBuffer)), this.disposed = true;
  }
  createFloat32MatrixTexture(e, t6) {
    return this.throwIfDisposed(), sw(this.gl, e, t6, this.textureConfig);
  }
  createFloat16MatrixTexture(e, t6) {
    return this.throwIfDisposed(), aw(this.gl, e, t6, this.textureConfig);
  }
  createUnsignedBytesMatrixTexture(e, t6) {
    return this.throwIfDisposed(), iw(this.gl, e, t6, this.textureConfig);
  }
  uploadPixelDataToTexture(e, t6) {
    this.throwIfDisposed(), mw(this.gl, e, t6);
  }
  uploadDenseMatrixToTexture(e, t6, o, n) {
    this.throwIfDisposed(), lw(this.gl, e, t6, o, n, this.textureConfig);
  }
  createFloat16PackedMatrixTexture(e, t6) {
    return this.throwIfDisposed(), pw(this.gl, e, t6, this.textureConfig);
  }
  createPackedMatrixTexture(e, t6) {
    return this.throwIfDisposed(), uw(this.gl, e, t6, this.textureConfig);
  }
  deleteMatrixTexture(e) {
    this.throwIfDisposed(), this.outputTexture === e && (Rf(this.gl, this.framebuffer), this.outputTexture = null), ce(this.gl, () => this.gl.deleteTexture(e));
  }
  downloadByteEncodedFloatMatrixFromOutputTexture(e, t6, o) {
    return this.downloadMatrixDriver(e, () => hw(this.gl, t6, o, this.textureConfig));
  }
  downloadPackedMatrixFromBuffer(e, t6, o, n, s, a) {
    return gw(this.gl, e, t6, o, n, s, a, this.textureConfig);
  }
  downloadFloat32MatrixFromBuffer(e, t6) {
    return fw(this.gl, e, t6);
  }
  createBufferFromTexture(e, t6, o) {
    this.bindTextureToFrameBuffer(e);
    let n = dw(this.gl, t6, o, this.textureConfig);
    return this.unbindTextureToFrameBuffer(), n;
  }
  createAndWaitForFence() {
    let e = this.createFence(this.gl);
    return this.pollFence(e);
  }
  createFence(e) {
    let t6, o;
    if (O().getBool("WEBGL_FENCE_API_ENABLED")) {
      let n = e, s = n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE, 0);
      e.flush(), o = () => {
        let a = n.clientWaitSync(s, 0, 0);
        return a === n.ALREADY_SIGNALED || a === n.CONDITION_SATISFIED;
      }, t6 = s;
    } else
      O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") > 0 ? (t6 = this.beginQuery(), this.endQuery(), o = () => this.isQueryAvailable(t6, O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))) : o = () => true;
    return { query: t6, isFencePassed: o };
  }
  downloadMatrixFromPackedTexture(e, t6, o) {
    return this.downloadMatrixDriver(e, () => xw(this.gl, t6, o));
  }
  createProgram(e) {
    this.throwIfDisposed();
    let t6 = this.gl;
    this.vertexShader == null && (this.vertexShader = rw(t6));
    let o = LS(t6);
    ce(t6, () => t6.attachShader(o, this.vertexShader)), ce(t6, () => t6.attachShader(o, e)), BS(t6, o);
    let n;
    return n = Object.assign(o, { vao: this.createVertexArray() }), this.bindVertexArray(n.vao), ce(t6, () => t6.bindBuffer(t6.ELEMENT_ARRAY_BUFFER, this.indexBuffer)), console.assert(cw(t6, n, this.vertexBuffer), "gpgpu_util.bindVertexProgramAttributeStreams not fully successful."), this.debug && wl(t6, n), this.setProgram(n), n;
  }
  deleteProgram(e) {
    this.throwIfDisposed(), e === this.program && (this.program = null), e != null && (ce(this.gl, () => this.gl.deleteProgram(e)), this.deleteVertexArray(e.vao));
  }
  setProgram(e) {
    this.throwIfDisposed(), this.program = e, this.program != null && (this.bindVertexArray(this.program.vao), this.debug && wl(this.gl, this.program)), ce(this.gl, () => this.gl.useProgram(e));
  }
  getUniformLocation(e, t6, o = true) {
    return this.throwIfDisposed(), o ? HS(this.gl, e, t6) : qS(this.gl, e, t6);
  }
  getAttributeLocation(e, t6) {
    return this.throwIfDisposed(), ce(this.gl, () => this.gl.getAttribLocation(e, t6));
  }
  getUniformLocationNoThrow(e, t6) {
    return this.throwIfDisposed(), this.gl.getUniformLocation(e, t6);
  }
  setInputMatrixTexture(e, t6, o) {
    this.throwIfDisposed(), this.throwIfNoProgram(), KS(this.gl, e, t6, o);
  }
  setOutputMatrixTexture(e, t6, o) {
    this.setOutputMatrixTextureDriver(e, o, t6);
  }
  setOutputPackedMatrixTexture(e, t6, o) {
    this.throwIfDisposed();
    let [n, s] = Ys(t6, o);
    this.setOutputMatrixTextureDriver(e, n, s);
  }
  setOutputMatrixWriteRegion(e, t6, o, n) {
    this.setOutputMatrixWriteRegionDriver(o, e, n, t6);
  }
  setOutputPackedMatrixWriteRegion(e, t6, o, n) {
    throw new Error("setOutputPackedMatrixWriteRegion not implemented.");
  }
  debugValidate() {
    this.program != null && wl(this.gl, this.program), tc(this.gl);
  }
  executeProgram() {
    this.throwIfDisposed(), this.throwIfNoProgram();
    let e = this.gl;
    if (this.debug) {
      let t6 = this.getVertexArray();
      console.assert(t6 === this.program.vao, "VAO changed between setProgram and executeProgram!"), this.debugValidate();
    }
    ce(e, () => e.drawElements(e.TRIANGLES, 6, e.UNSIGNED_SHORT, 0));
  }
  blockUntilAllProgramsCompleted() {
    this.throwIfDisposed(), ce(this.gl, () => this.gl.finish());
  }
  getQueryTimerExtension() {
    return this.disjointQueryTimerExtension == null && (this.disjointQueryTimerExtension = ec(this.gl, O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2 ? "EXT_disjoint_timer_query_webgl2" : "EXT_disjoint_timer_query")), this.disjointQueryTimerExtension;
  }
  getQueryTimerExtensionWebGL2() {
    return this.getQueryTimerExtension();
  }
  getQueryTimerExtensionWebGL1() {
    return this.getQueryTimerExtension();
  }
  beginQuery() {
    if (O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      let o = this.gl, n = this.getQueryTimerExtensionWebGL2(), s = o.createQuery();
      return o.beginQuery(n.TIME_ELAPSED_EXT, s), s;
    }
    let e = this.getQueryTimerExtensionWebGL1(), t6 = e.createQueryEXT();
    return e.beginQueryEXT(e.TIME_ELAPSED_EXT, t6), t6;
  }
  endQuery() {
    if (O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION") === 2) {
      let t6 = this.gl, o = this.getQueryTimerExtensionWebGL2();
      t6.endQuery(o.TIME_ELAPSED_EXT);
      return;
    }
    let e = this.getQueryTimerExtensionWebGL1();
    e.endQueryEXT(e.TIME_ELAPSED_EXT);
  }
  async waitForQueryAndGetTime(e) {
    return await y.repeatedTry(() => this.disposed || this.isQueryAvailable(e, O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))), this.getQueryTime(e, O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"));
  }
  getQueryTime(e, t6) {
    if (t6 === 0)
      return null;
    if (t6 === 2) {
      let o = this.gl;
      return o.getQueryParameter(e, o.QUERY_RESULT) / 1e6;
    } else {
      let o = this.getQueryTimerExtensionWebGL1();
      return o.getQueryObjectEXT(e, o.QUERY_RESULT_EXT) / 1e6;
    }
  }
  isQueryAvailable(e, t6) {
    if (t6 === 0)
      return true;
    if (t6 === 2) {
      let o = this.gl, n = this.getQueryTimerExtensionWebGL2(), s = o.getQueryParameter(e, o.QUERY_RESULT_AVAILABLE);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(n.GPU_DISJOINT_EXT)), s && !this.disjoint;
    } else {
      let o = this.getQueryTimerExtensionWebGL1(), n = o.getQueryObjectEXT(e, o.QUERY_RESULT_AVAILABLE_EXT);
      return this.disjoint == null && (this.disjoint = this.gl.getParameter(o.GPU_DISJOINT_EXT)), n && !this.disjoint;
    }
  }
  pollFence(e) {
    return new Promise((t6) => {
      this.addItemToPoll(() => e.isFencePassed(), () => t6());
    });
  }
  pollItems() {
    let e = v8(this.itemsToPoll.map((t6) => t6.isDoneFn));
    for (let t6 = 0; t6 <= e; ++t6) {
      let { resolveFn: o } = this.itemsToPoll[t6];
      o();
    }
    this.itemsToPoll = this.itemsToPoll.slice(e + 1);
  }
  addItemToPoll(e, t6) {
    if (this.itemsToPoll.push({ isDoneFn: e, resolveFn: t6 }), this.itemsToPoll.length > 1)
      return;
    let o;
    "setTimeoutCustom" in O().platform && (o = O().platform.setTimeoutCustom.bind(O().platform)), y.repeatedTry(() => (this.pollItems(), this.itemsToPoll.length === 0), () => 0, null, o);
  }
  bindTextureToFrameBuffer(e) {
    this.throwIfDisposed(), Il(this.gl, e, this.framebuffer), this.debug && tc(this.gl);
  }
  unbindTextureToFrameBuffer() {
    this.outputTexture != null ? (Il(this.gl, this.outputTexture, this.framebuffer), this.debug && tc(this.gl)) : Rf(this.gl, this.framebuffer);
  }
  downloadMatrixDriver(e, t6) {
    this.bindTextureToFrameBuffer(e);
    let o = t6();
    return this.unbindTextureToFrameBuffer(), o;
  }
  setOutputMatrixTextureDriver(e, t6, o) {
    this.throwIfDisposed();
    let n = this.gl;
    Il(n, e, this.framebuffer), this.debug && tc(n), this.outputTexture = e, ce(n, () => n.viewport(0, 0, t6, o)), ce(n, () => n.scissor(0, 0, t6, o));
  }
  setOutputMatrixWriteRegionDriver(e, t6, o, n) {
    this.throwIfDisposed(), ce(this.gl, () => this.gl.scissor(e, t6, o, n));
  }
  throwIfDisposed() {
    if (this.disposed)
      throw new Error("Attempted to use disposed GPGPUContext.");
  }
  throwIfNoProgram() {
    if (this.program == null)
      throw new Error("No GPU program is currently set.");
  }
};
function v8(r) {
  let e = 0;
  for (; e < r.length && r[e](); ++e)
    ;
  return e - 1;
}
var { addImpl: DE, bincountImpl: qf, bincountReduceImpl: OE, castImpl: PE, ceilImpl: ME, concatImpl: LE, equalImpl: BE, expImpl: VE, expm1Impl: zE, floorImpl: WE, gatherNdImpl: UE, gatherV2Impl: GE, greaterImpl: HE, greaterEqualImpl: qE, lessImpl: KE, lessEqualImpl: jE, linSpaceImpl: XE, logImpl: YE, maxImpl: QE, maximumImpl: ZE, minimumImpl: JE, multiplyImpl: e$, negImpl: t$, notEqualImpl: r$, prodImpl: o$, raggedGatherImpl: n$, raggedRangeImpl: s$, raggedTensorToTensorImpl: a$, rangeImpl: i$, rsqrtImpl: u$, scatterImpl: p$, sigmoidImpl: c$, simpleAbsImpl: Kf, sliceImpl: l$, sparseFillEmptyRowsImpl: m$, sparseReshapeImpl: d$, sparseSegmentReductionImpl: jf, sqrtImpl: f$, stridedSliceImpl: h$, stringNGramsImpl: g$, stringSplitImpl: x$, stringToHashBucketFastImpl: y$, subImpl: b$, tileImpl: C$, topKImpl: S$, transposeImpl: Du, uniqueImpl: w$ } = Qp;
function bw(r, e) {
  return ["x", "y", "z", "w", "u", "v"].slice(0, e).map((t6) => `${r}.${t6}`);
}
function $t(r, e) {
  return e === 1 ? [r] : bw(r, e);
}
function I$(r, e) {
  if (r === 1)
    return "rc";
  let t6 = "";
  for (let o = 0; o < r; o++)
    t6 += e[o], o < r - 1 && (t6 += ",");
  return t6;
}
var Xf = class {
  constructor(e) {
    if (this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true, this.outputShape = e, this.rank = e.length, this.enableShapeUniforms = ct(this.outputShape.length), this.rank === 0)
      this.userCode = `
        void main() {
          setOutput(vec4(getA(), 0., 0., 0.));
        }
      `;
    else {
      let t6 = $t("rc", this.rank), o = _e(this.rank), n = this.getOutOfBoundsCondition(t6), s = this.getSetup(t6), a = this.getOutput(t6);
      this.userCode = `
        void main() {
          ${o} rc = getOutputCoords();

          if(${n}) {
            setOutput(vec4(0));
          } else {
            ${s}

            setOutput(vec4(${a}));
          }
        }
      `;
    }
  }
  getSourceCoordsArr(e) {
    let t6 = [];
    for (let o = 0; o <= 1; o++)
      for (let n = 0; n <= 1; n++) {
        let s = `${o === 0 ? "r" : "rp1"}, ${n === 0 ? "c" : "cp1"}`;
        for (let a = 2; a < this.rank; a++)
          s = `${e[e.length - 1 - a]},` + s;
        t6.push(s);
      }
    return t6;
  }
  getOutOfBoundsCondition(e) {
    if (this.rank === 1)
      return `rc > ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]}`;
    let t6 = "";
    for (let o = this.rank - 2; o < this.rank; o++)
      t6 += `${e[o]} >= ${this.enableShapeUniforms ? `outShape[${o}]` : this.outputShape[o]}`, o < this.rank - 1 && (t6 += "||");
    return t6;
  }
  getSetup(e) {
    if (this.rank === 1)
      return "";
    let t6 = e.slice(-2), o = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1], n = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];
    return `
      int r = ${t6[0]};
      int c = ${t6[1]};
      int rp1 = r + 1;
      int cp1 = c + 1;

      bool cEdge = cp1 >= ${o};
      bool rEdge = rp1 >= ${n};
    `;
  }
  getOutput(e) {
    let t6 = this.getSourceCoordsArr(e);
    return this.rank === 1 ? `getA(rc), (rc + 1 >= ${this.enableShapeUniforms ? "outShape" : this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0` : `getA(${t6[0]}),
            cEdge ? 0. : getA(${t6[1]}),
            rEdge ? 0. : getA(${t6[2]}),
            rEdge || cEdge ? 0. : getA(${t6[3]})`;
  }
};
var lc = class {
  constructor(e, t6) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec3" }], this.outputShape = e, this.enableShapeUniforms = ct(this.outputShape.length);
    let o = "";
    for (let n = 0; n < 4; n++) {
      let s = "thisRC = rc;";
      n % 2 === 1 && (s += "thisRC.z += 1;"), n > 1 && (s += "thisRC.y += 1;"), o += `
        ${s}
        ${n > 0 ? "if(thisRC.y < rows && thisRC.z < cols){" : ""}
          int flatIndex = getFlatIndex(thisRC);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);
          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${n}] =
            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);
        ${n > 0 ? "}" : ""}
      `;
    }
    this.userCode = `
      ${k8(t6, this.enableShapeUniforms)}
      ${this.enableShapeUniforms ? sc() : nc(e)}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.);

        ivec3 thisRC;
        int rows = ${this.enableShapeUniforms ? "outShape[1]" : e[1]};
        int cols = ${this.enableShapeUniforms ? "outShape[2]" : e[2]};

        ${o}

        setOutput(result);
      }
    `;
  }
};
function k8(r, e) {
  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${e ? kE(["r", "c", "d"], "inputShape") : us(["r", "c", "d"], r)}
      return ivec3(r, c, d);
    }
  `;
}
var Yf = class {
  constructor(e) {
    this.gpgpu = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0, this.freeTextures = {}, this.logEnabled = false, this.usedTextures = {};
  }
  acquireTexture(e, t6, o) {
    let n = k$(t6, o), s = N$(e, n, o);
    s in this.freeTextures || (this.freeTextures[s] = []), s in this.usedTextures || (this.usedTextures[s] = []);
    let a = v$(e, n, this.gpgpu.gl, this.gpgpu.textureConfig, o);
    if (this.freeTextures[s].length > 0) {
      this.numFreeTextures--, this.numUsedTextures++, this._numBytesFree -= a, this.log();
      let p = this.freeTextures[s].shift();
      return this.usedTextures[s].push(p), p;
    }
    let i;
    return n === Zt.PACKED_2X2_FLOAT32 ? i = this.gpgpu.createPackedMatrixTexture(e[0], e[1]) : n === Zt.PACKED_2X2_FLOAT16 ? i = this.gpgpu.createFloat16PackedMatrixTexture(e[0], e[1]) : n === Zt.UNPACKED_FLOAT32 ? i = this.gpgpu.createFloat32MatrixTexture(e[0], e[1]) : n === Zt.UNPACKED_FLOAT16 ? i = this.gpgpu.createFloat16MatrixTexture(e[0], e[1]) : n === Zt.PACKED_4X1_UNSIGNED_BYTE && (i = this.gpgpu.createUnsignedBytesMatrixTexture(e[0], e[1])), this.usedTextures[s].push(i), this.numUsedTextures++, this._numBytesAllocated += a, this.log(), i;
  }
  releaseTexture(e, t6, o, n) {
    if (this.freeTextures == null)
      return;
    let s = k$(o, n), a = N$(t6, s, n);
    a in this.freeTextures || (this.freeTextures[a] = []);
    let i = v$(t6, s, this.gpgpu.gl, this.gpgpu.textureConfig, n), p = O().get("WEBGL_DELETE_TEXTURE_THRESHOLD");
    p !== -1 && this._numBytesAllocated > p ? (this.gpgpu.deleteMatrixTexture(e.texture), this._numBytesAllocated -= i) : (this.freeTextures[a].push(e), this.numFreeTextures++, this._numBytesFree += i), this.numUsedTextures--;
    let u = this.usedTextures[a], c = u.indexOf(e);
    if (c < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    u.splice(c, 1), this.log();
  }
  log() {
    if (!this.logEnabled)
      return;
    let e = this.numFreeTextures + this.numUsedTextures;
    console.log("Free/Used", `${this.numFreeTextures} / ${this.numUsedTextures}`, `(${e})`);
    let t6 = this._numBytesFree / this._numBytesAllocated;
    console.log(`Bytes allocated: ${this._numBytesAllocated}`), console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100 * t6)}%)`);
  }
  get numBytesAllocated() {
    return this._numBytesAllocated;
  }
  get numBytesFree() {
    return this._numBytesFree;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    if (this.freeTextures != null) {
      for (let e in this.freeTextures)
        this.freeTextures[e].forEach((t6) => {
          this.gpgpu.deleteMatrixTexture(t6.texture);
        });
      for (let e in this.usedTextures)
        this.usedTextures[e].forEach((t6) => {
          this.gpgpu.deleteMatrixTexture(t6.texture);
        });
      this.freeTextures = null, this.usedTextures = null, this.numUsedTextures = 0, this.numFreeTextures = 0, this._numBytesAllocated = 0, this._numBytesFree = 0;
    }
  }
};
function N8(r, e) {
  let t6 = r;
  if (e === t6.R32F)
    return 4;
  if (e === t6.R16F)
    return 2;
  if (e === t6.RGBA32F)
    return 16;
  if (e === r.RGBA)
    return 16;
  if (e === t6.RGBA16F)
    return 8;
  if (e === t6.RGBA8)
    return 4;
  throw new Error(`Unknown internal format ${e}`);
}
function v$(r, e, t6, o, n) {
  let s = T8(e, o), a;
  if (n) {
    let [p, u] = Ys(r[0], r[1]);
    a = p * u;
  } else {
    let [p, u] = $u(r[0], r[1]);
    a = p * u;
  }
  let i = N8(t6, s);
  return a * i;
}
function T8(r, e) {
  switch (r) {
    case Zt.PACKED_2X2_FLOAT32:
      return Gf(e);
    case Zt.PACKED_2X2_FLOAT16:
      return Hf(e);
    case Zt.UNPACKED_FLOAT32:
      return zf(e);
    case Zt.UNPACKED_FLOAT16:
      return Wf(e);
    case Zt.PACKED_4X1_UNSIGNED_BYTE:
      return Uf(e);
    default:
      throw new Error(`Unknown physical texture type ${r}`);
  }
}
function _8(r) {
  return O().getBool("WEBGL_RENDER_FLOAT32_ENABLED") ? r ? Zt.PACKED_2X2_FLOAT32 : Zt.UNPACKED_FLOAT32 : r ? Zt.PACKED_2X2_FLOAT16 : Zt.UNPACKED_FLOAT16;
}
function k$(r, e) {
  if (r === ir.UPLOAD)
    return Zt.PACKED_2X2_FLOAT32;
  if (r === ir.RENDER || r == null)
    return _8(e);
  if (r === ir.DOWNLOAD || r === ir.PIXELS)
    return Zt.PACKED_4X1_UNSIGNED_BYTE;
  throw new Error(`Unknown logical texture type ${r}`);
}
function N$(r, e, t6) {
  return `${r[0]}_${r[1]}_${e}_${t6}`;
}
var Jt = class {
  constructor(e, t6) {
    this.variableNames = ["A"], this.outputShape = e, this.enableShapeUniforms = ct(this.outputShape.length), this.userCode = `
      float unaryOperation(float x) {
        ${t6}
      }

      void main() {
        float x = getAAtOutCoords();
        float y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
};
var Bt = "if (isnan(x)) return x;";
var T$ = "return x;";
var Cw = "return abs(x);";
var _$ = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var E$ = Bt + `
  return (x < 0.0) ? 0.0 : x;
`;
var $$ = Bt + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
var Qs = "return x;";
var A$ = "return 1.0 / (1.0 + exp(-1.0 * x));";
var F$ = "return x;";
var D$ = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
var O$ = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var P$ = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var M$ = "return 1.0 / (1.0 + exp(-1.0 * x));";
var Ar = class {
  constructor(e, t6) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.enableShapeUniforms = ct(this.outputShape.length), this.userCode = `
      vec4 unaryOperation(vec4 x) {
        ${t6}
      }

      void main() {
        vec4 x = getAAtOutCoords();
        vec4 y = unaryOperation(x);

        setOutput(y);
      }
    `;
  }
};
var Qf = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = false, this.outputShape = e, this.enableShapeUniforms = ct(this.outputShape.length);
    let t6 = e.length, o = $t("rc", t6), n = _e(t6), s = I$(t6, o), a = o.slice(-2), i = t6 <= 1 ? "rc" : `vec2(${a.join(",")})`;
    this.userCode = `
      void main() {
        ${n} rc = getOutputCoords();
        vec4 packedInput = getA(${s});

        setOutput(getChannel(packedInput, ${i}));
      }
    `;
  }
};
var $8 = Lt.whereImpl;
var A8 = 1e-7;
var R8 = 1e-4;
var Zf = {};
function F8(r) {
  return r in Zf || (Zf[r] = {}), Zf[r];
}
var D8 = O().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");
var O8 = 600;
function P8() {
  return O().global.screen == null ? 1024 : O().global.screen.height * O().global.screen.width * window.devicePixelRatio * O8 / 1024 / 1024;
}
var Bi = class extends Zr {
  constructor(e) {
    if (super(), this.pendingRead = /* @__PURE__ */ new WeakMap(), this.pendingDisposal = /* @__PURE__ */ new WeakSet(), this.dataRefCount = /* @__PURE__ */ new WeakMap(), this.numBytesInGPU = 0, this.uploadWaitMs = 0, this.downloadWaitMs = 0, this.lastGlFlushTime = 0, this.warnedAboutMemory = false, this.pendingDeletes = 0, this.disposed = false, !O().getBool("HAS_WEBGL"))
      throw new Error("WebGL is not supported on this device");
    let t6;
    if (e != null) {
      if (e instanceof Fu)
        t6 = e;
      else {
        let o = Wr(O().getNumber("WEBGL_VERSION"), e);
        t6 = new Fu(o);
      }
      this.binaryCache = {}, this.gpgpuCreatedLocally = false;
    } else {
      let o = Wr(O().getNumber("WEBGL_VERSION"));
      t6 = new Fu(o), this.binaryCache = F8(O().getNumber("WEBGL_VERSION")), this.gpgpuCreatedLocally = true;
    }
    this.gpgpu = t6, this.canvas = this.gpgpu.gl.canvas, this.textureManager = new Yf(this.gpgpu), this.numMBBeforeWarning = P8(), this.texData = new Do(this, cr());
  }
  nextDataId() {
    return Bi.nextDataId++;
  }
  numDataIds() {
    return this.texData.numDataIds() - this.pendingDeletes;
  }
  writeTexture(e, t6, o, n, s, a) {
    let i = this.makeTensorInfo(t6, o), p = this.texData.get(i.dataId);
    p.isPacked = false, p.texture = { texture: e, texShape: [n, s] }, p.texShape = [n, s];
    let u = rc(t6), c = new vl(u, false, a), l = this.runWebGLProgram(c, [i], o, [[n, s]]);
    return l.shape = t6, p.texture = null, this.disposeIntermediateTensorInfo(i), l.dataId;
  }
  write(e, t6, o) {
    if ((O().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS") || O().getBool("DEBUG")) && this.checkNumericalProblems(e), o === "complex64" && e != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    let n = { id: this.nextDataId() };
    return this.texData.set(n, { shape: t6, dtype: o, values: e, usage: ir.UPLOAD, refCount: 1 }), n;
  }
  refCount(e) {
    return this.texData.has(e) ? this.texData.get(e).refCount : 0;
  }
  incRef(e) {
    let t6 = this.texData.get(e);
    t6.refCount++;
  }
  decRef(e) {
    if (this.texData.has(e)) {
      let t6 = this.texData.get(e);
      t6.refCount--;
    }
  }
  move(e, t6, o, n, s) {
    if (O().getBool("DEBUG") && this.checkNumericalProblems(t6), n === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.texData.set(e, { shape: o, dtype: n, values: t6, usage: ir.UPLOAD, refCount: s });
  }
  disposeIntermediateTensorInfo(e) {
    this.disposeData(e.dataId);
  }
  readSync(e) {
    let t6 = this.texData.get(e), { values: o, dtype: n, complexTensorInfos: s, slice: a, shape: i, isPacked: p } = t6;
    if (a != null) {
      let m;
      p ? m = new Ar(i, Qs) : m = new Jt(i, Qs);
      let d = this.runWebGLProgram(m, [{ dataId: e, shape: i, dtype: n }], n), f = this.readSync(d.dataId);
      return this.disposeIntermediateTensorInfo(d), f;
    }
    if (o != null)
      return this.convertAndCacheOnCPU(e);
    if (n === "string")
      return o;
    let u = this.activeTimers != null, c;
    u && (c = y.now());
    let l;
    if (n === "complex64") {
      let m = this.readSync(s.real.dataId), d = this.readSync(s.imag.dataId);
      l = S.mergeRealAndImagArrays(m, d);
    } else
      l = this.getValuesFromTexture(e);
    return u && (this.downloadWaitMs += y.now() - c), this.convertAndCacheOnCPU(e, l);
  }
  async read(e) {
    if (this.pendingRead.has(e)) {
      let f = this.pendingRead.get(e);
      return new Promise((h) => f.push(h));
    }
    let t6 = this.texData.get(e), { values: o, shape: n, slice: s, dtype: a, complexTensorInfos: i, isPacked: p } = t6;
    if (s != null) {
      let f;
      p ? f = new Ar(n, Qs) : f = new Jt(n, Qs);
      let h = this.runWebGLProgram(f, [{ dataId: e, shape: n, dtype: a }], a), g = this.read(h.dataId);
      return this.disposeIntermediateTensorInfo(h), g;
    }
    if (o != null)
      return this.convertAndCacheOnCPU(e);
    if (O().getBool("DEBUG") && !O().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED") && O().getNumber("WEBGL_VERSION") === 2)
      throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");
    let u = null, c;
    if (a !== "complex64" && O().get("WEBGL_BUFFER_SUPPORTED")) {
      c = this.decode(e);
      let f = this.texData.get(c.dataId);
      u = this.gpgpu.createBufferFromTexture(f.texture.texture, ...Cl(n));
    }
    this.pendingRead.set(e, []), a !== "complex64" && await this.gpgpu.createAndWaitForFence();
    let l;
    if (a === "complex64") {
      let f = await Promise.all([this.read(i.real.dataId), this.read(i.imag.dataId)]), h = f[0], g = f[1];
      l = S.mergeRealAndImagArrays(h, g);
    } else if (u == null)
      l = this.getValuesFromTexture(e);
    else {
      let f = y.sizeFromShape(n);
      l = this.gpgpu.downloadFloat32MatrixFromBuffer(u, f);
    }
    if (c != null && this.disposeIntermediateTensorInfo(c), u != null) {
      let f = this.gpgpu.gl;
      ce(f, () => f.deleteBuffer(u));
    }
    let m = this.convertAndCacheOnCPU(e, l), d = this.pendingRead.get(e);
    return this.pendingRead.delete(e), d.forEach((f) => f(m)), this.pendingDisposal.has(e) && (this.pendingDisposal.delete(e), this.disposeData(e) && cr().removeDataId(e, this), this.pendingDeletes--), m;
  }
  readToGPU(e, t6 = {}) {
    let o = this.texData.get(e), { values: n, shape: s, slice: a, dtype: i, isPacked: p, texture: u } = o;
    if (i === "complex64")
      throw new Error("Does not support reading texture for complex64 dtype.");
    if (a != null) {
      let d;
      p ? d = new Ar(s, Qs) : d = new Jt(s, Qs);
      let f = this.runWebGLProgram(d, [{ dataId: e, shape: s, dtype: i }], i), h = this.readToGPU(f, t6);
      return this.disposeIntermediateTensorInfo(f), h;
    }
    if (u == null)
      throw n != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    let c = this.decode(e, t6.customTexShape), l = cr().makeTensorFromTensorInfo(c), m = this.texData.get(c.dataId);
    return Object.assign({ tensorRef: l }, m.texture);
  }
  bufferSync(e) {
    let t6 = this.readSync(e.dataId);
    if (e.dtype === "string")
      try {
        let o = t6.map((n) => y.decodeString(n));
        return le(e.shape, e.dtype, o);
      } catch (o) {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return le(e.shape, e.dtype, t6);
  }
  checkNumericalProblems(e) {
    if (e != null)
      for (let t6 = 0; t6 < e.length; t6++) {
        let o = e[t6];
        if (!OS(o))
          throw O().getBool("WEBGL_RENDER_FLOAT32_CAPABLE") ? Error(`The value ${o} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`) : Error(`The value ${o} cannot be represented on this device.`);
      }
  }
  getValuesFromTexture(e) {
    let { shape: t6, dtype: o, isPacked: n } = this.texData.get(e), s = y.sizeFromShape(t6);
    if (O().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")) {
      let m = this.decode(e), d = this.texData.get(m.dataId), f = this.gpgpu.downloadMatrixFromPackedTexture(d.texture.texture, ...Cl(t6)).subarray(0, s);
      return this.disposeIntermediateTensorInfo(m), f;
    }
    let a = O().getBool("WEBGL_PACK") && n === true, i = a ? rc(t6) : t6, p = a ? new Bf(i) : new Lf(i), u = this.runWebGLProgram(p, [{ shape: i, dtype: o, dataId: e }], "float32"), c = this.texData.get(u.dataId), l = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture, c.texShape[0], c.texShape[1]).subarray(0, s);
    return this.disposeIntermediateTensorInfo(u), l;
  }
  timerAvailable() {
    return O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0;
  }
  time(e) {
    let t6 = this.activeTimers, o = [], n = false;
    this.programTimersStack == null ? (this.programTimersStack = o, n = true) : this.activeTimers.push(o), this.activeTimers = o, e();
    let s = y.flatten(this.activeTimers.map((p) => p.query)).filter((p) => p != null), a = y.flatten(this.activeTimers.map((p) => p.name)).filter((p) => p != null);
    this.activeTimers = t6, n && (this.programTimersStack = null);
    let i = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null };
    return (async () => {
      if (O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0) {
        let p = await Promise.all(s);
        i.kernelMs = y.sum(p), i.getExtraProfileInfo = () => p.map((u, c) => ({ name: a[c], ms: u })).map((u) => `${u.name}: ${u.ms}`).join(", ");
      } else
        i.kernelMs = { error: "WebGL query timers are not supported in this environment." };
      return this.uploadWaitMs = 0, this.downloadWaitMs = 0, i;
    })();
  }
  memory() {
    return { unreliable: false, numBytesInGPU: this.numBytesInGPU, numBytesInGPUAllocated: this.textureManager.numBytesAllocated, numBytesInGPUFree: this.textureManager.numBytesFree };
  }
  startTimer() {
    return O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? this.gpgpu.beginQuery() : { startMs: y.now(), endMs: null };
  }
  endTimer(e) {
    return O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0 ? (this.gpgpu.endQuery(), e) : (e.endMs = y.now(), e);
  }
  async getQueryTime(e) {
    if (O().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE") > 0)
      return this.gpgpu.waitForQueryAndGetTime(e);
    let t6 = e;
    return t6.endMs - t6.startMs;
  }
  disposeData(e, t6 = false) {
    if (this.pendingDisposal.has(e))
      return false;
    if (!this.texData.has(e))
      return true;
    if (t6 ? this.texData.get(e).refCount = 0 : this.texData.get(e).refCount--, !t6 && this.texData.get(e).refCount > 0)
      return false;
    if (this.pendingRead.has(e))
      return this.pendingDisposal.add(e), this.pendingDeletes++, false;
    this.releaseGPUData(e);
    let { complexTensorInfos: o } = this.texData.get(e);
    return o != null && (this.disposeData(o.real.dataId, t6), this.disposeData(o.imag.dataId, t6)), this.texData.delete(e), true;
  }
  releaseGPUData(e) {
    let { texture: t6, dtype: o, texShape: n, usage: s, isPacked: a, slice: i } = this.texData.get(e), p = i && i.origDataId || e, u = this.dataRefCount.get(p);
    u > 1 ? this.dataRefCount.set(p, u - 1) : (this.dataRefCount.delete(p), t6 != null && (this.numBytesInGPU -= this.computeBytes(n, o), this.textureManager.releaseTexture(t6, n, s, a)));
    let c = this.texData.get(e);
    c.texture = null, c.texShape = null, c.isPacked = false, c.slice = null;
  }
  getTexture(e) {
    return this.uploadToGPU(e), this.texData.get(e).texture.texture;
  }
  getDataInfo(e) {
    return this.texData.get(e);
  }
  shouldExecuteOnCPU(e, t6 = D8) {
    return O().getBool("WEBGL_CPU_FORWARD") && e.every((o) => this.texData.get(o.dataId).texture == null && y.sizeFromShape(o.shape) < t6);
  }
  getGPGPUContext() {
    return this.gpgpu;
  }
  where(e) {
    S.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");
    let t6 = e.dataSync();
    return $8(e.shape, t6);
  }
  packedUnaryOp(e, t6, o) {
    let n = new Ar(e.shape, t6), s = this.compileAndRun(n, [e], o);
    return cr().makeTensorFromTensorInfo(s);
  }
  abs(e) {
    if (this.shouldExecuteOnCPU([e]) && e.dtype !== "complex64") {
      let n = Kf(this.texData.get(e.dataId).values);
      return this.makeOutput(e.shape, e.dtype, n);
    }
    if (O().getBool("WEBGL_PACK_UNARY_OPERATIONS"))
      return this.packedUnaryOp(e, Cw, e.dtype);
    let t6 = new Jt(e.shape, Cw), o = this.compileAndRun(t6, [e]);
    return cr().makeTensorFromTensorInfo(o);
  }
  makeTensorInfo(e, t6, o) {
    let n;
    if (t6 === "string" && o != null && o.length > 0 && y.isString(o[0])) {
      let s = o.map((a) => y.encodeString(a));
      n = this.write(s, e, t6);
    } else
      n = this.write(o, e, t6);
    return this.texData.get(n).usage = null, { dataId: n, shape: e, dtype: t6 };
  }
  makeOutput(e, t6, o) {
    return cr().makeTensorFromTensorInfo(this.makeTensorInfo(e, t6, o), this);
  }
  unpackTensor(e) {
    let t6 = new Qf(e.shape);
    return this.runWebGLProgram(t6, [e], e.dtype);
  }
  packTensor(e) {
    let t6 = new Xf(e.shape), o = true;
    return this.runWebGLProgram(t6, [e], e.dtype, null, o);
  }
  packedReshape(e, t6) {
    let o = [Va(e.shape), ...za(e.shape)], n = { dtype: e.dtype, shape: o, dataId: e.dataId }, s = [Va(t6), ...za(t6)], a = new lc(s, o), i = true, p = [o], u = this.runWebGLProgram(a, [n], e.dtype, p, i);
    return { dataId: u.dataId, shape: t6, dtype: u.dtype };
  }
  decode(e, t6) {
    let o = this.texData.get(e), { isPacked: n, shape: s, dtype: a } = o;
    if (t6 != null) {
      let m = y.sizeFromShape(s), d = t6[0] * t6[1] * 4;
      y.assert(m <= d, () => "customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data.");
    }
    let i = rc(s), p;
    n ? p = new Mf(i) : p = new Pf(i);
    let u = true, c = [t6 != null ? t6 : Cl(i)], l = this.runWebGLProgram(p, [{ shape: i, dtype: a, dataId: e }], a, c, u, t6);
    return { dtype: a, shape: s, dataId: l.dataId };
  }
  runWebGLProgram(e, t6, o, n, s = false, a) {
    let i = this.makeTensorInfo(e.outputShape, o), p = this.texData.get(i.dataId);
    if (e.packedOutput && (p.isPacked = true), e.outPackingScheme === Mi.DENSE) {
      let x = a != null ? a : Cl(e.outputShape);
      p.texShape = x.map((b) => b * 2);
    }
    if (e.outTexUsage != null && (p.usage = e.outTexUsage), y.sizeFromShape(i.shape) === 0)
      return p.values = y.getTypedArrayFromDType(i.dtype, 0), i;
    let u = [], c = t6.map((x) => {
      if (x.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      let b = this.texData.get(x.dataId);
      if (b.texture == null) {
        if (!e.packedInputs && y.sizeFromShape(x.shape) <= O().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))
          return { shape: x.shape, texData: null, isUniform: true, uniformValues: b.values };
        e.packedInputs && (b.isPacked = true, b.shape = x.shape);
      }
      if (this.uploadToGPU(x.dataId), !!b.isPacked != !!e.packedInputs)
        x = b.isPacked ? this.unpackTensor(x) : this.packTensor(x), u.push(x), b = this.texData.get(x.dataId);
      else if (b.isPacked && !Li(b.shape, x.shape)) {
        let C = x, w = x.shape;
        x.shape = b.shape, x = this.packedReshape(x, w), u.push(x), b = this.texData.get(x.dataId), C.shape = w;
      }
      return { shape: x.shape, texData: b, isUniform: false };
    });
    this.uploadToGPU(i.dataId);
    let l = { shape: i.shape, texData: p, isUniform: false }, m = FE(e, c, l), d = this.getAndSaveBinary(m, () => AE(this.gpgpu, e, c, l)), f = this.activeTimers != null, h;
    f && (h = this.startTimer()), O().get("ENGINE_COMPILE_ONLY") || RE(this.gpgpu, d, c, l, n), u.forEach((x) => this.disposeIntermediateTensorInfo(x)), f && (h = this.endTimer(h), this.activeTimers.push({ name: e.constructor.name, query: this.getQueryTime(h) }));
    let g = O().get("WEBGL_FLUSH_THRESHOLD");
    if (g > 0) {
      let x = y.now();
      x - this.lastGlFlushTime > g && (this.gpgpu.gl.flush(), this.lastGlFlushTime = x);
    }
    if (!O().getBool("WEBGL_LAZILY_UNPACK") && p.isPacked && s === false) {
      let x = this.unpackTensor(i);
      return this.disposeIntermediateTensorInfo(i), x;
    }
    return i;
  }
  compileAndRun(e, t6, o, n, s = false) {
    return o = o || t6[0].dtype, this.runWebGLProgram(e, t6, o, n, s);
  }
  getAndSaveBinary(e, t6) {
    return e in this.binaryCache || (this.binaryCache[e] = t6()), this.binaryCache[e];
  }
  getTextureManager() {
    return this.textureManager;
  }
  dispose() {
    this.disposed || (O().getBool("IS_TEST") || Object.keys(this.binaryCache).forEach((t6) => {
      this.gpgpu.deleteProgram(this.binaryCache[t6].webGLProgram), delete this.binaryCache[t6];
    }), this.textureManager.dispose(), this.canvas != null && typeof HTMLCanvasElement != "undefined" && this.canvas instanceof HTMLCanvasElement ? this.canvas.remove() : this.canvas = null, this.gpgpuCreatedLocally && (this.gpgpu.program = null, this.gpgpu.dispose()), this.disposed = true);
  }
  floatPrecision() {
    return this.floatPrecisionValue == null && (this.floatPrecisionValue = Ee(() => {
      if (!O().get("WEBGL_RENDER_FLOAT32_ENABLED")) {
        let e = O().getBool("DEBUG");
        O().set("DEBUG", false);
        let t6 = this.abs(be(1e-8)).dataSync()[0];
        if (O().set("DEBUG", e), t6 > 0)
          return 32;
      }
      return 16;
    })), this.floatPrecisionValue;
  }
  epsilon() {
    return this.floatPrecision() === 32 ? A8 : R8;
  }
  uploadToGPU(e) {
    let t6 = this.texData.get(e), { shape: o, dtype: n, values: s, texture: a, usage: i, isPacked: p } = t6;
    if (a != null)
      return;
    let u = this.activeTimers != null, c;
    u && (c = y.now());
    let l = t6.texShape;
    if (l == null && (l = jS(o, p), t6.texShape = l), s != null) {
      let m = rc(o), d, f = l[1], h = l[0], g = s instanceof Uint8Array || s instanceof Uint8ClampedArray;
      (p || !g) && ([f, h] = Ys(l[0], l[1])), p ? d = new Vf(m, g) : d = new vl(m, g);
      let x = g ? [h, f] : l, b = this.makeTensorInfo(x, n), C = this.texData.get(b.dataId);
      g ? C.usage = ir.PIXELS : C.usage = ir.UPLOAD, C.texShape = x, this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(b.dataId), f, h, s);
      let w = [[h, f]], k = true, _ = this.runWebGLProgram(d, [b], n, w, k), $ = this.texData.get(_.dataId);
      t6.texShape = $.texShape, t6.isPacked = $.isPacked, t6.usage = $.usage, O().get("ENGINE_COMPILE_ONLY") ? this.disposeData(_.dataId) : (t6.texture = $.texture, t6.values = null, this.texData.delete(_.dataId)), this.disposeIntermediateTensorInfo(b), u && (this.uploadWaitMs += y.now() - c);
    } else {
      let m = this.acquireTexture(l, i, n, p);
      t6.texture = m;
    }
  }
  convertAndCacheOnCPU(e, t6) {
    let o = this.texData.get(e), { dtype: n } = o;
    return t6 != null && (o.values = M8(t6, n)), o.values;
  }
  acquireTexture(e, t6, o, n) {
    if (this.numBytesInGPU += this.computeBytes(e, o), !this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {
      let s = (this.numBytesInGPU / 1024 / 1024).toFixed(2);
      this.warnedAboutMemory = true, console.warn(`High memory usage in GPU: ${s} MB, most likely due to a memory leak`);
    }
    return this.textureManager.acquireTexture(e, t6, n);
  }
  computeBytes(e, t6) {
    return e[0] * e[1] * y.bytesPerElement(t6);
  }
  checkCompileCompletion() {
    for (let [, e] of Object.entries(this.binaryCache))
      this.checkCompletion_(e);
  }
  async checkCompileCompletionAsync() {
    let e = [];
    if (this.gpgpu.parallelCompilationExtension) {
      for (let [, t6] of Object.entries(this.binaryCache))
        e.push(this.checkCompletionAsync_(t6));
      return Promise.all(e);
    } else {
      for (let [, t6] of Object.entries(this.binaryCache)) {
        let o = new Promise((n) => {
          try {
            this.checkCompletion_(t6), n(true);
          } catch (s) {
            throw s;
          }
        });
        e.push(o);
      }
      return Promise.all(e);
    }
  }
  async checkCompletionAsync_(e) {
    return this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR) ? this.checkCompletion_(e) : (await CC(), this.checkCompletionAsync_(e));
  }
  checkCompletion_(e) {
    if (this.gpgpu.gl.getProgramParameter(e.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false)
      throw console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)), this.gpgpu.gl.getShaderParameter(e.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false ? ($f(e.source, this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)), new Error("Failed to compile fragment shader.")) : new Error("Failed to link vertex and fragment shaders.");
    return true;
  }
  getUniformLocations() {
    for (let [, e] of Object.entries(this.binaryCache)) {
      let { uniformLocations: t6, customUniformLocations: o, infLoc: n, nanLoc: s, inShapesLocations: a, inTexShapesLocations: i, outShapeLocation: p, outShapeStridesLocation: u, outTexShapeLocation: c } = tw(this.gpgpu, e.program, e.webGLProgram);
      e.uniformLocations = t6, e.customUniformLocations = o, e.infLoc = n, e.nanLoc = s, e.inShapesLocations = a, e.inTexShapesLocations = i, e.outShapeLocation = p, e.outShapeStridesLocation = u, e.outTexShapeLocation = c;
    }
  }
  createTensorFromTexture(e, t6, o) {
    let { texture: n, height: s, width: a, channels: i } = e, p = cr().backend;
    if (!p.gpgpu.gl.isTexture(n))
      throw new Error("The texture is invalid. Also, please make sure the texture and the TFJS WebGL backend are using the same canvas. If you want to use your own custom canvas, you have to create and use the custom TFJS WebGL backend created from the canvas through 'new tf.MathBackendWebGL(customCanvas)'.");
    let u = p.writeTexture(n, t6, o, s, a, i);
    return cr().makeTensorFromDataId(u, t6, o, p);
  }
};
Bi.nextDataId = 0;
function M8(r, e) {
  if (e === "float32" || e === "complex64")
    return r;
  if (e === "int32" || e === "bool") {
    let t6 = e === "int32" ? new Int32Array(r.length) : new Uint8Array(r.length);
    for (let o = 0; o < t6.length; ++o)
      t6[o] = Math.round(r[o]);
    return t6;
  } else
    throw new Error(`Unknown dtype ${e}`);
}
var L8 = "4.1.0";
function L$() {
  O().set("WEBGL_FORCE_F16_TEXTURES", true);
}
yi.isBrowser() && Ci("webgl", () => new Bi(), 2);
var L9e = { forceHalfFloat: L$ };
var mc = `
  if (isnan(a)) return a;
  if (isnan(b)) return b;
`;
var io = class {
  constructor(e, t6, o) {
    this.variableNames = ["A", "B"], this.outputShape = S.assertAndGetBroadcastShape(t6, o), this.enableShapeUniforms = ct(this.outputShape.length), this.userCode = `
      float binaryOperation(float a, float b) {
        ${e}
      }

      void main() {
        float a = getAAtOutCoords();
        float b = getBAtOutCoords();
        setOutput(binaryOperation(a, b));
      }
    `;
  }
};
var Zs = `
  result.r = isNaN.r ? NAN : result.r;
  result.g = isNaN.g ? NAN : result.g;
  result.b = isNaN.b ? NAN : result.b;
  result.a = isNaN.a ? NAN : result.a;
`;
var To = class {
  constructor(e, t6, o, n = false) {
    this.variableNames = ["A", "B"], this.supportsBroadcasting = true, this.packedInputs = true, this.packedOutput = true, this.outputShape = S.assertAndGetBroadcastShape(t6, o);
    let s = this.outputShape.length;
    this.enableShapeUniforms = ct(s);
    let a = "";
    if (n)
      if (s === 0 || y.sizeFromShape(this.outputShape) === 1)
        a = `
          result.y = 0.;
          result.z = 0.;
          result.w = 0.;
        `;
      else if (a = `
          ${_e(s)} coords = getOutputCoords();
        `, s === 1)
        this.enableShapeUniforms ? a += `
            result.y = (coords + 1) >= outShape ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          ` : a += `
            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;
            result.z = 0.;
            result.w = 0.;
          `;
      else {
        let p = $t("coords", s);
        this.enableShapeUniforms ? a += `
            bool nextRowOutOfBounds =
              (${p[s - 2]} + 1) >= outShape[${s} - 2];
            bool nextColOutOfBounds =
              (${p[s - 1]} + 1) >= outShape[${s} - 1];
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          ` : a += `
            bool nextRowOutOfBounds =
              (${p[s - 2]} + 1) >= ${this.outputShape[s - 2]};
            bool nextColOutOfBounds =
              (${p[s - 1]} + 1) >= ${this.outputShape[s - 1]};
            result.y = nextColOutOfBounds ? 0. : result.y;
            result.z = nextRowOutOfBounds ? 0. : result.z;
            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;
          `;
      }
    this.userCode = `
      vec4 binaryOperation(vec4 a, vec4 b) {
        ${e}
      }

      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();

        vec4 result = binaryOperation(a, b);
        ${a}

        setOutput(result);
      }
    `;
  }
};
function At(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  return t6.incRef(o.dataId), { dataId: o.dataId, shape: o.shape, dtype: o.dtype };
}
var B$ = { kernelName: mo, backendName: "webgl", kernelFunc: At };
function Rr(r) {
  let { inputs: e, backend: t6 } = r, { real: o, imag: n } = e, s = t6.makeTensorInfo(o.shape, "complex64"), a = t6.texData.get(s.dataId), i = At({ inputs: { x: o }, backend: t6 }), p = At({ inputs: { x: n }, backend: t6 });
  return a.complexTensorInfos = { real: i, imag: p }, s;
}
var V$ = { kernelName: ei, backendName: "webgl", kernelFunc: Rr };
var Sw = "return (a < 0.) ? b * a : a;";
var ww = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function B8(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { alpha: s } = o, a = t6.makeTensorInfo([], "float32", y.createScalarValue(s, "float32")), i = O().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new To(ww, n.shape, a.shape) : new io(Sw, n.shape, a.shape), p = t6.runWebGLProgram(i, [n, a], "float32");
  return t6.disposeIntermediateTensorInfo(a), p;
}
var z$ = { kernelName: mn, backendName: "webgl", kernelFunc: B8 };
var Iw = "return (a < 0.) ? b * a : a;";
var vw = `
  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));
  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);
`;
function V8(r) {
  let { inputs: e, backend: t6 } = r, { x: o, alpha: n } = e, s = O().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new To(vw, o.shape, n.shape) : new io(Iw, o.shape, n.shape);
  return t6.runWebGLProgram(s, [o, n], "float32");
}
var W$ = { kernelName: Rn, backendName: "webgl", kernelFunc: V8 };
var _o = "if (isnan(x)) return x;";
function ge({ opSnippet: r, packedOpSnippet: e, cpuKernelImpl: t6, dtype: o }) {
  return ({ inputs: n, backend: s }) => {
    let { x: a } = n, i = s, p = o || a.dtype;
    if (i.shouldExecuteOnCPU([a]) && t6 != null) {
      let l = i.texData.get(a.dataId), m = t6(l.values, p);
      return i.makeTensorInfo(a.shape, p, m);
    }
    let u = O().getBool("WEBGL_PACK_UNARY_OPERATIONS") && e != null, c;
    return u ? c = new Ar(a.shape, e) : c = new Jt(a.shape, r), i.runWebGLProgram(c, [a], p);
  };
}
function tt({ opSnippet: r, packedOpSnippet: e, checkOutOfBounds: t6 = false, supportsComplex: o = false, cpuKernelImpl: n, dtype: s }) {
  return ({ inputs: a, backend: i }) => {
    let { a: p, b: u } = a, c = i;
    if (o && p.dtype === "complex64") {
      let f = c.texData.get(p.dataId), h = c.texData.get(u.dataId), [g, x] = [[f.complexTensorInfos.real, h.complexTensorInfos.real], [f.complexTensorInfos.imag, h.complexTensorInfos.imag]].map((C) => {
        let [w, k] = C, _ = { dataId: w.dataId, dtype: w.dtype, shape: p.shape }, $ = { dataId: k.dataId, dtype: k.dtype, shape: u.shape }, A = new io(r, p.shape, u.shape);
        return c.runWebGLProgram(A, [_, $], dt(w.dtype, k.dtype));
      }), b = Rr({ inputs: { real: g, imag: x }, backend: c });
      return c.disposeIntermediateTensorInfo(g), c.disposeIntermediateTensorInfo(x), b;
    }
    let l = s || dt(p.dtype, u.dtype);
    if ((p.dtype === "string" || u.dtype === "string" || c.shouldExecuteOnCPU([p, u])) && n != null) {
      let f = c.texData.get(p.dataId).values, h = c.texData.get(u.dataId).values, g = p.dtype === "string" ? S.fromUint8ToStringArray(f) : f, x = p.dtype === "string" ? S.fromUint8ToStringArray(h) : h, [b, C] = n(p.shape, u.shape, g, x, l), w = c.makeTensorInfo(C, l), k = c.texData.get(w.dataId);
      return k.values = b, w;
    }
    let m = O().getBool("WEBGL_PACK_BINARY_OPERATIONS") && e != null, d;
    return m ? d = new To(e, p.shape, u.shape, t6) : d = new io(r, p.shape, u.shape), c.runWebGLProgram(d, [p, u], l);
  };
}
function Wa(r, e = false) {
  if (r === "linear")
    return e ? F$ : T$;
  if (r === "relu")
    return e ? O$ : E$;
  if (r === "elu")
    return e ? D$ : _$;
  if (r === "relu6")
    return e ? P$ : $$;
  if (r === "prelu")
    return e ? vw : Iw;
  if (r === "leakyrelu")
    return e ? ww : Sw;
  if (r === "sigmoid")
    return e ? M$ : A$;
  throw new Error(`Activation ${r} has not been implemented for the WebGL backend.`);
}
var dc = class {
  constructor(e, t6, o, n = false, s = false, a = false, i = null, p = false, u = false) {
    this.variableNames = ["matrixA", "matrixB"], this.packedInputs = true, this.packedOutput = true, this.outputShape = o, this.enableShapeUniforms = ct(this.outputShape.length);
    let c = n ? e[1] : e[2], l = Math.ceil(c / 2), m = n ? "i * 2, rc.y" : "rc.y, i * 2", d = s ? "rc.z, i * 2" : "i * 2, rc.z", f = n ? ["a.xxyy", "a.zzww"] : ["a.xxzz", "a.yyww"], h = s ? ["b.xzxz", "b.ywyw"] : ["b.xyxy", "b.zwzw"], g = "", x = "";
    i && (p ? g = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${i}
        }` : u ? g = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${i}
        }` : g = `vec4 activation(vec4 x) {
          ${i}
        }`, x = "result = activation(result);");
    let b = a ? "result += getBiasAtOutCoords();" : "";
    a && this.variableNames.push("bias"), p && this.variableNames.push("preluActivationWeights"), u && this.variableNames.push("leakyreluAlpha");
    let C = "rc.x", w = "rc.x";
    e[0] < t6[0] ? C = `int(min(float(rc.x), ${e[0] - 1}.))` : t6[0] < e[0] && (w = `int(min(float(rc.x), ${t6[0] - 1}.))`), this.userCode = `
      ${g}
      // Don't use uniform for sharedDimensionPacked for performance.
      const float sharedDimension = ${l}.0;

      vec4 dot2x2ARowBCol(ivec3 rc) {
        vec4 result = vec4(0);
        for (int i = 0; i < ${l}; i++) {
          int batchA = ${C};
          int batchB = ${w};
          vec4 a = getMatrixA(batchA, ${m});
          vec4 b = getMatrixB(batchB, ${d});

          // These swizzled products need to be separately added.
          // See: https://github.com/tensorflow/tfjs/issues/1735
          result += (${f[0]} * ${h[0]});
          result += (${f[1]} * ${h[1]});
        }
        return result;
      }

      void main() {
        ivec3 rc = getOutputCoords();
        vec4 result = dot2x2ARowBCol(rc);

        ${b}

        ${x}

        setOutput(result);
      }
    `;
  }
};
var kw = { REAL: "return areal * breal - aimag * bimag;", IMAG: "return areal * bimag + aimag * breal;" };
var Nl = class {
  constructor(e, t6, o) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.outputShape = S.assertAndGetBroadcastShape(t6, o), this.userCode = `
      float binaryOpComplex(
          float areal, float aimag, float breal, float bimag) {
        ${e}
      }

      void main() {
        float areal = getARealAtOutCoords();
        float aimag = getAImagAtOutCoords();
        float breal = getBRealAtOutCoords();
        float bimag = getBImagAtOutCoords();
        setOutput(binaryOpComplex(areal, aimag, breal, bimag));
      }
    `;
  }
};
var U$ = "return a * b;";
function Tl(r) {
  let { inputs: e, backend: t6 } = r, { a: o, b: n } = e, s = S.upcastType(o.dtype, n.dtype);
  if (o.dtype === "complex64") {
    let i = t6.texData.get(o.dataId), p = t6.texData.get(n.dataId), u = new Nl(kw.REAL, o.shape, n.shape), c = new Nl(kw.IMAG, o.shape, n.shape), l = [{ dataId: i.complexTensorInfos.real.dataId, dtype: i.complexTensorInfos.real.dtype, shape: o.shape }, { dataId: i.complexTensorInfos.imag.dataId, dtype: i.complexTensorInfos.imag.dtype, shape: o.shape }, { dataId: p.complexTensorInfos.real.dataId, dtype: p.complexTensorInfos.real.dtype, shape: n.shape }, { dataId: p.complexTensorInfos.imag.dataId, dtype: p.complexTensorInfos.imag.dtype, shape: n.shape }], m = t6.runWebGLProgram(u, l, "float32"), d = t6.runWebGLProgram(c, l, "float32"), f = Rr({ inputs: { real: m, imag: d }, backend: t6 });
    return t6.disposeIntermediateTensorInfo(m), t6.disposeIntermediateTensorInfo(d), f;
  }
  if (t6.shouldExecuteOnCPU([o, n])) {
    let i = t6.texData.get(o.dataId), p = t6.texData.get(n.dataId), [u, c] = e$(o.shape, n.shape, i.values, p.values, s), l = t6.makeTensorInfo(c, s), m = t6.texData.get(l.dataId);
    return m.values = u, l;
  }
  let a;
  return O().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? a = new To(U$, o.shape, n.shape) : a = new io(U$, o.shape, n.shape), t6.runWebGLProgram(a, [o, n], s);
}
var G$ = { kernelName: kn, backendName: "webgl", kernelFunc: Tl };
function H$(r, e, t6) {
  let o = [Va(r.shape), ...za(r.shape)], n = { dtype: r.dtype, shape: o, dataId: r.dataId }, s = [Va(e), ...za(e)], a = new lc(s, o), i = true, p = [o], u = t6.runWebGLProgram(a, [n], r.dtype, p, i);
  return { dataId: u.dataId, shape: e, dtype: u.dtype };
}
function te(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { shape: s } = o, a = t6, i = y.sizeFromShape(n.shape), p = y.inferFromImplicitShape(s, i), u = y.sizeFromShape(p);
  y.assert(i === u, () => `The new shape (${p}) has ${u} elements and the old shape (${n.shape}) has ${i} elements. The new shape and old shape must have the same number of elements.`);
  let c = a.texData.get(n.dataId);
  return c.isPacked && !Li(n.shape, p) && !(c.texture !== null && Li(c.shape, p)) ? H$(n, p, a) : (a.incRef(n.dataId), { dataId: n.dataId, shape: p, dtype: n.dtype });
}
var q$ = { kernelName: Ns, backendName: "webgl", kernelFunc: te };
var _l = class {
  constructor(e, t6) {
    this.variableNames = ["x"];
    let { windowSize: o, batchSize: n, inSize: s, outSize: a } = e;
    this.outputShape = [n, a];
    let i = Math.floor(o / 4) * 4, p = o % 4, u = "sumValue += dot(values, ones);";
    if (t6 != null) {
      let l = 1 / t6;
      u = `sumValue += dot(values * ${y.isInt(l) ? l.toPrecision(2) : l}, ones);`;
    }
    let c = "";
    s % o > 0 && (c = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return 0.0;
        }
      `), this.userCode = `
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${c}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        float sumValue = 0.0;

        for (int i = 0; i < ${i}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${u}
        }

        int inIdx = inOffset + ${i};
        if (${p === 1}) {
          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);

          ${u}
        } else if (${p === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1), 0.0, 0.0);

          ${u}
        } else if (${p === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2), 0.0);

          ${u}
        }
        setOutput(sumValue);
      }
    `;
  }
};
var Jf = class {
  constructor(e, t6) {
    this.variableNames = ["x"];
    let { windowSize: o, batchSize: n, inSize: s, outSize: a } = e;
    this.outputShape = [n, a];
    let i = "0.0", p = "";
    t6 === "prod" ? i = "1.0" : t6 === "min" ? (i = "1.0 / 1e-20", p = "min") : t6 === "max" && (i = "-1.0 / 1e-20", p = "max");
    let u = `${t6}(${t6}(${t6}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t6 === "sum" ? u = "sumValue" : t6 === "prod" ? u = "prodValue" : t6 === "all" ? u = "allValue" : t6 === "any" && (u = "anyValue");
    let c = Math.floor(o / 4) * 4, l = o % 4, m = `
      if (${t6 === "sum"}) {
        sumValue += dot(values, ones);
      } else if (${t6 === "prod"}) {
        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);
        prodValue *= tmp[0] * tmp[1];
      } else {
        minMaxValue = ${p}(values, minMaxValue);
        if (${t6 === "min"} || ${t6 === "max"}) {
          minMaxValue = ${p}(values, minMaxValue);
          bvec4 isNaN = isnan(values);
          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {
            minMaxValue = vec4(NAN);
          }
        }
      }
    `, d = "vec4";
    t6 === "all" ? (i = "1.0", m = `
        bool reducedAllValue = all(values);
        float floatedReducedAllValue = float(reducedAllValue);
        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);
      `, d = "bvec4") : t6 === "any" && (i = "0.0", m = `
        bool reducedAnyValue = any(values);
        float floatedReducedAnyValue = float(reducedAnyValue);
        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);
      `, d = "bvec4");
    let f = "";
    s % o > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `), this.userCode = `
      const float initializationValue = ${i};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float getValue(int batch, int inIdx) {
        ${f}
        return getX(batch, inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${o};

        vec4 minMaxValue = vec4(${i});
        float prodValue = 1.0;
        float sumValue = 0.0;
        float allValue = 1.0;
        float anyValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${l === 1}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${l === 2}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          ${m}
        } else if (${l === 3}) {
          ${d} values = ${d}(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          ${m}
        }
        setOutput(${u});
      }
    `;
  }
};
function W8(r) {
  let e = [];
  for (; e.length === 0 || e[e.length - 1].outSize !== 1; ) {
    let t6 = e.length ? e[e.length - 1].outSize : r[1], o = S.computeOptimalWindowSize(t6);
    e.push({ inSize: t6, windowSize: o, outSize: Math.ceil(t6 / o) });
  }
  return e;
}
function Gr(r, e, t6, o) {
  let n = W8(r.shape), s = r;
  for (let a = 0; a < n.length; a++) {
    let { inSize: i, windowSize: p, outSize: u } = n[a], c, l;
    t6 === "mean" ? c = a === 0 ? new _l({ windowSize: p, inSize: i, batchSize: r.shape[0], outSize: u }, i) : new _l({ windowSize: p, inSize: i, batchSize: r.shape[0], outSize: u }) : c = new Jf({ windowSize: p, inSize: i, batchSize: r.shape[0], outSize: u }, t6), l = s, s = o.runWebGLProgram(c, [s], e), l.dataId !== r.dataId && o.disposeIntermediateTensorInfo(l);
  }
  return s;
}
var eh = class {
  constructor(e, t6) {
    this.variableNames = ["A"];
    let o = new Array(e.length);
    for (let a = 0; a < o.length; a++)
      o[a] = e[t6[a]];
    this.outputShape = o, this.rank = o.length;
    let n = _e(this.rank), s = U8(t6);
    this.userCode = `
    void main() {
      ${n} resRC = getOutputCoords();
      setOutput(getA(${s}));
    }
    `;
  }
};
function U8(r) {
  let e = r.length;
  if (e > 6)
    throw Error(`Transpose for rank ${e} is not yet supported`);
  let t6 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u", "resRC.v"], o = new Array(e);
  for (let n = 0; n < r.length; n++)
    o[r[n]] = t6[n];
  return o.join();
}
var th = class {
  constructor(e, t6) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true;
    let o = new Array(e.length);
    for (let c = 0; c < o.length; c++)
      o[c] = e[t6[c]];
    if (this.outputShape = o, this.rank = o.length, this.rank > 6)
      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);
    let n = _e(this.rank), s = bw("rc", this.rank), a = new Array(this.rank);
    for (let c = 0; c < t6.length; c++)
      a[t6[c]] = s[c];
    let i = `vec2(${a.slice(-2).join()})`, p = `++${s[this.rank - 1]} < ${o[this.rank - 1]}`, u = `getChannel(getA(${a.join()}), ${i})`;
    this.userCode = `
    void main() {
      ${n} rc = getOutputCoords();
      vec4 result = vec4(0.);
      result[0] = ${u};
      if(${p}) {
        result[1] = ${u};
      }
      --${s[this.rank - 1]};
      if(++${s[this.rank - 2]} < ${o[this.rank - 2]}) {
        result[2] = ${u};
        if(${p}) {
          result[3] = ${u};
        }
      }
      setOutput(result);
    }
    `;
  }
};
function Vi(r, e, t6) {
  let o = O().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new th(r.shape, e) : new eh(r.shape, e);
  return t6.runWebGLProgram(o, [r], r.dtype);
}
function K$(r, e, t6, o) {
  let n = e, s = r.shape.length, a = y.parseAxisParam(n, r.shape), i = a, p = S.getAxesPermutation(i, s), u = p != null, c = r;
  u && (c = Vi(r, p, o), i = S.getInnerMostAxes(i.length, s)), S.assertAxesAreInnerMostDims("sum", i, s);
  let [l, m] = S.computeOutAndReduceShapes(c.shape, i), d = l;
  t6 && (d = S.expandShapeToKeepDim(l, a));
  let f = y.sizeFromShape(m), g = y.sizeFromShape(r.shape) / f, x = te({ inputs: { x: c }, attrs: { shape: [g, f] }, backend: o }), b = ka(r.dtype), C = Gr(x, b, "sum", o), w = te({ inputs: { x: C }, attrs: { shape: d }, backend: o });
  return o.disposeIntermediateTensorInfo(x), o.disposeIntermediateTensorInfo(C), u && o.disposeIntermediateTensorInfo(c), w;
}
function Ou(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o;
  return K$(n, s, a, t6);
}
var j$ = { kernelName: Hn, backendName: "webgl", kernelFunc: Ou };
function xt(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { perm: s } = o, a = t6, i = n.shape.length, p = new Array(i);
  for (let c = 0; c < p.length; c++)
    p[c] = n.shape[s[c]];
  let u;
  if (a.shouldExecuteOnCPU([n])) {
    let l = a.texData.get(n.dataId).values, m = Du(l, n.shape, n.dtype, s, p);
    u = a.makeTensorInfo(p, n.dtype);
    let d = a.texData.get(u.dataId);
    d.values = m;
  } else
    u = Vi(n, s, a);
  return u;
}
var X$ = { kernelName: ro, backendName: "webgl", kernelFunc: xt };
var Nw = 1e3;
function Pu({ a: r, b: e, transposeA: t6, transposeB: o, backend: n, bias: s = null, preluActivationWeights: a = null, leakyreluAlpha: i = 0, activation: p = null }) {
  let u = r.shape.length, c = e.shape.length, l = t6 ? r.shape[u - 2] : r.shape[u - 1], m = o ? e.shape[c - 1] : e.shape[c - 2], d = t6 ? r.shape[u - 1] : r.shape[u - 2], f = o ? e.shape[c - 2] : e.shape[c - 1], h = r.shape.slice(0, -2), g = e.shape.slice(0, -2), x = y.sizeFromShape(h), b = y.sizeFromShape(g), w = br.assertAndGetBroadcastShape(r.shape.slice(0, -2), e.shape.slice(0, -2)).concat([d, f]);
  y.assert(l === m, () => `Error in matMul: inner shapes (${l}) and (${m}) of Tensors with shapes ${r.shape} and ${e.shape} and transposeA=${t6} and transposeB=${o} must match.`);
  let k = t6 ? [x, l, d] : [x, d, l], _ = o ? [b, f, m] : [b, m, f], $ = te({ inputs: { x: r }, backend: n, attrs: { shape: k } }), A = te({ inputs: { x: e }, backend: n, attrs: { shape: _ } }), R = [$, A], D = Math.max(x, b), P = t6 ? $.shape[1] : $.shape[2], M = s != null, L = a != null, W = p === "leakyrelu", V = p != null ? Wa(p, true) : null, U = M || L || W || V != null, q;
  if ((d === 1 || f === 1) && P > Nw && U === false) {
    let j = $, X = A;
    t6 && (j = xt({ inputs: { x: $ }, backend: n, attrs: { perm: [0, 2, 1] } }), R.push(j)), o && (X = xt({ inputs: { x: A }, backend: n, attrs: { perm: [0, 2, 1] } }), R.push(X));
    let Z = f !== 1, ee = f === 1, Y = j;
    Z && (Y = te({ inputs: { x: j }, backend: n, attrs: { shape: [D, P, 1] } }), R.push(Y));
    let J = f === 1 ? 2 : 1, ie = X;
    ee && (ie = te({ inputs: { x: X }, backend: n, attrs: { shape: [D, 1, P] } }), R.push(ie));
    let pe = Tl({ inputs: { a: Y, b: ie }, backend: n });
    q = Ou({ inputs: { x: pe }, backend: n, attrs: { axis: J, keepDims: true } }), R.push(pe);
  } else {
    let j = dt(r.dtype, e.dtype), X = new dc(k, _, [D, d, f], t6, o, M, V, L, W), Z = [$, A];
    if (s != null && Z.push(s), L && Z.push(a), W) {
      let ee = n.makeTensorInfo([], "float32", y.createScalarValue(i, "float32"));
      Z.push(ee), R.push(ee);
    }
    q = n.runWebGLProgram(X, Z, j);
  }
  let H = te({ inputs: { x: q }, backend: n, attrs: { shape: w } });
  R.push(q);
  for (let j of R)
    n.disposeIntermediateTensorInfo(j);
  return H;
}
function G8(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { a: n, b: s, bias: a, preluActivationWeights: i } = e, { transposeA: p, transposeB: u, activation: c, leakyreluAlpha: l } = o;
  return Pu({ a: n, b: s, transposeA: p, transposeB: u, backend: t6, bias: a, preluActivationWeights: i, leakyreluAlpha: l, activation: c });
}
var Y$ = { kernelName: fo, backendName: "webgl", kernelFunc: G8 };
var Q$ = "return abs(x);";
function H8(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  if (t6.shouldExecuteOnCPU([o]) && o.dtype !== "complex64") {
    let s = t6.texData.get(o.dataId), a = Kf(s.values);
    return t6.makeTensorInfo(o.shape, o.dtype, a);
  }
  let n;
  return O().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? n = new Ar(o.shape, Q$) : n = new Jt(o.shape, Q$), t6.runWebGLProgram(n, [o], o.dtype);
}
var Z$ = { kernelName: gs, backendName: "webgl", kernelFunc: H8 };
var q8 = Bt + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return acos(x);
`;
var K8 = ge({ opSnippet: q8 });
var J$ = { kernelName: sa, backendName: "webgl", kernelFunc: K8 };
var j8 = Bt + `
  if (x < 1.0) return NAN;
return log(x + sqrt(x * x - 1.0));`;
var X8 = ge({ opSnippet: j8 });
var eA = { kernelName: aa, backendName: "webgl", kernelFunc: X8 };
var tA = "return a + b;";
var Y8 = tt({ opSnippet: tA, packedOpSnippet: tA, supportsComplex: true, cpuKernelImpl: DE });
var rA = { kernelName: eo, backendName: "webgl", kernelFunc: Y8 };
var rh = class {
  constructor(e, t6) {
    this.outputShape = [], this.outputShape = e, this.variableNames = t6.map((s, a) => `T${a}`);
    let o = [];
    this.variableNames.forEach((s) => {
      o.push(`float v${s} = get${s}AtOutCoords();`);
    });
    let n = this.variableNames.map((s) => `v${s}`).join(" + ");
    this.userCode = `
      void main() {
        ${o.join(`
        `)}

        float result = ${n};
        setOutput(result);
      }
    `;
  }
};
var oh = class {
  constructor(e, t6) {
    this.outputShape = [], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.variableNames = t6.map((s, a) => `T${a}`);
    let o = [];
    this.variableNames.forEach((s) => {
      o.push(`vec4 v${s} = get${s}AtOutCoords();`);
    });
    let n = this.variableNames.map((s) => `v${s}`).join(" + ");
    this.userCode = `
      void main() {
        ${o.join(`
        `)}

        vec4 result = ${n};
        setOutput(result);
      }
    `;
  }
};
function nh(r) {
  let { inputs: e, backend: t6 } = r, o = e;
  if (o.length === 1)
    return At({ inputs: { x: o[0] }, backend: t6 });
  if (o.length > O().get("WEBGL_MAX_TEXTURES_IN_SHADER")) {
    let p = Math.floor(o.length / 2), u = nh({ inputs: o.slice(0, p), backend: t6 }), c = nh({ inputs: o.slice(p), backend: t6 });
    return nh({ inputs: [u, c], backend: t6 });
  }
  let n = o.map((p) => p.dtype).reduce((p, u) => dt(p, u)), s = o.map((p) => p.shape), i = O().getBool("WEBGL_PACK") ? new oh(o[0].shape, s) : new rh(o[0].shape, s);
  return t6.runWebGLProgram(i, o, n);
}
var oA = { kernelName: Mo, backendName: "webgl", kernelFunc: nh };
function Q8(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o, i = n.shape.length, p = y.parseAxisParam(s, n.shape), u = p, c = S.getAxesPermutation(u, i), l = n;
  c != null && (l = xt({ inputs: { x: n }, backend: t6, attrs: { perm: c } }), u = S.getInnerMostAxes(u.length, i)), S.assertAxesAreInnerMostDims("all", u, i);
  let [m, d] = S.computeOutAndReduceShapes(l.shape, u), f = y.sizeFromShape(d), h = te({ inputs: { x: l }, backend: t6, attrs: { shape: [-1, f] } }), g = Gr(h, h.dtype, "all", t6), x;
  if (a) {
    let b = S.expandShapeToKeepDim(m, p);
    x = te({ inputs: { x: g }, backend: t6, attrs: { shape: b } });
  } else
    x = te({ inputs: { x: g }, backend: t6, attrs: { shape: m } });
  return t6.disposeIntermediateTensorInfo(h), t6.disposeIntermediateTensorInfo(g), c != null && t6.disposeIntermediateTensorInfo(l), x;
}
var nA = { kernelName: Lo, backendName: "webgl", kernelFunc: Q8 };
function Z8(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o, i = n.shape.length, p = y.parseAxisParam(s, n.shape), u = p, c = S.getAxesPermutation(u, i), l = n;
  c != null && (l = xt({ inputs: { x: n }, backend: t6, attrs: { perm: c } }), u = S.getInnerMostAxes(u.length, i)), S.assertAxesAreInnerMostDims("any", u, i);
  let [m, d] = S.computeOutAndReduceShapes(l.shape, u), f = y.sizeFromShape(d), h = te({ inputs: { x: l }, backend: t6, attrs: { shape: [-1, f] } }), g = Gr(h, h.dtype, "any", t6), x;
  if (a) {
    let b = S.expandShapeToKeepDim(m, p);
    x = te({ inputs: { x: g }, backend: t6, attrs: { shape: b } });
  } else
    x = te({ inputs: { x: g }, backend: t6, attrs: { shape: m } });
  return t6.disposeIntermediateTensorInfo(h), t6.disposeIntermediateTensorInfo(g), c != null && t6.disposeIntermediateTensorInfo(l), x;
}
var sA = { kernelName: Bo, backendName: "webgl", kernelFunc: Z8 };
var sh = class {
  constructor(e, t6, o) {
    this.variableNames = ["A"];
    let { windowSize: n, batchSize: s, outSize: a } = e;
    o || this.variableNames.push("bestIndicesA"), this.outputShape = [s, a];
    let i = t6 === "max" ? ">" : "<", p = o ? "inOffset + i;" : "round(getBestIndicesA(batch, inOffset + i));";
    this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = outIdx * ${n};

        int bestIndex = inOffset;
        float bestValue = getA(batch, bestIndex);

        for (int i = 0; i < ${n}; i++) {
          int inIdx = ${p};
          float candidate = getA(batch, inIdx);
          if (candidate ${i} bestValue) {
            bestValue = candidate;
            bestIndex = inIdx;
          }
        }
        setOutput(float(bestIndex));
      }
    `;
  }
};
var ah = class {
  constructor(e, t6, o, n) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, y.assert(e.length > 2, () => `Packed arg${o.charAt(0).toUpperCase() + o.slice(1)} supports only inputs with rank above 2.`);
    let s = e[e.length - 1], a = Math.ceil(s / t6);
    this.outputShape = e.slice(0, -1), a > 1 && this.outputShape.push(a), n || this.variableNames.push("bestIndicesA");
    let i = this.outputShape, p = i.length, u = _e(p), c = $t("coords", p), l, m;
    if (a === 1) {
      m = p + 1;
      let A = _e(m);
      l = `
        ${A} sourceLocR = ${A}(${c.join()}, 0);
        ++${c[p - 1]};
        ${A} sourceLocG = ${A}(${c.join()}, 0);
        ++${c[p - 2]};
        ${A} sourceLocA = ${A}(${c.join()}, 0);
        --${c[p - 1]};
        ${A} sourceLocB = ${A}(${c.join()}, 0);
        --${c[p - 2]};`;
    } else
      m = p, l = `
        ${u} sourceLocR = coords;
        ++${c[p - 1]};
        ${u} sourceLocG = coords;
        ++${c[p - 2]};
        ${u} sourceLocA = coords;
        --${c[p - 1]};
        ${u} sourceLocB = coords;
        --${c[p - 2]};`;
    let d = ["x", "y", "z", "w", "u", "v"].slice(0, m), f = "." + d[m - 1], h = d.map((A) => "int " + A), g = $t("sourceLocR", m - 1).concat("inIdx.r"), x = $t("sourceLocG", m - 1).concat("inIdx.g"), b = $t("sourceLocB", m - 1).concat("inIdx.b"), C = $t("sourceLocA", m - 1).concat("inIdx.a"), w = o === "max" ? "greaterThan" : "lessThan", k = n ? "" : `
          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),
                             getBestIndicesAChannel(${x.join()}),
                             getBestIndicesAChannel(${b.join()}),
                             getBestIndicesAChannel(${C.join()})));`, _ = `vec4(
            getAChannel(${g.join()}),
            hasNextCol ? getAChannel(${x.join()}) : 0.,
            hasNextRow ? getAChannel(${b.join()}) : 0.,
            hasNextRow && hasNextCol ? getAChannel(${C.join()}) : 0.)`, $ = n ? "" : `
      float getBestIndicesAChannel(${h.join()}) {
        return getChannel(getBestIndicesA(${d.join()}),
                                          vec2(${d.slice(-2).join()}));
      }`;
    this.userCode = `
      float getAChannel(${h.join()}) {
        return getChannel(getA(${d.join()}),
                               vec2(${d.slice(-2).join()}));
      }
      ${$}
      void main() {
        ${u} coords = getOutputCoords();
        bool hasNextCol = ${c[p - 1]} < ${i[p - 1] - 1};
        bool hasNextRow = ${c[p - 2]} < ${i[p - 2] - 1};
        ${l}
        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},
          sourceLocB${f}, sourceLocA${f}) * ${t6};
        ivec4 inIdx = srcIdx;
        vec4 bestIndex = vec4(inIdx);
        vec4 bestValue = ${_};

        for (int i = 0; i < ${t6}; i++) {
          inIdx = srcIdx;
          ${k}
          vec4 candidate = ${_};
          bvec4 nan = isnan(candidate);
          bvec4 replace = bvec4(
            vec4(${w}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));

          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,
                           replace.y  ? candidate.y : bestValue.y,
                           replace.z  ? candidate.z : bestValue.z,
                           replace.w  ? candidate.w : bestValue.w);
          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));
          srcIdx++;
        }
        setOutput(bestIndex);
      }
    `;
  }
};
function aA(r, e, t6, o = null) {
  let n = e.shape[0], s = e.shape[1];
  o != null && (n = o.shape[0], s = o.shape[1]);
  let a = S.computeOptimalWindowSize(s), i = { windowSize: a, inSize: s, batchSize: n, outSize: Math.ceil(s / a) }, p = new sh(i, t6, o == null), u = [e];
  o != null && u.push(o);
  let c = r.runWebGLProgram(p, u, "int32");
  if (c.shape[1] === 1)
    return c;
  let l = aA(r, e, t6, c);
  return r.disposeIntermediateTensorInfo(c), l;
}
function iA(r, e, t6, o = null) {
  let n = o != null ? o.shape : e.shape, s = n[n.length - 1], a = S.computeOptimalWindowSize(s), i = new ah(n, a, t6, o == null), p = o == null ? [e] : [e, o], u = r.runWebGLProgram(i, p, "int32");
  if (u.shape.length === e.shape.length) {
    let c = iA(r, e, t6, u);
    return r.disposeIntermediateTensorInfo(u), c;
  }
  return u;
}
function ih(r, e, t6, o) {
  let n = [t6];
  if (S.assertAxesAreInnerMostDims("arg" + o.charAt(0).toUpperCase() + o.slice(1), n, e.shape.length), !O().getBool("WEBGL_PACK_REDUCE") || e.shape.length <= 2) {
    let s = [], a = r.texData.get(e.dataId), i = a !== null && a.isPacked, p = e;
    i && (p = r.unpackTensor(e), s.push(p));
    let [u, c] = S.computeOutAndReduceShapes(p.shape, n), l = y.sizeFromShape(c), m = te({ inputs: { x: p }, backend: r, attrs: { shape: [-1, l] } });
    s.push(m);
    let d = aA(r, m, o);
    s.push(d);
    let f = te({ inputs: { x: d }, backend: r, attrs: { shape: u } });
    return s.forEach((h) => r.disposeIntermediateTensorInfo(h)), f;
  }
  return iA(r, e, o);
}
function J8(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s } = o, a = y.parseAxisParam(s, n.shape), i = S.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = xt({ inputs: { x: n }, backend: t6, attrs: { perm: i } }), u.push(p), a = S.getInnerMostAxes(a.length, p.shape.length)), S.assertAxesAreInnerMostDims("argMax", [a[0]], p.shape.length);
  let c = ih(t6, p, a[0], "max");
  return u.forEach((l) => t6.disposeIntermediateTensorInfo(l)), c;
}
var uA = { kernelName: Vo, backendName: "webgl", kernelFunc: J8 };
function eY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s } = o, a = y.parseAxisParam(s, n.shape), i = S.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = xt({ inputs: { x: n }, backend: t6, attrs: { perm: i } }), u.push(p), a = S.getInnerMostAxes(a.length, p.shape.length)), S.assertAxesAreInnerMostDims("argMin", [a[0]], p.shape.length);
  let c = ih(t6, p, a[0], "min");
  return u.forEach((l) => t6.disposeIntermediateTensorInfo(l)), c;
}
var pA = { kernelName: Za, backendName: "webgl", kernelFunc: eY };
var tY = Bt + `
  if (abs(x) > 1.) {
    return NAN;
  }
  return asin(x);
`;
var rY = ge({ opSnippet: tY });
var cA = { kernelName: ia, backendName: "webgl", kernelFunc: rY };
var oY = Bt + "return log(x + sqrt(x * x + 1.0));";
var nY = ge({ opSnippet: oY });
var lA = { kernelName: ua, backendName: "webgl", kernelFunc: nY };
var sY = Bt + `
  return atan(x);
`;
var aY = ge({ opSnippet: sY });
var mA = { kernelName: pa, backendName: "webgl", kernelFunc: aY };
var iY = mc + `
  return atan(a, b);
`;
var uY = `
  vec4 result = atan(a, b);
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Zs + `
  return result;
`;
var pY = tt({ opSnippet: iY, packedOpSnippet: uY });
var dA = { kernelName: la, backendName: "webgl", kernelFunc: pY };
var cY = Bt + `
  if ((x < -1.0) || (x > 1.0)) return NAN;
return (log(1.0 + x) - log(1.0 - x)) / 2.0;`;
var lY = ge({ opSnippet: cY });
var fA = { kernelName: ca, backendName: "webgl", kernelFunc: lY };
var ps = class {
  constructor(e, t6, o, n = false, s = false) {
    if (this.variableNames = ["x"], t6 === "avg" && o)
      throw new Error("Cannot compute positions for average pool.");
    let a = e.filterWidth, i = e.strideHeight, p = e.strideWidth, u = e.dilationHeight, c = e.dilationWidth, l = e.effectiveFilterHeight, m = e.effectiveFilterWidth, d = e.padInfo.top, f = e.padInfo.left;
    this.outputShape = e.outShape;
    let h = t6 === "avg", g = `((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`, x = `(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`, b = "0.0";
    if (h || (b = "-1.0 / 1e-20"), o) {
      let A = ">=";
      this.userCode = `
        const ivec2 strides = ivec2(${i}, ${p});
        const ivec2 pads = ivec2(${d}, ${f});

        void main() {
          ivec4 coords = getOutputCoords();
          int batch = coords[0];
          int d = coords[3];

          ivec2 xRCCorner = coords.yz * strides - pads;
          int xRCorner = xRCCorner.x;
          int xCCorner = xRCCorner.y;

          // max/min x(?, ?, d) to get y(yR, yC, d).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;
          float avgValue = 0.0;

          for (int wR = 0; wR < ${l};
              wR += ${u}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${m};
                wC += ${c}) {
              int xC = xCCorner + wC;

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float value = getX(batch, xR, xC, d);

              // If a min / max value has already been found, use it. If not,
              // use the current value.
              float currMinMaxValue = mix(
                  value, minMaxValue, minMaxValueFound);
              if (value ${A} currMinMaxValue) {
                minMaxValue = value;
                minMaxValueFound = 1.0;
                minMaxPosition = ${n ? s ? g : x : `wR * ${m} + wC`};
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    let C = "max", w = `${t6}(${t6}(${t6}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t6 === "avg" && (w = "avgValue / count");
    let k = Math.floor(a / 4) * 4, _ = a % 4, $ = `
      if (${h}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${C}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec2 strides = ivec2(${i}, ${p});
      const ivec2 pads = ivec2(${d}, ${f});
      const float initializationValue = ${b};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xR, int xC, int d) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xR, xC, d);
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d = coords[3];

        ivec2 xRCCorner = coords.yz * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // max/min x(?, ?, d) to get y(yR, yC, d).
        // ? = to be determined
        vec4 minMaxValue = vec4(${b});
        float avgValue = 0.0;
        count = 0.0;

        for (int wR = 0; wR < ${l};
            wR += ${u}) {
          int xR = xRCorner + wR;

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${k}; wC += 4) {
            int xC = xCCorner + wC * ${c};

            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              getValue(batch, xR, xC + 3 * ${c}, d)
            );

            ${$}
          }

          int xC = xCCorner + ${k};
          if (${_ === 1}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              initializationValue,
              initializationValue,
              initializationValue
            );

            ${$}
          } else if (${_ === 2}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              initializationValue,
              initializationValue
            );

            ${$}
          } else if (${_ === 3}) {
            vec4 values = vec4(
              getValue(batch, xR, xC, d),
              getValue(batch, xR, xC + ${c}, d),
              getValue(batch, xR, xC + 2 * ${c}, d),
              initializationValue
            );

            ${$}
          }
        }
        setOutput(${w});
      }
    `;
  }
};
var zi = class {
  constructor(e, t6, o, n = false, s = false) {
    if (this.variableNames = ["x"], t6 === "avg" && o)
      throw new Error("Cannot compute positions for average pool.");
    let a = e.filterWidth, i = e.strideDepth, p = e.strideHeight, u = e.strideWidth, c = e.dilationDepth, l = e.dilationHeight, m = e.dilationWidth, d = e.effectiveFilterDepth, f = e.effectiveFilterHeight, h = e.effectiveFilterWidth, g = e.padInfo.front, x = e.padInfo.top, b = e.padInfo.left;
    this.outputShape = e.outShape;
    let C = t6 === "avg", w = "0.0";
    if (C || (w = "-1.0 / 1e-20"), o) {
      let D = ">=";
      this.userCode = `
        const ivec3 strides =
            ivec3(${i}, ${p}, ${u});
        const ivec3 pads = ivec3(${g}, ${x}, ${b});

        void main() {
          ivec5 coords = getOutputCoords();
          int batch = coords.x;
          int ch = coords.u;

          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
          int xDCorner = xCorner.x;
          int xRCorner = xCorner.y;
          int xCCorner = xCorner.z;

          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).
          // ? = to be determined
          float minMaxValue = 0.0;
          float minMaxValueFound = 0.0;
          int minMaxPosition = 0;

          for (int wD = 0; wD < ${d};
              wD += ${c}) {
            int xD = xDCorner + wD;

            if (xD < 0 || xD >= ${e.inDepth}) {
              continue;
            }

            for (int wR = 0; wR < ${f};
                wR += ${l}) {
              int xR = xRCorner + wR;

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int wC = 0; wC < ${h};
                  wC += ${m}) {
                int xC = xCCorner + wC;

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float value = getX(batch, xD, xR, xC, ch);

                // If a min / max value has already been found, use it. If not,
                // use the current value.
                float currMinMaxValue = mix(
                    value, minMaxValue, minMaxValueFound);
                if (value ${D} currMinMaxValue) {
                  minMaxValue = value;
                  minMaxValueFound = 1.0;
                  minMaxPosition = ${n ? s ? `(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch` : `wD * ${f} * ${h} +
                      wR * ${h} + wC`};
                }
              }
            }
          }
          setOutput(float(minMaxPosition));
        }
      `;
      return;
    }
    let k = "max", _ = `${t6}(${t6}(${t6}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;
    t6 === "avg" && (_ = "avgValue / count");
    let $ = Math.floor(a / 4) * 4, A = a % 4, R = `
      if (${C}) {
        avgValue += dot(values, ones);
      } else {
        minMaxValue = ${k}(values, minMaxValue);
      }
    `;
    this.userCode = `
      const ivec3 strides =
        ivec3(${i}, ${p}, ${u});
      const ivec3 pads = ivec3(${g}, ${x}, ${b});
      const float initializationValue = ${w};
      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);

      float count = 0.0;

      float getValue(int batch, int xD, int xR, int xC, int ch) {
        if (xC < 0 || xC >= ${e.inWidth}) {
          return initializationValue;
        }
        count += 1.0;
        return getX(batch, xD, xR, xC, ch);
      }

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xDCorner = xCorner.x;
        int xRCorner = xCorner.y;
        int xCCorner = xCorner.z;

        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).
        // ? = to be determined
        vec4 minMaxValue = vec4(${w});
        float avgValue = 0.0;
        count = 0.0;

        for (int wD = 0; wD < ${d};
            wD += ${c}) {
          int xD = xDCorner + wD;

          if (xD < 0 || xD >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${f};
            wR += ${l}) {
            int xR = xRCorner + wR;

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${$}; wC += 4) {
              int xC = xCCorner + wC * ${m};

              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                getValue(batch, xD, xR, xC + 3 * ${m}, ch)
              );

              ${R}
            }

            int xC = xCCorner + ${$};
            if (${A === 1}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                initializationValue,
                initializationValue,
                initializationValue
              );

              ${R}
            } else if (${A === 2}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                initializationValue,
                initializationValue
              );

              ${R}
            } else if (${A === 3}) {
              vec4 values = vec4(
                getValue(batch, xD, xR, xC, ch),
                getValue(batch, xD, xR, xC + ${m}, ch),
                getValue(batch, xD, xR, xC + 2 * ${m}, ch),
                initializationValue
              );

              ${R}
            }
          }
          setOutput(${_});
        }
      }
    `;
  }
};
function mY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e;
  is(n, "avgPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1;
  y.assert(S.eitherStridesOrDilationsAreOne(a, u), () => `Error in avgPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = S.computePool2DInfo(n.shape, s, a, u, i, p);
  if (c.filterWidth === 1 && c.filterHeight === 1 && y.arraysEqual(c.inShape, c.outShape))
    return At({ inputs: { x: n }, backend: t6 });
  let l = new ps(c, "avg", false);
  return t6.runWebGLProgram(l, [n], "float32");
}
var hA = { kernelName: zo, backendName: "webgl", kernelFunc: mY };
function dY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { filterSize: s, strides: a, pad: i, dimRoundingMode: p, dataFormat: u } = o, c = [1, 1, 1], l = S.computePool3DInfo(n.shape, s, a, c, i, p, u), m = new zi(l, "avg", false);
  return t6.runWebGLProgram(m, [n], "float32");
}
var gA = { kernelName: ip, backendName: "webgl", kernelFunc: dY };
var uh = class {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    let t6 = e.filterHeight, o = e.filterWidth, n = e.strideHeight, s = e.strideWidth, a = e.dilationHeight, i = e.dilationWidth, p = e.effectiveFilterHeight, u = e.effectiveFilterWidth, c = p - 1 - e.padInfo.top, l = u - 1 - e.padInfo.left, m = 1 / (t6 * o);
    this.userCode = `
      const ivec2 pads = ivec2(${c}, ${l});
      const float avgMultiplier = float(${m});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${p};
            wR += ${a}) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${u};
            wC+= ${i}) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);

            dotProd += dyValue * avgMultiplier;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var ph = class {
  constructor(e) {
    this.variableNames = ["dy"], this.outputShape = e.inShape;
    let t6 = e.filterDepth, o = e.filterHeight, n = e.filterWidth, s = e.strideDepth, a = e.strideHeight, i = e.strideWidth, p = e.dilationDepth, u = e.dilationHeight, c = e.dilationWidth, l = e.effectiveFilterDepth, m = e.effectiveFilterHeight, d = e.effectiveFilterWidth, f = l - 1 - e.padInfo.front, h = m - 1 - e.padInfo.top, g = d - 1 - e.padInfo.left, x = 1 / (t6 * o * n);
    this.userCode = `
      const ivec3 pads = ivec3(${f}, ${h}, ${g});
      const float avgMultiplier = float(${x});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${l};
            wD += ${p}) {
          float dyD = float(dyDCorner + wD) / ${s}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${m};
              wR += ${u}) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${d};
                wC += ${c}) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);

              dotProd += dyValue * avgMultiplier;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function fY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, input: s } = e, a = s, { filterSize: i, strides: p, pad: u, dimRoundingMode: c } = o, l = [1, 1, 1], m = S.computePool3DInfo(a.shape, i, p, l, u, c), d = new ph(m);
  return t6.runWebGLProgram(d, [n], a.dtype);
}
var xA = { kernelName: Im, backendName: "webgl", kernelFunc: fY };
function hY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, input: s } = e, a = s;
  is([n, s], "avgPoolGrad");
  let { filterSize: i, strides: p, pad: u } = o, c = S.computePool2DInfo(a.shape, i, p, 1, u), l = new uh(c);
  return t6.runWebGLProgram(l, [n], a.dtype);
}
var yA = { kernelName: wm, backendName: "webgl", kernelFunc: hY };
function gY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { a: n, b: s } = e, { transposeA: a, transposeB: i } = o;
  return Pu({ a: n, b: s, transposeA: a, transposeB: i, backend: t6 });
}
var bA = { kernelName: Wo, backendName: "webgl", kernelFunc: gY };
var ch = class {
  constructor(e, t6, o, n, s, a) {
    this.outputShape = [], this.variableNames = ["x", "mean", "variance"], S.assertAndGetBroadcastShape(e, t6), S.assertAndGetBroadcastShape(e, o);
    let i = "0.0";
    n != null && (S.assertAndGetBroadcastShape(e, n), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let p = "1.0";
    s != null && (S.assertAndGetBroadcastShape(e, s), this.variableNames.push("scale"), p = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        float x = getXAtOutCoords();
        float mean = getMeanAtOutCoords();
        float variance = getVarianceAtOutCoords();
        float offset = ${i};
        float scale = ${p};
        float inv = scale * inversesqrt(variance + float(${a}));
        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));
      }
    `;
  }
};
var lh = class {
  constructor(e, t6, o, n, s, a) {
    this.packedInputs = true, this.packedOutput = true, this.variableNames = ["x", "mean", "variance"], S.assertAndGetBroadcastShape(e, t6), S.assertAndGetBroadcastShape(e, o);
    let i = "vec4(0.0)";
    n != null && (S.assertAndGetBroadcastShape(e, n), this.variableNames.push("offset"), i = "getOffsetAtOutCoords()");
    let p = "vec4(1.0)";
    s != null && (S.assertAndGetBroadcastShape(e, s), this.variableNames.push("scale"), p = "getScaleAtOutCoords()"), this.outputShape = e, this.userCode = `
      void main() {
        vec4 offset = ${i};
        vec4 scale = ${p};

        vec4 x = getXAtOutCoords();
        vec4 mean = getMeanAtOutCoords();
        vec4 variance = getVarianceAtOutCoords();

        vec4 inv = scale * inversesqrt(variance + vec4(${a}));

        setOutput((x - mean) * inv + offset);
      }
    `;
  }
};
var xY = ({ inputs: r, backend: e, attrs: t6 }) => {
  let { x: o, mean: n, variance: s, offset: a, scale: i } = r;
  y.assert(n.shape.length === s.shape.length, () => "Batch normalization gradient requires mean and variance to have equal ranks."), y.assert(a == null || n.shape.length === a.shape.length, () => "Batch normalization gradient requires mean and offset to have equal ranks."), y.assert(i == null || n.shape.length === i.shape.length, () => "Batch normalization gradient requires mean and scale to have equal ranks.");
  let { varianceEpsilon: p } = t6;
  p == null && (p = 1e-3);
  let u = [o, n, s], c = null;
  a != null && (c = a.shape, u.push(a));
  let l = null;
  i != null && (l = i.shape, u.push(i));
  let m = O().getBool("WEBGL_PACK_NORMALIZATION") ? new lh(o.shape, n.shape, s.shape, c, l, p) : new ch(o.shape, n.shape, s.shape, c, l, p);
  return e.runWebGLProgram(m, u, u[0].dtype);
};
var CA = { kernelName: an, backendName: "webgl", kernelFunc: xY };
var mh = class {
  constructor(e) {
    this.variableNames = ["source"], this.outputShape = e, this.rank = e.length;
    let t6 = _e(this.rank);
    this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    let o = yY(this.rank), n, s = e.map((a, i) => `sourceLoc.${Tw[i]} = start[${i}] + coords.${Tw[i]};`);
    n = `
        ${t6} sourceLoc;
        ${t6} coords = getOutputCoords();
        ${s.join(`
`)}
      `, this.userCode = `
      void main() {
        ${n}
        setOutput(getSource(${o}));
      }
    `;
  }
};
var Tw = ["x", "y", "z", "w", "u", "v"];
function yY(r) {
  if (r === 1)
    return "sourceLoc";
  if (r <= 6)
    return Tw.slice(0, r).map((e) => "sourceLoc." + e).join(",");
  throw Error(`Slicing for rank ${r} is not yet supported`);
}
var dh = class {
  constructor(e) {
    this.variableNames = ["source"], this.packedInputs = true, this.packedOutput = true, this.outputShape = e, this.rank = e.length, this.customUniforms = [{ name: "start", arrayIndex: this.rank, type: "int" }];
    let t6 = _e(this.rank), o = $t("coords", this.rank), n = $t("sourceLoc", this.rank), s = this.rank === 1 ? "sourceLoc" : `vec2(${n.slice(-2).join()})`, a = `getChannel(getSource(${n.join()}), ${s})`, i = `
      result.x = ${a};
      if (++${o[this.rank - 1]} < ${e[this.rank - 1]}) {
        ++${n[this.rank - 1]};
        result.y = ${a};
        --${n[this.rank - 1]};
      }
    `, p = this.rank === 1 ? "" : `
      --${o[this.rank - 1]};
      if (++${o[this.rank - 2]} < ${e[this.rank - 2]}) {
        ++${n[this.rank - 2]};
        result.z = ${a};
        if (++${o[this.rank - 1]} < ${e[this.rank - 1]}) {
          ++${n[this.rank - 1]};
          result.w = ${a};
        }
      }
    `, u = this.rank <= 4 ? `sourceLoc = coords +
            ${t6}(${e.map((c, l) => `start[${l}]`).join()});` : e.map((c, l) => `${n[l]} = ${o[l]} + start[${l}];`).join(`
`);
    this.userCode = `
      void main() {
        ${t6} coords = getOutputCoords();
        ${t6} sourceLoc;
        ${u}
        vec4 result = vec4(0.);
        ${i}
        ${p}
        setOutput(result);
      }
    `;
  }
};
function bY(r, e, t6, o) {
  let n = o.texData.get(r.dataId), s = o.makeTensorInfo(t6, r.dtype), a = o.texData.get(s.dataId);
  Object.assign(a, n), a.refCount = 1, a.shape = t6, a.dtype = r.dtype;
  let i = ut.computeFlatOffset(e, y.computeStrides(r.shape));
  n.slice && (i += n.slice.flatOffset), a.slice = { flatOffset: i, origDataId: n.slice && n.slice.origDataId || r.dataId };
  let p = o.dataRefCount.get(a.slice.origDataId) || 1;
  return o.dataRefCount.set(a.slice.origDataId, p + 1), s;
}
function cs(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { begin: s, size: a } = o, [i, p] = ut.parseSliceParams(n, s, a);
  if (ut.assertParamsValid(n, i, p), y.sizeFromShape(p) === 0)
    return t6.makeTensorInfo(p, n.dtype, []);
  if (t6.shouldExecuteOnCPU([n]) || n.dtype === "string") {
    let l = t6.texData.get(n.dataId), m = l$(l.values, i, p, n.shape, n.dtype);
    return t6.makeTensorInfo(p, n.dtype, m);
  }
  let { isPacked: u } = t6.texData.get(n.dataId), c = ut.isSliceContinous(n.shape, i, p);
  if (u || !c) {
    let l = O().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new dh(p) : new mh(p), m = [i];
    return t6.runWebGLProgram(l, [n], n.dtype, m);
  }
  return t6.uploadToGPU(n.dataId), bY(n, i, p, t6);
}
var SA = { kernelName: _s, backendName: "webgl", kernelFunc: cs };
var CY = (r) => {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { blockShape: s, crops: a } = o;
  y.assert(n.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGL backend not implemented yet");
  let i = s.reduce((b, C) => b * C), p = S.getReshaped(n.shape, s, i), u = S.getPermuted(p.length, s.length), c = S.getReshapedPermuted(n.shape, s, i), l = S.getSliceBeginCoords(a, s.length), m = S.getSliceSize(c, a, s.length), d = [], f = te({ inputs: { x: n }, backend: t6, attrs: { shape: p } }), h = xt({ inputs: { x: f }, backend: t6, attrs: { perm: u } }), g = te({ inputs: { x: h }, backend: t6, attrs: { shape: c } }), x = cs({ inputs: { x: g }, backend: t6, attrs: { begin: l, size: m } });
  return d.push(f), d.push(h), d.push(g), d.forEach((b) => t6.disposeIntermediateTensorInfo(b)), x;
};
var wA = { kernelName: xs, backendName: "webgl", kernelFunc: CY };
function SY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, weights: s } = e, { size: a } = o, i = t6.readSync(n.dataId), p = t6.readSync(s.dataId), u = qf(i, p, s.dtype, s.shape, a);
  return t6.makeTensorInfo([a], s.dtype, u);
}
var IA = { kernelName: Ja, backendName: "webgl", kernelFunc: SY };
function wY(r) {
  let { inputs: e, backend: t6 } = r, { s0: o, s1: n } = e, s = t6.readSync(o.dataId), a = t6.readSync(n.dataId), i = S.assertAndGetBroadcastShape(Array.from(s), Array.from(a));
  return t6.makeTensorInfo([i.length], "int32", Int32Array.from(i));
}
var vA = { kernelName: up, backendName: "webgl", kernelFunc: wY };
var IY = "return float(a != b);";
var _w = tt({ opSnippet: IY, cpuKernelImpl: r$, dtype: "bool" });
var kA = { kernelName: Nn, backendName: "webgl", kernelFunc: _w };
function Ua(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e, n = t6.texData.get(o.dataId);
  return At({ inputs: { x: n.complexTensorInfos.real }, backend: t6 });
}
var NA = { kernelName: ai, backendName: "webgl", kernelFunc: Ua };
var vY = "return float(int(x));";
function TA(r, e) {
  let t6 = new Jt(r.shape, vY), o = e.runWebGLProgram(t6, [r], "int32");
  return { dataId: o.dataId, shape: o.shape, dtype: o.dtype };
}
function Ew(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { dtype: s } = o;
  if (s === "complex64") {
    if (n.dtype === "complex64")
      return At({ inputs: { x: n }, backend: t6 });
    let a = Vr(n.shape), i = Ew({ inputs: { x: n }, backend: t6, attrs: { dtype: "float32" } }), p = Rr({ inputs: { real: i, imag: a }, backend: t6 });
    return a.dispose(), t6.disposeIntermediateTensorInfo(i), p;
  }
  if (n.dtype === "complex64") {
    let a = Ua({ inputs: { input: n }, backend: t6 }), i = Ew({ inputs: { x: a }, backend: t6, attrs: { dtype: s } });
    return t6.disposeIntermediateTensorInfo(a), i;
  }
  if (!y.hasEncodingLoss(n.dtype, s)) {
    let a = At({ inputs: { x: n }, backend: t6 });
    return { dataId: a.dataId, shape: a.shape, dtype: s };
  }
  if (t6.shouldExecuteOnCPU([n])) {
    let a = t6.texData.get(n.dataId).values, [i, p, u] = PE(a, n.shape, n.dtype, s);
    return t6.makeTensorInfo(i, p, u);
  }
  if (s === "int32")
    return TA(n, t6);
  if (s === "bool") {
    let a = t6.makeTensorInfo([], "bool", y.getTypedArrayFromDType("bool", 1)), p = _w({ inputs: { a: n, b: a }, backend: t6 });
    return t6.disposeIntermediateTensorInfo(a), p;
  }
  throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`);
}
var _A = { kernelName: co, backendName: "webgl", kernelFunc: Ew };
var EA = "return ceil(x);";
var kY = ge({ opSnippet: EA, packedOpSnippet: EA, cpuKernelImpl: ME });
var $A = { kernelName: Uo, backendName: "webgl", kernelFunc: kY };
var fh = class {
  constructor(e) {
    this.variableNames = ["A"], this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e, this.userCode = `

      void main() {
        float value = getAAtOutCoords();
        if (isnan(value)) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, minVal, maxVal));
      }
    `;
  }
};
var hh = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "minVal", type: "float" }, { name: "maxVal", type: "float" }], this.outputShape = e, this.userCode = `
      void main() {
        vec4 value = getAAtOutCoords();

        if (any(isnan(value))) {
          setOutput(value);
          return;
        }

        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));
      }
    `;
  }
};
function NY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { clipValueMin: s, clipValueMax: a } = o, i;
  O().getBool("WEBGL_PACK_CLIP") ? i = new hh(n.shape) : i = new fh(n.shape);
  let p = [[s], [a]];
  return t6.runWebGLProgram(i, [n], n.dtype, p);
}
var AA = { kernelName: lo, backendName: "webgl", kernelFunc: NY };
var gh = class {
  constructor(e) {
    this.variableNames = ["real", "imag"], this.outputShape = e, this.userCode = `
      void main() {
        float re = abs(getRealAtOutCoords());
        float im = abs(getImagAtOutCoords());
        float mx = max(re, im);

        // sadly the length function in glsl is not underflow-safe
        // (at least not on Intel GPUs). So the safe solution is
        // to ensure underflow-safety in all cases.
        setOutput(
          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))
        );
      }
    `;
  }
};
function RA(r, e) {
  return { dataId: e.dataId, dtype: e.dtype, shape: r.shape };
}
function TY(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e, n = t6.texData.get(o.dataId), s = new gh(o.shape), a = [RA(o, n.complexTensorInfos.real), RA(o, n.complexTensorInfos.imag)];
  return t6.runWebGLProgram(s, a, a[0].dtype);
}
var FA = { kernelName: pp, backendName: "webgl", kernelFunc: TY };
var xh = class {
  constructor(e) {
    this.outputShape = [], this.outputShape = S.computeOutShape(e, 1), this.variableNames = e.map((a, i) => `T${i}`);
    let t6 = new Array(e.length - 1);
    t6[0] = e[0][1];
    for (let a = 1; a < t6.length; a++)
      t6[a] = t6[a - 1] + e[a][1];
    let o = [`if (yC < ${t6[0]}) setOutput(getT0(yR, yC));`];
    for (let a = 1; a < t6.length; a++) {
      let i = t6[a - 1];
      o.push(`else if (yC < ${t6[a]}) setOutput(getT${a}(yR, yC-${i}));`);
    }
    let n = t6.length, s = t6[t6.length - 1];
    o.push(`else setOutput(getT${n}(yR, yC-${s}));`), this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int yR = coords.x;
        int yC = coords.y;

        ${o.join(`
        `)}
      }
    `;
  }
};
var bh = class {
  constructor(e, t6) {
    this.packedInputs = true, this.packedOutput = true, this.outputShape = [], this.outputShape = S.computeOutShape(e, t6);
    let o = this.outputShape, n = o.length, s = _e(n), a = $t("coords", n), i = ["x", "y", "z", "w", "u", "v"].slice(0, n);
    this.variableNames = e.map((h, g) => `T${g}`);
    let p = new Array(e.length - 1);
    p[0] = e[0][t6];
    for (let h = 1; h < p.length; h++)
      p[h] = p[h - 1] + e[h][t6];
    let u = i[t6], c = i.slice(-2), l = i.join(), m = `if (${u} < ${p[0]}) {
        return getChannel(
            getT0(${l}), vec2(${c.join()}));
        }`;
    for (let h = 1; h < p.length; h++) {
      let g = p[h - 1];
      m += `
        if (${u} < ${p[h]}  && ${u} >= ${p[h - 1]}) {
          return getChannel(
            getT${h}(${yh(i, u, g)}),
            vec2(${yh(c, u, g)}));
        }`;
    }
    let d = p.length, f = p[p.length - 1];
    m += `
        return getChannel(
          getT${d}(${yh(i, u, f)}),
          vec2(${yh(c, u, f)}));`, this.userCode = `
      float getValue(${i.map((h) => "int " + h)}) {
        ${m}
      }

      void main() {
        ${s} coords = getOutputCoords();
        vec4 result = vec4(getValue(${a}), 0., 0., 0.);

        ${a[n - 1]} = ${a[n - 1]} + 1;
        if (${a[n - 1]} < ${o[n - 1]}) {
          result.g = getValue(${a});
        }

        ${a[n - 2]} = ${a[n - 2]} + 1;
        if (${a[n - 2]} < ${o[n - 2]}) {
          result.a = getValue(${a});
        }

        ${a[n - 1]} = ${a[n - 1]} - 1;
        if (${a[n - 2]} < ${o[n - 2]} &&
            ${a[n - 1]} < ${o[n - 1]}) {
          result.b = getValue(${a});
        }
        setOutput(result);
      }
    `;
  }
};
function yh(r, e, t6) {
  let o = r.indexOf(e);
  return r.map((s, a) => a === o ? `${s} - ${t6}` : s).join();
}
function Mu(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e, n = t6.texData.get(o.dataId);
  return At({ inputs: { x: n.complexTensorInfos.imag }, backend: t6 });
}
var DA = { kernelName: si, backendName: "webgl", kernelFunc: Mu };
function fc(r, e, t6) {
  let o = r[0].dtype;
  if (o === "complex64") {
    let d = r.map((b) => Ua({ inputs: { input: b }, backend: t6 })), f = r.map((b) => Mu({ inputs: { input: b }, backend: t6 })), h = fc(d, e, t6), g = fc(f, e, t6), x = Rr({ inputs: { real: h, imag: g }, backend: t6 });
    return d.forEach((b) => t6.disposeIntermediateTensorInfo(b)), f.forEach((b) => t6.disposeIntermediateTensorInfo(b)), t6.disposeIntermediateTensorInfo(h), t6.disposeIntermediateTensorInfo(g), x;
  }
  let n = t6.shouldExecuteOnCPU(r);
  if (o === "string" && (n = true), n) {
    let d = r.map((w) => {
      let _ = [-1, y.sizeFromShape(w.shape.slice(e))];
      return te({ inputs: { x: w }, backend: t6, attrs: { shape: _ } });
    }), f = d.map((w) => ({ vals: t6.readSync(w.dataId), shape: w.shape })), h = S.computeOutShape(d.map((w) => w.shape), 1), g = d[0].shape[0] === 1, x = LE(f, h, o, g), b = S.computeOutShape(r.map((w) => w.shape), e), C = t6.makeTensorInfo(b, o, x);
    return d.forEach((w) => t6.disposeIntermediateTensorInfo(w)), C;
  }
  let s = r.filter((d) => y.sizeFromShape(d.shape) > 0), a = O().getBool("WEBGL_PACK_ARRAY_OPERATIONS") && s[0].shape.length > 1;
  if (s.length === 1) {
    let d = a ? new Jt(r[0].shape, Qs) : new Ar(r[0].shape, Qs);
    return t6.runWebGLProgram(d, r, o);
  }
  let i = O().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");
  if (s.length > i) {
    let d = [];
    for (let h = 0; h < s.length; h += i) {
      let g = s.slice(h, h + i);
      d.push(fc(g, e, t6));
    }
    let f = fc(d, e, t6);
    for (let h of d)
      t6.disposeIntermediateTensorInfo(h);
    return f;
  }
  if (a) {
    let d = new bh(s.map((f) => f.shape), e);
    return t6.runWebGLProgram(d, s, o);
  }
  let { tensors2D: p, outShape: u } = _Y(s, e, t6), c = new xh(p.map((d) => d.shape)), l = t6.runWebGLProgram(c, p, o);
  p.forEach((d) => t6.disposeIntermediateTensorInfo(d));
  let m = te({ inputs: { x: l }, attrs: { shape: u }, backend: t6 });
  return t6.disposeIntermediateTensorInfo(l), m;
}
function _Y(r, e, t6) {
  let o = S.computeOutShape(r.map((s) => s.shape), e);
  return { tensors2D: r.map((s) => te({ inputs: { x: s }, attrs: { shape: [-1, y.sizeFromShape(s.shape.slice(e))] }, backend: t6 })), outShape: o };
}
function $w(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { axis: n } = o, s = y.parseAxisParam(n, e[0].shape)[0], a = e.map((u) => u.shape);
  S.assertParamsConsistent(a, s);
  let i = S.computeOutShape(e.map((u) => u.shape), s);
  if (y.sizeFromShape(i) === 0)
    return t6.makeTensorInfo(i, e[0].dtype, []);
  let p = e.filter((u) => y.sizeFromShape(u.shape) > 0);
  return p.length === 1 ? At({ inputs: { x: p[0] }, backend: t6 }) : fc(p, s, t6);
}
var OA = { kernelName: ys, backendName: "webgl", kernelFunc: $w };
var hc = class {
  constructor(e, t6 = false, o = null, n = false, s = false) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    let a = e.padInfo.top, i = e.padInfo.left, p = e.strideHeight, u = e.strideWidth, c = e.dilationHeight, l = e.dilationWidth, m = e.filterHeight, d = e.filterWidth, f = Math.floor(e.inChannels / 4) * 4, h = e.inChannels % 4, g = e.dataFormat === "channelsLast", x = g ? 1 : 2, b = g ? 2 : 3, C = g ? 3 : 1, w = "", k = "";
    o && (n ? w = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }` : s ? w = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }` : w = `
          float activation(float x) {
            ${o}
          }
        `, k = "result = activation(result);");
    let _ = t6 ? "result += getBiasAtOutCoords();" : "";
    t6 && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), s && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${w}

      const ivec2 strides = ivec2(${p}, ${u});
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d2 = coords[${C}];

        ivec2 xRCCorner =
            ivec2(coords[${x}], coords[${b}]) * strides - pads;
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${m}; wR++) {
          int xR = xRCorner + wR * ${c};

          if (xR < 0 || xR >= ${e.inHeight}) {
            continue;
          }

          for (int wC = 0; wC < ${d}; wC++) {
            int xC = xCCorner + wC * ${l};

            if (xC < 0 || xC >= ${e.inWidth}) {
              continue;
            }

            for (int d1 = 0; d1 < ${f}; d1 += 4) {
              vec4 wValues = vec4(
                getW(wR, wC, d1, d2),
                getW(wR, wC, d1 + 1, d2),
                getW(wR, wC, d1 + 2, d2),
                getW(wR, wC, d1 + 3, d2)
              );

              if (${g}) {
                vec4 xValues = vec4(
                  getX(batch, xR, xC, d1),
                  getX(batch, xR, xC, d1 + 1),
                  getX(batch, xR, xC, d1 + 2),
                  getX(batch, xR, xC, d1 + 3)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec4 xValues = vec4(
                  getX(batch, d1, xR, xC),
                  getX(batch, d1 + 1, xR, xC),
                  getX(batch, d1 + 2, xR, xC),
                  getX(batch, d1 + 3, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }
            }

            if (${h === 1}) {

              if (${g}) {
                dotProd +=
                    getX(batch, xR, xC, ${f}) *
                    getW(wR, wC, ${f}, d2);
              } else {
                dotProd +=
                    getX(batch, ${f}, xR, xC) *
                    getW(wR, wC, ${f}, d2);
              }

            } else if (${h === 2}) {
              vec2 wValues = vec2(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2)
              );

              if (${g}) {
                vec2 xValues = vec2(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec2 xValues = vec2(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            } else if (${h === 3}) {
              vec3 wValues = vec3(
                getW(wR, wC, ${f}, d2),
                getW(wR, wC, ${f} + 1, d2),
                getW(wR, wC, ${f} + 2, d2)
              );

              if (${g}) {
                vec3 xValues = vec3(
                  getX(batch, xR, xC, ${f}),
                  getX(batch, xR, xC, ${f} + 1),
                  getX(batch, xR, xC, ${f} + 2)
                );
                dotProd += dot(xValues, wValues);
              } else {
                vec3 xValues = vec3(
                  getX(batch, ${f}, xR, xC),
                  getX(batch, ${f} + 1, xR, xC),
                  getX(batch, ${f} + 2, xR, xC)
                );
                dotProd += dot(xValues, wValues);
              }

            }
          }
        }

        float result = dotProd;
        ${_}
        ${k}
        setOutput(result);
      }
    `;
  }
};
var Ch = class {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    let t6 = e.padInfo.front, o = e.padInfo.top, n = e.padInfo.left, s = e.strideDepth, a = e.strideHeight, i = e.strideWidth, p = e.dilationDepth, u = e.dilationHeight, c = e.dilationWidth, l = e.filterDepth, m = e.filterHeight, d = e.filterWidth, f = Math.floor(e.inChannels / 4) * 4, h = e.inChannels % 4;
    this.userCode = `
      const ivec3 strides = ivec3(${s}, ${a}, ${i});
      const ivec3 pads = ivec3(${t6}, ${o}, ${n});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d2 = coords.u;

        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;
        int xFCorner = xFRCCorner.x;
        int xRCorner = xFRCCorner.y;
        int xCCorner = xFRCCorner.z;

        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get
        // y(yF, yR, yC, d2). ? = to be determined. : = across all
        // values in that axis.
        float dotProd = 0.0;
        for (int wF = 0; wF < ${l}; wF++) {
          int xF = xFCorner + wF * ${p};

          if (xF < 0 || xF >= ${e.inDepth}) {
            continue;
          }

          for (int wR = 0; wR < ${m}; wR++) {
            int xR = xRCorner + wR * ${u};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int wC = 0; wC < ${d}; wC++) {
              int xC = xCCorner + wC * ${c};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              for (int d1 = 0; d1 < ${f}; d1 += 4) {
                vec4 xValues = vec4(
                  getX(batch, xF, xR, xC, d1),
                  getX(batch, xF, xR, xC, d1 + 1),
                  getX(batch, xF, xR, xC, d1 + 2),
                  getX(batch, xF, xR, xC, d1 + 3)
                );
                vec4 wValues = vec4(
                  getW(wF, wR, wC, d1, d2),
                  getW(wF, wR, wC, d1 + 1, d2),
                  getW(wF, wR, wC, d1 + 2, d2),
                  getW(wF, wR, wC, d1 + 3, d2)
                );

                dotProd += dot(xValues, wValues);
              }

              if (${h === 1}) {
                dotProd +=
                  getX(batch, xF, xR, xC, ${f}) *
                  getW(wF, wR, wC, ${f}, d2);
              } else if (${h === 2}) {
                vec2 xValues = vec2(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1)
                );
                vec2 wValues = vec2(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2)
                );
                dotProd += dot(xValues, wValues);
              } else if (${h === 3}) {
                vec3 xValues = vec3(
                  getX(batch, xF, xR, xC, ${f}),
                  getX(batch, xF, xR, xC, ${f} + 1),
                  getX(batch, xF, xR, xC, ${f} + 2)
                );
                vec3 wValues = vec3(
                  getW(wF, wR, wC, ${f}, d2),
                  getW(wF, wR, wC, ${f} + 1, d2),
                  getW(wF, wR, wC, ${f} + 2, d2)
                );
                dotProd += dot(xValues, wValues);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var gc = class {
  constructor(e, t6 = false, o = null, n = false, s = false) {
    this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = ct(this.outputShape.length);
    let a = e.padInfo.left, i = e.strideWidth, p = e.dilationWidth, u = e.filterHeight, c = e.filterWidth, l = c, m = `
       int xR; int xC; int xCOffset;
       vec4 wTexel; vec4 previous; vec4 final;`;
    for (let g = 0; g < c; g++)
      m += `
           vec4 xTexelC${g * 2};
           int xTexelC${g * 2}Ready;
           vec4 xTexelC${g * 2 + 1};
           int xTexelC${g * 2 + 1}Ready;
           vec4 xC${g};`;
    m += `
     for (int r = 0; r < ${u}; r++) {
      for (int d1 = 0; d1 < ${e.inChannels}; d1 += 2) {
       `;
    for (let g = 0; g < c; g++)
      m += `
           xTexelC${g * 2} = vec4(0.0);
           xTexelC${g * 2}Ready = 0;
           xTexelC${g * 2 + 1} = vec4(0.0);
           xTexelC${g * 2 + 1}Ready = 0;
           xC${g} = vec4(0.0);`;
    m += `
         xR = xRCorner + r * dilations[0];
         if (xR >=0 && xR < inDims[0]) {
       `;
    for (let g = 0; g < (l + 1) / 2; g++) {
      let x = g * 2;
      if (m += `
           xC = xCCorner + ${x * p};
           `, i === 1) {
        if (x < c && (a % 2 === 1 ? (m += `
                 xCOffset = xC + 1;
                 if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);

                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }
               `, p === 1 && x > 0 ? m += `
                 xC${x} = vec4(xTexelC${x - 2}.zw, xTexelC${x}.xy);
                 ` : m += `
                   xCOffset = xC + 1 - 2;

                   if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       previous.zw = vec2(0.0);
                     }

                     xC${x} = vec4(previous.zw, xTexelC${x}.xy);
                   } else {
                     xC${x} = vec4(0.0, 0.0, xTexelC${x}.xy);
                   }
                   `) : m += `
                 if (xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xC${x} = xTexelC${x};
                 `, x + 1 < c)) {
          let b = a % 2 === 0 ? y.nearestLargerEven(p) : p;
          p % 2 === 0 && a % 2 === 1 || p % 2 !== 0 && a % 2 !== 1 ? (m += `
                   xCOffset = xC + imod(pads[1], 2) + ${b};

                   if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                     xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);

                     // Need to manually clear unused channels in case
                     // we're reading from recycled texture.
                     if (xCOffset + 1 >= inDims[1]) {
                       xTexelC${x + 1}.zw = vec2(0.0);
                     }
                     xTexelC${x + 1}Ready = 1;
                   }
                   `, p > 1 ? m += `
                     xCOffset -= 2;
                     if (xCOffset >= 0 && xCOffset < inDims[1]) {
                      previous = getX(batch, xR, xCOffset, d1);
                      xC${x + 1} = vec4(previous.zw, xTexelC${x + 1}.xy);
                     } else {
                      xC${x + 1} = vec4(0.0, 0.0, xTexelC${x + 1}.xy);
                     }
                     ` : m += `
                     xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.xy);
                     `) : b === 1 ? m += `
                     xC${x + 1} = xTexelC${x};
                     ` : m += `
                     xCOffset = xC + ${b};

                     if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                       xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                       if (xCOffset + 1 >= inDims[1]) {
                         xTexelC${x + 1}.zw = vec2(0.0);
                       }
                       xTexelC${x + 1}Ready = 1;
                     }

                     xC${x + 1} = xTexelC${x + 1};
                     `;
        }
      } else
        x < c && (a % 2 === 1 ? (m += `
                 xCOffset = xC + 1 - strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xCOffset, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${x + 1}Ready == 0) {
                   xTexelC${x + 1} = getX(batch, xR, xC + 1, d1);
                   // Need to manually clear unused channels in case
                   // we're reading from recycled texture.
                   if (xC + 2 >= inDims[1]) {
                     xTexelC${x + 1}.zw = vec2(0.0);
                   }
                   xTexelC${x + 1}Ready = 1;
                 }

                 xC${x} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
               `, x + 1 < c && (m += `
                   final = vec4(0.0);
                   xCOffset = xC + 1 + strides[1];
                   if(xCOffset >= 0 && xCOffset < inDims[1]) {
                     final = getX(batch, xR, xCOffset, d1);
                   }
                   xC${x + 1} = vec4(xTexelC${x + 1}.xy, final.xy);
                 `)) : (m += `
                 if(xC >= 0 && xC < inDims[1] && xTexelC${x}Ready == 0) {
                   xTexelC${x} = getX(batch, xR, xC, d1);
                   if (xC + 1 >= inDims[1]) {
                     xTexelC${x}.zw = vec2(0.0);
                   }
                   xTexelC${x}Ready = 1;
                 }

                 xCOffset = xC + strides[1];
                 if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${x + 1}Ready == 0) {
                   xTexelC${x + 1} = getX(batch, xR, xCOffset, d1);
                   if (xCOffset + 1 >= inDims[1]) {
                     xTexelC${x + 1}.zw = vec2(0.);
                   }
                   xTexelC${x + 1}Ready = 1;
                 }

                 xC${x} = vec4(
                   xTexelC${x}.xy, xTexelC${x + 1}.xy);
               `, x + 1 < c && (m += `
                   xC${x + 1} = vec4(xTexelC${x}.zw, xTexelC${x + 1}.zw);
                 `)));
      x < c && (m += `
             wTexel = getW(r, ${x}, d1, d2);
             dotProd += xC${x}.xxzz * vec4(wTexel.xy, wTexel.xy);
             if(d1 + 1 < ${e.inChannels}) {
               dotProd += xC${x}.yyww * vec4(wTexel.zw, wTexel.zw);
             }
           `, x + 1 < c && (m += `
               wTexel = getW(r, ${x + 1}, d1, d2);
               dotProd += xC${x + 1}.xxzz * vec4(wTexel.xy, wTexel.xy);
               if(d1 + 1 < ${e.inChannels}) {
                 dotProd += xC${x + 1}.yyww * vec4(wTexel.zw, wTexel.zw);
               }
             `));
    }
    m += `
     }
   `, m += `
     }
   `, m += `
     }
   `;
    let d = "", f = "";
    o && (n ? d = `vec4 activation(vec4 a) {
           vec4 b = getPreluActivationWeightsAtOutCoords();
           ${o}
         }` : s ? d = `vec4 activation(vec4 a) {
           vec4 b = getLeakyreluAlphaAtOutCoords();
           ${o}
         }` : d = `vec4 activation(vec4 x) {
           ${o}
         }`, f = "result = activation(result);");
    let h = t6 ? "result += getBiasAtOutCoords();" : "";
    t6 && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), s && this.variableNames.push("leakyreluAlpha"), this.userCode = `
       ${d}

       void main() {
         ivec4 coords = getOutputCoords();
         int batch = coords.x;
         ivec2 xRCCorner = coords.yz * strides - pads;
         int d2 = coords.w;
         int xRCorner = xRCCorner.x;
         int xCCorner = xRCCorner.y;

         //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
         vec4 dotProd = vec4(0.000000000000001);

         ${m}

         vec4 result = dotProd - vec4(0.000000000000001);
         ${h}
         ${f}
         setOutput(result);
       }
     `;
  }
};
var Sh = class {
  constructor(e, t6) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "inputShape", type: "ivec4" }, { name: "pad", type: "ivec2" }, { name: "stride", type: "ivec2" }, { name: "dilation", type: "ivec2" }, { name: "inChannels", type: "int" }, { name: "itemsPerBlockRow", type: "int" }, { name: "outWidth", type: "int" }], this.outputShape = e, this.enableShapeUniforms = ct(this.outputShape.length);
    let { dataFormat: o } = t6, n = St(), s = o === "channelsLast", a = s ? 1 : 2, i = s ? 2 : 3, p = this.enableShapeUniforms ? "if(blockIndex < outShape[2] && pos < outShape[1]) {" : `if(blockIndex < ${e[2]} && pos < ${e[1]}) {`, u = "";
    for (let c = 0; c <= 1; c++)
      for (let l = 0; l <= 1; l++)
        u += `
          blockIndex = rc.z + ${l};
          pos = rc.y + ${c};

          ${p}
            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];
            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);

            if(d0 < inputShape[${a}] && d0 >= 0) {
              // Use custom imod instead mod. On Intel GPU, mod may generate
              // unexpected value.
              // https://github.com/tensorflow/tfjs/issues/5447
              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];
              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /
                  inChannels);

              if(d1 < inputShape[${i}] && d1 >= 0) {

                ch = imod(pos, inChannels);

                if (${s}) {
                  innerDims = vec2(d1, ch);
                  result[${c * 2 + l}] = getChannel(
                    getA(rc.x, d0, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                } else {
                  innerDims = vec2(d0, d1);
                  result[${c * 2 + l}] = getChannel(
                    getA(rc.x, ch, int(innerDims.x),
                    int(innerDims.y)), innerDims);
                }
              }
            }
          }
        `;
    this.userCode = `
      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0);

        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
        vec2 innerDims;

        ${u}

        ${n.output} = result;
      }
    `;
  }
};
function wh(r, e) {
  let t6 = r.length;
  return t6 >= 3 ? e ? [...r.slice(0, -3), r[t6 - 3] * r[t6 - 2], r[t6 - 1]] : [...r.slice(0, -3), r[t6 - 3], r[t6 - 2] * r[t6 - 1]] : !e && t6 === 1 && r[0] > 1 ? [r[0], 1] : null;
}
function Ih({ x: r, filter: e, convInfo: t6, backend: o, bias: n = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let p = r.shape, u = o.texData.get(r.dataId), c = t6.inChannels, l = p[0] * p[1] * p[2], m = t6.outChannels, d = t6.dataFormat === "channelsLast", f = false, h = false, g, x = [];
  if (s != null) {
    let w = wh(s.shape, d);
    w != null && (s = te({ inputs: { x: s }, backend: o, attrs: { shape: w } }), x.push(s));
  }
  if (n != null) {
    let w = wh(n.shape, d);
    w != null && (n = te({ inputs: { x: n }, backend: o, attrs: { shape: w } }), x.push(n));
  }
  if (!((l === 1 || m === 1) && c > Nw) && u.isPacked && d && u.texture != null && p[2] % 2 !== 0 && y.arraysEqual(u.shape.slice(-3), p.slice(-3))) {
    let w = p[0] * p[1] * (p[2] + 1), k = { dataId: r.dataId, shape: [1, w, t6.inChannels], dtype: r.dtype }, _ = u.shape;
    u.shape = u.shape.slice(), u.shape[u.shape.length - 2]++, y.assert(Li(u.shape, k.shape), () => `packed reshape ${u.shape} to ${k.shape} isn't free`);
    let $ = te({ inputs: { x: e }, backend: o, attrs: { shape: [1, t6.inChannels, t6.outChannels] } });
    x.push($);
    let A = Pu({ a: k, b: $, backend: o, transposeA: f, transposeB: h, bias: n, activation: i, preluActivationWeights: s, leakyreluAlpha: a }), R = o.texData.get(A.dataId);
    y.assert(R.isPacked, () => "batchMatMul result is expected to be packed"), u.shape = _, R.shape = t6.outShape, g = At({ inputs: { x: A }, backend: o }), g.shape = t6.outShape, x.push(A);
  } else {
    let w = t6.outHeight * t6.outWidth, k = te({ inputs: { x: r }, backend: o, attrs: { shape: d ? [t6.batchSize, w, t6.inChannels] : [t6.batchSize, t6.inChannels, w] } }), _ = te({ inputs: { x: e }, backend: o, attrs: { shape: [1, t6.inChannels, t6.outChannels] } }), $ = Pu({ a: d ? k : _, b: d ? _ : k, transposeA: !d, transposeB: h, backend: o, bias: n, activation: i, preluActivationWeights: s, leakyreluAlpha: a });
    g = te({ inputs: { x: $ }, backend: o, attrs: { shape: t6.outShape } }), x.push(k), x.push(_), x.push($);
  }
  for (let w of x)
    o.disposeIntermediateTensorInfo(w);
  return g;
}
function vh({ x: r, filter: e, convInfo: t6, backend: o, bias: n = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let { filterWidth: p, filterHeight: u, inChannels: c, outWidth: l, outHeight: m, dataFormat: d } = t6, f = d === "channelsLast", h = p * u * c, g = m * l, x = [t6.batchSize, h, g], b = true, C = false, w = [];
  if (s != null) {
    let H = wh(s.shape, f);
    H != null && (s = te({ inputs: { x: s }, backend: o, attrs: { shape: H } }), w.push(s));
  }
  if (n != null) {
    let H = wh(n.shape, f);
    H != null && (n = te({ inputs: { x: n }, backend: o, attrs: { shape: H } }), w.push(n));
  }
  let k = te({ inputs: { x: e }, backend: o, attrs: { shape: [1, h, y.sizeFromShape(e.shape) / h] } });
  w.push(k);
  let _ = new Sh(x, t6), $ = [r.shape, [t6.padInfo.top, t6.padInfo.left], [t6.strideHeight, t6.strideWidth], [t6.dilationHeight, t6.dilationWidth], [t6.inChannels], [t6.filterWidth * t6.inChannels], [t6.outWidth]], A = o.runWebGLProgram(_, [r], "float32", $), R = te({ inputs: { x: A }, backend: o, attrs: { shape: x } });
  w.push(A), w.push(R);
  let D = n != null, P = s != null, M = i === "leakyrelu", L = i ? Wa(i, true) : null, W = new dc(f ? R.shape : k.shape, f ? k.shape : R.shape, f ? [t6.batchSize, g, t6.outChannels] : [t6.batchSize, t6.outChannels, g], b, C, D, L, P, M), V = f ? [R, k] : [k, R];
  if (n && V.push(n), P && V.push(s), M) {
    let H = o.makeTensorInfo([], "float32", y.createScalarValue(a, "float32"));
    V.push(H), w.push(H);
  }
  let U = o.runWebGLProgram(W, V, "float32"), q = te({ inputs: { x: U }, backend: o, attrs: { shape: t6.outShape } });
  w.push(U);
  for (let H of w)
    o.disposeIntermediateTensorInfo(H);
  return q;
}
function EY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s } = e, { strides: a, pad: i, dataFormat: p, dilations: u, dimRoundingMode: c } = o, l = S.convertConv2DDataFormat(p), m = S.computeConv2DInfo(n.shape, s.shape, a, u, i, c, false, l), d;
  if (m.filterHeight === 1 && m.filterWidth === 1 && m.dilationHeight === 1 && m.dilationWidth === 1 && m.strideHeight === 1 && m.strideWidth === 1 && (m.padInfo.type === "SAME" || m.padInfo.type === "VALID"))
    d = Ih({ x: n, filter: s, convInfo: m, backend: t6 });
  else if (m.strideWidth <= 2 && l === "channelsLast" && O().getBool("WEBGL_EXP_CONV")) {
    let h = new gc(m), g = [[m.padInfo.top, m.padInfo.left], [m.strideHeight, m.strideWidth], [m.dilationHeight, m.dilationWidth], [m.inHeight, m.inWidth]];
    d = t6.runWebGLProgram(h, [n, s], "float32", g);
  } else if (O().getBool("WEBGL_CONV_IM2COL"))
    d = vh({ x: n, filter: s, convInfo: m, backend: t6 });
  else {
    let h = new hc(m);
    d = t6.runWebGLProgram(h, [n, s], "float32");
  }
  let f = te({ inputs: { x: d }, backend: t6, attrs: { shape: m.outShape } });
  return t6.disposeIntermediateTensorInfo(d), f;
}
var PA = { kernelName: Go, backendName: "webgl", kernelFunc: EY };
var kh = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    let t6 = e.strideHeight, o = e.strideWidth, n = e.padInfo.top, s = e.padInfo.left, a = e.dataFormat === "channelsLast";
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int d2 = coords.w;

        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t6} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              if (${a}) {
                float dyValue = getDy(b, yR, yC, d2);
                float xValue = getX(b, xR, xC, d1);
                dotProd += (xValue * dyValue);
              } else {
                float dyValue = getDy(b, d2, yR, yC);
                float xValue = getX(b, d1, xR, xC);
                dotProd += (xValue * dyValue);
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Nh = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    let t6 = e.filterHeight, o = e.filterWidth, n = e.strideHeight, s = e.strideWidth, a = e.dataFormat === "channelsLast", i = t6 - 1 - e.padInfo.top, p = o - 1 - e.padInfo.left, u = a ? 1 : 2, c = a ? 2 : 3, l = a ? 3 : 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${p});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[${l}];

        ivec2 dyCorner = ivec2(coords[${u}], coords[${c}]) - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${t6}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t6} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {

              if (${a}) {
                float xValue = getDy(batch, idyR, idyC, d2);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              } else {
                float xValue = getDy(batch, d2, idyR, idyC);
                float wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }

            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Th = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    let t6 = e.strideDepth, o = e.strideHeight, n = e.strideWidth, s = e.padInfo.front, a = e.padInfo.top, i = e.padInfo.left;
    this.userCode = `
      void main() {
        ivec5 coords = getOutputCoords();
        int wF = coords.x;
        int wR = coords.y;
        int wC = coords.z;
        int d1 = coords.w;
        int d2 = coords.u;

        float dotProd = 0.0;

        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yF = 0; yF < ${e.outDepth}; yF++) {
            int xF = wF + yF * ${t6} - ${s};

            if (xF < 0 || xF >= ${e.inDepth}) {
              continue;
            }

            for (int yR = 0; yR < ${e.outHeight}; yR++) {
              int xR = wR + yR * ${o} - ${a};

              if (xR < 0 || xR >= ${e.inHeight}) {
                continue;
              }

              for (int yC = 0; yC < ${e.outWidth}; yC++) {
                int xC = wC + yC * ${n} - ${i};

                if (xC < 0 || xC >= ${e.inWidth}) {
                  continue;
                }

                float dyValue = getDy(b, yF, yR, yC, d2);
                float xValue = getX(b, xF, xR, xC, d1);
                dotProd += (xValue * dyValue);
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var _h = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    let t6 = e.filterDepth, o = e.filterHeight, n = e.filterWidth, s = e.strideDepth, a = e.strideHeight, i = e.strideWidth, p = t6 - 1 - e.padInfo.front, u = o - 1 - e.padInfo.top, c = n - 1 - e.padInfo.left;
    this.userCode = `
      const ivec3 pads = ivec3(${p}, ${u}, ${c});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.u;


        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyFCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        float dotProd = 0.0;
        for (int wF = 0; wF < ${t6}; wF++) {
          float dyF = float(dyFCorner + wF) / ${s}.0;

          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {
            continue;
          }
          int idyF = int(dyF);

          int wFPerm = ${t6} - 1 - wF;

          for (int wR = 0; wR < ${o}; wR++) {
            float dyR = float(dyRCorner + wR) / ${a}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
              fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            int wRPerm = ${o} - 1 - wR;

            for (int wC = 0; wC < ${n}; wC++) {
              float dyC = float(dyCCorner + wC) / ${i}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              int wCPerm = ${n} - 1 - wC;

              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {
                float xValue = getDy(batch, idyF, idyR, idyC, d2);
                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);
                dotProd += xValue * wValue;
              }
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function $Y(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, dy: s } = e, { strides: a, pad: i, dataFormat: p, dimRoundingMode: u, filterShape: c } = o, l = S.convertConv2DDataFormat(p), m = S.computeConv2DInfo(n.shape, c, a, 1, i, u, false, l), d = new kh(m);
  return t6.runWebGLProgram(d, [n, s], "float32");
}
var MA = { kernelName: cp, backendName: "webgl", kernelFunc: $Y };
function AY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, filter: s } = e, { inputShape: a, strides: i, pad: p, dataFormat: u, dimRoundingMode: c } = o, l = S.convertConv2DDataFormat(u), m = S.computeConv2DInfo(a, s.shape, i, 1, p, c, false, l), d = new Nh(m);
  return t6.runWebGLProgram(d, [n, s], "float32");
}
var LA = { kernelName: Ho, backendName: "webgl", kernelFunc: AY };
function RY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s } = e, { strides: a, pad: i, dilations: p } = o, u = S.computeConv3DInfo(n.shape, s.shape, a, p, i), c = new Ch(u);
  return t6.runWebGLProgram(c, [n, s], "float32");
}
var BA = { kernelName: lp, backendName: "webgl", kernelFunc: RY };
function FY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, dy: s } = e, { strides: a, pad: i, filterShape: p } = o, u = S.computeConv3DInfo(n.shape, p, a, 1, i), c = new Th(u);
  return t6.runWebGLProgram(c, [n, s], "float32");
}
var VA = { kernelName: vm, backendName: "webgl", kernelFunc: FY };
function DY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, filter: s } = e, { pad: a, strides: i, inputShape: p } = o, u = S.computeConv3DInfo(p, s.shape, i, 1, a), c = new _h(u);
  return t6.runWebGLProgram(c, [n, s], "float32");
}
var zA = { kernelName: mp, backendName: "webgl", kernelFunc: DY };
var OY = _o + `
  return cos(x);
`;
var PY = ge({ opSnippet: OY });
var WA = { kernelName: qo, backendName: "webgl", kernelFunc: PY };
var MY = `
  float e2x = exp(-x);
  return (e2x + 1.0 / e2x) / 2.0;
`;
var LY = ge({ opSnippet: MY });
var UA = { kernelName: Ko, backendName: "webgl", kernelFunc: LY };
var Eh = class {
  constructor(e, t6, o, n, s) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.outputShape = [];
    let [a, i, p, u] = e, [c] = t6, [l, m] = o;
    this.outputShape = [c, l, m, u];
    let d = n === "bilinear" ? 1 : 0, [f, h] = [`${i - 1}.0`, `${p - 1}.0`], [g, x, b] = l > 1 ? [`${(i - 1) / (l - 1)}`, "(y2-y1) * height_ratio", `y1*${f} + float(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${f}`], [C, w, k] = m > 1 ? [`${(p - 1) / (m - 1)}`, "(x2-x1) * width_ratio", `x1*${h} + float(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${h}`];
    this.userCode = `
      const float height_ratio = float(${g});
      const float width_ratio = float(${C});
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int y = coords[1];
        int x = coords[2];
        int d = coords[3];

        // get box vals
        float y1 = getBoxes(b,0);
        float x1 = getBoxes(b,1);
        float y2 = getBoxes(b,2);
        float x2 = getBoxes(b,3);

        // get image in batch index
        int bInd = round(getBoxInd(b));
        if(bInd < 0 || bInd >= ${a}) {
          return;
        }

        float height_scale = ${x};
        float width_scale = ${w};

        float in_y = ${b};
        if( in_y < 0.0 || in_y > ${f} ) {
          setOutput(float(${s}));
          return;
        }
        float in_x = ${k};
        if( in_x < 0.0 || in_x > ${h} ) {
          setOutput(float(${s}));
          return;
        }

        vec2 sourceFracIndexCR = vec2(in_x,in_y);
        if(${d} == 1) {
          // Compute the four integer indices.
          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);
          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));

          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);
          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);
          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);
          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);

          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);

          float top = topLeft + (topRight - topLeft) * fracCR.x;
          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          float newValue = top + (bottom - top) * fracCR.y;
          setOutput(newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          ivec2 sourceNearestCR = ivec2(floor(
            sourceFracIndexCR + vec2(0.5,0.5)));
          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutput(newValue);
        }
      }
    `;
  }
};
var BY = (r) => {
  let { inputs: e, backend: t6, attrs: o } = r, { image: n, boxes: s, boxInd: a } = e, { cropSize: i, method: p, extrapolationValue: u } = o, c = new Eh(n.shape, s.shape, i, p, u);
  return t6.runWebGLProgram(c, [n, s, a], "float32");
};
var GA = { kernelName: Yo, backendName: "webgl", kernelFunc: BY };
var Lu;
(function(r) {
  r.Prod = "*", r.Sum = "+";
})(Lu || (Lu = {}));
var El = class {
  constructor(e, t6, o, n) {
    this.op = e, this.outputShape = t6, this.variableNames = ["x"], this.customUniforms = [{ name: "index", type: "float" }];
    let s = this.outputShape.length, a = this.op === Lu.Prod ? "1.0" : "0.0", i = o ? a : `getX(${HA(s, "coords", this.op)})`, p = this.outputShape[this.outputShape.length - 1], u = "", c = "";
    o ? (u = n ? `end != ${p - 1}` : "end != 0", c = n ? "end + 1" : "end - 1") : (u = n ? `end + pow2 < ${p}` : "end >= pow2", c = n ? "end + pow2" : "end - pow2"), this.userCode = `
      void main() {
        ${_e(s)} coords = getOutputCoords();
        int end = ${qA(s, "coords", this.op)};
        float val = ${i};
        int pow2 = int(pow(2.0, index));
        if (${u}) {
          int idx = ${c};
          ${qA(s, "coords", this.op)} = idx;
          val ${this.op}= getX(${HA(s, "coords", this.op)});
        }
        setOutput(val);
      }
    `;
  }
};
function HA(r, e, t6) {
  if (r === 1)
    return `${e}`;
  if (r === 2)
    return `${e}.x, ${e}.y`;
  if (r === 3)
    return `${e}.x, ${e}.y, ${e}.z`;
  if (r === 4)
    return `${e}.x, ${e}.y, ${e}.z, ${e}.w`;
  throw new Error(`Cumulative ${t6} for rank ${r} is not yet supported`);
}
function qA(r, e, t6) {
  if (r === 1)
    return `${e}`;
  if (r === 2)
    return `${e}.y`;
  if (r === 3)
    return `${e}.z`;
  if (r === 4)
    return `${e}.w`;
  throw new Error(`Cumulative ${t6} for rank ${r} is not yet supported`);
}
function $h(r, e, t6, o, n, s) {
  let a = e.shape.length, i = S.getAxesPermutation([o], a), p = e;
  i != null && (p = xt({ inputs: { x: e }, backend: t6, attrs: { perm: i } }));
  let u = S.getInnerMostAxes(1, a)[0];
  if (u !== a - 1)
    throw new Error(`WebGL cumprod shader expects an inner-most axis=${e.shape.length - 1} but got axis=${o}`);
  let c = p.shape[u], l = At({ inputs: { x: p }, backend: t6 });
  for (let m = 0; m <= Math.ceil(Math.log2(c)) - 1; m++) {
    let d = new El(r, p.shape, false, s), f = [[m]], h = l;
    l = t6.runWebGLProgram(d, [l], l.dtype, f), t6.disposeIntermediateTensorInfo(h);
  }
  if (n) {
    let m = new El(r, p.shape, n, s), d = l;
    l = t6.runWebGLProgram(m, [l], l.dtype), t6.disposeIntermediateTensorInfo(d);
  }
  if (i != null) {
    let m = S.getUndoAxesPermutation(i), d = xt({ inputs: { x: l }, backend: t6, attrs: { perm: m } });
    return t6.disposeIntermediateTensorInfo(l), t6.disposeIntermediateTensorInfo(p), d;
  }
  return l;
}
function VY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, exclusive: a, reverse: i } = o;
  return $h(Lu.Prod, n, t6, s, a, i);
}
var KA = { kernelName: jo, backendName: "webgl", kernelFunc: VY };
function zY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, exclusive: a, reverse: i } = o;
  return $h(Lu.Sum, n, t6, s, a, i);
}
var jA = { kernelName: Xo, backendName: "webgl", kernelFunc: zY };
function WY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, weights: s } = e, { size: a, binaryOutput: i } = o;
  if (n.shape.length === 1) {
    let p = t6.readSync(n.dataId), u = t6.readSync(s.dataId), c = qf(p, u, s.dtype, s.shape, a);
    return t6.makeTensorInfo([a], s.dtype, c);
  } else if (n.shape.length === 2) {
    let p = t6.bufferSync(n), u = t6.bufferSync(s), c = OE(p, u, a, i);
    return t6.makeTensorInfo(c.shape, s.dtype, c.values);
  }
  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${n.shape.length}.`);
}
var XA = { kernelName: ti, backendName: "webgl", kernelFunc: WY };
var Ah = class {
  constructor(e, t6, o) {
    this.variableNames = ["x"], this.outputShape = [], this.outputShape = e, this.blockSize = t6, this.dataFormat = o, this.userCode = `
    void main() {
      ivec4 coords = getOutputCoords();
      int b = coords[0];
      int h = ${this.getHeightCoordString()};
      int w = ${this.getWidthCoordString()};
      int d = ${this.getDepthCoordString()};

      int in_h = h / ${t6};
      int offset_h = imod(h, ${t6});
      int in_w = w / ${t6};
      int offset_w = imod(w, ${t6});
      int offset_d = (offset_h * ${t6} + offset_w) *
        ${this.getOutputDepthSize()};
      int in_d = d + offset_d;

      float result = ${this.getInputSamplingString()};
      setOutput(result);
    }
  `;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? this.outputShape[3] : this.outputShape[1];
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
};
function UY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { blockSize: s, dataFormat: a } = o, i = n.shape[0], p = a === "NHWC" ? n.shape[1] : n.shape[2], u = a === "NHWC" ? n.shape[2] : n.shape[3], c = a === "NHWC" ? n.shape[3] : n.shape[1], l = p * s, m = u * s, d = c / (s * s), f = a === "NHWC" ? [i, l, m, d] : [i, d, l, m], h = new Ah(f, s, a);
  return t6.runWebGLProgram(h, [n], n.dtype);
}
var YA = { kernelName: Qo, backendName: "webgl", kernelFunc: UY };
var xc = class {
  constructor(e, t6 = false, o = null, n = false, s = false) {
    this.variableNames = ["x", "W"], this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = ct(this.outputShape.length);
    let a = e.filterHeight, i = e.filterWidth, p = e.outChannels / e.inChannels, u = "", c = "";
    o && (n ? u = `float activation(float a) {
          float b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }` : s ? u = `float activation(float a) {
          float b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }` : u = `
          float activation(float x) {
            ${o}
          }
        `, c = "result = activation(result);");
    let l = t6 ? "result += getBiasAtOutCoords();" : "";
    t6 && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), s && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${u}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${p};
        int q = d2 - d1 * ${p};

        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.
        for (int wR = 0; wR < ${a}; wR++) {
          int xR = xRCorner + wR * dilations[0];

          if (xR < 0 || xR >= inDims[0]) {
            continue;
          }

          for (int wC = 0; wC < ${i}; wC++) {
            int xC = xCCorner + wC * dilations[1];

            if (xC < 0 || xC >= inDims[1]) {
              continue;
            }

            float xVal = getX(batch, xR, xC, d1);
            float wVal = getW(wR, wC, d1, q);
            dotProd += xVal * wVal;
          }
        }

        float result = dotProd;
        ${l}
        ${c}
        setOutput(result);
      }
    `;
  }
};
var yc = class {
  constructor(e, t6 = false, o = null, n = false, s = false) {
    this.variableNames = ["x", "W"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "pads", type: "ivec2" }, { name: "strides", type: "ivec2" }, { name: "dilations", type: "ivec2" }, { name: "inDims", type: "ivec2" }], this.outputShape = e.outShape, this.enableShapeUniforms = ct(this.outputShape.length);
    let a = e.outChannels / e.inChannels, i = e.padInfo.left, p = e.strideWidth, u = e.dilationWidth, c = e.filterHeight, l = e.filterWidth, m = l, d = `
      int xR; int xC; int xCOffset;
      vec4 wTexel; vec4 previous; vec4 final;`;
    for (let x = 0; x < l; x++)
      d += `
          vec4 xTexelC${x * 2};
          int xTexelC${x * 2}Ready;
          vec4 xTexelC${x * 2 + 1};
          int xTexelC${x * 2 + 1}Ready;
          vec4 xC${x};`;
    d += `
    for (int r = 0; r < ${c}; r++) {
      `;
    for (let x = 0; x < l; x++)
      d += `
          xTexelC${x * 2} = vec4(0.0);
          xTexelC${x * 2}Ready = 0;
          xTexelC${x * 2 + 1} = vec4(0.0);
          xTexelC${x * 2 + 1}Ready = 0;
          xC${x} = vec4(0.0);`;
    d += `
        xR = xRCorner + r * dilations[0];
        if (xR >=0 && xR < inDims[0]) {
      `;
    for (let x = 0; x < (m + 1) / 2; x++) {
      let b = x * 2;
      if (d += `
          xC = xCCorner + ${b * u};
          `, p === 1) {
        if (b < l && (i % 2 === 1 ? (d += `
                xCOffset = xC + 1;
                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);

                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }
              `, u === 1 && b > 0 ? d += `
                xC${b} = vec4(xTexelC${b - 2}.zw, xTexelC${b}.xy);
                ` : d += `
                  xCOffset = xC + 1 - 2;

                  if (xCOffset >= 0 && xCOffset < inDims[1]) {
                    previous = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      previous.zw = vec2(0.0);
                    }

                    xC${b} = vec4(previous.zw, xTexelC${b}.xy);
                  } else {
                    xC${b} = vec4(0.0, 0.0, xTexelC${b}.xy);
                  }
                  `) : d += `
                if (xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xC${b} = xTexelC${b};
                `, b + 1 < l)) {
          let C = i % 2 === 0 ? y.nearestLargerEven(u) : u;
          u % 2 === 0 && i % 2 === 1 || u % 2 !== 0 && i % 2 !== 1 ? (d += `
                  xCOffset = xC + imod(pads[1], 2) + ${C};

                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                    xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);

                    // Need to manually clear unused channels in case
                    // we're reading from recycled texture.
                    if (xCOffset + 1 >= inDims[1]) {
                      xTexelC${b + 1}.zw = vec2(0.0);
                    }
                    xTexelC${b + 1}Ready = 1;
                  }
                  `, u > 1 ? d += `
                    xCOffset -= 2;
                    if (xCOffset >= 0 && xCOffset < inDims[1]) {
                     previous = getX(batch, xR, xCOffset, d1);
                     xC${b + 1} = vec4(previous.zw, xTexelC${b + 1}.xy);
                    } else {
                     xC${b + 1} = vec4(0.0, 0.0, xTexelC${b + 1}.xy);
                    }
                    ` : d += `
                    xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.xy);
                    `) : C === 1 ? d += `
                    xC${b + 1} = xTexelC${b};
                    ` : d += `
                    xCOffset = xC + ${C};

                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                      xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                      if (xCOffset + 1 >= inDims[1]) {
                        xTexelC${b + 1}.zw = vec2(0.0);
                      }
                      xTexelC${b + 1}Ready = 1;
                    }

                    xC${b + 1} = xTexelC${b + 1};
                    `;
        }
      } else
        b < l && (i % 2 === 1 ? (d += `
                xCOffset = xC + 1 - strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xCOffset, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xC + 1, d1);
                  // Need to manually clear unused channels in case
                  // we're reading from recycled texture.
                  if (xC + 2 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.0);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
              `, b + 1 < l && (d += `
                  final = vec4(0.0);
                  xCOffset = xC + 1 + strides[1];
                  if(xCOffset >= 0 && xCOffset < inDims[1]) {
                    final = getX(batch, xR, xCOffset, d1);
                  }
                  xC${b + 1} = vec4(xTexelC${b + 1}.xy, final.xy);
                `)) : (d += `
                if(xC >= 0 && xC < inDims[1] && xTexelC${b}Ready == 0) {
                  xTexelC${b} = getX(batch, xR, xC, d1);
                  if (xC + 1 >= inDims[1]) {
                    xTexelC${b}.zw = vec2(0.0);
                  }
                  xTexelC${b}Ready = 1;
                }

                xCOffset = xC + strides[1];
                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${b + 1}Ready == 0) {
                  xTexelC${b + 1} = getX(batch, xR, xCOffset, d1);
                  if (xCOffset + 1 >= inDims[1]) {
                    xTexelC${b + 1}.zw = vec2(0.);
                  }
                  xTexelC${b + 1}Ready = 1;
                }

                xC${b} = vec4(
                  xTexelC${b}.xy, xTexelC${b + 1}.xy);
              `, b + 1 < l && (d += `
                  xC${b + 1} = vec4(xTexelC${b}.zw, xTexelC${b + 1}.zw);
                `)));
      b < l && (d += `
            wTexel = getW(r, ${b}, d1, q);
            dotProd += xC${b} * vec4(wTexel.xz, wTexel.xz);
          `, b + 1 < l && (d += `
              wTexel = getW(r, ${b + 1}, d1, q);
              dotProd += xC${b + 1} * vec4(wTexel.xz, wTexel.xz);
            `));
    }
    d += `
    }
  `, d += `
      }
    `;
    let f = "", h = "";
    o && (n ? f = `vec4 activation(vec4 a) {
          vec4 b = getPreluActivationWeightsAtOutCoords();
          ${o}
        }` : s ? f = `vec4 activation(vec4 a) {
          vec4 b = getLeakyreluAlphaAtOutCoords();
          ${o}
        }` : f = `vec4 activation(vec4 x) {
          ${o}
        }`, h = "result = activation(result);");
    let g = t6 ? "result += getBiasAtOutCoords();" : "";
    t6 && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), s && this.variableNames.push("leakyreluAlpha"), this.userCode = `
      ${f}

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        ivec2 xRCCorner = coords.yz * strides - pads;
        int d2 = coords.w;
        int d1 = d2 / ${a};
        int q = d2 - d1 * ${a};
        int xRCorner = xRCCorner.x;
        int xCCorner = xRCCorner.y;

        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.
        vec4 dotProd = vec4(0.000000000000001);

        ${d}

        vec4 result = dotProd - vec4(0.000000000000001);
        ${g}
        ${h}
        setOutput(result);
      }
    `;
  }
};
function GY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s } = e, { strides: a, pad: i, dilations: p, dimRoundingMode: u } = o, c = p;
  c == null && (c = [1, 1]), y.assert(S.eitherStridesOrDilationsAreOne(a, c), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${a} and dilations '${c}'`);
  let l = S.computeConv2DInfo(n.shape, s.shape, a, c, i, u, true), m;
  O().getBool("WEBGL_PACK_DEPTHWISECONV") && l.strideWidth <= 2 && l.outChannels / l.inChannels === 1 ? m = new yc(l) : m = new xc(l);
  let d = [[l.padInfo.top, l.padInfo.left], [l.strideHeight, l.strideWidth], [l.dilationHeight, l.dilationWidth], [l.inHeight, l.inWidth]];
  return t6.runWebGLProgram(m, [n, s], "float32", d);
}
var QA = { kernelName: Zo, backendName: "webgl", kernelFunc: GY };
var Rh = class {
  constructor(e) {
    this.variableNames = ["x", "dy"], this.outputShape = e.filterShape;
    let t6 = e.strideHeight, o = e.strideWidth, n = e.padInfo.top, s = e.padInfo.left, a = e.outChannels / e.inChannels;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int wR = coords.x;
        int wC = coords.y;
        int d1 = coords.z;
        int dm = coords.w;
        int d2 = d1 * ${a} + dm;

        float dotProd = 0.0;

        // TO DO: Vec4 over the batch size
        for (int b = 0; b < ${e.batchSize}; b++) {
          for (int yR = 0; yR < ${e.outHeight}; yR++) {
            int xR = wR + yR * ${t6} - ${n};

            if (xR < 0 || xR >= ${e.inHeight}) {
              continue;
            }

            for (int yC = 0; yC < ${e.outWidth}; yC++) {
              int xC = wC + yC * ${o} - ${s};

              if (xC < 0 || xC >= ${e.inWidth}) {
                continue;
              }

              float dyValue = getDy(b, yR, yC, d2);
              float xValue = getX(b, xR, xC, d1);
              dotProd += (xValue * dyValue);
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var Fh = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.outputShape = e.inShape;
    let t6 = e.filterHeight, o = e.filterWidth, n = e.strideHeight, s = e.strideWidth, a = t6 - 1 - e.padInfo.top, i = o - 1 - e.padInfo.left, p = e.outChannels / e.inChannels;
    this.userCode = `
      const ivec2 pads = ivec2(${a}, ${i});

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords[0];
        int d1 = coords[3];
        ivec2 dyCorner = coords.yz - pads;
        int dyRCorner = dyCorner.x;
        int dyCCorner = dyCorner.y;

        float dotProd = 0.0;

        for (int wR = 0; wR < ${t6}; wR++) {
          float dyR = float(dyRCorner + wR) / ${n}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          int wRPerm = ${t6} - 1 - wR;

          for (int wC = 0; wC < ${o}; wC++) {
            float dyC = float(dyCCorner + wC) / ${s}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            int wCPerm = ${o} - 1 - wC;

            // TO DO: Vec4 over the channelMul
            for (int dm = 0; dm < ${p}; dm++) {
              int d2 = d1 * ${p} + dm;
              float xValue = getDy(batch, idyR, idyC, d2);
              float wValue = getW(wRPerm, wCPerm, d1, dm);
              dotProd += xValue * wValue;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function HY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, dy: s } = e, { strides: a, dilations: i, pad: p, dimRoundingMode: u, filterShape: c } = o, l = S.computeConv2DInfo(n.shape, c, a, i, p, u, true), m = new Rh(l);
  return t6.runWebGLProgram(m, [n, s], "float32");
}
var ZA = { kernelName: dp, backendName: "webgl", kernelFunc: HY };
function qY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, filter: s } = e, { strides: a, dilations: i, pad: p, dimRoundingMode: u, inputShape: c } = o, l = S.computeConv2DInfo(c, s.shape, a, i, p, u, true), m = new Fh(l);
  return t6.runWebGLProgram(m, [n, s], "float32");
}
var JA = { kernelName: fp, backendName: "webgl", kernelFunc: qY };
var Dh = class {
  constructor(e) {
    this.variableNames = ["X"], this.outputShape = [e, e], this.userCode = `
      void main() {
          ivec2 coords = getOutputCoords();
          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;
          setOutput(val);
      }
    `;
  }
};
function KY(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e, n = [...o.shape, ...o.shape], s = y.sizeFromShape(o.shape), a = te({ inputs: { x: o }, backend: t6, attrs: { shape: [s] } }), i = new Dh(s), p = t6.runWebGLProgram(i, [a], a.dtype), u = te({ inputs: { x: p }, backend: t6, attrs: { shape: n } });
  return t6.disposeIntermediateTensorInfo(a), t6.disposeIntermediateTensorInfo(p), u;
}
var eR = { kernelName: hp, backendName: "webgl", kernelFunc: KY };
var Oh = class {
  constructor(e) {
    this.variableNames = ["x", "W"], this.outputShape = e.outShape;
    let { inHeight: t6, inWidth: o, padInfo: n, strideHeight: s, strideWidth: a, filterHeight: i, filterWidth: p, dilationHeight: u, dilationWidth: c } = e, { top: l, left: m } = n;
    this.userCode = `
      const ivec2 strides = ivec2(${s}, ${a});
      const ivec2 pads = ivec2(${l}, ${m});
      const float neg_infinity = -3.4e38;

      void main() {
        ivec4 coords = getOutputCoords();
        int batch = coords.x;
        int d1 = coords.w;
        ivec2 outTopLeftCorner =
            coords.yz * strides - pads;
        int hBeg = outTopLeftCorner.x;
        int wBeg = outTopLeftCorner.y;

        float curVal = neg_infinity;
        for (int h = 0; h < ${i}; h++) {
          int hIn = hBeg + h * ${u};

          if (hIn >= 0 && hIn < ${t6}) {
            for (int w = 0; w < ${p}; w++) {
              int wIn = wBeg + w * ${c};

              if (wIn >= 0 && wIn < ${o}) {
                float xVal = getX(batch, hIn, wIn, d1);
                float wVal = getW(h, w, d1);

                float val = xVal + wVal;
                if (val > curVal) {
                  curVal = val;
                }
              }
            }
          }
        }

        float result = curVal;
        setOutput(result);
      }
    `;
  }
};
function jY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s } = e, { strides: a, pad: i, dilations: p } = o, u = S.computeDilation2DInfo(n.shape, s.shape, a, i, "NHWC", p), c, l = new Oh(u);
  c = t6.runWebGLProgram(l, [n, s], "float32");
  let m = te({ inputs: { x: c }, backend: t6, attrs: { shape: u.outShape } });
  return t6.disposeIntermediateTensorInfo(c), m;
}
var tR = { kernelName: gp, backendName: "webgl", kernelFunc: jY };
function XY(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { equation: n } = o, s = e, { allDims: a, summedDims: i, idDims: p } = S.decodeEinsumEquation(n, s.length);
  S.checkEinsumDimSizes(a.length, p, s);
  let { path: u, steps: c } = S.getEinsumComputePath(i, p), l = c.length, m = null, d = a.length, f = [];
  for (let h = 0; h < l; ++h) {
    for (let g of c[h]) {
      let { permutationIndices: x, expandDims: b } = S.getEinsumPermutation(d, p[g]), C;
      S.isIdentityPermutation(x) ? C = s[g] : (C = xt({ inputs: { x: s[g] }, backend: t6, attrs: { perm: x } }), f.push(C));
      let w = C.shape.slice();
      for (let k = 0; k < b.length; ++k)
        w.splice(b[k], 0, 1);
      y.arraysEqual(C.shape, w) || (C = te({ inputs: { x: C }, backend: t6, attrs: { shape: w } }), f.push(C)), m === null ? m = C : (m = Tl({ inputs: { a: C, b: m }, backend: t6 }), f.push(m));
    }
    h < l - 1 && (u[h] >= 0 && (m = Ou({ inputs: { x: m }, backend: t6, attrs: { axis: u[h] - (a.length - d), keepDims: false } }), f.push(m)), d--);
  }
  for (let h of f)
    h !== m && t6.disposeIntermediateTensorInfo(h);
  return m;
}
var rR = { kernelName: ri, backendName: "webgl", kernelFunc: XY };
var YY = "return (x >= 0.0) ? x : (exp(x) - 1.0);";
var QY = `
  vec4 result;

  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);
  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);
  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);
  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);

  return result;
`;
var ZY = ge({ opSnippet: YY, packedOpSnippet: QY });
var oR = { kernelName: en, backendName: "webgl", kernelFunc: ZY };
var JY = "return (b >= 1.0) ? a : a * (b + 1.0);";
var eQ = `
  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));
  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));
`;
var tQ = (r) => {
  let { inputs: e, backend: t6 } = r, { dy: o, y: n } = e, s = O().getBool("WEBGL_PACK_BINARY_OPERATIONS") ? new To(eQ, o.shape, n.shape) : new io(JY, o.shape, n.shape);
  return t6.runWebGLProgram(s, [o, n], o.dtype);
};
var nR = { kernelName: km, backendName: "webgl", kernelFunc: tQ };
var rQ = `
  return vec4(equal(a, b));
`;
var oQ = "return float(a == b);";
var nQ = tt({ opSnippet: oQ, packedOpSnippet: rQ, dtype: "bool", cpuKernelImpl: BE });
var sR = { kernelName: tn, backendName: "webgl", kernelFunc: nQ };
var sQ = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  float p = ${S.ERF_P};
  float a1 = ${S.ERF_A1};
  float a2 = ${S.ERF_A2};
  float a3 = ${S.ERF_A3};
  float a4 = ${S.ERF_A4};
  float a5 = ${S.ERF_A5};

  float sign = sign(x);
  x = abs(x);
  float t = 1.0 / (1.0 + p * x);
  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));
`;
var aQ = ge({ opSnippet: sQ });
var aR = { kernelName: ma, backendName: "webgl", kernelFunc: aQ };
var iQ = _o + `
  return exp(x);
`;
var uQ = `
  vec4 result = exp(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var Aw = ge({ opSnippet: iQ, packedOpSnippet: uQ, cpuKernelImpl: VE, dtype: "float32" });
var iR = { kernelName: rn, backendName: "webgl", kernelFunc: Aw };
function Ph(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { dim: n } = t6, { input: s } = e, a = s.shape.length, i = s.shape.slice(), p = n;
  return n < 0 && (y.assert(-(a + 1) <= n, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), p = a + n + 1), i.splice(p, 0, 1), te({ inputs: { x: s }, backend: o, attrs: { shape: i } });
}
var uR = { kernelName: bs, backendName: "webgl", kernelFunc: Ph };
var pR = "return exp(x) - 1.0;";
var pQ = ge({ opSnippet: pR, packedOpSnippet: pR, cpuKernelImpl: zE });
var cR = { kernelName: da, backendName: "webgl", kernelFunc: pQ };
var $l = class {
  constructor(e, t6, o) {
    this.variableNames = ["real", "imag"];
    let n = t6[1];
    this.outputShape = t6;
    let s = o ? `2.0 * ${Math.PI}` : `-2.0 * ${Math.PI}`, a = o ? `${n}.0` : "1.0", i;
    if (e === "real")
      i = "return real * expR - imag * expI;";
    else if (e === "imag")
      i = "return real * expI + imag * expR;";
    else
      throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);
    this.userCode = `
      const float exponentMultiplier = ${s};

      float unaryOpComplex(float real, float expR, float imag, float expI) {
        ${i}
      }

      float mulMatDFT(int batch, int index) {
        float indexRatio = float(index) / float(${n});
        float exponentMultiplierTimesIndexRatio =
            exponentMultiplier * indexRatio;

        float result = 0.0;

        for (int i = 0; i < ${n}; i++) {
          // x = (-2|2 * PI / N) * index * i;
          float x = exponentMultiplierTimesIndexRatio * float(i);
          float expR = cos(x);
          float expI = sin(x);
          float real = getReal(batch, i);
          float imag = getImag(batch, i);

          result +=
              unaryOpComplex(real, expR, imag, expI) / ${a};
        }

        return result;
      }

      void main() {
        ivec2 coords = getOutputCoords();
        setOutput(mulMatDFT(coords[0], coords[1]));
      }
    `;
  }
};
function Mh(r, e, t6) {
  let o = t6.texData.get(r.dataId), n = y.sizeFromShape(r.shape), s = r.shape[r.shape.length - 1], a = n / s, i = te({ inputs: { x: r }, backend: t6, attrs: { shape: [a, s] } }), p = i.shape, u = new $l("real", p, e), c = new $l("imag", p, e), l = [{ dataId: o.complexTensorInfos.real.dataId, dtype: o.complexTensorInfos.real.dtype, shape: p }, { dataId: o.complexTensorInfos.imag.dataId, dtype: o.complexTensorInfos.imag.dtype, shape: p }], m = t6.runWebGLProgram(u, l, "float32"), d = t6.runWebGLProgram(c, l, "float32"), f = Rr({ inputs: { real: m, imag: d }, backend: t6 });
  t6.disposeIntermediateTensorInfo(m), t6.disposeIntermediateTensorInfo(d);
  let h = te({ inputs: { x: f }, backend: t6, attrs: { shape: r.shape } });
  return t6.disposeIntermediateTensorInfo(i), t6.disposeIntermediateTensorInfo(f), h;
}
function cQ(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e;
  return Mh(o, false, t6);
}
var lR = { kernelName: oi, backendName: "webgl", kernelFunc: cQ };
var Lh = class {
  constructor(e, t6) {
    this.outputShape = [], this.customUniforms = [{ name: "value", type: "float" }], this.variableNames = ["x"], this.outputShape = e, this.userCode = `
      void main() {
        // Input can be obtained from uniform value.
        setOutput(value);
      }
    `;
  }
};
function Ga(r) {
  let { backend: e, attrs: t6 } = r, { shape: o, value: n } = t6, { dtype: s } = t6;
  if (s = s || y.inferDtype(n), s === "string") {
    let a = y.getArrayFromDType(s, y.sizeFromShape(o));
    return a.fill(n), e.makeTensorInfo(o, s, a);
  } else {
    let a = new Lh(o, n), i = [[n]];
    return e.runWebGLProgram(a, [], s, i);
  }
}
var mR = { kernelName: Cs, backendName: "webgl", kernelFunc: Ga };
var Bh = class {
  constructor(e) {
    this.variableNames = ["Image"], this.outputShape = [];
    let t6 = e[2];
    this.outputShape = e, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];

          int coordX = ${t6} - x - 1;
          float outputValue;
          if(coordX >= 0 && coordX < ${t6}) {
            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);
          } else {
            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
var dR = { kernelName: on, backendName: "webgl", kernelFunc: ({ inputs: r, backend: e }) => {
  let { image: t6 } = r, o = e, n = new Bh(t6.shape);
  return o.runWebGLProgram(n, [t6], t6.dtype);
} };
var fR = "return floor(x);";
var lQ = ge({ opSnippet: fR, packedOpSnippet: fR, cpuKernelImpl: WE });
var hR = { kernelName: nn, backendName: "webgl", kernelFunc: lQ };
var mQ = `
  float s = sign(a) * sign(b);
  int ia = round(a);
  int ib = round(b);
  if (ib != 0) {
    // Windows (D3D) wants guaranteed non-zero int division at compile-time.
    return float(idiv(ia, ib, s));
  } else {
    return NAN;
  }
`;
var dQ = `
  ivec4 ia = round(a);
  ivec4 ib = round(b);
  bvec4 cond = notEqual(ib, ivec4(0));
  ivec4 result = ivec4(0);
  vec4 s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    result[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    result[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    result[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    result[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4(result);
`;
var fQ = tt({ opSnippet: mQ, packedOpSnippet: dQ, dtype: "int32" });
var gR = { kernelName: sn, backendName: "webgl", kernelFunc: fQ };
var Vh = class {
  constructor(e) {
    this.variableNames = ["A"];
    let t6 = St(), [o, n] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];
        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${n}.0, ${o}.0);

        vec4 values = ${t6.texture2D}(A, uv);
        float value;
        if (depth == 0) {
          value = values.r;
        } else if (depth == 1) {
          value = values.g;
        } else if (depth == 2) {
          value = values.b;
        } else if (depth == 3) {
          value = values.a;
        }

        setOutput(floor(value * 255.0 + 0.5));
      }
    `;
  }
};
var zh = class {
  constructor(e) {
    this.variableNames = ["A"], this.packedInputs = false, this.packedOutput = true;
    let t6 = St(), [o, n] = e;
    this.outputShape = e, this.userCode = `
      void main() {
        ivec3 coords = getOutputCoords();
        int texR = coords[0];
        int texC = coords[1];
        int depth = coords[2];

        vec4 result = vec4(0.);

        for(int row=0; row<=1; row++) {
          for(int col=0; col<=1; col++) {
            texC = coords[1] + row;
            depth = coords[2] + col;

            vec2 uv = (vec2(texC, texR) + halfCR) /
                       vec2(${n}.0, ${o}.0);
            vec4 values = ${t6.texture2D}(A, uv);
            float value;
            if (depth == 0) {
              value = values.r;
            } else if (depth == 1) {
              value = values.g;
            } else if (depth == 2) {
              value = values.b;
            } else if (depth == 3) {
              value = values.a;
            }

            result[row * 2 + col] = floor(value * 255.0 + 0.5);
          }
        }

        ${t6.output} = result;
      }
    `;
  }
};
var xR = { kernelName: Zi, backendName: "webgl", kernelFunc: hQ };
var bc;
var Rw = O().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
function hQ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { pixels: n } = e, { numChannels: s } = o, a = typeof HTMLVideoElement != "undefined" && n instanceof HTMLVideoElement, i = typeof HTMLImageElement != "undefined" && n instanceof HTMLImageElement, [p, u] = a ? [n.videoWidth, n.videoHeight] : [n.width, n.height], c = [u, p], l = [u, p, s];
  if (i || a) {
    let h = O().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
    (bc == null || h !== Rw) && (Rw = h, bc = document.createElement("canvas").getContext("2d", { willReadFrequently: Rw })), bc.canvas.width = p, bc.canvas.height = u, bc.drawImage(n, 0, 0, p, u), n = bc.canvas;
  }
  let m = t6.makeTensorInfo(c, "int32");
  t6.texData.get(m.dataId).usage = ir.PIXELS, t6.gpgpu.uploadPixelDataToTexture(t6.getTexture(m.dataId), n);
  let d = O().getBool("WEBGL_PACK") ? new zh(l) : new Vh(l), f = t6.runWebGLProgram(d, [m], "int32");
  return t6.disposeData(m.dataId), f;
}
function gQ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = e, { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = o, h = S.convertConv2DDataFormat(c), g = S.computeConv2DInfo(n.shape, s.shape, p, l, u, m, false, h), x, b = [], C = a != null, w = i != null, k = d === "leakyrelu", _ = () => {
    let A = [n, s], R = (D, P) => {
      if (P === "NCHW" && D.shape.length === 1 && D.shape[0] !== 1) {
        let M = te({ inputs: { x: D }, backend: t6, attrs: { shape: [D.shape[0], 1, 1] } });
        return b.push(M), M;
      }
      return D;
    };
    if (C && A.push(R(a, c)), w && A.push(R(i, c)), k) {
      let D = t6.makeTensorInfo([], "float32", y.createScalarValue(f, "float32"));
      A.push(D), b.push(D);
    }
    return A;
  };
  if (g.filterHeight === 1 && g.filterWidth === 1 && g.dilationHeight === 1 && g.dilationWidth === 1 && g.strideHeight === 1 && g.strideWidth === 1 && (g.padInfo.type === "SAME" || g.padInfo.type === "VALID"))
    x = Ih({ x: n, filter: s, convInfo: g, backend: t6, bias: a, activation: d, preluActivationWeights: i, leakyreluAlpha: f });
  else if (g.strideWidth <= 2 && h === "channelsLast" && O().getBool("WEBGL_EXP_CONV")) {
    let A = d ? Wa(d, true) : null, R = new gc(g, C, A, w, k), D = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], P = _();
    x = t6.runWebGLProgram(R, P, "float32", D);
  } else if (O().getBool("WEBGL_CONV_IM2COL"))
    x = vh({ x: n, filter: s, convInfo: g, backend: t6, bias: a, activation: d, preluActivationWeights: i, leakyreluAlpha: f });
  else {
    let A = d ? Wa(d, false) : null, R = new hc(g, C, A, w, k), D = _();
    x = t6.runWebGLProgram(R, D, "float32");
  }
  let $ = te({ inputs: { x }, backend: t6, attrs: { shape: g.outShape } });
  return b.push(x), b.forEach((A) => t6.disposeIntermediateTensorInfo(A)), $;
}
var yR = { kernelName: ho, backendName: "webgl", kernelFunc: gQ };
function xQ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = e, { strides: p, pad: u, dilations: c, dimRoundingMode: l, activation: m, leakyreluAlpha: d } = o, f = [], h = c;
  h == null && (h = [1, 1]), y.assert(S.eitherStridesOrDilationsAreOne(p, h), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${p} and dilations '${h}'`);
  let g = S.computeConv2DInfo(n.shape, s.shape, p, h, u, l, true), x = O().getBool("WEBGL_PACK_DEPTHWISECONV") && g.strideWidth <= 2 && g.outChannels / g.inChannels === 1, b = m ? Wa(m, x) : null, C = [n, s], w = a != null, k = i != null, _ = m === "leakyrelu";
  if (w && C.push(a), k && C.push(i), _) {
    let D = t6.makeTensorInfo([], "float32", y.createScalarValue(d, "float32"));
    C.push(D), f.push(D);
  }
  let $;
  x ? $ = new yc(g, w, b, k, _) : $ = new xc(g, w, b, k, _);
  let A = [[g.padInfo.top, g.padInfo.left], [g.strideHeight, g.strideWidth], [g.dilationHeight, g.dilationWidth], [g.inHeight, g.inWidth]], R = t6.runWebGLProgram($, C, "float32", A);
  return f.forEach((D) => t6.disposeIntermediateTensorInfo(D)), R;
}
var bR = { kernelName: go, backendName: "webgl", kernelFunc: xQ };
var Wh = class {
  constructor(e, t6, o, n) {
    this.sliceDim = e, this.strides = t6, this.paramsShape = n, this.variableNames = ["x", "indices"], this.outputShape = o;
    let s = _e(o.length), a = `
    int index;`;
    for (let i = 0; i < this.sliceDim; i++)
      a += `
          index = round(getIndices(coords[0], ${i}));
          out_of_bounds = out_of_bounds || index < 0;
          out_of_bounds = out_of_bounds || index >= ${this.paramsShape[i]};
          flattenIndex += index * ${this.strides[i]};`;
    this.userCode = `
         void main() {
          ${s} coords = getOutputCoords();
          int flattenIndex = 0;
          bool out_of_bounds = false;

          ${a}

          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));
        }
      `;
  }
};
function yQ(r) {
  let { inputs: e, backend: t6 } = r, { params: o, indices: n } = e, s = n.shape, a = s[s.length - 1], i = y.sizeFromShape(o.shape), [p, u, c, l] = S.prepareAndValidate(o, n), m = te({ inputs: { x: n }, backend: t6, attrs: { shape: [u, a] } }), d = te({ inputs: { x: o }, backend: t6, attrs: { shape: [y.sizeFromShape(o.shape) / c, c] } });
  if (t6.shouldExecuteOnCPU([o, n]) || o.dtype === "string") {
    let x = t6.readSync(n.dataId), b = t6.bufferSync(o), C = UE(x, b, o.dtype, u, a, c, l, o.shape, i);
    return t6.makeTensorInfo(p, o.dtype, C.values);
  }
  let f = new Wh(a, l, [u, c], o.shape), h = t6.runWebGLProgram(f, [d, m], d.dtype), g = te({ inputs: { x: h }, backend: t6, attrs: { shape: p } });
  return t6.disposeIntermediateTensorInfo(m), t6.disposeIntermediateTensorInfo(d), t6.disposeIntermediateTensorInfo(h), g;
}
var CR = { kernelName: un, backendName: "webgl", kernelFunc: yQ };
var Uh = class {
  constructor(e, t6) {
    this.variableNames = ["A", "indices"], this.outputShape = t6, this.rank = t6.length;
    let o = _e(this.rank), n = bQ(e, 2);
    this.userCode = `
      void main() {
        ${o} resRC = getOutputCoords();
        int index = int(getIndices(resRC.x, resRC.z));
        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;
        setOutput(inBounds * getA(${n}));
      }
    `;
  }
};
function bQ(r, e) {
  let t6 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o = [];
  for (let n = 0; n < r.length; n++)
    n === 2 ? o.push("index") : o.push(`${t6[n]}`);
  return o.join();
}
function Fw(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, indices: s } = e, { axis: a, batchDims: i } = o, p = y.parseAxisParam(a, n.shape)[0];
  if (O().get("DEBUG")) {
    let b = t6.readSync(s.dataId), C = n.shape[p];
    for (let w = 0; w < b.length; ++w) {
      let k = b[w];
      y.assert(k <= C - 1 && k >= 0, () => `GatherV2: the index value ${k} is not in [0, ${C - 1}]`);
    }
  }
  let u = S.segment_util.collectGatherOpShapeInfo(n, s, p, i), c = y.sizeFromShape(s.shape), l = [], m = te({ inputs: { x: n }, backend: t6, attrs: { shape: [u.batchSize, u.outerSize, u.dimSize, u.sliceSize] } }), d = te({ inputs: { x: s }, backend: t6, attrs: { shape: [u.batchSize, c / u.batchSize] } });
  l.push(m), l.push(d);
  let f = [u.batchSize, u.outerSize, c / u.batchSize, u.sliceSize];
  if (t6.shouldExecuteOnCPU([n, s]) || n.dtype === "string") {
    let b = t6.bufferSync(d), C = t6.bufferSync(m), w = GE(C, b, f);
    return l.forEach((k) => t6.disposeIntermediateTensorInfo(k)), t6.makeTensorInfo(u.outputShape, w.dtype, w.values);
  }
  let h = new Uh(m.shape, f), g = t6.runWebGLProgram(h, [m, d], m.dtype);
  l.push(g);
  let x = te({ inputs: { x: g }, backend: t6, attrs: { shape: u.outputShape } });
  return l.forEach((b) => t6.disposeIntermediateTensorInfo(b)), x;
}
var SR = { kernelName: Ss, backendName: "webgl", kernelFunc: Fw };
var CQ = "return float(a > b);";
var SQ = `
  return vec4(greaterThan(a, b));
`;
var wQ = tt({ opSnippet: CQ, packedOpSnippet: SQ, cpuKernelImpl: HE, dtype: "bool" });
var wR = { kernelName: pn, backendName: "webgl", kernelFunc: wQ };
var IQ = "return float(a >= b);";
var vQ = `
  return vec4(greaterThanEqual(a, b));
`;
var kQ = tt({ opSnippet: IQ, packedOpSnippet: vQ, dtype: "bool", cpuKernelImpl: qE });
var IR = { kernelName: cn, backendName: "webgl", kernelFunc: kQ };
function NQ(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e;
  return Mh(o, true, t6);
}
var vR = { kernelName: ni, backendName: "webgl", kernelFunc: NQ };
var TQ = "return float(!isnan(x) && !isinf(x));";
var _Q = ge({ opSnippet: TQ, dtype: "bool" });
var kR = { kernelName: fa, backendName: "webgl", kernelFunc: _Q };
var EQ = "return float(isinf(x));";
var $Q = ge({ opSnippet: EQ, dtype: "bool" });
var NR = { kernelName: ha, backendName: "webgl", kernelFunc: $Q };
var AQ = "return float(isnan(x));";
var RQ = ge({ opSnippet: AQ, dtype: "bool" });
var TR = { kernelName: ln, backendName: "webgl", kernelFunc: RQ };
var FQ = "return float(a < b);";
var DQ = `
  return vec4(lessThan(a, b));
`;
var OQ = tt({ opSnippet: FQ, packedOpSnippet: DQ, cpuKernelImpl: KE, dtype: "bool" });
var _R = { kernelName: dn, backendName: "webgl", kernelFunc: OQ };
var PQ = "return float(a <= b);";
var MQ = `
  return vec4(lessThanEqual(a, b));
`;
var LQ = tt({ opSnippet: PQ, packedOpSnippet: MQ, cpuKernelImpl: jE, dtype: "bool" });
var ER = { kernelName: fn, backendName: "webgl", kernelFunc: LQ };
function BQ(r) {
  let { backend: e, attrs: t6 } = r, { start: o, stop: n, num: s } = t6, a = XE(o, n, s);
  return e.makeTensorInfo([a.length], "float32", a);
}
var $R = { kernelName: xp, backendName: "webgl", kernelFunc: BQ };
var VQ = _o + `
  return x < 0.0 ? 0./0. : log(x);
`;
var zQ = `
  vec4 result = log(x);
  bvec4 isNaN = isnan(x);
  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);
  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);
  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);
  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);
  return result;
`;
var WQ = ge({ opSnippet: VQ, packedOpSnippet: zQ, cpuKernelImpl: YE });
var AR = { kernelName: hn, backendName: "webgl", kernelFunc: WQ };
var UQ = _o + `
  return log(1.0 + x);
`;
var GQ = ge({ opSnippet: UQ });
var RR = { kernelName: ga, backendName: "webgl", kernelFunc: GQ };
var HQ = "return float(a >= 1.0 && b >= 1.0);";
var qQ = `
  return vec4(
    vec4(greaterThanEqual(a, vec4(1.0))) *
    vec4(greaterThanEqual(b, vec4(1.0))));
`;
var KQ = tt({ opSnippet: HQ, packedOpSnippet: qQ, dtype: "bool" });
var FR = { kernelName: gn, backendName: "webgl", kernelFunc: KQ };
var jQ = "return float(!(x >= 1.0));";
var XQ = ge({ opSnippet: jQ });
var DR = { kernelName: xn, backendName: "webgl", kernelFunc: XQ };
var YQ = "return float(a >= 1.0 || b >= 1.0);";
var QQ = `
  return min(
    vec4(greaterThanEqual(a, vec4(1.0))) +
    vec4(greaterThanEqual(b, vec4(1.0))),
    vec4(1.0));
`;
var ZQ = tt({ opSnippet: YQ, packedOpSnippet: QQ, dtype: "bool" });
var OR = { kernelName: xa, backendName: "webgl", kernelFunc: ZQ };
var Gh = class {
  constructor(e, t6, o, n, s) {
    this.variableNames = ["x"], this.outputShape = [];
    let a = t6, i = e[3] - 1;
    this.outputShape = e;
    let p, u = `float(${o}) + float(${n}) * sum`;
    s === 0.5 ? p = `inversesqrt(${u})` : s === 1 ? p = `1.0/(${u})` : p = `exp(log(${u}) * float(-${s}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];
        int d = coords[3];
        float x = getX(b, r, c, d);
        float sum = 0.0;
        for (int j = -${a}; j <= ${a}; j++) {
          int idx = d + j;
          if (idx >= 0 && idx <=  ${i}) {
            float z = getX(b, r, c, idx);
            sum += z * z;
          }
        }
        float val = x * ${p};
        setOutput(val);
      }
    `;
  }
};
var Hh = class {
  constructor(e, t6, o, n, s) {
    this.variableNames = ["x"], this.outputShape = [], this.packedInputs = true, this.packedOutput = true;
    let a = t6, i = e[3] - 1;
    this.outputShape = e;
    let p, u = `float(${o}) + float(${n}) * sum`;
    s === 0.5 ? p = `inversesqrt(${u})` : s === 1 ? p = `1.0/(${u})` : p = `exp(log(${u}) * float(-${s}));`, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords.x;
        int r = coords.y;
        int c = coords.z;
        int d = coords.w;

        bool hasNextCol = d < ${this.outputShape[3]};
        bool hasNextRow = c < ${this.outputShape[2]};

        vec4 sum = vec4(0.);
        vec4 xFragAtOutputCoords = getX(b, r, c, d);

        vec4 xAtOutputCoords = vec4(
          getChannel(xFragAtOutputCoords, vec2(c, d)),
          hasNextCol ?
            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,
          hasNextRow ?
            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,
          (hasNextRow && hasNextCol) ?
            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0
        );

        int firstChannel = d - ${a};
        vec2 cache = vec2(0.);
        if(firstChannel >= 0){
          vec4 firstChannelFrag = getX(b, r, c, firstChannel);
          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));
            if(hasNextRow){
              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));
            }
        }

        ivec2 depth = ivec2(d, d + 1);
        for (int j = - ${a}; j <= ${a}; j++) {
          ivec2 idx = depth + j;
          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));
          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${i}));

          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;
          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;

          if(depthInRange || depthPlusOneInRange){
            vec4 z = vec4(0.);
            vec4 xFragAtCurrentDepth;
            z.xz = cache.xy;
            if(depthPlusOneInRange && hasNextCol){
              xFragAtCurrentDepth = idx.y != d ?
                getX(b, r, c, idx.y) : xFragAtOutputCoords;
              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));
              if(hasNextRow){
                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));
              }
            }
            cache.xy = z.yw;
            sum += z * z;
          }
        }
        vec4 result = xAtOutputCoords * ${p};
        setOutput(result);
      }
    `;
  }
};
var JQ = (r) => {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { depthRadius: s, bias: a, alpha: i, beta: p } = o, u = O().getBool("WEBGL_PACK_NORMALIZATION") ? new Hh(n.shape, s, a, i, p) : new Gh(n.shape, s, a, i, p);
  return t6.runWebGLProgram(u, [n], n.dtype);
};
var PR = { kernelName: yp, backendName: "webgl", kernelFunc: JQ };
var qh = class {
  constructor(e, t6, o, n, s) {
    this.variableNames = ["inputImage", "outputImage", "dy"], this.outputShape = [], this.outputShape = e, this.depth = e[3], this.depthRadius = t6, this.bias = o, this.alpha = n, this.beta = s, this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int r = coords[1];
        int c = coords[2];

        float result = 0.0;
        for (int d = 0; d < ${this.depth}; ++d) {
          int depthBegin = int(max(0.0, float(d - ${t6})));
          int depthEnd = int(min(float(${this.depth}),
              float(d + ${t6} + 1)));

          const int MIN_DEPTH_BEGIN = 0;
          const int MAX_DEPTH_END = ${this.depth};

          float norm = 0.0;
          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd) {
              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);
            }
            else {
              break;
            }
          }

          norm = float(${n}) * norm + float(${o});

          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){
            if (k < depthBegin){
              continue;
            }
            else if (k >= depthBegin && k < depthEnd){
              float dyi = -2.0 * float(${n})
                * float(${s})
                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)
                / norm;
              if (k == d) {
                dyi += pow(norm, -1.0 * ${s});
              }
              if (k == coords[3]) {
                dyi *= getDy(b, r, c, d);
                result += dyi;
              }
            }
            else {
              break;
            }
          }
      }
      setOutput(result);
      }
    `;
  }
};
var e7 = (r) => {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, y: s, dy: a } = e, { depthRadius: i, bias: p, alpha: u, beta: c } = o, l = new qh(n.shape, i, p, u, c);
  return t6.runWebGLProgram(l, [n, s, a], n.dtype);
};
var MR = { kernelName: Nm, backendName: "webgl", kernelFunc: e7 };
function LR(r, e, t6, o) {
  let n = y.sizeFromShape(e), a = y.sizeFromShape(r.shape) / n, i = te({ inputs: { x: r }, attrs: { shape: [a, n] }, backend: o }), p = Gr(i, r.dtype, "max", o), u = te({ inputs: { x: p }, attrs: { shape: t6 }, backend: o });
  return o.disposeIntermediateTensorInfo(i), o.disposeIntermediateTensorInfo(p), u;
}
function Dw(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { reductionIndices: s, keepDims: a } = o, i = n.shape.length, p = y.parseAxisParam(s, n.shape), u = p, c = S.getAxesPermutation(u, i), l = c != null, m = t6.shouldExecuteOnCPU([n]), d = n;
  if (l) {
    if (m) {
      let C = t6.texData.get(d.dataId).values, w = new Array(i);
      for (let $ = 0; $ < w.length; $++)
        w[$] = n.shape[c[$]];
      let k = Du(C, n.shape, n.dtype, c, w);
      d = t6.makeTensorInfo(w, n.dtype);
      let _ = t6.texData.get(d.dataId);
      _.values = k;
    } else
      d = Vi(n, c, t6);
    u = S.getInnerMostAxes(u.length, i);
  }
  S.assertAxesAreInnerMostDims("max", u, i);
  let [f, h] = S.computeOutAndReduceShapes(d.shape, u), g = f;
  a && (g = S.expandShapeToKeepDim(f, p));
  let x;
  if (m) {
    let C = t6.texData.get(d.dataId).values, w = QE(C, y.sizeFromShape(h), g, n.dtype);
    x = t6.makeTensorInfo(g, n.dtype);
    let k = t6.texData.get(x.dataId);
    k.values = w;
  } else
    x = LR(d, h, g, t6);
  return l && t6.disposeIntermediateTensorInfo(d), x;
}
var BR = { kernelName: yn, backendName: "webgl", kernelFunc: Dw };
var t7 = mc + `
  return max(a, b);
`;
var r7 = `
  vec4 result = vec4(max(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Zs + `
  return result;
`;
var o7 = tt({ opSnippet: t7, packedOpSnippet: r7, cpuKernelImpl: ZE });
var VR = { kernelName: bn, backendName: "webgl", kernelFunc: o7 };
function n7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e;
  is(n, "maxPool");
  let { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1;
  y.assert(S.eitherStridesOrDilationsAreOne(a, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${a} and dilations '${u}'`);
  let c = S.computePool2DInfo(n.shape, s, a, u, i, p);
  if (c.filterWidth === 1 && c.filterHeight === 1 && y.arraysEqual(c.inShape, c.outShape))
    return At({ inputs: { x: n }, backend: t6 });
  let l = new ps(c, "max", false);
  return t6.runWebGLProgram(l, [n], n.dtype);
}
var zR = { kernelName: Cn, backendName: "webgl", kernelFunc: n7 };
function s7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { filterSize: s, strides: a, pad: i, dataFormat: p, dimRoundingMode: u } = o, c = [1, 1, 1], l = S.computePool3DInfo(n.shape, s, a, c, i, u, p), m = new zi(l, "max", false);
  return t6.runWebGLProgram(m, [n], n.dtype);
}
var WR = { kernelName: bp, backendName: "webgl", kernelFunc: s7 };
var Kh = class {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    let t6 = e.strideHeight, o = e.strideWidth, n = e.dilationHeight, s = e.effectiveFilterHeight, a = e.effectiveFilterWidth, i = s - 1 - e.padInfo.top, p = a - 1 - e.padInfo.left, u = s * a - 1;
    this.userCode = `
      const ivec2 pads = ivec2(${i}, ${p});

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];

        ivec2 dyRCCorner = coords.yz - pads;
        int dyRCorner = dyRCCorner.x;
        int dyCCorner = dyRCCorner.y;

        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;
        for (int wR = 0; wR < ${s};
          wR += ${n}) {
          float dyR = float(dyRCorner + wR) / ${t6}.0;

          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {
            continue;
          }
          int idyR = int(dyR);

          for (int wC = 0; wC < ${a}; wC++) {
            float dyC = float(dyCCorner + wC) / ${o}.0;

            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                fract(dyC) > 0.0) {
              continue;
            }
            int idyC = int(dyC);

            float dyValue = getDy(b, idyR, idyC, d);
            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));

            // Get the current value, check it against the value from the
            // position matrix.
            int curPosValue = wR * ${a} + wC;
            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

            dotProd += dyValue * mask;
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
var jh = class {
  constructor(e) {
    this.variableNames = ["dy", "maxPos"], this.outputShape = e.inShape;
    let t6 = e.strideDepth, o = e.strideHeight, n = e.strideWidth, s = e.dilationDepth, a = e.dilationHeight, i = e.dilationWidth, p = e.effectiveFilterDepth, u = e.effectiveFilterHeight, c = e.effectiveFilterWidth, l = p - 1 - e.padInfo.front, m = u - 1 - e.padInfo.top, d = c - 1 - e.padInfo.left, f = p * u * c - 1;
    this.userCode = `
      const ivec3 pads = ivec3(${l}, ${m}, ${d});

      void main() {
        ivec5 coords = getOutputCoords();
        int batch = coords.x;
        int ch = coords.u;

        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;
        int dyDCorner = dyCorner.x;
        int dyRCorner = dyCorner.y;
        int dyCCorner = dyCorner.z;

        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get
        // dx(xD, xR, xC, ch).
        // ? = to be determined. : = across all values in that axis.
        float dotProd = 0.0;

        for (int wD = 0; wD < ${p};
           wD += ${s}) {
          float dyD = float(dyDCorner + wD) / ${t6}.0;

          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {
            continue;
          }
          int idyD = int(dyD);

          for (int wR = 0; wR < ${u};
              wR += ${a}) {
            float dyR = float(dyRCorner + wR) / ${o}.0;

            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||
                fract(dyR) > 0.0) {
              continue;
            }
            int idyR = int(dyR);

            for (int wC = 0; wC < ${c};
                wC += ${i}) {
              float dyC = float(dyCCorner + wC) / ${n}.0;

              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||
                  fract(dyC) > 0.0) {
                continue;
              }
              int idyC = int(dyC);

              float dyValue = getDy(batch, idyD, idyR, idyC, ch);
              int maxPosValue = ${f} -
                  int(getMaxPos(batch, idyD, idyR, idyC, ch));

              // Get the current value, check it against the value from the
              // position matrix.
              int curPosValue =
                  wD * ${u} * ${c} +
                  wR * ${c} + wC;
              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);

              dotProd += dyValue * mask;
            }
          }
        }
        setOutput(dotProd);
      }
    `;
  }
};
function a7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, input: s } = e, a = s, { filterSize: i, strides: p, pad: u, dimRoundingMode: c } = o, l = [1, 1, 1], m = S.computePool3DInfo(a.shape, i, p, l, u, c), d = new zi(m, "max", true), f = t6.runWebGLProgram(d, [a], a.dtype), h = new jh(m), g = t6.runWebGLProgram(h, [n, f], a.dtype);
  return t6.disposeIntermediateTensorInfo(f), g;
}
var UR = { kernelName: _m, backendName: "webgl", kernelFunc: a7 };
function i7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, input: s, output: a } = e, i = s;
  is([s, a], "maxPoolGrad");
  let { filterSize: p, strides: u, pad: c, dimRoundingMode: l } = o, m = S.computePool2DInfo(i.shape, p, u, 1, c, l), d = true, f = new ps(m, "max", d), h = t6.runWebGLProgram(f, [i], i.dtype), g = new Kh(m), x = t6.runWebGLProgram(g, [n, h], i.dtype);
  return t6.disposeIntermediateTensorInfo(h), x;
}
var GR = { kernelName: Tm, backendName: "webgl", kernelFunc: i7 };
function HR(r, e, t6, o) {
  let n = new ps(t6, "max", false), s = o.runWebGLProgram(n, [r], "float32");
  n = new ps(t6, "max", true, true, e);
  let a = o.runWebGLProgram(n, [r], "float32");
  return [s, a];
}
var qR = { kernelName: Cp, backendName: "webgl", kernelFunc: ({ inputs: r, attrs: e, backend: t6 }) => {
  let { x: o } = r, { filterSize: n, strides: s, pad: a, includeBatchInIndex: i } = e, p = t6;
  y.assert(o.shape.length === 4, () => `Error in maxPool: input must be rank 4 but got rank ${o.shape.length}.`);
  let u = [1, 1];
  y.assert(S.eitherStridesOrDilationsAreOne(s, u), () => `Error in maxPool: Either strides or dilations must be 1. Got strides ${s} and dilations '${u}'`);
  let c = S.computePool2DInfo(o.shape, n, s, u, a), [l, m] = HR(o, i, c, p);
  return [l, m];
} };
function KR(r, e, t6, o) {
  let n = y.sizeFromShape(e), a = y.sizeFromShape(r.shape) / n, i = te({ inputs: { x: r }, attrs: { shape: [a, n] }, backend: o }), p = Gr(i, "float32", "mean", o), u = te({ inputs: { x: p }, attrs: { shape: t6 }, backend: o });
  return o.disposeIntermediateTensorInfo(i), o.disposeIntermediateTensorInfo(p), u;
}
var jR = { kernelName: Sn, backendName: "webgl", kernelFunc: ({ inputs: r, attrs: e, backend: t6 }) => {
  let { x: o } = r, { keepDims: n, axis: s } = e, a = t6, i = o.shape.length, p = y.parseAxisParam(s, o.shape), u = p, c = S.getAxesPermutation(u, i), l = c != null, m = a.shouldExecuteOnCPU([o]), d = [], f = o;
  if (l) {
    if (m) {
      let w = a.texData.get(f.dataId).values, k = new Array(i);
      for (let A = 0; A < k.length; A++)
        k[A] = o.shape[c[A]];
      let _ = Du(w, o.shape, o.dtype, c, k);
      f = a.makeTensorInfo(k, o.dtype);
      let $ = a.texData.get(f.dataId);
      $.values = _;
    } else
      f = Vi(o, c, a);
    d.push(f), u = S.getInnerMostAxes(u.length, i);
  }
  S.assertAxesAreInnerMostDims("sum", u, i);
  let [h, g] = S.computeOutAndReduceShapes(f.shape, u), x = h;
  n && (x = S.expandShapeToKeepDim(h, p));
  let b = KR(f, g, x, a);
  for (let C of d)
    a.disposeIntermediateTensorInfo(C);
  return b;
} };
function u7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o, i = n.shape.length, p = y.parseAxisParam(s, n.shape), u = p, c = S.getAxesPermutation(u, i), l = n;
  c != null && (l = xt({ inputs: { x: n }, backend: t6, attrs: { perm: c } }), u = S.getInnerMostAxes(u.length, n.shape.length)), S.assertAxesAreInnerMostDims("min", u, i);
  let [m, d] = S.computeOutAndReduceShapes(l.shape, u), f = y.sizeFromShape(d), h = te({ inputs: { x: l }, backend: t6, attrs: { shape: [-1, f] } }), g = Gr(h, h.dtype, "min", t6), x;
  if (a) {
    let b = S.expandShapeToKeepDim(m, p);
    x = te({ inputs: { x: g }, backend: t6, attrs: { shape: b } });
  } else
    x = te({ inputs: { x: g }, backend: t6, attrs: { shape: m } });
  return t6.disposeIntermediateTensorInfo(h), t6.disposeIntermediateTensorInfo(g), c != null && t6.disposeIntermediateTensorInfo(l), x;
}
var XR = { kernelName: wn, backendName: "webgl", kernelFunc: u7 };
var p7 = mc + `
  return min(a, b);
`;
var c7 = `
  vec4 result = vec4(min(a, b));
  bvec4 isNaNA = isnan(a);
  bvec4 isNaNB = isnan(b);
  bvec4 isNaN = bvec4(isNaNA.x || isNaNB.x, isNaNA.y || isNaNB.y, isNaNA.z || isNaNB.z, isNaNA.w || isNaNB.w);
  ` + Zs + `
  return result;
`;
var l7 = tt({ opSnippet: p7, packedOpSnippet: c7, cpuKernelImpl: JE });
var YR = { kernelName: In, backendName: "webgl", kernelFunc: l7 };
var Xh = class {
  constructor(e, t6, o) {
    this.variableNames = ["x"], this.outputShape = t6.map((c, l) => c[0] + e[l] + c[1]);
    let n = e.length, s = _e(n), a = t6.map((c) => c[0]).join(","), i = t6.map((c, l) => c[0] + e[l]).join(","), p = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, n), u = o === "reflect" ? 0 : 1;
    if (n === 1) {
      this.userCode = `
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start) {
            outC = start * 2 - outC - ${u};
          } else if(outC >= end) {
            outC = (end - 1) * 2 - outC + ${u};
          }
          setOutput(getX(outC - start));
        }
      `;
      return;
    }
    this.userCode = `
      ${s} start = ${s}(${a});
      ${s} end = ${s}(${i});

      void main() {
        ${s} outC = getOutputCoords();
        for (int i = 0; i < ${n}; i++) {
          if (outC[i] < start[i]) {
            outC[i] = start[i] * 2 - outC[i] - ${u};
          } else if(outC[i] >= end[i]) {
            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};
          }
        }
        ${s} coords = outC - start;
        setOutput(getX(${p}));
      }
    `;
  }
};
var Yh = class {
  constructor(e, t6, o) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.outputShape = t6.map((f, h) => f[0] + e[h] + f[1]);
    let n = e.length, s = _e(n), a = t6.map((f) => f[0]).join(","), i = t6.map((f, h) => f[0] + e[h]).join(","), p = $t("rc", n), u = $t("source", n), c = `${p[n - 1]} < ${this.outputShape[n - 1]}`, l = n === 1 ? "source" : `vec2(${u.slice(-2).join()})`, m = o === "reflect" ? 0 : 1, d = "";
    if (n === 1) {
      let f = `
        ${s} source = rc;
        if (source < start) {
          source = start * 2 - source - ${m};
        } else if (source >= end) {
          source = (end - 1) * 2 - source + ${m};
        }
        source -= start;
      `;
      d = `
        ${s} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${u.join()}), ${l});
        ${p[n - 1]} += 1;
        if(${c}) {
          ${f}
          result[1] = getChannel(getX(${u.join()}), ${l});
        }
      `;
    } else {
      let f = `
        ${s} source = rc;
        ${s} lt = ${s}(lessThan(source, start));
        ${s} gte = ${s}(greaterThanEqual(source, end));
        ${s} orig = 1 - (lt + gte);
        source = orig * source +
                lt * (start * 2 - source - ${m}) +
                gte * ((end - 1) * 2 - source + ${m});
        source -= start;
      `;
      d = `
        ${s} rc = outputLoc;
        ${f}
        result[0] = getChannel(getX(${u.join()}), ${l});
        ${p[n - 1]} += 1;
        if(${c}) {
          ${f}
          result[1] = getChannel(getX(${u.join()}), ${l});
        }
        rc = outputLoc;
        ${p[n - 2]} += 1;
        if(${p[n - 2]} < ${this.outputShape[n - 2]}) {
          ${f}
          result[2] = getChannel(getX(${u.join()}), ${l});
          ${p[n - 1]} += 1;
          if(${c}) {
            ${f}
            result[3] = getChannel(getX(${u.join()}), ${l});
          }
        }
      `;
    }
    this.userCode = `
      const ${s} start = ${s}(${a});
      const ${s} end = ${s}(${i});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${d}
        setOutput(result);
      }
    `;
  }
};
var m7 = ({ inputs: r, backend: e, attrs: t6 }) => {
  let { x: o } = r, { paddings: n, mode: s } = t6, a = O().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new Yh(o.shape, n, s) : new Xh(o.shape, n, s);
  return e.runWebGLProgram(a, [o], o.dtype);
};
var QR = { kernelName: vn, backendName: "webgl", kernelFunc: m7 };
var d7 = `if (b == 0.0) return NAN;
  return mod(a, b);`;
var f7 = `
  vec4 result = mod(a, b);
  bvec4 isNaN = equal(b, vec4(0.0));
  ` + Zs + `
  return result;
`;
var h7 = tt({ opSnippet: d7, packedOpSnippet: f7 });
var ZR = { kernelName: ya, backendName: "webgl", kernelFunc: h7 };
var Qh = class {
  constructor(e, t6, o) {
    this.variableNames = ["probs"], this.customUniforms = [{ name: "seed", type: "float" }], this.outputShape = [e, o], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];

        float r = random(seed);
        float cdf = 0.0;

        for (int i = 0; i < ${t6 - 1}; i++) {
          cdf += getProbs(batch, i);

          if (r < cdf) {
            setOutput(float(i));
            return;
          }
        }

        // If no other event happened, last event happened.
        setOutput(float(${t6 - 1}));
      }
    `;
  }
};
var g7 = `
if (a == b) {
  return 1.0;
};
return a / b;`;
var x7 = `
  // vec4 one = vec4(equal(a, b));
  // return one + (vec4(1.0) - one) * a / b;
  vec4 result = a / b;
  if(a.x == b.x) {
    result.x = 1.;
  }
  if(a.y == b.y) {
    result.y = 1.;
  }
  if(a.z == b.z) {
    result.z = 1.;
  }
  if(a.w == b.w) {
    result.w = 1.;
  }

  return result;
`;
var Ow = tt({ opSnippet: g7, packedOpSnippet: x7, checkOutOfBounds: true });
var JR = { kernelName: Jo, backendName: "webgl", kernelFunc: Ow };
var eF = "return a - b;";
var Pw = tt({ opSnippet: eF, packedOpSnippet: eF, supportsComplex: true, cpuKernelImpl: b$ });
var tF = { kernelName: Xn, backendName: "webgl", kernelFunc: Pw };
function Mw(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { logits: n } = e, { dim: s } = o, a = y.parseAxisParam([s], n.shape), i = Dw({ inputs: { x: n }, backend: t6, attrs: { reductionIndices: a, keepDims: false } }), p = S.expandShapeToKeepDim(i.shape, a), u = te({ inputs: { x: i }, backend: t6, attrs: { shape: p } }), c = Pw({ inputs: { a: n, b: u }, backend: t6 }), l = Aw({ inputs: { x: c }, backend: t6 }), m = Ou({ inputs: { x: l }, backend: t6, attrs: { axis: a, keepDims: false } }), d = te({ inputs: { x: m }, backend: t6, attrs: { shape: p } }), f = Ow({ inputs: { a: l, b: d }, backend: t6 });
  return t6.disposeIntermediateTensorInfo(i), t6.disposeIntermediateTensorInfo(u), t6.disposeIntermediateTensorInfo(c), t6.disposeIntermediateTensorInfo(l), t6.disposeIntermediateTensorInfo(m), t6.disposeIntermediateTensorInfo(d), f;
}
var rF = { kernelName: qn, backendName: "webgl", kernelFunc: Mw };
function y7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { logits: n } = e, { numSamples: s, seed: a, normalized: i } = o, p = i ? n : Mw({ inputs: { logits: n }, backend: t6, attrs: { dim: n.shape.length - 1 } }), u = p.shape[0], c = p.shape[1], l = new Qh(u, c, s), m = [[a]], d = t6.runWebGLProgram(l, [p], "int32", m);
  return i || t6.disposeIntermediateTensorInfo(p), d;
}
var oF = { kernelName: Sp, backendName: "webgl", kernelFunc: y7 };
var b7 = Bt + `
  return -x;
`;
var C7 = `
  vec4 result = -x;
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
function S7(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  if (t6.shouldExecuteOnCPU([o])) {
    let s = t6.texData.get(o.dataId), [a, i] = t$(s.values, o.shape, o.dtype);
    return t6.makeTensorInfo(i, o.dtype, a);
  }
  let n;
  return O().getBool("WEBGL_PACK_UNARY_OPERATIONS") ? n = new Ar(o.shape, C7) : n = new Jt(o.shape, b7), t6.runWebGLProgram(n, [o], o.dtype);
}
var nF = { kernelName: ws, backendName: "webgl", kernelFunc: S7 };
var w7 = Lt.nonMaxSuppressionV3Impl;
function I7(r) {
  S.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: e, backend: t6, attrs: o } = r, { boxes: n, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p } = o, u = t6.readSync(n.dataId), c = t6.readSync(s.dataId), { selectedIndices: l } = w7(u, c, a, i, p);
  return t6.makeTensorInfo([l.length], "int32", new Int32Array(l));
}
var sF = { kernelName: Tn, backendName: "webgl", kernelFunc: I7 };
var v7 = Lt.nonMaxSuppressionV4Impl;
function k7(r) {
  S.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: e, backend: t6, attrs: o } = r, { boxes: n, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p, padToMaxOutputSize: u } = o, c = t6.readSync(n.dataId), l = t6.readSync(s.dataId), { selectedIndices: m, validOutputs: d } = v7(c, l, a, i, p, u);
  return [t6.makeTensorInfo([m.length], "int32", new Int32Array(m)), t6.makeTensorInfo([], "int32", new Int32Array([d]))];
}
var aF = { kernelName: ba, backendName: "webgl", kernelFunc: k7 };
var N7 = Lt.nonMaxSuppressionV5Impl;
function T7(r) {
  S.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: e, backend: t6, attrs: o } = r, { boxes: n, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p, softNmsSigma: u } = o, c = t6.readSync(n.dataId), l = t6.readSync(s.dataId), m = a, d = i, f = p, h = u, { selectedIndices: g, selectedScores: x } = N7(c, l, m, d, f, h);
  return [t6.makeTensorInfo([g.length], "int32", new Int32Array(g)), t6.makeTensorInfo([x.length], "float32", new Float32Array(x))];
}
var iF = { kernelName: _n, backendName: "webgl", kernelFunc: T7 };
var Zh = class {
  constructor(e, t6, o, n) {
    this.variableNames = ["indices"], this.outputShape = [e, t6], this.userCode = `
      void main() {
        ivec2 coords = getOutputCoords();
        int index = round(getIndices(coords.x));
        setOutput(mix(float(${n}), float(${o}),
                      float(index == coords.y)));
      }
    `;
  }
};
var _7 = (r) => {
  let { inputs: e, backend: t6, attrs: o } = r, { indices: n } = e, { dtype: s, depth: a, onValue: i, offValue: p } = o, u = y.sizeFromShape(n.shape), c = new Zh(u, a, i, p), l = te({ inputs: { x: n }, backend: t6, attrs: { shape: [u] } }), m = t6.runWebGLProgram(c, [l], s);
  t6.disposeIntermediateTensorInfo(l);
  let d = [...n.shape, a], f = te({ inputs: { x: m }, backend: t6, attrs: { shape: d } });
  return t6.disposeIntermediateTensorInfo(m), f;
};
var uF = { kernelName: En, backendName: "webgl", kernelFunc: _7 };
function Al(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  if (o.dtype === "complex64") {
    let n = Ua({ inputs: { input: o }, backend: t6 }), s = Al({ inputs: { x: n }, backend: t6 }), a = Mu({ inputs: { input: o }, backend: t6 }), i = Al({ inputs: { x: a }, backend: t6 }), p = Rr({ inputs: { real: s, imag: i }, backend: t6 });
    return t6.disposeIntermediateTensorInfo(n), t6.disposeIntermediateTensorInfo(s), t6.disposeIntermediateTensorInfo(a), t6.disposeIntermediateTensorInfo(i), p;
  } else
    return Ga({ attrs: { shape: o.shape, dtype: o.dtype, value: o.dtype === "string" ? "" : 0 }, backend: t6 });
}
var pF = { kernelName: Fs, backendName: "webgl", kernelFunc: Al };
function cF(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  if (o.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (o.dtype === "complex64") {
    let n = Ua({ inputs: { input: o }, backend: t6 }), s = cF({ inputs: { x: n }, backend: t6 }), a = Mu({ inputs: { input: o }, backend: t6 }), i = Al({ inputs: { x: a }, backend: t6 }), p = Rr({ inputs: { real: s, imag: i }, backend: t6 });
    return t6.disposeIntermediateTensorInfo(n), t6.disposeIntermediateTensorInfo(s), t6.disposeIntermediateTensorInfo(a), t6.disposeIntermediateTensorInfo(i), p;
  } else
    return Ga({ attrs: { shape: o.shape, dtype: o.dtype, value: 1 }, backend: t6 });
}
var lF = { kernelName: Is, backendName: "webgl", kernelFunc: cF };
function E7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { axis: n } = o;
  if (e.length === 1)
    return Ph({ inputs: { input: e[0] }, backend: t6, attrs: { dim: n } });
  let s = e[0].shape, a = e[0].dtype;
  e.forEach((c) => {
    y.assertShapesMatch(s, c.shape, "All tensors passed to stack must have matching shapes"), y.assert(a === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let i = [], p = e.map((c) => {
    let l = Ph({ inputs: { input: c }, backend: t6, attrs: { dim: n } });
    return i.push(l), l;
  }), u = $w({ inputs: p, backend: t6, attrs: { axis: n } });
  return i.forEach((c) => t6.disposeIntermediateTensorInfo(c)), u;
}
var mF = { kernelName: vs, backendName: "webgl", kernelFunc: E7 };
var Jh = class {
  constructor(e, t6, o) {
    this.variableNames = ["x"], this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t6.map((u, c) => u[0] + e[c] + u[1]);
    let n = e.length, s = _e(n), a = t6.map((u) => u[0]).join(","), i = t6.map((u, c) => u[0] + e[c]).join(","), p = ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, n);
    if (n === 1) {
      this.userCode = `
        int start = ${a};
        int end = ${i};

        void main() {
          int outC = getOutputCoords();
          if (outC < start || outC >= end) {
            setOutput(value);
          } else {
            setOutput(getX(outC - start));
          }
        }
      `;
      return;
    }
    this.userCode = `
      ${s} start = ${s}(${a});
      ${s} end = ${s}(${i});

      void main() {
        ${s} outC = getOutputCoords();
        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {
          setOutput(value);
        } else {
          ${s} coords = outC - start;
          setOutput(getX(${p}));
        }
      }
    `;
  }
};
var eg = class {
  constructor(e, t6, o) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true, this.customUniforms = [{ name: "value", type: "float" }], this.outputShape = t6.map((h, g) => h[0] + e[g] + h[1]);
    let n = e.length, s = _e(n), a = t6.map((h) => h[0]).join(","), i = t6.map((h, g) => h[0] + e[g]).join(","), p = $t("rc", n), u = $t("source", n), c = `${p[n - 1]} < ${this.outputShape[n - 1]}`, l = n === 1 ? "source" : `vec2(${u.slice(-2).join()})`, m = [`${s} rc = outputLoc;`, `${p[n - 1]} += 1;
       if(${c}) {
      `, n === 1 ? "" : `}
       rc = outputLoc;
       ${p[n - 2]} += 1;
       if(${p[n - 2]} < ${this.outputShape[n - 2]}) {`, n === 1 ? "" : `  ${p[n - 1]} += 1;
         if(${c}) {`], d = n === 1 ? "rc < start || rc >= end" : "any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))", f = "";
    for (let h = 0, g = n === 1 ? 2 : 4; h < g; h++)
      f += `
        ${m[h]}
        if (${d}) {
          result[${h}] = float(value);
        } else {
          ${s} source = rc - start;
          result[${h}] = getChannel(getX(${u.join()}), ${l});
        }
      `;
    f += n === 1 ? "} " : "}}", this.userCode = `
      const ${s} start = ${s}(${a});
      const ${s} end = ${s}(${i});

      void main() {
        ${s} outputLoc = getOutputCoords();
        vec4 result = vec4(0.);
        ${f}
        setOutput(result);
      }
    `;
  }
};
var Lw = (r) => {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { paddings: s, constantValue: a } = o;
  if (y.sizeFromShape(n.shape) === 0) {
    let u = s.map((c, l) => c[0] + n.shape[l] + c[1]);
    return Ga({ backend: t6, attrs: { shape: u, value: a, dtype: n.dtype } });
  }
  let i = O().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new eg(n.shape, s, a) : new Jh(n.shape, s, a), p = [[a]];
  return t6.runWebGLProgram(i, [n], n.dtype, p);
};
var dF = { kernelName: $n, backendName: "webgl", kernelFunc: Lw };
var $7 = `
  if(a < 0.0 && floor(b) < b){
    return NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  return (round(mod(b, 2.0)) != 1) ?
      pow(abs(a), b) : sign(a) * pow(abs(a), b);
`;
var A7 = `
  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.
  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));
  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);
  vec4 result = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  bvec4 isExpZero = equal(b, vec4(0.0));
  result.r = isExpZero.r ? 1.0 : result.r;
  result.g = isExpZero.g ? 1.0 : result.g;
  result.b = isExpZero.b ? 1.0 : result.b;
  result.a = isExpZero.a ? 1.0 : result.a;

  bvec4 isNaN1 = lessThan(a, vec4(0.0));
  bvec4 isNaN2 = lessThan(floor(b), b);
  bvec4 isNaN = bvec4(isNaN1.x && isNaN2.x, isNaN1.y && isNaN2.y, isNaN1.z && isNaN2.z, isNaN1.w && isNaN2.w);
  ` + Zs + `
  return result;
`;
var R7 = tt({ opSnippet: $7, packedOpSnippet: A7 });
var fF = { kernelName: An, backendName: "webgl", kernelFunc: R7 };
function F7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o, i = n.shape.length, p = [], u = y.parseAxisParam(s, n.shape), c = u, l = S.getAxesPermutation(c, i), m = n;
  l != null && (m = xt({ inputs: { x: n }, backend: t6, attrs: { perm: l } }), c = S.getInnerMostAxes(c.length, i), p.push(m)), S.assertAxesAreInnerMostDims("prod", c, i);
  let d;
  if (t6.shouldExecuteOnCPU([m])) {
    let f = t6.texData.get(m.dataId).values, { outVals: h, outShape: g, outDtype: x } = o$(m.shape, m.dtype, f, c);
    d = t6.makeTensorInfo(g, x, h);
  } else {
    let [f, h] = S.computeOutAndReduceShapes(m.shape, c), g = y.sizeFromShape(h), x = te({ inputs: { x: m }, backend: t6, attrs: { shape: [-1, g] } }), b = ka(n.dtype), C = Gr(x, b, "prod", t6);
    d = te({ inputs: { x: C }, backend: t6, attrs: { shape: f } }), p.push(x), p.push(C);
  }
  if (a) {
    p.push(d);
    let f = S.expandShapeToKeepDim(d.shape, u);
    d = te({ inputs: { x: d }, backend: t6, attrs: { shape: f } });
  }
  return p.forEach((f) => t6.disposeIntermediateTensorInfo(f)), d;
}
var hF = { kernelName: Fn, backendName: "webgl", kernelFunc: F7 };
function D7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { paramsNestedSplits: n, paramsDenseValues: s, indices: a } = e, { outputRaggedRank: i } = o, p = n.map((x) => t6.readSync(x.dataId)), u = n.map((x) => x.shape), c = t6.readSync(s.dataId), l = t6.readSync(a.dataId), [m, d, f] = n$(p, u, c, s.shape, s.dtype, l, a.shape, i), h = m.map((x) => t6.makeTensorInfo([x.length], "int32", x)), g = t6.makeTensorInfo(f, s.dtype, d);
  return h.concat([g]);
}
var gF = { kernelName: wp, backendName: "webgl", kernelFunc: D7 };
function O7(r) {
  let { inputs: e, backend: t6 } = r, { starts: o, limits: n, deltas: s } = e, a = t6.readSync(o.dataId), i = t6.readSync(n.dataId), p = t6.readSync(s.dataId), [u, c] = s$(a, o.shape, o.dtype, i, n.shape, p, s.shape), l = t6.makeTensorInfo([u.length], "int32", u), m = t6.makeTensorInfo([c.length], o.dtype, c);
  return [l, m];
}
var xF = { kernelName: Ip, backendName: "webgl", kernelFunc: O7 };
function P7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { shape: n, values: s, defaultValue: a, rowPartitionTensors: i } = e, { rowPartitionTypes: p } = o, u = t6.readSync(n.dataId), c = t6.readSync(s.dataId), l = t6.readSync(a.dataId), m = i.map((g) => t6.readSync(g.dataId)), d = i.map((g) => g.shape), [f, h] = a$(u, n.shape, c, s.shape, s.dtype, l, a.shape, m, d, p);
  return t6.makeTensorInfo(f, s.dtype, h);
}
var yF = { kernelName: vp, backendName: "webgl", kernelFunc: P7 };
var Bw = (r) => {
  let { backend: e, attrs: t6 } = r, { start: o, stop: n, step: s, dtype: a } = t6, i = i$(o, n, s, a);
  return e.makeTensorInfo([i.length], a, i);
};
var bF = { kernelName: ks, backendName: "webgl", kernelFunc: Bw };
var M7 = "return 1.0 / x;";
var L7 = ge({ opSnippet: M7 });
var CF = { kernelName: Dn, backendName: "webgl", kernelFunc: L7 };
var B7 = Bt + `
  return (x < 0.0) ? 0.0 : x;
`;
var V7 = `
  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var z7 = ge({ opSnippet: B7, packedOpSnippet: V7 });
var SF = { kernelName: On, backendName: "webgl", kernelFunc: z7 };
var W7 = Bt + `
  return (x < 0.0) ? 0.0 : min(6.0, x);
`;
var U7 = `
  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var G7 = ge({ opSnippet: W7, packedOpSnippet: U7 });
var wF = { kernelName: Ln, backendName: "webgl", kernelFunc: G7 };
var tg = class {
  constructor(e, t6, o, n, s) {
    this.variableNames = ["A"], this.outputShape = [];
    let [a, i, p, u] = e;
    this.outputShape = [a, t6, o, u];
    let c = [n && t6 > 1 ? i - 1 : i, n && o > 1 ? p - 1 : p], l = [n && t6 > 1 ? t6 - 1 : t6, n && o > 1 ? o - 1 : o], m;
    s ? m = "(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)" : m = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0] / l[0]},
          ${c[1] / l[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${p}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));
        ivec2 sourceCeilRC = ivec2(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);
        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);
        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);
        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);

        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);

        float top = topLeft + (topRight - topLeft) * fracRC.y;
        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
        float newValue = top + (bottom - top) * fracRC.x;

        setOutput(newValue);
      }
    `;
  }
};
var rg = class {
  constructor(e, t6, o, n, s) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    let [a, i, p, u] = e;
    this.outputShape = [a, t6, o, u];
    let c = [n && t6 > 1 ? i - 1 : i, n && o > 1 ? p - 1 : p], l = [n && t6 > 1 ? t6 - 1 : t6, n && o > 1 ? o - 1 : o], m;
    s ? m = "(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)" : m = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0] / l[0]},
          ${c[1] / l[1]},
          ${c[1] / l[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${p}.0,
                                     ${p}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${m};

        // Compute the four integer indices.
        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));
        ivec3 sourceCeilRC = ivec3(
          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u - 1};
        bool hasNextRow = coords.z < ${o - 1};

        // In parallel, construct four corners for all four components in
        // packed 2x2 cell.
        vec4 topLeft = vec4(
          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 bottomLeft = vec4(
          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);

        vec4 topRight = vec4(
          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec4 bottomRight = vec4(
          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),
          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);

        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);

        vec4 top = mix(topLeft, topRight, fracRC.yyzz);
        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);
        vec4 newValue = mix(top, bottom, fracRC.x);

        setOutput(newValue);
      }
    `;
  }
};
function H7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { images: n } = e, { alignCorners: s, halfPixelCenters: a, size: i } = o, [p, u] = i, c = O().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new rg(n.shape, p, u, s, a) : new tg(n.shape, p, u, s, a);
  return t6.runWebGLProgram(c, [n], "float32");
}
var IF = { kernelName: Mn, backendName: "webgl", kernelFunc: H7 };
var og = class {
  constructor(e, t6, o) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t6;
    let [, n, s] = t6, [, a, i] = e, p = [o && a > 1 ? n - 1 : n, o && i > 1 ? s - 1 : s], u = [o && a > 1 ? a - 1 : a, o && i > 1 ? i - 1 : i], c = p[0] / u[0], l = p[1] / u[1], m = 1 / c, d = 1 / l, f = Math.ceil(m) * 2 + 2, h = Math.ceil(d) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${l});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${d});

        const int winHeight = int(${f});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(startRLerp - float(winHeight / 2));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(startCLerp - float(winWidth / 2));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float dxR = float(dyR) * heightScale;
            int topDxRIndex = int(floor(dxR));
            int bottomDxRIndex = int(min(ceil(dxR), ${n - 1}.0));
            float dxRLerp = dxR - float(topDxRIndex);
            float inverseDxRLerp = 1.0 - dxRLerp;

            float dxC = float(dyC) * widthScale;
            int leftDxCIndex = int(floor(dxC));
            int rightDxCIndex = int(min(ceil(dxC), ${s - 1}.0));
            float dxCLerp = dxC - float(leftDxCIndex);
            float inverseDxCLerp = 1.0 - dxCLerp;

            if (r == topDxRIndex && c == leftDxCIndex) {
              // topLeft
              accumulator +=
                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;
            }

            if (r == topDxRIndex && c == rightDxCIndex) {
              // topRight
              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;
            }

            if (r == bottomDxRIndex && c == leftDxCIndex) {
              // bottomLeft
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;
            }

            if (r == bottomDxRIndex && c == rightDxCIndex) {
              // bottomRight
              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
function q7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { images: n, dy: s } = e, { alignCorners: a } = o, i = new og(s.shape, n.shape, a);
  return t6.runWebGLProgram(i, [s], s.dtype);
}
var vF = { kernelName: $m, backendName: "webgl", kernelFunc: q7 };
var ng = class {
  constructor(e, t6, o, n, s) {
    this.variableNames = ["A"], this.outputShape = [];
    let [a, i, p, u] = e;
    this.outputShape = [a, t6, o, u];
    let c = [n && t6 > 1 ? i - 1 : i, n && o > 1 ? p - 1 : p], l = [n && t6 > 1 ? t6 - 1 : t6, n && o > 1 ? o - 1 : o], m = n ? "0.5" : "0.0", d;
    s ? d = "max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))" : d = "vec2(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec2 effectiveInputOverOutputRatioRC = vec2(
          ${c[0] / l[0]},
          ${c[1] / l[1]});
      const vec2 inputShapeRC = vec2(${i}.0, ${p}.0);

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        ivec2 yRC = coords.yz;

        // Fractional source index.
        vec2 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec2 sourceNearestRC = ivec2(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));
        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);

        setOutput(newValue);
      }
    `;
  }
};
var sg = class {
  constructor(e, t6, o, n, s) {
    this.variableNames = ["A"], this.packedInputs = true, this.packedOutput = true, this.outputShape = [];
    let [a, i, p, u] = e;
    this.outputShape = [a, t6, o, u];
    let c = [n && t6 > 1 ? i - 1 : i, n && o > 1 ? p - 1 : p], l = [n && t6 > 1 ? t6 - 1 : t6, n && o > 1 ? o - 1 : o], m = n ? "0.5" : "0.0", d;
    s ? d = "max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))" : d = "vec3(yRC) * effectiveInputOverOutputRatioRC", this.userCode = `
      const vec3 effectiveInputOverOutputRatioRC = vec3(
          ${c[0] / l[0]},
          ${c[1] / l[1]},
          ${c[1] / l[1]});
      const vec3 inputShapeRC = vec3(${i}.0, ${p}.0,
                                     ${p}.0);

      float getAValue(int b, int r, int c, int d) {
        return getChannel(getA(b, r, c, d), vec2(c, d));
      }

      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        // Calculate values for next column in yRC.z.
        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);

        // Fractional source index.
        vec3 sourceFracIndexRC = ${d};

        // Compute the coordinators of nearest neighbor point.
        ivec3 sourceNearestRC = ivec3(
          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${m})));

        // Should we calculate next column and row elements in 2x2 packed cell.
        bool hasNextCol = d < ${u - 1};
        bool hasNextRow = coords.z < ${o - 1};

        vec4 newValue = vec4(
          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),
          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)
                     : 0.0,
          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)
                     : 0.0,
          (hasNextRow && hasNextCol) ?
            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);

        setOutput(newValue);
      }
    `;
  }
};
function K7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { images: n } = e, { alignCorners: s, halfPixelCenters: a, size: i } = o, [p, u] = i, c = O().getBool("WEBGL_PACK_IMAGE_OPERATIONS") ? new sg(n.shape, p, u, s, a) : new ng(n.shape, p, u, s, a);
  return t6.runWebGLProgram(c, [n], n.dtype);
}
var kF = { kernelName: Pn, backendName: "webgl", kernelFunc: K7 };
var ag = class {
  constructor(e, t6, o) {
    this.variableNames = ["dy"], this.outputShape = [], this.outputShape = t6;
    let [, n, s] = t6, [, a, i] = e, p = [o && a > 1 ? n - 1 : n, o && i > 1 ? s - 1 : s], u = [o && a > 1 ? a - 1 : a, o && i > 1 ? i - 1 : i], c = p[0] / u[0], l = p[1] / u[1], m = 1 / c, d = 1 / l, f = Math.ceil(m) * 2 + 2, h = Math.ceil(d) * 2 + 2;
    this.userCode = `
      void main() {
        ivec4 coords = getOutputCoords();
        int b = coords[0];
        int d = coords[3];
        int r = coords[1];
        int c = coords[2];

        float accumulator = 0.0;

        const float heightScale = float(${c});
        const float widthScale = float(${l});

        const float invHeightScale = float(${m});
        const float invWidthScale = float(${d});

        const int winHeight = int(${f});
        const int winWidth = int(${h});

        // Compute bounds for where in dy we will look
        float startRLerp = floor(float(r) * invHeightScale);
        int startDyR = int(floor(startRLerp - float(winHeight / 2)));

        float startCLerp = floor(float(c) * invWidthScale);
        int startDyC = int(floor(startCLerp - float(winWidth / 2)));

        // Loop over dy
        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {
          int dyR = dyROffset + startDyR;

          // Guard against the window exceeding the bounds of dy
          if (dyR < 0 || dyR >= ${a}) {
            continue;
          }

          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {
            int dyC = dyCOffset + startDyC;

            // Guard against the window exceeding the bounds of dy
            if (dyC < 0 || dyC >= ${i}) {
              continue;
            }

            float sourceFracRow =
              float(${p[0]}) *
                (float(dyR) / float(${u[0]}));

            float sourceFracCol =
                float(${p[1]}) *
                  (float(dyC) / float(${u[1]}));

            int sourceNearestRow = int(min(
                float(int(${n}) - 1),
                ${o} ? float(round(sourceFracRow)) :
                                  float(floor(sourceFracRow))));

            int sourceNearestCol = int(min(
                float(int(${s}) - 1),
                ${o} ? float(round(sourceFracCol)) :
                                  float(floor(sourceFracCol))));

            if (r == sourceNearestRow && c == sourceNearestCol) {
              accumulator += getDy(b, dyR, dyC, d);
            }
          }
        }
        // End loop over dy

        setOutput(accumulator);
      }
    `;
  }
};
function j7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { images: n, dy: s } = e, { alignCorners: a } = o, i = new ag(s.shape, n.shape, a);
  return t6.runWebGLProgram(i, [s], s.dtype);
}
var NF = { kernelName: Em, backendName: "webgl", kernelFunc: j7 };
var ig = class {
  constructor(e, t6) {
    this.variableNames = ["x"];
    let o = e.length;
    if (o > 4)
      throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);
    if (this.outputShape = e, o === 1) {
      this.userCode = `
        void main() {
          int coord = getOutputCoords();
          setOutput(getX(${e[0]} - coord - 1));
        }
      `;
      return;
    }
    let n = (i) => t6.indexOf(i) !== -1 && e[i] !== 1 ? `${e[i]} - coords[${i}] - 1` : `coords[${i}]`, s = e.map((i, p) => n(p)).join(","), a = _e(o);
    this.userCode = `
      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${s}));
      }
    `;
  }
};
var ug = class {
  constructor(e, t6) {
    this.variableNames = ["x"], this.packedInputs = true, this.packedOutput = true;
    let o = e.length;
    if (o > 4)
      throw new Error(`WebGL backend: Reverse of rank-${o} tensor is not yet supported`);
    this.outputShape = e;
    let n = $t("rc", o), s = `${n[o - 1]} + 1 < ${this.outputShape[o - 1]}`, a = `${n[o - 2]} + 1 < ${this.outputShape[o - 2]}`, i = _e(o);
    o === 1 ? this.userCode = `
        void main(){
          int rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = getChannel(getX(${e[0]} - rc - 1),
            ${e[0]} - rc - 1);
          if(${s}){
              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),
                ${e[0]} - (rc  + 1) - 1);
          }
          setOutput(result);
        }
      ` : this.userCode = `
        void main() {
          ${i} rc = getOutputCoords();
          vec4 result = vec4(0.);
          result.r = ${p(n.slice())};
          if(${s}){
            result.g = ${u(n.slice())};
          }
          if(${a}) {
            result.b = ${c(n.slice())};
            if(${s}) {
              result.a = ${l(n.slice())};
            }
          }
          setOutput(result);
        }
    `;
    function p(f) {
      return m(f);
    }
    function u(f) {
      return f[o - 1] = "(" + f[o - 1] + " + 1)", m(f);
    }
    function c(f) {
      return f[o - 2] = "(" + f[o - 2] + " + 1)", m(f);
    }
    function l(f) {
      return f[o - 1] = "(" + f[o - 1] + " + 1)", f[o - 2] = "(" + f[o - 2] + " + 1)", m(f);
    }
    function m(f) {
      let h = e.map((b, C) => d(C, f)), g = h.join(","), x = h.slice(-2).join(",");
      return `getChannel(getX(${g}), vec2(${x}))`;
    }
    function d(f, h) {
      return t6.indexOf(f) !== -1 && e[f] !== 1 ? `${e[f]} - ${h[f]} - 1` : `${h[f]}`;
    }
  }
};
function X7(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { dims: s } = o, a = n.shape.length, i = y.parseAxisParam(s, n.shape);
  if (a === 0)
    return At({ inputs: { x: n }, backend: t6 });
  let p = O().getBool("WEBGL_PACK_ARRAY_OPERATIONS") ? new ug(n.shape, i) : new ig(n.shape, i);
  return t6.runWebGLProgram(p, [n], n.dtype);
}
var TF = { kernelName: Bn, backendName: "webgl", kernelFunc: X7 };
var pg = class {
  constructor(e, t6) {
    this.variableNames = ["Image"], this.outputShape = [], this.customUniforms = [{ name: "params", type: "vec4" }];
    let o = e[1], n = e[2];
    this.outputShape = e;
    let s = "";
    typeof t6 == "number" ? s = `float outputValue = ${t6.toFixed(2)};` : s = `
        vec3 fill = vec3(${t6.join(",")});
        float outputValue = fill[coords[3]];`, this.userCode = `
        void main() {
          ivec4 coords = getOutputCoords();
          int x = coords[2];
          int y = coords[1];
          float coordXFloat = (float(x) - params[0]) * params[3] -
            (float(y) - params[1]) * params[2];
          float coordYFloat = (float(x) - params[0]) * params[2] +
            (float(y) - params[1]) * params[3];
          int coordX = int(round(coordXFloat + params[0]));
          int coordY = int(round(coordYFloat + params[1]));
          ${s}
          if(coordX >= 0 && coordX < ${n} && coordY >= 0 && coordY < ${o}) {
            outputValue = getImage(coords[0], coordY, coordX, coords[3]);
          }
          setOutput(outputValue);
        }
    `;
  }
};
var _F = { kernelName: es, backendName: "webgl", kernelFunc: ({ inputs: r, attrs: e, backend: t6 }) => {
  let { image: o } = r, { radians: n, fillValue: s, center: a } = e, i = t6, p = new pg(o.shape, s), [u, c] = S.getImageCenter(a, o.shape[1], o.shape[2]), l = [[u, c, Math.sin(n), Math.cos(n)]];
  return i.runWebGLProgram(p, [o], o.dtype, l);
} };
var Y7 = `
  // OpenGL ES does not support round function.
  // The algorithm is based on banker's rounding.
  float base = floor(x);
  if ((x - base) < 0.5) {
    return floor(x);
  } else if ((x - base) > 0.5) {
    return ceil(x);
  } else {
    if (mod(base, 2.0) == 0.0) {
      return base;
    } else {
      return base + 1.0;
    }
  }
`;
var Q7 = ge({ opSnippet: Y7 });
var EF = { kernelName: Ca, backendName: "webgl", kernelFunc: Q7 };
var Z7 = "return inversesqrt(x);";
var J7 = ge({ opSnippet: Z7, cpuKernelImpl: u$ });
var $F = { kernelName: Vn, backendName: "webgl", kernelFunc: J7 };
var Cc = class {
  constructor(e, t6, o, n, s, a, i = true) {
    this.variableNames = ["updates", "indices", "defaultValue"], this.outputShape = a;
    let p = _e(s.length), u = _e(a.length), c = "";
    o === 1 ? c = "i" : o === 2 && (c = "i, j");
    let l = `getIndices(${c})`, m = "";
    n === 1 ? m = "i" : n === 2 && (m = "i, coords[1]");
    let d = `getUpdates(${m})`, f = t6 > 1 ? "strides[j]" : "strides";
    this.userCode = `
        ${p} strides = ${p}(${s});

        void main() {
          ${u} coords = getOutputCoords();
          float sum = 0.0;
          bool found = false;
          for (int i = 0; i < ${e}; i++) {
            int flattenedIndex = 0;
            for (int j = 0; j < ${t6}; j++) {
              int index = round(${l});
              flattenedIndex += index * ${f};
            }
            if (flattenedIndex == coords[0]) {
              sum += ${d};
              found = true;
            }
          }
          setOutput(mix(getDefaultValue(), sum, float(found)));
        }
      `;
  }
};
function eZ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { indices: n, updates: s } = e, { shape: a } = o, { sliceRank: i, numUpdates: p, sliceSize: u, strides: c, outputSize: l } = S.calculateShapes(s, n, a), m = [l / u, u];
  if (l === 0)
    return t6.makeTensorInfo(a, n.dtype);
  let d = te({ inputs: { x: n }, backend: t6, attrs: { shape: [p, i] } }), f = te({ inputs: { x: s }, backend: t6, attrs: { shape: [p, u] } }), h = t6.makeTensorInfo([], "float32", new Float32Array([0])), g = new Cc(p, i, d.shape.length, f.shape.length, c, m), x = t6.runWebGLProgram(g, [f, d, h], f.dtype), b = te({ inputs: { x }, backend: t6, attrs: { shape: a } });
  return t6.disposeIntermediateTensorInfo(d), t6.disposeIntermediateTensorInfo(f), t6.disposeIntermediateTensorInfo(x), t6.disposeIntermediateTensorInfo(h), b;
}
var AF = { kernelName: zn, backendName: "webgl", kernelFunc: eZ };
var cg = class {
  constructor(e, t6, o, n) {
    this.variableNames = ["sortedSequence", "values"], this.customUniforms = [{ name: "numInputs", type: "int" }], this.outputShape = [e, o];
    let s = "while (left < right) {", a = `for (int i = 0; i < ${Math.ceil(Math.log2(t6 + 1))}; ++i) { if (left >= right) break;`, i = O().getNumber("WEBGL_VERSION") === 2 ? s : a, p = n === "left" ? "<" : "<=";
    this.userCode = `
       int findBound(int batch, float value) {
         int left = 0;
         int right = numInputs;
         int mid;
         ${i}
           mid = (left + right) / 2;
           if (getSortedSequence(batch, mid) ${p} value) {
             left = mid + 1;
           } else {
             right = mid;
           }
         }
         return right;
       }

       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int valueIndex = coords[1];

         float value = getValues(batch, valueIndex);

         setOutput(float(findBound(batch, value)));
       }
     `;
  }
};
function tZ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { sortedSequence: n, values: s } = e, { side: a } = o, i = new cg(n.shape[0], n.shape[1], s.shape[1], a), p = [[n.shape[1]]];
  return t6.runWebGLProgram(i, [n, s], "int32", p);
}
var RF = { kernelName: ii, backendName: "webgl", kernelFunc: tZ };
var lg = class {
  constructor(e, t6, o) {
    this.variableNames = ["c", "a", "b"], this.outputShape = t6;
    let n, s;
    if (o > 4)
      throw Error(`Where for rank ${o} is not yet supported`);
    if (o === 1)
      s = "resRC", n = "resRC";
    else {
      let i = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], p = [], u = [];
      for (let c = 0; c < t6.length; c++)
        u.push(`${i[c]}`), c < e && p.push(`${i[c]}`);
      n = p.join(), s = u.join();
    }
    let a = _e(o);
    this.userCode = `
      void main() {
        ${a} resRC = getOutputCoords();
        float cVal = getC(${n});
        if (cVal >= 1.0) {
          setOutput(getA(${s}));
        } else {
          setOutput(getB(${s}));
        }
      }
    `;
  }
};
function rZ(r) {
  let { inputs: e, backend: t6 } = r, { condition: o, t: n, e: s } = e, a = new lg(o.shape.length, n.shape, n.shape.length);
  return t6.runWebGLProgram(a, [o, n, s], dt(n.dtype, s.dtype));
}
var FF = { kernelName: Ts, backendName: "webgl", kernelFunc: rZ };
var oZ = `
  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.
  // see: https://arxiv.org/abs/1706.02515
  float scaleAlpha = ${S.SELU_SCALEALPHA};
  float scale = ${S.SELU_SCALE};
  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);
`;
var nZ = ge({ opSnippet: oZ });
var DF = { kernelName: Xi, backendName: "webgl", kernelFunc: nZ };
var sZ = _o + `
  return 1.0 / (1.0 + exp(-1.0 * x));
`;
var aZ = `
  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));
  bvec4 isNaN = isnan(x);

  result.r = isNaN.r ? x.r : result.r;
  result.g = isNaN.g ? x.g : result.g;
  result.b = isNaN.b ? x.b : result.b;
  result.a = isNaN.a ? x.a : result.a;

  return result;
`;
var iZ = ge({ opSnippet: sZ, packedOpSnippet: aZ, cpuKernelImpl: c$ });
var OF = { kernelName: Un, backendName: "webgl", kernelFunc: iZ };
var uZ = `
  if (isnan(x)) { return 0.0; }
  return sign(x);
`;
var pZ = ge({ opSnippet: uZ });
var PF = { kernelName: Yi, backendName: "webgl", kernelFunc: pZ };
var cZ = _o + `
  return sin(x);
`;
var lZ = ge({ opSnippet: cZ });
var MF = { kernelName: Wn, backendName: "webgl", kernelFunc: lZ };
var mZ = `
  float e2x = exp(x);
  return (e2x - 1.0 / e2x) / 2.0;
`;
var dZ = ge({ opSnippet: mZ });
var LF = { kernelName: Sa, backendName: "webgl", kernelFunc: dZ };
var fZ = `
  float epsilon = 1.1920928955078125e-7;
  float threshold = log(epsilon) + 2.0;

  bool too_large = x > -threshold;
  bool too_small = x < threshold;

  float result;
  float exp_x = exp(x);

  if (too_large){
    result = x;
  }
  else if (too_small){
    result = exp_x;
  }
  else{
    result = log(exp_x + 1.0);
  }
  return result;
`;
var hZ = ge({ opSnippet: fZ });
var BF = { kernelName: Qi, backendName: "webgl", kernelFunc: hZ };
var gZ = (r) => {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { blockShape: s, paddings: a } = o;
  y.assert(n.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGL backend not implemented yet");
  let i = s.reduce((x, b) => x * b), p = [[0, 0]];
  p.push(...a);
  for (let x = 1 + s.length; x < n.shape.length; ++x)
    p.push([0, 0]);
  let u = [], c = Lw({ inputs: { x: n }, backend: t6, attrs: { paddings: p, constantValue: 0 } }), l = S.getReshaped(c.shape, s, i, false), m = S.getPermuted(l.length, s.length, false), d = S.getReshapedPermuted(c.shape, s, i, false), f = te({ inputs: { x: c }, backend: t6, attrs: { shape: l } }), h = xt({ inputs: { x: f }, backend: t6, attrs: { perm: m } }), g = te({ inputs: { x: h }, backend: t6, attrs: { shape: d } });
  return u.push(c), u.push(f), u.push(h), u.forEach((x) => t6.disposeIntermediateTensorInfo(x)), g;
};
var VF = { kernelName: Es, backendName: "webgl", kernelFunc: gZ };
function xZ(r) {
  let { inputs: e, backend: t6 } = r, { indices: o, values: n, denseShape: s, defaultValue: a } = e;
  if (s.shape.length !== 1)
    throw new Error(`Dense shape must be a vector, saw:
         ${s.shape}`);
  if (o.shape.length !== 2)
    throw new Error(`Indices must be a matrix, saw:
         ${o.shape}`);
  if (n.shape.length !== 1)
    throw new Error(`Values must be a vector, saw:
         ${n.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Default value must be a scalar, saw:
        ${a.shape}`);
  let i = t6.readSync(o.dataId), p = t6.readSync(n.dataId), u = t6.readSync(s.dataId), c = t6.readSync(a.dataId)[0], [l, m, d, f, h] = m$(i, o.shape, o.dtype, p, n.dtype, u, c);
  return [t6.makeTensorInfo(m, o.dtype, l), t6.makeTensorInfo([m[0]], n.dtype, d), t6.makeTensorInfo([f.length], "bool", new Uint8Array(f.map((g) => Number(g)))), t6.makeTensorInfo([h.length], o.dtype, new Int32Array(h))];
}
var zF = { kernelName: ui, backendName: "webgl", kernelFunc: xZ };
function yZ(r) {
  let { inputs: e, backend: t6 } = r, { inputIndices: o, inputShape: n, newShape: s } = e;
  if (o.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape ${o.shape}`);
  if (n.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${s.shape}`);
  let a = Array.from(t6.readSync(n.dataId)), i = t6.readSync(o.dataId), p = Array.from(t6.readSync(s.dataId)), [u, c, l] = d$(i, o.shape, o.dtype, a, p);
  return [t6.makeTensorInfo(c, o.dtype, u), t6.makeTensorInfo([l.length], s.dtype, new Int32Array(l))];
}
var WF = { kernelName: wa, backendName: "webgl", kernelFunc: yZ };
function bZ(r) {
  let { inputs: e, backend: t6 } = r, { data: o, indices: n, segmentIds: s } = e;
  if (o.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
              ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
              ${s.shape}`);
  let a = t6.readSync(o.dataId), i = t6.readSync(n.dataId), p = t6.readSync(s.dataId), [u, c] = jf(a, o.shape, o.dtype, i, p, true);
  return t6.makeTensorInfo(c, o.dtype, u);
}
var UF = { kernelName: pi, backendName: "webgl", kernelFunc: bZ };
function CZ(r) {
  let { inputs: e, backend: t6 } = r, { data: o, indices: n, segmentIds: s } = e;
  if (o.shape.length < 1)
    throw new Error("Data should be at least 1 dimensional but received scalar");
  if (n.shape.length !== 1)
    throw new Error(`Indices should be a vector but received shape
             ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Segment ids should be a vector but received shape
             ${s.shape}`);
  let a = t6.readSync(o.dataId), i = t6.readSync(n.dataId), p = t6.readSync(s.dataId), [u, c] = jf(a, o.shape, o.dtype, i, p);
  return t6.makeTensorInfo(c, o.dtype, u);
}
var GF = { kernelName: ci, backendName: "webgl", kernelFunc: CZ };
function SZ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { sparseIndices: n, sparseValues: s, defaultValue: a } = e, { outputShape: i } = o, { sliceRank: p, numUpdates: u, sliceSize: c, strides: l, outputSize: m } = S.calculateShapes(s, n, i), d = false;
  if (s.dtype === "string") {
    let x = t6.bufferSync(n), b = t6.bufferSync(s), C = y.decodeString(t6.readSync(a.dataId)[0]), w = p$(x, b, i, m, c, u, p, l, C, d);
    return t6.makeTensorInfo(i, w.dtype, w.values);
  }
  let f = new Cc(u, p, n.shape.length, s.shape.length, l, [m, 1], d), h = t6.runWebGLProgram(f, [s, n, a], s.dtype), g = te({ inputs: { x: h }, backend: t6, attrs: { shape: i } });
  return t6.disposeIntermediateTensorInfo(h), g;
}
var HF = { kernelName: li, backendName: "webgl", kernelFunc: SZ };
function wZ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { numOrSizeSplits: s, axis: a } = o, i = y.parseAxisParam(a, n.shape)[0], p = S.prepareSplitSize(n, s, i), u = n.shape.length, c = new Array(u).fill(0), l = n.shape.slice();
  return p.map((m) => {
    let d = [...l];
    d[i] = m;
    let f = cs({ inputs: { x: n }, backend: t6, attrs: { begin: c, size: d } });
    return c[i] += m, f;
  });
}
var qF = { kernelName: $s, backendName: "webgl", kernelFunc: wZ };
var KF = "return sqrt(x);";
var IZ = ge({ opSnippet: KF, packedOpSnippet: KF, cpuKernelImpl: f$ });
var jF = { kernelName: Gn, backendName: "webgl", kernelFunc: IZ };
var vZ = "return x * x;";
var kZ = ge({ opSnippet: vZ });
var XF = { kernelName: mi, backendName: "webgl", kernelFunc: kZ };
var YF = "return (a - b) * (a - b);";
var NZ = tt({ opSnippet: YF, packedOpSnippet: YF });
var QF = { kernelName: Kn, backendName: "webgl", kernelFunc: NZ };
function TZ({ inputs: r, attrs: e, backend: t6 }) {
  let { x: o } = r, n = Bt + `
    return x > 0.0 ? 1.0 : float(${e.alpha});
  `, s = new Jt(o.shape, n);
  return t6.runWebGLProgram(s, [o], o.dtype);
}
var ZF = { kernelName: Ds, backendName: "webgl", kernelFunc: TZ };
var mg = class {
  constructor(e, t6, o) {
    this.variableNames = ["x"], this.outputShape = o;
    let n = o.length, s = _e(o.length), a = _e(o.length), i = "";
    if (n === 1)
      i = "coords * strides + begin";
    else {
      let p = 0;
      i = o.map((u, c) => (p++, o.length === 1 ? `coords * strides[${c}] + begin[${c}]` : `coords[${p - 1}] * strides[${c}] + begin[${c}]`)).join(",");
    }
    this.userCode = `
      ${s} begin = ${s}(${e});
      ${s} strides = ${s}(${t6});

      void main() {
        ${a} coords = getOutputCoords();
        setOutput(getX(${i}));
      }
    `;
  }
};
function _Z(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { begin: s, end: a, strides: i, beginMask: p, endMask: u, ellipsisMask: c, newAxisMask: l, shrinkAxisMask: m } = o, { finalShapeSparse: d, finalShape: f, isIdentity: h, sliceDim0: g, isSimpleSlice: x, begin: b, end: C, strides: w } = ut.sliceInfo(n.shape, s, a, i, p, u, c, l, m), k;
  if (h)
    k = te({ inputs: { x: n }, backend: t6, attrs: { shape: f } });
  else if (g || x) {
    y.assert(n.shape.length >= 1, () => `Input must have rank at least 1, got: ${n.shape.length}`);
    let $ = ut.computeOutShape(b, C, w), A = cs({ inputs: { x: n }, backend: t6, attrs: { begin: b, size: $ } });
    k = te({ inputs: { x: A }, backend: t6, attrs: { shape: f } }), t6.disposeIntermediateTensorInfo(A);
  } else if (t6.shouldExecuteOnCPU([n])) {
    let A = t6.readSync(n.dataId), R = le(n.shape, n.dtype, A), D = h$(d, R, w, b);
    k = t6.makeTensorInfo(f, n.dtype, D.values);
  } else {
    let A = new mg(b, w, d);
    k = t6.runWebGLProgram(A, [n], n.dtype);
  }
  let _ = te({ inputs: { x: k }, backend: t6, attrs: { shape: f } });
  return t6.disposeIntermediateTensorInfo(k), _;
}
var JF = { kernelName: jn, backendName: "webgl", kernelFunc: _Z };
function EZ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { separator: n, nGramWidths: s, leftPad: a, rightPad: i, padWidth: p, preserveShortSequences: u } = o, { data: c, dataSplits: l } = e, m = t6.readSync(c.dataId), d = t6.readSync(l.dataId), [f, h] = g$(m, d, n, s, a, i, p, u);
  return [t6.makeTensorInfo([f.length], "string", f), t6.makeTensorInfo(l.shape, "int32", h)];
}
var eD = { kernelName: As, backendName: "webgl", kernelFunc: EZ };
function $Z(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { skipEmpty: n } = o, { input: s, delimiter: a } = e;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (s.shape.length !== 1)
    throw new Error(`Input must be a vector, got shape: ${s.shape}`);
  if (a.shape.length !== 0)
    throw new Error(`Delimiter must be a scalar, got shape: ${a.shape}`);
  let i = t6.readSync(s.dataId), p = t6.readSync(a.dataId)[0], [u, c, l] = x$(i, p, n), m = c.length;
  return [t6.makeTensorInfo([m, 2], "int32", u), t6.makeTensorInfo([m], "string", c), t6.makeTensorInfo([2], "int32", new Int32Array(l))];
}
var tD = { kernelName: di, backendName: "webgl", kernelFunc: $Z };
function AZ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { numBuckets: n } = o, { input: s } = e;
  if (s.dtype !== "string")
    throw new Error("Input must be of datatype string");
  if (n <= 0)
    throw new Error("Number of buckets must be at least 1");
  let a = t6.readSync(s.dataId), i = y$(a, n);
  return t6.makeTensorInfo(s.shape, "int32", i);
}
var rD = { kernelName: fi, backendName: "webgl", kernelFunc: AZ };
var RZ = "return tan(x);";
var FZ = ge({ opSnippet: RZ });
var oD = { kernelName: Yn, backendName: "webgl", kernelFunc: FZ };
var DZ = `
  float e2x = exp(-2.0 * abs(x));
  return sign(x) * (1.0 - e2x) / (1.0 + e2x);
`;
var OZ = ge({ opSnippet: DZ });
var nD = { kernelName: Qn, backendName: "webgl", kernelFunc: OZ };
var dg = class {
  constructor(e, t6) {
    this.variableNames = ["A"];
    let o = new Array(e.length);
    for (let a = 0; a < o.length; a++)
      o[a] = e[a] * t6[a];
    this.outputShape = o, this.rank = o.length;
    let n = _e(this.rank), s = PZ(e);
    this.userCode = `
      void main() {
        ${n} resRC = getOutputCoords();
        setOutput(getA(${s}));
      }
    `;
  }
};
function PZ(r) {
  let e = r.length;
  if (e > 5)
    throw Error(`Tile for rank ${e} is not yet supported`);
  if (e === 1)
    return `imod(resRC, ${r[0]})`;
  let t6 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w", "resRC.u"], o = [];
  for (let n = 0; n < r.length; n++)
    o.push(`imod(${t6[n]}, ${r[n]})`);
  return o.join();
}
function Vw(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { reps: s } = o;
  if (n.dtype === "string" || n.shape.length > 5) {
    let p = t6.readSync(n.dataId), u = n.dtype === "string" ? p.map((m) => y.decodeString(m)) : p, c = le(n.shape, n.dtype, u), l = C$(c, s);
    return t6.makeTensorInfo(l.shape, l.dtype, l.values);
  }
  let a = new dg(n.shape, s);
  return t6.runWebGLProgram(a, [n], n.dtype);
}
var sD = { kernelName: to, backendName: "webgl", kernelFunc: Vw };
var fg = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "negativeInf", type: "float" }, { name: "dir", type: "int" }, { name: "inc", type: "int" }], this.outputShape = e, this.userCode = `
       void main() {
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // We compare elements pair-wise within a group of size 2 * inc.
         // The comparing rule for each group alternates between ascending
         // and descending. Within each group, we compare each pair at
         // positions i and i+inc. To decide whether an element at position i
         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
         // inc, it is in the first half of the group, we denote it as x0,
         // otherwise we denote it as x1.
         // For example, as shown in the Bitonic top K paper referenced above,
         // Figure5(a) shows that element[1] is in the
         // second half of the group when group size is 2, but it is in the
         // first half of the group when group size is 4.

         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;
         int i = isFirstInPair ? elemIdx : elemIdx - inc;

         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));
         float x0 = i0 < n ? getX(batch, i0) : negativeInf;
         float x1 = i1 < n ? getX(batch, i1) : negativeInf;

         // Denotes which direction indices are in (ascending or descending).
         bool reverse = imod(elemIdx, 2 * dir) >= dir;
         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
         if (reverse == isGreater) { // Elements in opposite order of direction
           int iTemp = i0;
           i0 = i1;
           i1 = iTemp;
         }
         if (isFirstInPair) {
            setOutput(float(i0));
         } else {
            setOutput(float(i1));
         }
       }
     `;
  }
};
var hg = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.customUniforms = [{ name: "n", type: "int" }, { name: "firstPass", type: "int" }, { name: "k", type: "int" }], this.outputShape = e, this.userCode = `
    void main() {
         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...
         ivec2 coords = getOutputCoords();
         int batch = coords[0];
         int elemIdx = coords[1];

         // The output size is half of the previous size.
         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),
         // we only need to output the indices at positions |, the indices at
         // positions _ can be thrown away, see Figure5(b) After Phase 2
         // (Merge phase) in the Bitonic Top K paper referenced above.
         // For example, the paper shows we only need to output the orange bars.
         // The output sequence should look like this | | | | | | | |.
         // Because the sequence is halved, to map the output index back
         // to the previous sequence to find the corresponding value,
         // we need to double the index. When we double the index,
         // we basically interpolate a position, so 2i looks like
         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position
         // of each 2k positions by - elemIdx % k. E.g. for output at
         // index 4,5,6,7, we want to get the corresponding element at
         // original index 8,9,10,11, for output at index 8,9,10,11,
         // we want to get the corresponding element at original index
         // 16,17,18,19, so on and so forth.

         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));
         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));
         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));

         float x0 = getX(batch, i0);
         float x1 = i1 < n ? getX(batch, i1) : x0;

         setOutput(x0 >= x1 ? float(i0) : float(i1));
       }
     `;
  }
};
function Bu(r, e) {
  e !== null && r.disposeIntermediateTensorInfo(e);
}
function aD(r) {
  let e = 1;
  for (; e < r; )
    e *= 2;
  return e;
}
function MZ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { k: s, sorted: a } = o, i = O().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"), p = O().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"), u = n.shape, c = u[u.length - 1];
  if (t6.shouldExecuteOnCPU([n]) || c < i || s > p) {
    let D = t6.readSync(n.dataId), [P, M] = S$(D, u, n.dtype, s, a);
    return [t6.makeTensorInfo(P.shape, P.dtype, P.values), t6.makeTensorInfo(M.shape, M.dtype, M.values)];
  }
  if (s === 0)
    return u[u.length - 1] = 0, [t6.makeTensorInfo(u, n.dtype, []), t6.makeTensorInfo(u, "int32", [])];
  if (c === 1)
    return [n, Ga({ attrs: { shape: u, dtype: "int32", value: 0 }, backend: t6 })];
  let l = t6.texData.get(n.dataId), m = l !== null && l.isPacked, d = m ? t6.unpackTensor(n) : n, h = y.sizeFromShape(u) / c, g = te({ inputs: { x: d }, attrs: { shape: [h, c] }, backend: t6 });
  m && Bu(t6, d);
  let x = aD(s), b = aD(c), C = null, w = () => C === null ? [g, g] : [g, C], k = (D, P, M) => {
    let L = w(), W = new fg(M), U = [[c], [C === null ? 1 : 0], [Number.NEGATIVE_INFINITY], [D], [P]], q = C;
    C = t6.runWebGLProgram(W, L, "int32", U), Bu(t6, q);
  };
  for (let D = 1; D < x; D *= 2) {
    let P = D * 2;
    for (let M = D; M >= 1; M /= 2)
      k(P, M, [h, b]);
  }
  for (let D = b; D > x; D /= 2) {
    let P = w(), M = new hg([h, D / 2]), W = [[c], [C === null ? 1 : 0], [x]], V = C;
    C = t6.runWebGLProgram(M, P, "int32", W), Bu(t6, V);
    let U = x / 2, q = U * 2;
    for (let H = U; H >= 1; H /= 2)
      k(q, H, C.shape);
  }
  let _ = C;
  C = cs({ inputs: { x: C }, backend: t6, attrs: { begin: 0, size: [h, s] } }), Bu(t6, _);
  let $ = Fw({ inputs: { x: g, indices: C }, backend: t6, attrs: { axis: 1, batchDims: 1 } });
  Bu(t6, g);
  let A = u.slice(0, -1);
  A.push(s), _ = C, C = te({ inputs: { x: C }, attrs: { shape: A }, backend: t6 }), Bu(t6, _);
  let R = $;
  return $ = te({ inputs: { x: $ }, attrs: { shape: A }, backend: t6 }), Bu(t6, R), [$, C];
}
var iD = { kernelName: Zn, backendName: "webgl", kernelFunc: MZ };
var gg = class {
  constructor(e, t6, o, n, s, a) {
    this.variableNames = ["Image", "Transforms"], this.outputShape = a;
    let i = o === "nearest" ? 1 : 2, p;
    switch (n) {
      case "constant":
        p = 1;
        break;
      case "reflect":
        p = 2;
        break;
      case "wrap":
        p = 3;
        break;
      case "nearest":
        p = 4;
        break;
      default:
        p = 1;
        break;
    }
    this.userCode = `
            float mapCoord(float outCoord, float len) {
              float inCoord = outCoord;
              if(${p} == 2) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    if (inCoord < sz2) {
                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +
                      inCoord;
                    }
                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz2 = 2.0 * len;
                    inCoord -= sz2 * float(int(float(inCoord / sz2)));
                    if (inCoord >= len) {
                      inCoord = sz2 - inCoord - 1.0;
                    }
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${p} == 3) {
                if (inCoord < 0.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);
                  }
                } else if (inCoord > len - 1.0) {
                  if (len <= 1.0) {
                    inCoord = 0.0;
                  } else {
                    float sz = len - 1.0;
                    inCoord -= len * float(int(float(inCoord / sz)));
                  }
                }
                return clamp(inCoord, 0.0, len - 1.0);
              } else if (${p} == 4) {
                return clamp(outCoord, 0.0, len - 1.0);
              } else {
                return outCoord;
              }
            }

            float readWithFillValue(int batch, int coordY, int coordX,
              int channel) {
              float outputValue;
              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t6}) {
                  outputValue = getImage(batch, coordY, coordX, channel);
              } else {
                outputValue = float(${s});
              }
              return outputValue;
            }

            void main() {
              ivec4 coords = getOutputCoords();
              float outputValue;
              int batch = coords[0];
              int x = coords[2];
              int y = coords[1];
              int channel = coords[3];
              float xf = float(x);
              float yf = float(y);
              float a1 = getTransforms(batch, 0);
              float a2 = getTransforms(batch, 1);
              float a3 = getTransforms(batch, 2);
              float b1 = getTransforms(batch, 3);
              float b2 = getTransforms(batch, 4);
              float b3 = getTransforms(batch, 5);
              float c1 = getTransforms(batch, 6);
              float c2 = getTransforms(batch, 7);
              float projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = float(${s});
              } else {
                float inX = (a1 * xf + a2 * yf + a3) / projection;
                float inY = (b1 * xf + b2 * yf + b3) / projection;
                float mapX = mapCoord(inX, float(${t6}));
                float mapY = mapCoord(inY, float(${e}));

                if (${i} == 1) {
                  int coordY = int(round(mapY));
                  int coordX = int(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  float yFloor = floor(mapY);
                  float xFloor = floor(mapX);
                  float yCeil = yFloor + 1.0;
                  float xCeil = xFloor + 1.0;
                  float valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);
                  float valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutput(outputValue);
            }
        `;
  }
};
function LZ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { image: n, transforms: s } = e, { interpolation: a, fillMode: i, fillValue: p, outputShape: u } = o, [c, l, m, d] = n.shape, [f, h] = u != null ? u : [l, m], g = [c, f, h, d], x = new gg(l, m, a, i, p, g);
  return t6.runWebGLProgram(x, [n, s], "float32");
}
var uD = { kernelName: Jn, backendName: "webgl", kernelFunc: LZ };
function BZ(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { axis: n } = t6, { x: s } = e;
  is(s, "unique"), console.warn("WARNING: ", "UI might be locked temporarily as data is being downloaded");
  let a = o.readSync(s.dataId), { outputValues: i, outputShape: p, indices: u } = w$(a, n, s.shape, s.dtype);
  return [o.makeTensorInfo(p, s.dtype, i), o.makeTensorInfo([u.length], "int32", u)];
}
var pD = { kernelName: kp, backendName: "webgl", kernelFunc: BZ };
function VZ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { value: n } = e, { axis: s } = o;
  s < 0 && (s += n.shape.length);
  let a = n, i = a.shape.length, p = n.shape[s], u = new Array(i - 1), c = 0;
  for (let h = 0; h < i; h++)
    h !== s && (u[c++] = a.shape[h]);
  let l = [], m = new Array(i).fill(0), d = a.shape.slice();
  d[s] = 1;
  let f = new Array(p);
  for (let h = 0; h < f.length; h++) {
    m[s] = h;
    let g = cs({ inputs: { x: a }, backend: t6, attrs: { begin: m, size: d } }), x = te({ inputs: { x: g }, backend: t6, attrs: { shape: u } });
    f[h] = x, l.push(g);
  }
  return l.forEach((h) => t6.disposeIntermediateTensorInfo(h)), f;
}
var cD = { kernelName: Rs, backendName: "webgl", kernelFunc: VZ };
var xg = class {
  constructor(e, t6) {
    this.variableNames = ["x", "segmentIds"];
    let o = e.windowSize, n = e.batchSize, s = e.inSize, a = e.numSegments, i = a * Math.ceil(s / o);
    this.outputShape = [n, i];
    let p = "0.0", u = "sumValue", c = Math.floor(o / 4) * 4, l = o % 4, m = `
        sumValue += dot(values, segFilter);
    `, d = "";
    s % o > 0 && (d = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return initializationValue;
        }
      `);
    let f = "";
    s % o > 0 && (f = `
        if (inIdx < 0 || inIdx >= ${s}) {
          return -1.0;
        }
      `), this.userCode = `
      const float initializationValue = ${p};

      float getValue(int batch, int inIdx) {
        ${d}
        return getX(batch, inIdx);
      }

      float getSegmentIdAtIndex(int inIdx) {
        ${f}
        return getSegmentIds(inIdx);
      }

      void main() {
        ivec2 coords = getOutputCoords();
        int batch = coords[0];
        int outIdx = coords[1];
        int inOffset = int(floor(float(outIdx) / float(
          ${a})) * float(${o}));
        int currentSeg = int(mod(float(outIdx), float(${a})));

        float sumValue = 0.0;

        for (int i = 0; i < ${c}; i += 4) {
          int inIdx = inOffset + i;
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            getValue(batch, inIdx + 3)
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0
          );

          ${m}
        }

        int inIdx = inOffset + ${c};
        if (${l === 1}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            initializationValue,
            initializationValue,
            initializationValue
          );

          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            0,
            0,
            0
          );

          ${m}
        } else if (${l === 2}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            initializationValue,
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
              0,
              0
          );

          ${m}
        } else if (${l === 3}) {
          vec4 values = vec4(
            getValue(batch, inIdx),
            getValue(batch, inIdx + 1),
            getValue(batch, inIdx + 2),
            initializationValue
          );

          vec4 segFilter = vec4(
            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,
            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,
            0
          );

          ${m}
        }
        setOutput(${u});
      }
    `;
  }
};
function zZ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, segmentIds: s } = e, { numSegments: a } = o, i = n.shape.length, p = [], u = 0, c = S.getAxesPermutation([u], i), l = n;
  c != null && (l = xt({ inputs: { x: n }, backend: t6, attrs: { perm: c } }), p.push(l), u = S.getInnerMostAxes(1, i)[0]);
  let m = S.segment_util.computeOutShape(l.shape, u, a), d = y.sizeFromShape([l.shape[u]]), f = te({ inputs: { x: l }, backend: t6, attrs: { shape: [-1, d] } });
  p.push(f);
  let h = ka(n.dtype), g = (w, k, _, $, A) => {
    let R = w.shape[0], D = w.shape[1], P = S.segment_util.segOpComputeOptimalWindowSize(D, A), M = { windowSize: P, inSize: D, batchSize: R, numSegments: A }, L = new xg(M, k), W = t6.compileAndRun(L, [w, _], $);
    if (p.push(W), W.shape[1] === A)
      return W;
    let V = Bw({ backend: t6, attrs: { start: 0, stop: A, step: 1, dtype: "float32" } }), U = Vw({ inputs: { x: V }, backend: t6, attrs: { reps: [D / P] } });
    return p.push(V), p.push(U), g(W, k, U, $, A);
  }, x = g(f, "unsortedSegmentSum", s, h, a), b = te({ inputs: { x }, backend: t6, attrs: { shape: m } }), C = b;
  if (c != null) {
    p.push(b);
    let w = S.getUndoAxesPermutation(c);
    C = xt({ inputs: { x: C }, backend: t6, attrs: { perm: w } });
  }
  return p.forEach((w) => t6.disposeIntermediateTensorInfo(w)), C;
}
var lD = { kernelName: Np, backendName: "webgl", kernelFunc: zZ };
var WZ = [Y$, Z$, J$, eA, rA, oA, nA, sA, uA, pA, cA, lA, mA, dA, fA, hA, gA, xA, yA, bA, CA, wA, IA, vA, _A, $A, AA, V$, FA, OA, PA, MA, LA, BA, VA, zA, WA, UA, GA, KA, jA, XA, YA, QA, ZA, JA, eR, tR, rR, oR, nR, sR, aR, iR, uR, cR, lR, mR, dR, hR, gR, xR, yR, bR, CR, SR, wR, IR, B$, vR, DA, kR, NR, TR, z$, _R, ER, $R, AR, RR, FR, DR, OR, PR, MR, BR, VR, zR, WR, UR, GR, qR, jR, XR, YR, QR, ZR, oF, G$, nF, sF, aF, iF, kA, uF, lF, mF, dF, fF, W$, hF, gF, xF, yF, bF, NA, JR, CF, SF, wF, q$, IF, vF, kF, NF, TF, _F, EF, $F, AF, RF, FF, DF, OF, PF, MF, LF, SA, rF, BF, VF, zF, WF, UF, GF, HF, qF, jF, XF, QF, ZF, JF, eD, tD, rD, tF, j$, oD, nD, sD, iD, uD, X$, pD, cD, lD, pF];
for (let r of WZ)
  Ia(r);
var Fe;
(function(r) {
  r[r.float32 = 0] = "float32", r[r.int32 = 1] = "int32", r[r.bool = 2] = "bool", r[r.string = 3] = "string", r[r.complex64 = 4] = "complex64";
})(Fe || (Fe = {}));
var Wi;
(function(r) {
  r[r.linear = 0] = "linear", r[r.relu = 1] = "relu", r[r.relu6 = 2] = "relu6", r[r.prelu = 3] = "prelu", r[r.leakyrelu = 4] = "leakyrelu", r[r.sigmoid = 5] = "sigmoid", r[r.elu = 6] = "elu";
})(Wi || (Wi = {}));
var mD;
function UZ(r) {
  mD = r.wasm.cwrap(fo, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function GZ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { a: n, b: s, bias: a, preluActivationWeights: i } = e;
  if (n.dtype !== "float32" || s.dtype !== "float32")
    throw new Error("_FusedMatMul for non non-float32 tensors not yet supported.");
  let { transposeA: p, transposeB: u, activation: c, leakyreluAlpha: l } = o, m = t6.dataIdMap.get(n.dataId).id, d = t6.dataIdMap.get(s.dataId).id, f = 0;
  if (a != null) {
    let A = t6.dataIdMap.get(a.dataId);
    if (A.shape.length !== 1)
      throw new Error(`_FusedMatMul only supports rank-1 bias but got rank ${A.shape.length}.`);
    f = A.id;
  }
  let h = i == null ? 0 : t6.dataIdMap.get(i.dataId).id, g = Wi[c];
  if (g == null)
    throw new Error(`${c} activation not yet supported for FusedConv2D in the wasm backend.`);
  let x = p ? n.shape[2] : n.shape[1], b = u ? s.shape[1] : s.shape[2], C = br.assertAndGetBroadcastShape(n.shape.slice(0, -2), s.shape.slice(0, -2)), w = t6.makeOutput([...C, x, b], n.dtype), k = t6.dataIdMap.get(w.dataId).id, _ = new Uint8Array(new Int32Array(n.shape).buffer), $ = new Uint8Array(new Int32Array(s.shape).buffer);
  return mD(m, _, n.shape.length, d, $, s.shape.length, p, u, g, f, h, l || 0, k), w;
}
var dD = { kernelName: fo, backendName: "wasm", setupFunc: UZ, kernelFunc: GZ };
function Ve(r, e) {
  let t6;
  function o(s) {
    t6 = s.wasm.cwrap(r, null, ["number", "number", "number"]);
  }
  function n(s) {
    let { backend: a, inputs: { x: i } } = s, p = a.dataIdMap.get(i.dataId).id, u = a.makeOutput(i.shape, e || i.dtype), c = a.dataIdMap.get(u.dataId).id;
    return y.sizeFromShape(u.shape) === 0 || t6(p, Fe[i.dtype], c), u;
  }
  return { kernelName: r, backendName: "wasm", setupFunc: o, kernelFunc: n };
}
var fD = Ve(gs);
function rt(r, e, t6) {
  let o;
  function n(a) {
    o = a.wasm.cwrap(r, null, ["number", "array", "number", "number", "array", "number", "number", "number"]);
  }
  function s(a) {
    let { backend: i, inputs: p } = a, { a: u, b: c } = p, l = i.dataIdMap.get(u.dataId).id, m = i.dataIdMap.get(c.dataId).id, d = t6 != null ? t6 : u.dtype, f = S.assertAndGetBroadcastShape(u.shape, c.shape), h = i.makeOutput(f, d);
    if (y.sizeFromShape(f) === 0)
      return h;
    let g = new Uint8Array(new Int32Array(u.shape).buffer), x = new Uint8Array(new Int32Array(c.shape).buffer), b = i.dataIdMap.get(h.dataId).id;
    return (() => o(l, g, u.shape.length, m, x, c.shape.length, Fe[u.dtype], b))(), h;
  }
  return { kernelName: r, backendName: "wasm", setupFunc: n, kernelFunc: s };
}
var HZ = true;
var hD = rt(eo, HZ);
var gD;
function qZ(r) {
  gD = r.wasm.cwrap(Mo, null, ["array", "number", "number", "number"]);
}
function KZ(r) {
  let { inputs: e, backend: t6 } = r, o = t6.makeOutput(e[0].shape, e[0].dtype);
  if (y.sizeFromShape(o.shape) === 0)
    return o;
  let n = e.map((i) => t6.dataIdMap.get(i.dataId).id), s = new Uint8Array(new Int32Array(n).buffer), a = t6.dataIdMap.get(o.dataId).id;
  return gD(s, n.length, Fe[o.dtype], a), o;
}
var xD = { kernelName: Mo, backendName: "wasm", setupFunc: qZ, kernelFunc: KZ };
function Vu(r) {
  let { inputs: { x: e }, backend: t6 } = r;
  if (e.dtype === "string")
    return nr(t6.readSync(e.dataId), e.shape, e.dtype);
  let o = t6.makeOutput(e.shape, e.dtype), n = t6.typedArrayFromHeap(e);
  return t6.typedArrayFromHeap(o).set(n), o;
}
var yD = { kernelName: mo, backendName: "wasm", kernelFunc: Vu };
var bD;
function jZ(r) {
  bD = r.wasm.cwrap(ro, null, ["number", "array", "number", "number", "number", "array", "number"]);
}
function uo(r) {
  let { inputs: e, backend: t6, attrs: o } = r, [n, s] = YZ(e.x.shape, o.perm), a = true;
  for (let f = 0; f < s.length; f++)
    s[f] !== f && (a = false);
  let i = XZ(e.x.shape, o.perm), p = { dataId: e.x.dataId, shape: n, dtype: e.x.dtype };
  if (a) {
    let f = Vu({ inputs: e, backend: t6 });
    return f.shape = i, f;
  }
  let u = t6.makeOutput(i, p.dtype), c = t6.dataIdMap.get(p.dataId).id, l = t6.dataIdMap.get(u.dataId).id, m = new Uint8Array(new Int32Array(s).buffer), d = new Uint8Array(new Int32Array(p.shape).buffer);
  return bD(c, d, p.shape.length, Fe[p.dtype], l, m, s.length), u;
}
function XZ(r, e) {
  let t6 = new Array(r.length);
  for (let o = 0; o < t6.length; o++)
    t6[o] = r[e[o]];
  return t6;
}
function YZ(r, e) {
  let t6 = [], o = [];
  for (let n = 0; n < r.length; ++n)
    r[n] !== 1 && t6.push(r[n]), r[e[n]] !== 1 && o.push(e[n]);
  for (let n = 0; n < o.length; ++n) {
    let s = -1;
    for (let a = 0; a < o.length; ++a)
      o[a] >= n && (s === -1 || o[s] > o[a]) && (s = a);
    o[s] = n;
  }
  return [t6, o];
}
var CD = { kernelName: ro, backendName: "wasm", kernelFunc: uo, setupFunc: jZ };
function kr(r, e, t6) {
  let o = r.shape, n = r.shape.length, s = y.parseAxisParam(e, o), a = s, i = S.getAxesPermutation(a, n), p = null, u = false;
  if (i != null) {
    let c = new Array(n);
    for (let d = 0; d < c.length; d++)
      c[d] = o[i[d]];
    a = S.getInnerMostAxes(a.length, n), p = uo({ inputs: { x: r }, attrs: { perm: i }, backend: t6 });
    let l = t6.dataIdMap.get(r.dataId).id;
    t6.dataIdMap.get(p.dataId).id !== l && (u = true);
  }
  return { transposed: p, originalAxes: s, axes: a, inputWasTransposed: u };
}
var SD;
function QZ(r) {
  SD = r.wasm.cwrap(Lo, null, ["number, number, number"]);
}
function ZZ(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = t6, p = e.dataIdMap.get(a.dataId).id, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = kr(a, n, e);
  if (d) {
    let C = e.dataIdMap.get(c.dataId).id;
    u = c, p = C;
  }
  let f = u.shape.length;
  S.assertAxesAreInnerMostDims("all", l, f);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, l), x = y.sizeFromShape(g), b = e.makeOutput(h, a.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = e.dataIdMap.get(b.dataId).id;
    SD(p, x, C);
  }
  if (d && e.disposeData(c.dataId), s) {
    let C = S.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var wD = { kernelName: Lo, backendName: "wasm", setupFunc: QZ, kernelFunc: ZZ };
var ID;
function JZ(r) {
  ID = r.wasm.cwrap(Bo, null, ["number, number, number"]);
}
function e9(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = t6, p = e.dataIdMap.get(a.dataId).id, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = kr(a, n, e);
  if (d) {
    let C = e.dataIdMap.get(c.dataId).id;
    u = c, p = C;
  }
  let f = u.shape.length;
  S.assertAxesAreInnerMostDims("any", l, f);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, l), x = y.sizeFromShape(g), b = e.makeOutput(h, a.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = e.dataIdMap.get(b.dataId).id;
    ID(p, x, C);
  }
  if (d && e.disposeData(c.dataId), s) {
    let C = S.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var vD = { kernelName: Bo, backendName: "wasm", setupFunc: JZ, kernelFunc: e9 };
var kD;
function t9(r) {
  kD = r.wasm.cwrap(Vo, null, ["number", "number", "number", "number", "number"]);
}
function r9(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { axis: n } = o, { x: s } = t6, a = e.dataIdMap.get(s.dataId).id, i = a, p = s, { transposed: u, axes: c, inputWasTransposed: l } = kr(s, n, e);
  if (l) {
    let x = e.dataIdMap.get(u.dataId).id;
    x !== a && (p = u, i = x);
  }
  let m = p.shape.slice(0, -1), d = e.makeOutput(m, "int32"), f = e.dataIdMap.get(d.dataId).id, h = y.sizeFromShape(d.shape), g = p.shape[c[0]];
  return kD(i, Fe[p.dtype], h, g, f), l && e.disposeData(u.dataId), d;
}
var ND = { kernelName: Vo, backendName: "wasm", kernelFunc: r9, setupFunc: t9 };
var TD;
function o9(r) {
  TD = r.wasm.cwrap(zo, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function n9(r) {
  let { inputs: e, attrs: t6, backend: o } = r, n = e.x, s = o.dataIdMap.get(n.dataId).id, { filterSize: a, strides: i, pad: p, dimRoundingMode: u } = t6, c = S.computePool2DInfo(n.shape, a, i, 1, p, u), l = c.filterHeight, m = c.filterWidth, d = c.padInfo.top, f = c.padInfo.right, h = c.padInfo.bottom, g = c.padInfo.left, x = c.strideHeight, b = c.strideWidth, C = c.inChannels;
  if (c.dataFormat !== "channelsLast")
    throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);
  if (c.dilationWidth !== 1 || c.dilationHeight !== 1)
    throw new Error(`was backend only supports average pooling with dilation = [1, 1], got [${c.dilationHeight}, ${c.dilationWidth}].`);
  let w = o.makeOutput(c.outShape, "float32"), k = o.dataIdMap.get(w.dataId).id;
  return TD(s, n.shape[0], n.shape[1], n.shape[2], l, m, d, f, h, g, x, b, C, k), w;
}
var _D = { kernelName: zo, backendName: "wasm", setupFunc: o9, kernelFunc: n9 };
function Mt(r) {
  let { inputs: e, attrs: t6 } = r, { x: o } = e, { shape: n } = t6, s = y.sizeFromShape(o.shape), a = y.inferFromImplicitShape(n, s);
  return y.assert(s === y.sizeFromShape(a), () => `new shape: ${a}, old shape: ${o.shape}. New shape and old shape must have the same number of elements.`), r.backend.incRef(o.dataId), { dataId: o.dataId, shape: a, dtype: o.dtype };
}
var ED = { kernelName: Ns, backendName: "wasm", kernelFunc: Mt };
var $D;
function s9(r) {
  $D = r.wasm.cwrap(Wo, null, ["number", "array", "number", "number", "array", "number", "number", "number", "number"]);
}
function a9(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { a: n, b: s } = e, { transposeA: a, transposeB: i } = o;
  if (n.dtype !== "float32" || s.dtype !== "float32")
    throw new Error("BatchMatMul for non non-float32 tensors not yet supported.");
  let p = n.shape.length, u = s.shape.length, c = a ? n.shape[p - 2] : n.shape[p - 1], l = i ? s.shape[u - 1] : s.shape[u - 2], m = a ? n.shape[p - 1] : n.shape[p - 2], d = i ? s.shape[u - 2] : s.shape[u - 1], f = n.shape.slice(0, -2), h = s.shape.slice(0, -2), g = y.sizeFromShape(f), x = y.sizeFromShape(h), C = br.assertAndGetBroadcastShape(n.shape.slice(0, -2), s.shape.slice(0, -2)).concat([m, d]);
  y.assert(c === l, () => `Error in matMul: inner shapes (${c}) and (${l}) of Tensors with shapes ${n.shape} and ${s.shape} and transposeA=${a} and transposeB=${i} must match.`);
  let w = a ? [g, c, m] : [g, m, c], k = i ? [x, d, l] : [x, l, d], _ = Mt({ inputs: { x: n }, backend: t6, attrs: { shape: w } }), $ = Mt({ inputs: { x: s }, backend: t6, attrs: { shape: k } }), A = t6.dataIdMap.get(_.dataId).id, R = t6.dataIdMap.get($.dataId).id, D = a ? _.shape[2] : _.shape[1], P = i ? $.shape[1] : $.shape[2], M = Math.max(g, x), L = t6.makeOutput([M, D, P], _.dtype), W = t6.dataIdMap.get(L.dataId).id, V = new Uint8Array(new Int32Array(_.shape).buffer), U = new Uint8Array(new Int32Array($.shape).buffer);
  return $D(A, V, _.shape.length, R, U, $.shape.length, a, i, W), t6.disposeData(_.dataId), t6.disposeData($.dataId), L.shape = C, L;
}
var AD = { kernelName: Wo, backendName: "wasm", setupFunc: s9, kernelFunc: a9 };
function Eo(r) {
  let { inputs: { x: e }, attrs: { begin: t6, size: o }, backend: n } = r, [s, a] = ut.parseSliceParams(e, t6, o), i = ut.isSliceContinous(e.shape, s, a), p = n.readSync(e.dataId), u = n.makeOutput(a, e.dtype), c = y.computeStrides(e.shape), l = n.dataIdMap.get(u.dataId);
  if (i) {
    let f = ut.computeFlatOffset(s, c);
    return e.dtype === "string" ? l.stringBytes = p.slice(f, f + y.sizeFromShape(a)) : n.typedArrayFromHeap(u).set(p.subarray(f, f + y.sizeFromShape(a))), u;
  }
  if (e.dtype === "string") {
    let f = vu(p, s, a, e.shape, e.dtype);
    return l.stringBytes = f, u;
  }
  let m = n.typedArrayFromHeap(u), d = e.shape.length;
  if (d === 2)
    i9(p, c[0], m, s, a);
  else if (d === 3)
    u9(p, c[0], c[1], m, s, a);
  else if (d === 4)
    p9(p, c[0], c[1], c[2], m, s, a);
  else {
    let f = vu(p, s, a, e.shape, e.dtype);
    m.set(f);
  }
  return u;
}
function i9(r, e, t6, o, n) {
  let s = 0, a = o[0], i = o[1], p = a + n[0];
  for (let u = a; u < p; u++) {
    let c = u * e + i;
    t6.set(r.subarray(c, c + n[1]), s), s += n[1];
  }
}
function u9(r, e, t6, o, n, s) {
  let a = 0, i = n[0], p = n[1], u = n[2], c = i + s[0], l = p + s[1];
  for (let m = i; m < c; m++)
    for (let d = p; d < l; d++) {
      let f = m * e + d * t6 + u;
      o.set(r.subarray(f, f + s[2]), a), a += s[2];
    }
}
function p9(r, e, t6, o, n, s, a) {
  let i = 0, p = s[0], u = s[1], c = s[2], l = p + a[0], m = u + a[1], d = c + a[2], f = s[3];
  for (let h = p; h < l; h++)
    for (let g = u; g < m; g++)
      for (let x = c; x < d; x++) {
        let b = h * e + g * t6 + x * o + f;
        n.set(r.subarray(b, b + a[3]), i), i += a[3];
      }
}
var RD = { kernelName: _s, backendName: "wasm", kernelFunc: Eo };
function c9(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { blockShape: s, crops: a } = o, i = s.reduce((x, b) => x * b), p = S.getReshaped(n.shape, s, i), u = S.getPermuted(p.length, s.length), c = S.getReshapedPermuted(n.shape, s, i), l = S.getSliceBeginCoords(a, s.length), m = S.getSliceSize(c, a, s.length), d = Mt({ inputs: { x: n }, backend: t6, attrs: { shape: p } }), f = uo({ inputs: { x: d }, backend: t6, attrs: { perm: u } }), h = Mt({ inputs: { x: f }, backend: t6, attrs: { shape: c } }), g = Eo({ inputs: { x: h }, backend: t6, attrs: { begin: l, size: m } });
  return t6.disposeData(d.dataId), t6.disposeData(f.dataId), t6.disposeData(d.dataId), g;
}
var FD = { kernelName: xs, backendName: "wasm", kernelFunc: c9 };
function ls(r) {
  let { inputs: { x: e }, attrs: { dtype: t6 }, backend: o } = r, n = o.makeOutput(e.shape, t6), s = o.typedArrayFromHeap(e);
  return o.typedArrayFromHeap(n).set(s), n;
}
var DD = { kernelName: co, backendName: "wasm", kernelFunc: ls };
var OD = Ve(Uo);
var PD;
function l9(r) {
  PD = r.wasm.cwrap(lo, null, ["number", "number", "number", "number"]);
}
function m9(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { clipValueMin: s, clipValueMax: a } = o, i = t6.dataIdMap.get(n.dataId).id, p = t6.makeOutput(n.shape, n.dtype), u = t6.dataIdMap.get(p.dataId).id;
  return PD(i, s, a, u), p;
}
var MD = { kernelName: lo, backendName: "wasm", setupFunc: l9, kernelFunc: m9 };
function zw(r) {
  let { inputs: e, backend: t6 } = r, o = y.parseAxisParam(r.attrs.axis, e[0].shape)[0], n = e.map((d) => d.shape);
  S.assertParamsConsistent(n, o);
  let s = S.computeOutShape(e.map((d) => d.shape), o), a = e.filter((d) => y.sizeFromShape(d.shape) > 0);
  if (a.length === 1)
    return Vu({ inputs: { x: a[0] }, backend: t6 });
  let i = t6.makeOutput(s, e[0].dtype);
  if (y.sizeFromShape(s) === 0)
    return i;
  if (a[0].dtype === "string") {
    let d = a.map((C) => {
      let k = [-1, y.sizeFromShape(C.shape.slice(o))];
      return Mt({ inputs: { x: C }, backend: t6, attrs: { shape: k } });
    }), f = d.map((C) => ({ vals: t6.readSync(C.dataId), shape: C.shape }));
    s = S.computeOutShape(d.map((C) => C.shape), 1);
    let h = d[0].shape[0] === 1, g = Su(f, s, e[0].dtype, h), x = S.computeOutShape(a.map((C) => C.shape), o);
    i.shape = x;
    let b = t6.dataIdMap.get(i.dataId);
    return b.stringBytes = S.fromStringArrayToUint8(g), d.forEach((C) => t6.disposeData(C.dataId)), i;
  }
  let p = y.sizeFromShape(a[0].shape.slice(0, o)), u = 0, c = a.map((d) => {
    let f = y.sizeFromShape(d.shape.slice(o));
    return u += f, f;
  }), l = a.map((d) => t6.typedArrayFromHeap(d)), m = t6.typedArrayFromHeap(i);
  for (let d = 0; d < p; d++) {
    let f = d * u;
    for (let h = 0; h < l.length; h++) {
      let g = c[h], x = d * g, b = l[h].subarray(x, x + g);
      m.set(b, f), f += g;
    }
  }
  return i;
}
var LD = { kernelName: ys, backendName: "wasm", kernelFunc: zw };
var BD;
function d9(r) {
  BD = r.wasm.cwrap(Go, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function f9(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { x: n, filter: s } = e, a = o.dataIdMap.get(n.dataId).id, i = o.dataIdMap.get(s.dataId).id, { strides: p, dilations: u, pad: c, dimRoundingMode: l, dataFormat: m } = t6, d = S.convertConv2DDataFormat(m), f = S.computeConv2DInfo(n.shape, s.shape, p, u, c, l, false, d), h = f.filterHeight, g = f.filterWidth, x = f.padInfo.top, b = f.padInfo.right, C = f.padInfo.bottom, w = f.padInfo.left, k = f.dilationHeight, _ = f.dilationWidth, $ = f.strideHeight, A = f.strideWidth, R = f.inChannels, D = f.outChannels, P = f.padInfo.type === "SAME" ? 1 : 0;
  if (f.dataFormat !== "channelsLast")
    throw new Error(`wasm backend Conv2D does not support dataFormat:'${f.dataFormat}'. Please use 'channelsLast'.`);
  let M = o.makeOutput(f.outShape, "float32"), L = o.dataIdMap.get(M.dataId).id;
  return BD(a, n.shape[0], n.shape[1], n.shape[2], i, h, g, x, b, C, w, P, k, _, $, A, R, D, L), M;
}
var VD = { kernelName: Go, backendName: "wasm", setupFunc: d9, kernelFunc: f9 };
var zD;
function h9(r) {
  zD = r.wasm.cwrap(Ho, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function g9(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { dy: n, filter: s } = t6, { strides: a, pad: i, dataFormat: p, dimRoundingMode: u, inputShape: c } = o, l = 1, m = S.convertConv2DDataFormat(p), d = S.computeConv2DInfo(c, s.shape, a, l, i, u, false, m), { batchSize: f, filterHeight: h, filterWidth: g, inChannels: x, inHeight: b, inWidth: C, outChannels: w, outHeight: k, outWidth: _, strideHeight: $, strideWidth: A } = d, R = h - 1 - d.padInfo.top, D = g - 1 - d.padInfo.left, P = d.dataFormat === "channelsLast", M = y.computeStrides(d.inShape), L = y.computeStrides(n.shape), [W, V, U] = y.computeStrides(s.shape), q = M[0], H = P ? M[1] : M[2], j = P ? M[2] : 1, X = P ? 1 : M[1], Z = L[0], ee = P ? L[1] : L[2], Y = P ? L[2] : 1, J = P ? 1 : L[1], ie = e.makeOutput(d.inShape, "float32"), pe = e.dataIdMap.get(ie.dataId).id, he = e.dataIdMap.get(n.dataId).id, we = e.dataIdMap.get(s.dataId).id;
  return zD(he, we, f, h, g, b, C, x, k, _, w, $, A, R, D, W, V, U, q, H, j, X, Z, ee, Y, J, pe), ie;
}
var WD = { kernelName: Ho, backendName: "wasm", setupFunc: h9, kernelFunc: g9 };
var UD = Ve(qo);
var GD = Ve(Ko);
var Ww;
(function(r) {
  r[r.bilinear = 0] = "bilinear", r[r.nearest = 1] = "nearest";
})(Ww || (Ww = {}));
var HD;
function x9(r) {
  HD = r.wasm.cwrap(Yo, null, ["number", "number", "number", "number", "array", "number", "number", "number", "number", "number"]);
}
function y9(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { method: n, extrapolationValue: s, cropSize: a } = o, { image: i, boxes: p, boxInd: u } = t6, c = p.shape[0], [l, m] = a, d = [c, l, m, i.shape[3]], f = e.dataIdMap.get(i.dataId), h;
  i.dtype !== "float32" && (h = ls({ backend: e, inputs: { x: i }, attrs: { dtype: "float32" } }), f = e.dataIdMap.get(h.dataId));
  let g = f.id, x = e.dataIdMap.get(p.dataId).id, b = e.dataIdMap.get(u.dataId).id, C = e.makeOutput(d, "float32"), w = e.dataIdMap.get(C.dataId).id, k = new Uint8Array(new Int32Array(i.shape).buffer);
  return HD(g, x, b, c, k, l, m, Ww[n], s, w), h != null && e.disposeData(h.dataId), C;
}
var qD = { kernelName: Yo, backendName: "wasm", setupFunc: x9, kernelFunc: y9 };
var KD;
function b9(r) {
  KD = r.wasm.cwrap(jo, null, ["number", "number", "number", "number", "number", "number"]);
}
function C9(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, exclusive: a, reverse: i } = o, p = n.shape.length;
  y.assert(n.dtype === "float32" || n.dtype === "int32", () => `cumprod does not support ${n.dtype} tensors in the WASM backend`);
  let u = S.getAxesPermutation([s], p), c = n;
  u !== null && (c = uo({ inputs: { x: n }, attrs: { perm: u }, backend: t6 }));
  let l = S.getInnerMostAxes(1, p)[0];
  S.assertAxesAreInnerMostDims("cumprod", [l], p);
  let m = t6.makeOutput(c.shape, c.dtype), d = c.shape[l], f = t6.dataIdMap.get(c.dataId).id, h = t6.dataIdMap.get(m.dataId).id;
  KD(f, a ? 1 : 0, i ? 1 : 0, d, h, Fe[n.dtype]);
  let g = m;
  if (u !== null) {
    let x = S.getUndoAxesPermutation(u);
    g = uo({ inputs: { x: m }, attrs: { perm: x }, backend: t6 }), t6.disposeData(c.dataId), t6.disposeData(m.dataId);
  }
  return g;
}
var jD = { kernelName: jo, backendName: "wasm", setupFunc: b9, kernelFunc: C9 };
var XD;
function S9(r) {
  XD = r.wasm.cwrap(Xo, null, ["number", "number", "number", "number", "number", "number"]);
}
function w9(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, exclusive: a, reverse: i } = o, p = n.shape.length;
  y.assert(n.dtype === "float32" || n.dtype === "int32", () => `cumsum does not support ${n.dtype} tensors in the WASM backend`);
  let u = S.getAxesPermutation([s], p), c = n;
  u !== null && (c = uo({ inputs: { x: n }, attrs: { perm: u }, backend: t6 }));
  let l = S.getInnerMostAxes(1, p)[0];
  S.assertAxesAreInnerMostDims("cumsum", [l], p);
  let m = t6.makeOutput(c.shape, c.dtype), d = c.shape[l], f = t6.dataIdMap.get(c.dataId).id, h = t6.dataIdMap.get(m.dataId).id;
  XD(f, a ? 1 : 0, i ? 1 : 0, d, h, Fe[n.dtype]);
  let g = m;
  if (u !== null) {
    let x = S.getUndoAxesPermutation(u);
    g = uo({ inputs: { x: m }, attrs: { perm: x }, backend: t6 }), t6.disposeData(c.dataId), t6.disposeData(m.dataId);
  }
  return g;
}
var YD = { kernelName: Xo, backendName: "wasm", setupFunc: S9, kernelFunc: w9 };
var QD;
function I9(r) {
  QD = r.wasm.cwrap(Qo, null, ["number", "number", "number", "array", "number", "array", "array", "number", "number"]);
}
function v9(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { x: n } = t6, { blockSize: s, dataFormat: a } = o, i = n.shape[0], p = a === "NHWC" ? n.shape[1] : n.shape[2], u = a === "NHWC" ? n.shape[2] : n.shape[3], c = a === "NHWC" ? n.shape[3] : n.shape[1], l = p * s, m = u * s, d = c / (s * s), f = a === "NHWC" ? [i, l, m, d] : [i, d, l, m], h = e.makeOutput(f, "float32"), x = e.dataIdMap.get(n.dataId).id, b = new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer), C = new Uint8Array(new Int32Array(f).buffer), w = new Uint8Array(new Int32Array(y.computeStrides(f)).buffer), k = e.dataIdMap.get(h.dataId).id;
  return QD(x, s, a === "NHWC" ? 1 : 0, b, n.shape.length - 1, C, w, f.length, k), h;
}
var ZD = { kernelName: Qo, backendName: "wasm", setupFunc: I9, kernelFunc: v9 };
var JD;
function k9(r) {
  JD = r.wasm.cwrap(Zo, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function N9(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { x: n, filter: s } = e, a = o.dataIdMap.get(n.dataId).id, i = o.dataIdMap.get(s.dataId).id, { strides: p, dilations: u, pad: c, dimRoundingMode: l } = t6, m = u == null ? [1, 1] : u, d = S.computeConv2DInfo(n.shape, s.shape, p, m, c, l, true), f = d.filterHeight, h = d.filterWidth, g = d.padInfo.top, x = d.padInfo.right, b = d.padInfo.bottom, C = d.padInfo.left, w = d.dilationHeight, k = d.dilationWidth, _ = d.strideHeight, $ = d.strideWidth, A = d.inChannels, R = d.outChannels, D = d.padInfo.type === "SAME" ? 1 : 0;
  if (d.dataFormat !== "channelsLast")
    throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'${d.dataFormat}'. Please use 'channelsLast'.`);
  let P = o.makeOutput(d.outShape, "float32"), M = o.dataIdMap.get(P.dataId).id;
  return JD(a, n.shape[0], n.shape[1], n.shape[2], i, f, h, g, x, b, C, D, w, k, _, $, A, R, M), P;
}
var eO = { kernelName: Zo, backendName: "wasm", setupFunc: k9, kernelFunc: N9 };
var tO = Ve(en);
var T9 = false;
var rO = rt(tn, T9, "bool");
var oO = Ve(rn, "float32");
function yg(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { input: n } = e, { dim: s } = t6, a = n.shape.length, i = n.shape.slice(), p = s;
  return s < 0 && (y.assert(-(a + 1) <= s, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), p = a + s + 1), i.splice(p, 0, 1), Mt({ inputs: { x: n }, backend: o, attrs: { shape: i } });
}
var nO = { kernelName: bs, backendName: "wasm", kernelFunc: yg };
function Uw(r) {
  let { attrs: { shape: e, value: t6, dtype: o }, backend: n } = r, s = n.makeOutput(e, o);
  return n.typedArrayFromHeap(s).fill(t6), s;
}
var sO = { kernelName: Cs, backendName: "wasm", kernelFunc: Uw };
var aO;
function _9(r) {
  aO = r.wasm.cwrap(on, null, ["number", "number", "number", "number", "number", "number"]);
}
function E9(r) {
  let { inputs: e, backend: t6 } = r, { image: o } = e, n = t6.makeOutput(o.shape, o.dtype), s = t6.dataIdMap.get(o.dataId).id, a = t6.dataIdMap.get(n.dataId).id, [i, p, u, c] = o.shape;
  return aO(s, i, p, u, c, a), n;
}
var iO = { kernelName: on, backendName: "wasm", kernelFunc: E9, setupFunc: _9 };
var uO = Ve(nn);
var $9 = false;
var pO = rt(sn, $9);
var cO;
function A9(r) {
  cO = r.wasm.cwrap(an, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function R9(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { varianceEpsilon: n } = o, { x: s, mean: a, variance: i, offset: p, scale: u } = t6, c = e.dataIdMap.get(s.dataId).id, l = e.dataIdMap.get(a.dataId).id, m = e.dataIdMap.get(i.dataId).id, d = p != null ? e.dataIdMap.get(p.dataId).id : 0, f = u != null ? e.dataIdMap.get(u.dataId).id : 0, h = e.makeOutput(s.shape, s.dtype);
  if (y.sizeFromShape(s.shape) === 0)
    return h;
  let g = e.dataIdMap.get(h.dataId).id;
  return cO(c, l, m, d, f, n, g), h;
}
var lO = { kernelName: an, backendName: "wasm", setupFunc: A9, kernelFunc: R9 };
var mO;
function F9(r) {
  mO = r.wasm.cwrap(ho, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function D9(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = e, { strides: p, pad: u, dilations: c, dataFormat: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = t6, h = S.computeConv2DInfo(n.shape, s.shape, p, c, u, m), g = Wi[d];
  if (g == null)
    throw new Error(`${d} activation not yet supported for FusedConv2D in the wasm backend.`);
  let x = o.dataIdMap.get(n.dataId).id, b = o.dataIdMap.get(s.dataId).id, C = h.outChannels, w = 0;
  if (a != null) {
    let Y = o.dataIdMap.get(a.dataId);
    if (Y.shape.length !== 1)
      throw new Error(`FusedConv2D only supports rank-1 bias but got rank ${Y.shape.length}.`);
    if (Y.shape[0] !== C)
      throw new Error(`FusedConv2D bias shape (${Y.shape}) does not match the number of output channels (${C})`);
    w = Y.id;
  }
  let k = h.filterHeight, _ = h.filterWidth, $ = h.padInfo.top, A = h.padInfo.right, R = h.padInfo.bottom, D = h.padInfo.left, P = h.dilationHeight, M = h.dilationWidth, L = h.strideHeight, W = h.strideWidth, V = h.inChannels, U = h.padInfo.type === "SAME" ? 1 : 0, q = h.batchSize, H = h.inHeight, j = h.inWidth;
  if (l !== "NHWC")
    throw new Error(`wasm backend FusedConv2D does not support dataFormat:'${l}'. Please use 'NHWC'.`);
  let X = o.makeOutput(h.outShape, "float32"), Z = o.dataIdMap.get(X.dataId).id, ee = i == null ? 0 : o.dataIdMap.get(i.dataId).id;
  return mO(x, q, H, j, b, k, _, w, $, A, R, D, U, P, M, L, W, V, C, g, ee, f || 0, Z), X;
}
var dO = { kernelName: ho, backendName: "wasm", setupFunc: F9, kernelFunc: D9 };
var fO;
function O9(r) {
  fO = r.wasm.cwrap(go, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function P9(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = e, { strides: p, pad: u, dilations: c, dataFormat: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = t6, h = S.computeConv2DInfo(n.shape, s.shape, p, c, u, m, true), g = Wi[d];
  if (g == null)
    throw new Error(`${d} activation not yet supported for FusedDepthwiseConv2D in the wasm backend.`);
  let x = o.dataIdMap.get(n.dataId).id, b = o.dataIdMap.get(s.dataId).id, C = h.outChannels, w = 0;
  if (a != null) {
    let Y = o.dataIdMap.get(a.dataId);
    if (Y.shape.length !== 1)
      throw new Error(`FusedDepthwiseConv2D only supports rank-1 bias but got rank ${Y.shape.length}.`);
    if (Y.shape[0] !== C)
      throw new Error(`FusedDepthwiseConv2D bias shape (${Y.shape}) does not match the number of output channels (${C})`);
    w = Y.id;
  }
  let k = h.filterHeight, _ = h.filterWidth, $ = h.padInfo.top, A = h.padInfo.right, R = h.padInfo.bottom, D = h.padInfo.left, P = h.dilationHeight, M = h.dilationWidth, L = h.strideHeight, W = h.strideWidth, V = h.inChannels, U = h.padInfo.type === "SAME" ? 1 : 0, q = h.batchSize, H = h.inHeight, j = h.inWidth;
  if (l !== "NHWC")
    throw new Error(`wasm backend FusedDepthwiseConv2D does not support dataFormat:'${l}'. Please use 'NHWC'.`);
  let X = o.makeOutput(h.outShape, "float32"), Z = o.dataIdMap.get(X.dataId).id, ee = i == null ? 0 : o.dataIdMap.get(i.dataId).id;
  return fO(x, q, H, j, b, k, _, w, $, A, R, D, U, P, M, L, W, V, C, g, ee, f || 0, Z), X;
}
var hO = { kernelName: go, backendName: "wasm", setupFunc: O9, kernelFunc: P9 };
var gO;
function M9(r) {
  gO = r.wasm.cwrap(un, null, ["number", "number", "number", "number", "number", "number", "array", "number"]);
}
function L9(r) {
  let { backend: e, inputs: t6 } = r, { params: o, indices: n } = t6, [s, a, i, p] = Ym.prepareAndValidate(o, n), u = e.makeOutput(s, o.dtype);
  if (a === 0)
    return u;
  let c = n.shape, l = c[c.length - 1], d = e.dataIdMap.get(o.dataId).id, h = e.dataIdMap.get(n.dataId).id, g = new Uint8Array(new Int32Array(p).buffer), x = e.dataIdMap.get(u.dataId).id;
  return gO(d, Fe[o.dtype], h, a, l, i, g, x), u;
}
var xO = { kernelName: un, backendName: "wasm", setupFunc: M9, kernelFunc: L9 };
var yO;
function B9(r) {
  yO = r.wasm.cwrap("Gather", null, ["number", "number", "array", "number", "number", "number", "array", "number"]);
}
function V9(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { x: n, indices: s } = t6, { axis: a, batchDims: i } = o, p = y.parseAxisParam(a, n.shape)[0], u = e.readSync(s.dataId), c = n.shape[p];
  for (let R = 0; R < u.length; ++R) {
    let D = u[R];
    y.assert(D <= c - 1 && D >= 0, () => `GatherV2: the index value ${D} is not in [0, ${c - 1}]`);
  }
  let l = S.segment_util.collectGatherOpShapeInfo(n, s, p, i), m = Mt({ inputs: { x: n }, attrs: { shape: [l.batchSize, l.outerSize, l.dimSize, l.sliceSize] }, backend: e }), d = y.sizeFromShape(s.shape), f = Mt({ inputs: { x: s }, attrs: { shape: [l.batchSize, d / l.batchSize] }, backend: e }), h = [l.batchSize, l.outerSize, d / l.batchSize, l.sliceSize], g = e.makeOutput(h, n.dtype);
  if (y.sizeFromShape(n.shape) === 0)
    return g;
  let x = m.shape.length - 1, C = e.dataIdMap.get(m.dataId).id, k = e.dataIdMap.get(f.dataId).id, _ = e.dataIdMap.get(g.dataId).id, $ = new Uint8Array(new Int32Array(y.computeStrides(m.shape)).buffer), A = new Uint8Array(new Int32Array(y.computeStrides(h)).buffer);
  return yO(C, Fe[n.dtype], $, x, k, l.batchSize, A, _), e.disposeData(m.dataId), e.disposeData(f.dataId), g.shape = l.outputShape, g;
}
var bO = { kernelName: Ss, backendName: "wasm", setupFunc: B9, kernelFunc: V9 };
var z9 = false;
var CO = rt(pn, z9, "bool");
var W9 = false;
var SO = rt(cn, W9, "bool");
var wO = Ve(ln, "bool");
var IO;
function U9(r) {
  IO = r.wasm.cwrap(mn, null, ["number", "number", "number", "number"]);
}
function G9(r) {
  let { inputs: { x: e }, attrs: { alpha: t6 }, backend: o } = r, n = o.dataIdMap.get(e.dataId).id, s = o.makeOutput(e.shape, "float32");
  if (y.sizeFromShape(e.shape) !== 0) {
    let a = o.dataIdMap.get(s.dataId).id;
    IO(n, Fe[e.dtype], t6, a);
  }
  return s;
}
var vO = { kernelName: mn, backendName: "wasm", setupFunc: U9, kernelFunc: G9 };
var H9 = false;
var kO = rt(dn, H9, "bool");
var q9 = false;
var NO = rt(fn, q9, "bool");
var TO = Ve(hn);
var K9 = false;
var _O = rt(gn, K9, "bool");
var EO = Ve(xn);
var j9 = false;
var $O = rt(xa, j9, "bool");
var X9 = false;
var AO = rt(GI, X9, "bool");
var RO;
function Y9(r) {
  RO = r.wasm.cwrap(yn, null, ["number", "number", "number", "number"]);
}
function Q9(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { reductionIndices: n, keepDims: s } = o, { x: a } = t6, p = e.dataIdMap.get(a.dataId).id, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = kr(a, n, e);
  if (d) {
    let C = e.dataIdMap.get(c.dataId).id;
    u = c, p = C;
  }
  let f = u.shape.length;
  S.assertAxesAreInnerMostDims("max", l, f);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, l), x = y.sizeFromShape(g), b = e.makeOutput(h, a.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = e.dataIdMap.get(b.dataId).id;
    RO(p, Fe[a.dtype], x, C);
  }
  if (d && e.disposeData(c.dataId), s) {
    let C = S.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var FO = { kernelName: yn, backendName: "wasm", setupFunc: Y9, kernelFunc: Q9 };
var Z9 = false;
var DO = rt(bn, Z9);
var OO;
function J9(r) {
  OO = r.wasm.cwrap(Cn, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function eJ(r) {
  let { inputs: e, attrs: t6, backend: o } = r, n = e.x, s = o.dataIdMap.get(n.dataId).id;
  y.assert(n.dtype === "float32", () => `Error in MaxPool: only float32 input is supported. Got ${n.dtype}.`);
  let { filterSize: a, strides: i, pad: p, dimRoundingMode: u } = t6, c = S.computePool2DInfo(n.shape, a, i, 1, p, u), l = c.filterHeight, m = c.filterWidth, d = c.padInfo.top, f = c.padInfo.right, h = c.padInfo.bottom, g = c.padInfo.left, x = c.dilationHeight, b = c.dilationWidth, C = c.strideHeight, w = c.strideWidth, k = c.inChannels, _ = c.outChannels;
  if (c.dataFormat !== "channelsLast")
    throw new Error(`wasm backend does not support dataFormat:'${c.dataFormat}'. Please use 'channelsLast'.`);
  let $ = o.makeOutput(c.outShape, "float32"), A = o.dataIdMap.get($.dataId).id;
  return OO(s, n.shape[0], n.shape[1], n.shape[2], l, m, d, f, h, g, x, b, C, w, k, _, A), $;
}
var PO = { kernelName: Cn, backendName: "wasm", setupFunc: J9, kernelFunc: eJ };
var MO;
function tJ(r) {
  MO = r.wasm.cwrap(Sn, null, ["number, number, number"]);
}
function rJ(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = t6, i = e.dataIdMap.get(a.dataId).id, p = i, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = kr(a, n, e), f = l;
  if (d) {
    let w = e.dataIdMap.get(c.dataId).id;
    w !== i && (u = c, p = w, f = S.getInnerMostAxes(f.length, u.shape.length));
  }
  S.assertAxesAreInnerMostDims("mean", f, u.shape.length);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, f), x = y.sizeFromShape(g), b = u;
  u.dtype !== "float32" && (b = ls({ backend: e, inputs: { x: u }, attrs: { dtype: "float32" } }), p = e.dataIdMap.get(b.dataId).id);
  let C = e.makeOutput(h, "float32");
  if (y.sizeFromShape(u.shape) !== 0) {
    let w = e.dataIdMap.get(C.dataId).id;
    MO(p, x, w);
  }
  if (d && e.disposeData(c.dataId), s) {
    let w = S.expandShapeToKeepDim(C.shape, m);
    C.shape = w;
  }
  return u.dtype !== "float32" && e.disposeData(b.dataId), C;
}
var LO = { kernelName: Sn, backendName: "wasm", setupFunc: tJ, kernelFunc: rJ };
var BO;
function oJ(r) {
  BO = r.wasm.cwrap(wn, null, ["number", "number", "number", "number"]);
}
function nJ(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = t6, i = e.dataIdMap.get(a.dataId).id, p = i, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = kr(a, n, e);
  if (d) {
    let C = e.dataIdMap.get(c.dataId).id;
    C !== i && (u = c, p = C);
  }
  let f = u.shape.length;
  S.assertAxesAreInnerMostDims("min", l, f);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, l), x = y.sizeFromShape(g), b = e.makeOutput(h, u.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = e.dataIdMap.get(b.dataId).id;
    BO(p, Fe[a.dtype], x, C);
  }
  if (d && e.disposeData(c.dataId), s) {
    let C = S.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var VO = { kernelName: wn, backendName: "wasm", setupFunc: oJ, kernelFunc: nJ };
var sJ = false;
var zO = rt(In, sJ);
var Gw;
(function(r) {
  r[r.reflect = 0] = "reflect", r[r.symmetric = 1] = "symmetric";
})(Gw || (Gw = {}));
var WO;
function aJ(r) {
  WO = r.wasm.cwrap(vn, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function iJ(r) {
  let { inputs: { x: e }, backend: t6, attrs: { paddings: o, mode: n } } = r, s = o.map((f, h) => f[0] + e.shape[h] + f[1]), a = t6.dataIdMap.get(e.dataId).id, i = t6.makeOutput(s, e.dtype), p = t6.dataIdMap.get(i.dataId).id, u = new Uint8Array(new Int32Array(e.shape).buffer), c = o.map((f) => f[0]), l = o.map((f) => f[1]), m = new Uint8Array(new Int32Array(c).buffer), d = new Uint8Array(new Int32Array(l).buffer);
  return WO(a, u, e.shape.length, Fe[e.dtype], m, d, Gw[n], p), i;
}
var UO = { kernelName: vn, backendName: "wasm", kernelFunc: iJ, setupFunc: aJ };
var uJ = true;
var GO = rt(kn, uJ);
var HO = Ve(ws);
function Sc(r, e) {
  let t6 = new Int32Array(r.wasm.HEAPU8.buffer, e, 4), o = t6[0], n = t6[1], s = t6[2], a = t6[3];
  return r.wasm._free(e), { pSelectedIndices: o, selectedSize: n, pSelectedScores: s, pValidOutputs: a };
}
var qO;
function pJ(r) {
  qO = r.wasm.cwrap(Tn, "number", ["number", "number", "number", "number", "number"]);
}
function cJ(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { iouThreshold: n, maxOutputSize: s, scoreThreshold: a } = o, { boxes: i, scores: p } = t6, u = e.dataIdMap.get(i.dataId).id, c = e.dataIdMap.get(p.dataId).id, l = qO(u, c, s, n, a), { pSelectedIndices: m, selectedSize: d, pSelectedScores: f, pValidOutputs: h } = Sc(e, l);
  return e.wasm._free(f), e.wasm._free(h), e.makeOutput([d], "int32", m);
}
var KO = { kernelName: Tn, backendName: "wasm", setupFunc: pJ, kernelFunc: cJ };
var jO;
function lJ(r) {
  jO = r.wasm.cwrap(ba, "number", ["number", "number", "number", "number", "number", "bool"]);
}
function mJ(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { iouThreshold: n, maxOutputSize: s, scoreThreshold: a, padToMaxOutputSize: i } = o, { boxes: p, scores: u } = t6, c = e.dataIdMap.get(p.dataId).id, l = e.dataIdMap.get(u.dataId).id, m = jO(c, l, s, n, a, i), { pSelectedIndices: d, selectedSize: f, pSelectedScores: h, pValidOutputs: g } = Sc(e, m);
  e.wasm._free(h);
  let x = e.makeOutput([f], "int32", d), b = e.makeOutput([], "int32", g);
  return [x, b];
}
var XO = { kernelName: ba, backendName: "wasm", setupFunc: lJ, kernelFunc: mJ };
var YO;
function dJ(r) {
  YO = r.wasm.cwrap(_n, "number", ["number", "number", "number", "number", "number", "number"]);
}
function fJ(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { iouThreshold: n, maxOutputSize: s, scoreThreshold: a, softNmsSigma: i } = o, { boxes: p, scores: u } = t6, c = e.dataIdMap.get(p.dataId).id, l = e.dataIdMap.get(u.dataId).id, m = YO(c, l, s, n, a, i), { pSelectedIndices: d, selectedSize: f, pSelectedScores: h, pValidOutputs: g } = Sc(e, m);
  e.wasm._free(g);
  let x = e.makeOutput([f], "int32", d), b = e.makeOutput([f], "float32", h);
  return [x, b];
}
var QO = { kernelName: _n, backendName: "wasm", setupFunc: dJ, kernelFunc: fJ };
var hJ = false;
var ZO = rt(Nn, hJ, "bool");
var JO;
function gJ(r) {
  JO = r.wasm.cwrap(En, null, ["number", "number", "number", "number", "number"]);
}
function xJ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { indices: n } = e, { dtype: s, depth: a, onValue: i, offValue: p } = o, u = t6.makeOutput([...n.shape, a], s), c = t6.dataIdMap.get(u.dataId).id, m = t6.dataIdMap.get(n.dataId).id;
  return JO(m, a, i, p, c), u;
}
var eP = { kernelName: En, backendName: "wasm", setupFunc: gJ, kernelFunc: xJ };
function yJ(r) {
  let { inputs: { x: e }, backend: t6 } = r, o = t6.makeOutput(e.shape, e.dtype);
  return t6.typedArrayFromHeap(o).fill(1), o;
}
var tP = { kernelName: Is, backendName: "wasm", kernelFunc: yJ };
function bJ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { axis: n } = o;
  if (e.length === 1)
    return yg({ inputs: { input: e[0] }, backend: t6, attrs: { dim: n } });
  let s = e[0].shape, a = e[0].dtype;
  e.forEach((c) => {
    y.assertShapesMatch(s, c.shape, "All tensors passed to stack must have matching shapes"), y.assert(a === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let i = [], p = e.map((c) => {
    let l = yg({ inputs: { input: c }, backend: t6, attrs: { dim: n } });
    return i.push(l), l;
  }), u = zw({ inputs: p, backend: t6, attrs: { axis: n } });
  return i.forEach((c) => t6.disposeData(c.dataId)), u;
}
var rP = { kernelName: vs, backendName: "wasm", kernelFunc: bJ };
var oP;
function CJ(r) {
  oP = r.wasm.cwrap($n, null, ["number", "array", "number", "number", "array", "array", "number", "number"]);
}
function SJ(r) {
  let { inputs: { x: e }, backend: t6, attrs: { paddings: o, constantValue: n } } = r, s = o.map((h, g) => h[0] + e.shape[g] + h[1]);
  if (y.sizeFromShape(e.shape) === 0)
    return Uw({ backend: t6, attrs: { shape: s, value: n, dtype: e.dtype } });
  let a = t6.dataIdMap.get(e.dataId).id, i = t6.makeOutput(s, e.dtype), u = t6.dataIdMap.get(i.dataId).id, c = new Uint8Array(new Int32Array(e.shape).buffer), l = o.map((h) => h[0]), m = o.map((h) => h[1]), d = new Uint8Array(new Int32Array(l).buffer), f = new Uint8Array(new Int32Array(m).buffer);
  return oP(a, c, e.shape.length, Fe[e.dtype], d, f, n, u), i;
}
var bg = { kernelName: $n, backendName: "wasm", kernelFunc: SJ, setupFunc: CJ };
var wJ = false;
var nP = rt(An, wJ);
var sP;
function IJ(r) {
  sP = r.wasm.cwrap(Rn, null, ["number", "number", "number"]);
}
function vJ(r) {
  let { inputs: e, backend: t6 } = r, { x: o, alpha: n } = e, s = t6.dataIdMap.get(o.dataId).id, a = t6.dataIdMap.get(n.dataId).id, i = s, p = o, u = p;
  p.dtype !== "float32" && (u = ls({ backend: t6, inputs: { x: o }, attrs: { dtype: "float32" } }), i = t6.dataIdMap.get(u.dataId).id);
  let c = t6.makeOutput(o.shape, "float32"), l = t6.dataIdMap.get(c.dataId).id;
  return sP(i, a, l), p.dtype !== "float32" && t6.disposeData(u.dataId), c;
}
var aP = { kernelName: Rn, backendName: "wasm", setupFunc: IJ, kernelFunc: vJ };
var iP;
function kJ(r) {
  iP = r.wasm.cwrap(Fn, null, ["number", "number", "number", "number"]);
}
function NJ(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = t6, i = e.dataIdMap.get(a.dataId).id, p = i, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = kr(a, n, e), f = l;
  if (d) {
    let C = e.dataIdMap.get(c.dataId).id;
    C !== i && (u = c, p = C, f = S.getInnerMostAxes(f.length, u.shape.length));
  }
  S.assertAxesAreInnerMostDims("prod", f, u.shape.length);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, f), x = y.sizeFromShape(g), b = e.makeOutput(h, u.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = e.dataIdMap.get(b.dataId).id;
    iP(p, x, Fe[b.dtype], C);
  }
  if (d && e.disposeData(c.dataId), s) {
    let C = S.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var uP = { kernelName: Fn, backendName: "wasm", setupFunc: kJ, kernelFunc: NJ };
var TJ = (r) => {
  let { backend: e, attrs: t6 } = r, { start: o, stop: n, step: s, dtype: a } = t6, i = Iu(o, n, s, a), p = e.makeOutput([i.length], a);
  return e.typedArrayFromHeap(p).set(i), p;
};
var pP = { kernelName: ks, backendName: "wasm", kernelFunc: TJ };
var _J = true;
var cP = rt(Jo, _J);
var lP = Ve(Dn);
var mP = Ve(On);
var dP = Ve(Ln);
var fP;
function EJ(r) {
  fP = r.wasm.cwrap(Mn, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function $J(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { images: n } = t6, { alignCorners: s, halfPixelCenters: a, size: i } = o, [p, u] = i, [c, l, m, d] = n.shape, f = [c, p, u, d], h = e.dataIdMap.get(n.dataId), g;
  h.dtype !== "float32" && (g = ls({ backend: e, inputs: { x: n }, attrs: { dtype: "float32" } }), h = e.dataIdMap.get(g.dataId));
  let x = h.id, b = e.makeOutput(f, "float32");
  if (y.sizeFromShape(n.shape) === 0)
    return b;
  let C = e.dataIdMap.get(b.dataId).id;
  return fP(x, c, l, m, d, p, u, s ? 1 : 0, a ? 1 : 0, C), g != null && e.disposeData(g.dataId), b;
}
var hP = { kernelName: Mn, backendName: "wasm", setupFunc: EJ, kernelFunc: $J };
var gP;
function AJ(r) {
  gP = r.wasm.cwrap(Pn, null, ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function RJ(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { images: n } = t6, { alignCorners: s, halfPixelCenters: a, size: i } = o, [p, u] = i, [c, l, m, d] = n.shape, f = [c, p, u, d], h = e.makeOutput(f, "float32");
  if (y.sizeFromShape(n.shape) === 0)
    return h;
  let g = e.dataIdMap.get(n.dataId), x;
  g.dtype !== "float32" && (x = ls({ backend: e, inputs: { x: n }, attrs: { dtype: "float32" } }), g = e.dataIdMap.get(x.dataId));
  let b = g.id, C = e.dataIdMap.get(h.dataId).id;
  return gP(b, c, l, m, d, p, u, s ? 1 : 0, a ? 1 : 0, C), x != null && e.disposeData(x.dataId), h;
}
var xP = { kernelName: Pn, backendName: "wasm", setupFunc: AJ, kernelFunc: RJ };
var yP;
function FJ(r) {
  yP = r.wasm.cwrap(Bn, null, ["number", "array", "number", "array", "number", "number"]);
}
function DJ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { dims: s } = o, a = y.parseAxisParam(s, n.shape);
  if (n.shape.length === 0)
    return Vu({ inputs: { x: n }, backend: t6 });
  let i = t6.makeOutput(n.shape, n.dtype), p = t6.dataIdMap.get(n.dataId).id, u = t6.dataIdMap.get(i.dataId).id, c = new Uint8Array(new Int32Array(a).buffer), l = new Uint8Array(new Int32Array(n.shape).buffer);
  yP(p, c, a.length, l, n.shape.length, u);
  let m = Mt({ inputs: { x: i }, attrs: { shape: n.shape }, backend: t6 });
  return t6.disposeData(i.dataId), m;
}
var bP = { kernelName: Bn, backendName: "wasm", kernelFunc: DJ, setupFunc: FJ };
var CP;
function OJ(r) {
  CP = r.wasm.cwrap(es, null, ["number", "number", "number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function PJ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { image: n } = e, { radians: s, fillValue: a, center: i } = o, p = t6.makeOutput(n.shape, n.dtype), u = t6.dataIdMap.get(n.dataId).id, c = t6.dataIdMap.get(p.dataId).id, [l, m, d, f] = n.shape, [h, g] = S.getImageCenter(i, m, d), x = a === 0, b = 255, C = typeof a == "number" ? [a, a, a, x ? 0 : b] : [...a, b], w = new Uint8Array(new Int32Array(C).buffer);
  return CP(u, l, m, d, f, s, h, g, w, C.length, c), p;
}
var SP = { kernelName: es, backendName: "wasm", kernelFunc: PJ, setupFunc: OJ };
var wP = Ve(Ca);
var IP = Ve(Vn);
var vP;
function MJ(r) {
  vP = r.wasm.cwrap(zn, null, ["number", "number", "number", "number", "number", "number", "array", "number", "number"]);
}
function LJ(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { indices: n, updates: s } = t6, { shape: a } = o, i = e.makeOutput(a, s.dtype);
  if (y.sizeFromShape(a) === 0)
    return i;
  let { sliceRank: p, numUpdates: u, sliceSize: c, strides: l, outputSize: m } = rl.calculateShapes(s, n, a), f = e.dataIdMap.get(n.dataId).id, g = e.dataIdMap.get(s.dataId).id, x = new Uint8Array(new Int32Array(l).buffer), b = e.dataIdMap.get(i.dataId).id;
  return vP(f, g, Fe[s.dtype], p, u, c, x, m, b), i;
}
var kP = { kernelName: zn, backendName: "wasm", setupFunc: MJ, kernelFunc: LJ };
var NP;
function BJ(r) {
  NP = r.wasm.cwrap("SelectV2", null, ["number", "number", "number", "number", "number"]);
}
function VJ(r) {
  let { inputs: e, backend: t6 } = r, { condition: o, t: n, e: s } = e, a = t6.dataIdMap.get(o.dataId).id, i = t6.dataIdMap.get(n.dataId).id, p = t6.dataIdMap.get(s.dataId).id, u = t6.makeOutput(n.shape, n.dtype), c = t6.dataIdMap.get(u.dataId).id, l = o.shape.length, m = n.shape.length, d = l === 0 || l > 1 || m === 1 ? 1 : y.sizeFromShape(n.shape.slice(1));
  return NP(a, i, p, d, c), u;
}
var TP = { kernelName: Ts, backendName: "wasm", kernelFunc: VJ, setupFunc: BJ };
var _P;
function zJ(r) {
  _P = r.wasm.cwrap(Un, null, ["number", "number"]);
}
function WJ(r) {
  let { backend: e, inputs: { x: t6 } } = r, o = e.dataIdMap.get(t6.dataId).id, n = e.makeOutput(t6.shape, t6.dtype), s = e.dataIdMap.get(n.dataId).id;
  return y.sizeFromShape(n.shape) === 0 || _P(o, s), n;
}
var EP = { kernelName: "Sigmoid", backendName: "wasm", setupFunc: zJ, kernelFunc: WJ };
var $P = Ve(Wn);
var AP;
function UJ(r) {
  AP = r.wasm.cwrap(qn, null, ["number", "number", "number", "number"]);
}
function GJ(r) {
  let { backend: e, inputs: { logits: t6 }, attrs: { dim: o } } = r, n = e.dataIdMap.get(t6.dataId).id, s = e.makeOutput(t6.shape, t6.dtype), a = e.dataIdMap.get(s.dataId).id, i = t6.shape[o], p = y.sizeFromShape(t6.shape) / i;
  return y.sizeFromShape(s.shape) === 0 || AP(n, a, i, p), s;
}
var RP = { kernelName: qn, backendName: "wasm", setupFunc: UJ, kernelFunc: GJ };
function HJ(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { blockShape: s, paddings: a } = o, i = y.sizeFromShape(s), p = [[0, 0]];
  p.push(...a);
  for (let _ = 1 + s.length; _ < n.shape.length; ++_)
    p.push([0, 0]);
  let u = bg.kernelFunc({ inputs: { x: n }, backend: t6, attrs: { paddings: p, constantValue: 0 } }), c = S.getReshaped(u.shape, s, i, false), l = S.getPermuted(c.length, s.length, false), m = S.getReshapedPermuted(u.shape, s, i, false), h = Mt({ inputs: { x: u }, backend: t6, attrs: { shape: c } }), b = uo({ inputs: { x: h }, backend: t6, attrs: { perm: l } }), k = Mt({ inputs: { x: b }, backend: t6, attrs: { shape: m } });
  return t6.disposeData(u.dataId), t6.disposeData(h.dataId), t6.disposeData(b.dataId), k;
}
var FP = { kernelName: Es, backendName: "wasm", kernelFunc: HJ };
var DP;
function qJ(r) {
  DP = r.wasm.cwrap("SparseFillEmptyRows", "number", ["number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function KJ(r) {
  let { backend: e, inputs: t6 } = r, { indices: o, values: n, denseShape: s, defaultValue: a } = t6, i = o.shape[0], p = o.shape[1], u = e.readSync(s.dataId)[0], c = [i + u, p], l = e.dataIdMap.get(o.dataId).id, m = e.dataIdMap.get(n.dataId).id, d = e.dataIdMap.get(a.dataId).id, f = e.makeOutput(c, o.dtype), h = e.dataIdMap.get(f.dataId).id, g = e.makeOutput(c.slice(0, 1), n.dtype), x = e.dataIdMap.get(g.dataId).id, b = e.makeOutput([u], "bool"), C = e.dataIdMap.get(b.dataId).id, w = e.makeOutput([i], o.dtype), k = e.dataIdMap.get(w.dataId).id, _ = e.makeOutput([4], "int32"), $ = e.dataIdMap.get(_.dataId).id, A = DP(l, m, Fe[n.dtype], i, u, p, d, h, x, C, k, $), R = e.readSync(_.dataId), D;
  switch (R[0]) {
    case 1: {
      D = S.getSparseFillEmptyRowsIndicesDenseShapeMismatch(R[1]);
      break;
    }
    case 2: {
      D = S.getSparseFillEmptyRowsNegativeIndexErrorMessage(R[1], R[2]);
      break;
    }
    case 3:
      D = S.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(R[1], R[2], R[3]);
      break;
    default:
      D = "";
  }
  if (e.disposeData(_.dataId), D)
    throw e.disposeData(f.dataId), e.disposeData(g.dataId), e.disposeData(b.dataId), e.disposeData(w.dataId), new Error(D);
  let P = f, M = g;
  return A !== c[0] && (P = Eo({ inputs: { x: f }, attrs: { begin: 0, size: [A, p] }, backend: e }), M = Eo({ inputs: { x: g }, attrs: { begin: 0, size: A }, backend: e }), e.disposeData(f.dataId), e.disposeData(g.dataId)), [P, M, b, w];
}
var OP = { kernelName: ui, backendName: "wasm", setupFunc: qJ, kernelFunc: KJ };
var PP;
function jJ(r) {
  PP = r.wasm.cwrap(wa, null, ["number", "number", "number", "number", "number", "number", "number"]);
}
function XJ(r) {
  let { backend: e, inputs: t6 } = r, { inputIndices: o, inputShape: n, newShape: s } = t6;
  if (o.shape.length !== 2)
    throw new Error(`Input indices should be a matrix but received shape
        ${o.shape}`);
  if (n.shape.length !== 1)
    throw new Error(`Input shape should be a vector but received shape
        ${n.shape}`);
  if (s.shape.length !== 1)
    throw new Error(`Target shape should be a vector but received shape ${s.shape}`);
  let a = e.dataIdMap.get(o.dataId).id, i = e.dataIdMap.get(n.dataId).id, p = e.dataIdMap.get(s.dataId).id, u = o.shape[0], c = y.sizeFromShape(s.shape), l = e.makeOutput([u, c], o.dtype), m = e.dataIdMap.get(l.dataId).id, d = e.makeOutput([c], s.dtype), f = e.dataIdMap.get(d.dataId).id, h = e.makeOutput([3], "int32"), g = e.dataIdMap.get(h.dataId).id;
  PP(a, i, p, u, m, f, g);
  let x = e.readSync(h.dataId), b;
  switch (x[0]) {
    case 0: {
      b = S.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(x[1], x[2]);
      break;
    }
    case 1: {
      b = S.getSparseReshapeNegativeOutputDimErrorMessage(x[1], x[2]);
      break;
    }
    case 2:
      b = S.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage();
      break;
    case 3: {
      let C = Array.from(e.readSync(n.dataId)), w = Array.from(e.readSync(d.dataId));
      b = S.getSparseReshapeInputOutputMultipleErrorMessage(C, w);
      break;
    }
    case 4: {
      let C = Array.from(e.readSync(n.dataId)), w = Array.from(e.readSync(d.dataId));
      b = S.getSparseReshapeInputOutputMismatchErrorMessage(C, w);
      break;
    }
    default:
      b = "";
  }
  if (e.disposeData(h.dataId), b)
    throw e.disposeData(l.dataId), e.disposeData(d.dataId), new Error(b);
  return [l, d];
}
var MP = { kernelName: wa, backendName: "wasm", setupFunc: jJ, kernelFunc: XJ };
var LP;
function Cg(r) {
  LP = r.wasm.cwrap("SparseSegmentReduction", null, ["number", "number", "number", "number", "number", "number", "number", "number", "number"]);
}
function Sg(r, e) {
  let { backend: t6, inputs: o } = r, { data: n, indices: s, segmentIds: a } = o, i = s.shape[0], p = t6.readSync(a.dataId, i - 1, i)[0], c = i > 0 ? p + 1 : 0;
  if (c < 0)
    throw new Error(S.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());
  let l = n.shape.slice();
  l[0] = c;
  let m = t6.dataIdMap.get(n.dataId).id, d = t6.dataIdMap.get(s.dataId).id, f = t6.dataIdMap.get(a.dataId).id, h = t6.makeOutput(l, n.dtype), g = t6.dataIdMap.get(h.dataId).id, x = t6.makeOutput([4], "int32"), b = t6.dataIdMap.get(x.dataId).id;
  LP(m, Fe[n.dtype], n.shape[0], d, f, g, b, e, 0);
  let C = t6.readSync(x.dataId), w;
  switch (C[0]) {
    case 0: {
      w = S.getSparseSegmentReductionNegativeSegmentIdsErrorMessage();
      break;
    }
    case 1: {
      w = S.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage();
      break;
    }
    case 2:
      w = S.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(C[1], C[2]);
      break;
    case 3:
      w = S.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(C[1], C[2], C[3]);
      break;
    default:
      w = "";
  }
  if (t6.disposeData(x.dataId), w)
    throw t6.disposeData(h.dataId), new Error(w);
  return h;
}
function YJ(r) {
  return Sg(r, true);
}
var BP = { kernelName: pi, backendName: "wasm", setupFunc: Cg, kernelFunc: YJ };
function QJ(r) {
  return Sg(r, false);
}
var VP = { kernelName: ci, backendName: "wasm", setupFunc: Cg, kernelFunc: QJ };
function ZJ(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { x: n } = e, { numOrSizeSplits: s, axis: a } = t6, i = y.parseAxisParam(a, n.shape)[0], p = S.prepareSplitSize(n, s, i), u = new Array(n.shape.length).fill(0), c = n.shape.slice();
  return p.map((l) => {
    let m = [...c];
    m[i] = l;
    let d = Eo({ inputs: { x: n }, attrs: { begin: u, size: m }, backend: o });
    return u[i] += l, d;
  });
}
var zP = { kernelName: $s, backendName: "wasm", kernelFunc: ZJ };
var WP = Ve(Gn);
var UP = Ve(mi);
var JJ = true;
var GP = rt(Kn, JJ);
var HP;
function eee(r) {
  HP = r.wasm.cwrap(Ds, null, ["number", "number", "number", "number"]);
}
function tee(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { alpha: n } = o, { x: s } = t6, a = e.dataIdMap.get(s.dataId).id, i = e.makeOutput(s.shape, s.dtype), p = e.dataIdMap.get(i.dataId).id;
  return HP(a, n, Fe[s.dtype], p), i;
}
var qP = { kernelName: Ds, backendName: "wasm", setupFunc: eee, kernelFunc: tee };
var KP;
function ree(r) {
  KP = r.wasm.cwrap(jn, null, ["number", "array", "number", "array", "array", "array", "array", "array", "number", "number"]);
}
function oee(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { x: n } = t6, { begin: s, end: a, strides: i, beginMask: p, endMask: u, ellipsisMask: c, newAxisMask: l, shrinkAxisMask: m } = o, { finalShapeSparse: d, finalShape: f, isIdentity: h, sliceDim0: g, isSimpleSlice: x, begin: b, end: C, strides: w } = ut.sliceInfo(n.shape, s, a, i, p, u, c, l, m), k;
  if (h)
    k = Mt({ inputs: { x: n }, backend: e, attrs: { shape: f } });
  else if (g || x) {
    y.assert(n.shape.length >= 1, () => `Input must have rank at least 1, got: ${n.shape.length}`);
    let _ = ut.computeOutShape(b, C, w), $ = Eo({ inputs: { x: n }, backend: e, attrs: { begin: b, size: _ } });
    k = Mt({ inputs: { x: $ }, backend: e, attrs: { shape: f } }), e.disposeData($.dataId);
  } else {
    let _ = e.makeOutput(d, "float32"), $ = e.dataIdMap.get(n.dataId).id, A = new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer), R = new Uint8Array(new Int32Array(b).buffer), D = new Uint8Array(new Int32Array(C).buffer), P = new Uint8Array(new Int32Array(w).buffer), M = new Uint8Array(new Int32Array(d).buffer), L = new Uint8Array(new Int32Array(y.computeStrides(d)).buffer), W = e.dataIdMap.get(_.dataId).id;
    KP($, A, n.shape.length, R, D, P, M, L, d.length, W), k = Mt({ inputs: { x: _ }, backend: e, attrs: { shape: f } }), e.disposeData(_.dataId);
  }
  return k;
}
var jP = { kernelName: jn, backendName: "wasm", setupFunc: ree, kernelFunc: oee };
function nee(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { data: n, dataSplits: s } = t6, { separator: a, nGramWidths: i, leftPad: p, rightPad: u, padWidth: c, preserveShortSequences: l } = o, m = e.readSync(n.dataId), d = e.readSync(s.dataId), [f, h] = ku(m, d, a, i, p, u, c, l), g = e.makeOutput([f.length], "string"), x = e.dataIdMap.get(g.dataId);
  x.stringBytes = f;
  let b = e.makeOutput(s.shape, "int32");
  return e.typedArrayFromHeap(b).set(h), [g, b];
}
var XP = { kernelName: As, backendName: "wasm", kernelFunc: nee };
function see(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { input: n, delimiter: s } = t6, { skipEmpty: a } = o, i = e.readSync(n.dataId), p = e.readSync(s.dataId), [u, c, l] = Nu(i, p[0], a), m = c.length, d = e.makeOutput([m, 2], "int32");
  e.typedArrayFromHeap(d).set(u);
  let h = e.makeOutput([m], "string"), g = e.dataIdMap.get(h.dataId);
  g.stringBytes = c;
  let x = e.makeOutput([2], "int32");
  return e.typedArrayFromHeap(x).set(l), [d, h, x];
}
var YP = { kernelName: di, backendName: "wasm", kernelFunc: see };
function aee(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { input: n } = t6, { numBuckets: s } = o, a = e.readSync(n.dataId), i = Tu(a, s), p = e.makeOutput(n.shape, "int32");
  return e.typedArrayFromHeap(p).set(i), p;
}
var QP = { kernelName: fi, backendName: "wasm", kernelFunc: aee };
var iee = true;
var ZP = rt(Xn, iee);
var JP;
function uee(r) {
  JP = r.wasm.cwrap(Hn, null, ["number", "number", "number", "number"]);
}
function pee(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { axis: n, keepDims: s } = o, { x: a } = t6, i = e.dataIdMap.get(a.dataId).id, p = i, u = a, { transposed: c, axes: l, originalAxes: m, inputWasTransposed: d } = kr(a, n, e), f = l;
  if (d) {
    let C = e.dataIdMap.get(c.dataId).id;
    C !== i && (u = c, p = C, f = S.getInnerMostAxes(f.length, u.shape.length));
  }
  S.assertAxesAreInnerMostDims("sum", f, u.shape.length);
  let [h, g] = S.computeOutAndReduceShapes(u.shape, f), x = y.sizeFromShape(g), b = e.makeOutput(h, u.dtype);
  if (y.sizeFromShape(u.shape) !== 0) {
    let C = e.dataIdMap.get(b.dataId).id;
    JP(p, x, Fe[b.dtype], C);
  }
  if (d && e.disposeData(c.dataId), s) {
    let C = S.expandShapeToKeepDim(b.shape, m);
    b.shape = C;
  }
  return b;
}
var e3 = { kernelName: Hn, backendName: "wasm", setupFunc: uee, kernelFunc: pee };
var t3 = Ve(Yn);
var r3 = Ve(Qn);
var o3;
function cee(r) {
  o3 = r.wasm.cwrap(to, null, ["number", "array", "number", "array", "number", "number"]);
}
function lee(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, s = t6.dataIdMap.get(n.dataId).id, { reps: a } = o, i = new Array(n.shape.length);
  for (let m = 0; m < i.length; m++)
    i[m] = n.shape[m] * a[m];
  let p = new Uint8Array(new Int32Array(n.shape).buffer), u = new Uint8Array(new Int32Array(i).buffer), c = t6.makeOutput(i, n.dtype), l = t6.dataIdMap.get(c.dataId).id;
  return o3(s, p, n.shape.length, u, i.length, Fe[c.dtype], l), c;
}
var n3 = { kernelName: to, backendName: "wasm", setupFunc: cee, kernelFunc: lee };
var s3;
function mee(r) {
  s3 = r.wasm.cwrap(Zn, null, ["number", "array", "number", "number", "number", "bool", "number", "number"]);
}
var dee = ({ inputs: r, backend: e, attrs: t6 }) => {
  let { x: o } = r, { k: n, sorted: s } = t6, a = e.dataIdMap.get(o.dataId).id, i = new Uint8Array(new Int32Array(o.shape).buffer), p = o.shape.slice();
  p[p.length - 1] = n;
  let u = e.makeOutput(p, o.dtype), c = e.dataIdMap.get(u.dataId).id, l = e.makeOutput(p, "int32"), m = e.dataIdMap.get(l.dataId).id;
  return s3(a, i, o.shape.length, Fe[o.dtype], n, s, c, m), [u, l];
};
var a3 = { kernelName: Zn, backendName: "wasm", setupFunc: mee, kernelFunc: dee };
var i3;
function fee(r) {
  i3 = r.wasm.cwrap(Jn, null, ["number", "number", "bool", "number", "number", "number", "number", "number", "number", "array", "number", "array", "number", "number", "number", "number", "number"]);
}
function hee(r) {
  let { backend: e, inputs: t6, attrs: o } = r, { image: n, transforms: s } = t6, { interpolation: a, fillMode: i, fillValue: p, outputShape: u } = o, [c, l, m, d] = n.shape, [f, h] = u != null ? u : [l, m], g = [c, f, h, d], x = new Uint8Array(new Int32Array(y.computeStrides(n.shape)).buffer), b = new Uint8Array(new Int32Array(y.computeStrides(g)).buffer), C = e.makeOutput(g, n.dtype), w = e.dataIdMap.get(C.dataId).id, _ = e.dataIdMap.get(n.dataId).id, A = e.dataIdMap.get(s.dataId).id, R = a === "nearest" ? 1 : 2, D;
  switch (i) {
    case "constant":
      D = 1;
      break;
    case "reflect":
      D = 2;
      break;
    case "wrap":
      D = 3;
      break;
    case "nearest":
      D = 4;
      break;
    default:
      D = 1;
      break;
  }
  return i3(_, A, s.shape[0] > 1, c, f, h, d, m, l, x, n.shape.length - 1, b, g.length - 1, R, D, p, w), C;
}
var u3 = { kernelName: Jn, backendName: "wasm", setupFunc: fee, kernelFunc: hee };
function gee(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { value: n } = e, { axis: s } = o;
  s < 0 && (s += n.shape.length);
  let a = n.shape[s], i = n.shape.length, p = new Array(i - 1), u = 0;
  for (let d = 0; d < i; d++)
    d !== s && (p[u++] = n.shape[d]);
  let c = new Array(a), l = new Array(i).fill(0), m = n.shape.slice();
  m[s] = 1;
  for (let d = 0; d < c.length; d++)
    l[s] = d, c[d] = Eo({ inputs: { x: n }, attrs: { begin: l, size: m }, backend: t6 });
  return c.map(({ dataId: d, dtype: f }) => ({ dataId: d, dtype: f, shape: p }));
}
var p3 = { kernelName: Rs, backendName: "wasm", kernelFunc: gee };
function xee(r) {
  let { inputs: { x: e }, backend: t6 } = r, o = t6.makeOutput(e.shape, e.dtype);
  return t6.typedArrayFromHeap(o).fill(0), o;
}
var c3 = { kernelName: Fs, backendName: "wasm", kernelFunc: xee };
var yee = [dD, fD, hD, xD, wD, vD, ND, _D, AD, FD, DD, OD, MD, LD, VD, WD, UD, GD, qD, jD, YD, ZD, eO, tO, rO, oO, nO, sO, iO, uO, pO, lO, dO, hO, xO, bO, CO, SO, yD, wO, vO, kO, NO, TO, _O, EO, $O, AO, FO, DO, PO, LO, VO, zO, UO, GO, HO, KO, XO, QO, ZO, eP, tP, rP, bg, nP, aP, uP, pP, cP, lP, mP, dP, ED, hP, xP, bP, SP, wP, IP, kP, TP, EP, $P, RD, RP, FP, OP, MP, BP, VP, zP, WP, UP, GP, qP, jP, XP, YP, QP, ZP, e3, t3, r3, n3, a3, u3, CD, p3, c3];
for (let r of yee)
  Ia(r);
var Hw = O();
Hw.registerFlag("WASM_HAS_SIMD_SUPPORT", async () => {
  try {
    return WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 9, 1, 7, 0, 65, 0, 253, 15, 26, 11]));
  } catch (r) {
    return false;
  }
});
Hw.registerFlag("WASM_HAS_MULTITHREAD_SUPPORT", async () => {
  if (Hw.get("IS_NODE"))
    return false;
  try {
    return new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16, 2, 0, 26, 11]));
  } catch (r) {
    return false;
  }
});
var Zw = rp(f3());
var C3 = rp(g3());
var Jw = rp(x3());
var y3 = Zw.default || Zw;
var bee = Jw.default || Jw;
var Pl = class extends Zr {
  constructor(e) {
    super(), this.wasm = e, this.dataIdNextNumber = 1, this.wasm.tfjs.initWithThreadsCount(w3), Qw = this.wasm.tfjs.getThreadsCount(), this.dataIdMap = new Do(this, cr());
  }
  write(e, t6, o) {
    let n = { id: this.dataIdNextNumber++ };
    return this.move(n, e, t6, o, 1), n;
  }
  numDataIds() {
    return this.dataIdMap.numDataIds();
  }
  async time(e) {
    let t6 = y.now();
    return e(), { kernelMs: y.now() - t6 };
  }
  move(e, t6, o, n, s) {
    let a = this.dataIdNextNumber++;
    if (n === "string") {
      let c = t6;
      this.dataIdMap.set(e, { id: a, stringBytes: c, shape: o, dtype: n, memoryOffset: null, refCount: s });
      return;
    }
    let i = y.sizeFromShape(o), p = i * y.bytesPerElement(n), u = this.wasm._malloc(p);
    this.dataIdMap.set(e, { id: a, memoryOffset: u, shape: o, dtype: n, refCount: s }), this.wasm.tfjs.registerTensor(a, i, u), t6 != null && this.wasm.HEAPU8.set(new Uint8Array(t6.buffer, t6.byteOffset, p), u);
  }
  async read(e) {
    return this.readSync(e);
  }
  readSync(e, t6, o) {
    let { memoryOffset: n, dtype: s, shape: a, stringBytes: i } = this.dataIdMap.get(e);
    if (s === "string")
      return (t6 == null || t6 === 0) && (o == null || o >= i.length) ? i : i.slice(t6, o);
    t6 = t6 || 0, o = o || y.sizeFromShape(a);
    let p = y.bytesPerElement(s), u = this.wasm.HEAPU8.slice(n + t6 * p, n + o * p);
    return See(u.buffer, s);
  }
  disposeData(e, t6 = false) {
    if (this.dataIdMap.has(e)) {
      let o = this.dataIdMap.get(e);
      if (o.refCount--, !t6 && o.refCount > 0)
        return false;
      this.wasm._free(o.memoryOffset), this.wasm.tfjs.disposeData(o.id), this.dataIdMap.delete(e);
    }
    return true;
  }
  refCount(e) {
    return this.dataIdMap.has(e) ? this.dataIdMap.get(e).refCount : 0;
  }
  incRef(e) {
    let t6 = this.dataIdMap.get(e);
    t6 != null && t6.refCount++;
  }
  floatPrecision() {
    return 32;
  }
  getMemoryOffset(e) {
    return this.dataIdMap.get(e).memoryOffset;
  }
  dispose() {
    this.wasm.tfjs.dispose(), "PThread" in this.wasm && this.wasm.PThread.terminateAllThreads(), this.wasm = null;
  }
  memory() {
    return { unreliable: false };
  }
  makeOutput(e, t6, o) {
    let n;
    if (o == null)
      n = this.write(null, e, t6);
    else {
      let s = this.dataIdNextNumber++;
      n = { id: s }, this.dataIdMap.set(n, { id: s, memoryOffset: o, shape: e, dtype: t6, refCount: 1 });
      let a = y.sizeFromShape(e);
      this.wasm.tfjs.registerTensor(s, a, o);
    }
    return { dataId: n, shape: e, dtype: t6 };
  }
  typedArrayFromHeap({ shape: e, dtype: t6, dataId: o }) {
    let n = this.wasm.HEAPU8.buffer, { memoryOffset: s } = this.dataIdMap.get(o), a = y.sizeFromShape(e);
    switch (t6) {
      case "float32":
        return new Float32Array(n, s, a);
      case "int32":
        return new Int32Array(n, s, a);
      case "bool":
        return new Uint8Array(n, s, a);
      default:
        throw new Error(`Unknown dtype ${t6}`);
    }
  }
};
function Cee(r) {
  return (e, t6) => (y.fetch(r, { credentials: "same-origin" }).then((o) => {
    o.ok || e.env.a(`failed to load wasm binary file at '${r}'`), o.arrayBuffer().then((n) => {
      WebAssembly.instantiate(n, e).then((s) => {
        t6(s.instance, s.module);
      });
    });
  }), {});
}
function b3(r, e, t6) {
  if (vg != null)
    return vg;
  let o = "tfjs-backend-wasm.wasm";
  return r && e ? o = "tfjs-backend-wasm-threaded-simd.wasm" : r && (o = "tfjs-backend-wasm-simd.wasm"), Dl != null && Dl[o] != null ? Dl[o] : t6 + o;
}
async function S3() {
  let [r, e] = await Promise.all([O().getAsync("WASM_HAS_SIMD_SUPPORT"), O().getAsync("WASM_HAS_MULTITHREAD_SUPPORT")]);
  return new Promise((t6, o) => {
    let n = {};
    n.locateFile = (i, p) => {
      if (i.endsWith(".worker.js")) {
        let u = C3.wasmWorkerContents.replace(/\n/g, "\\n"), c = new Blob([u], { type: "application/javascript" });
        return URL.createObjectURL(c);
      }
      return i.endsWith(".wasm") ? b3(r, e, Fl != null ? Fl : p) : p + i;
    }, eI && (n.instantiateWasm = Cee(b3(r, e, Fl != null ? Fl : "")));
    let s = false;
    n.onAbort = () => {
      if (s || Ol)
        return;
      Ol = true, o({ message: "Make sure the server can serve the `.wasm` file relative to the bundled js file. For more details see https://github.com/tensorflow/tfjs/blob/master/tfjs-backend-wasm/README.md#using-bundlers" });
    };
    let a;
    e && r && vg == null ? (n.mainScriptUrlOrBlob = new Blob(["var WasmBackendModuleThreadedSimd = " + y3.toString()], { type: "text/javascript" }), a = y3(n)) : a = bee(n), a.then((i) => {
      s = true, Ol = false;
      let p = null;
      i.tfjs = { init: i.cwrap("init", null, []), initWithThreadsCount: i.cwrap("init_with_threads_count", null, ["number"]), getThreadsCount: i.cwrap("get_threads_count", "number", []), registerTensor: i.cwrap("register_tensor", null, ["number", "number", "number"]), disposeData: i.cwrap("dispose_data", p, ["number"]), dispose: i.cwrap("dispose", p, []) }, t6({ wasm: i });
    }).catch(o);
  });
}
function See(r, e) {
  switch (e) {
    case "float32":
      return new Float32Array(r);
    case "int32":
      return new Int32Array(r);
    case "bool":
      return new Uint8Array(r);
    default:
      throw new Error(`Unknown dtype ${e}`);
  }
}
var wee = ["tfjs-backend-wasm.wasm", "tfjs-backend-wasm-simd.wasm", "tfjs-backend-wasm-threaded-simd.wasm"];
var vg = null;
var Fl = null;
var Dl = {};
var Ol = false;
var eI = false;
function Iee(r, e = false) {
  if (eC("setWasmPath has been deprecated in favor of setWasmPaths and will be removed in a future release."), Ol)
    throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPath()` before you call `tf.setBackend()` or `tf.ready()`");
  vg = r, eI = e;
}
function vee(r, e = false) {
  if (Ol)
    throw new Error("The WASM backend was already initialized. Make sure you call `setWasmPaths()` before you call `tf.setBackend()` or `tf.ready()`");
  if (typeof r == "string")
    Fl = r;
  else {
    Dl = r;
    let t6 = wee.filter((o) => Dl[o] == null);
    if (t6.length > 0)
      throw new Error(`There were no entries found for the following binaries: ${t6.join(",")}. Please either call setWasmPaths with a map providing a path for each binary, or with a string indicating the directory where all the binaries can be found.`);
  }
  eI = e;
}
var w3 = -1;
var Qw = -1;
function kee(r) {
  w3 = r;
}
function Nee() {
  if (Qw === -1)
    throw new Error("WASM backend not initialized.");
  return Qw;
}
var Tee = "4.1.0";
var _ee = 2;
Ci("wasm", async () => {
  let { wasm: r } = await S3();
  return new Pl(r);
}, _ee);
var ms = O();
ms.registerFlag("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE", () => 15);
ms.registerFlag("WEBGPU_CPU_FORWARD", () => true);
ms.registerFlag("WEBGPU_MATMUL_PROGRAM_TYPE", () => -1);
ms.registerFlag("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE", () => false);
ms.registerFlag("WEBGPU_USE_LOW_POWER_GPU", () => false);
ms.registerFlag("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD", () => 1e3);
ms.registerFlag("WEBGPU_USE_PROFILE_TOOL", () => false);
ms.registerFlag("WEBGPU_IMPORT_EXTERNAL_TEXTURE", () => true);
ms.registerFlag("WEBGPU_USE_NAIVE_CONV2D_DEBUG", () => false);
ms.registerFlag("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL", () => 0);
ms.registerFlag("WEBGPU_CONV_SEPARATE_IM2COL_SHADER", () => false);
var kg = class {
  constructor(e) {
    e && (this.vendor = e.vendor, this.architecture = e.architecture, this.intelGPUGeneration = this.getIntelGPUGeneration());
  }
  getIntelGPUGeneration() {
    if (this.isIntel()) {
      if (this.architecture.startsWith("gen"))
        return Number(this.architecture.match(/\d+/));
      if (this.architecture.startsWith("xe"))
        return 12;
    }
    return 0;
  }
  isIntel() {
    return this.vendor === "intel";
  }
};
var Ng = class {
  constructor(e) {
    this.device = e, this.numUsedBuffers = 0, this.numFreeBuffers = 0, this.freeBuffers = /* @__PURE__ */ new Map(), this.usedBuffers = /* @__PURE__ */ new Map(), this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
  acquireUploadBuffer(e, t6) {
    return this.acquireBuffer(e, t6, true);
  }
  acquireBuffer(e, t6, o = false) {
    let n = I3(e, t6);
    if (this.freeBuffers.has(n) || this.freeBuffers.set(n, []), this.usedBuffers.has(n) || this.usedBuffers.set(n, []), this.numBytesUsed += e, this.numUsedBuffers++, this.freeBuffers.get(n).length > 0) {
      this.numFreeBuffers--;
      let a = this.freeBuffers.get(n).shift();
      return this.usedBuffers.get(n).push(a), a;
    }
    this.numBytesAllocated += e;
    let s = this.device.createBuffer({ size: e, usage: t6, mappedAtCreation: o });
    return this.usedBuffers.get(n).push(s), s;
  }
  releaseBuffer(e, t6, o) {
    if (this.freeBuffers.size === 0)
      return;
    let n = I3(t6, o);
    this.freeBuffers.has(n) || this.freeBuffers.set(n, []), this.freeBuffers.get(n).push(e), this.numFreeBuffers++, this.numUsedBuffers--;
    let s = this.usedBuffers.get(n), a = s.indexOf(e);
    if (a < 0)
      throw new Error("Cannot release a buffer that was never provided by this buffer manager");
    s.splice(a, 1), this.numBytesUsed -= t6;
  }
  releaseUploadBuffer(e, t6, o) {
    e.mapAsync(GPUMapMode.WRITE).then(() => {
      this.releaseBuffer(e, t6, o);
    }, (n) => {
    });
  }
  getNumUsedBuffers() {
    return this.numUsedBuffers;
  }
  getNumFreeBuffers() {
    return this.numFreeBuffers;
  }
  dispose() {
    this.freeBuffers.forEach((e, t6) => {
      e.forEach((o) => {
        o.destroy();
      });
    }), this.usedBuffers.forEach((e, t6) => {
      e.forEach((o) => {
        o.destroy();
      });
    }), this.freeBuffers = /* @__PURE__ */ new Map(), this.usedBuffers = /* @__PURE__ */ new Map(), this.numUsedBuffers = 0, this.numFreeBuffers = 0, this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
};
function I3(r, e) {
  return `${r}_${e}`;
}
var Tg = class {
  constructor(e) {
    this.device = e, this.numUsedTextures = 0, this.numFreeTextures = 0, this.freeTextures = /* @__PURE__ */ new Map(), this.usedTextures = /* @__PURE__ */ new Map(), this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
  acquireTexture(e, t6, o, n) {
    let s = k3(o), a = e * t6 * s, i = v3(e, t6, o, n);
    if (this.freeTextures.has(i) || this.freeTextures.set(i, []), this.usedTextures.has(i) || this.usedTextures.set(i, []), this.numBytesUsed += a, this.numUsedTextures++, this.freeTextures.get(i).length > 0) {
      this.numFreeTextures--;
      let u = this.freeTextures.get(i).shift();
      return this.usedTextures.get(i).push(u), u;
    }
    this.numBytesAllocated += a;
    let p = this.device.createTexture({ size: [e, t6], format: o, usage: n });
    return this.usedTextures.get(i).push(p), p;
  }
  releaseTexture(e, t6, o, n, s) {
    if (this.freeTextures.size === 0)
      return;
    let a = v3(t6, o, n, s);
    this.freeTextures.has(a) || this.freeTextures.set(a, []), this.freeTextures.get(a).push(e), this.numFreeTextures++, this.numUsedTextures--;
    let i = this.usedTextures.get(a), p = i.indexOf(e);
    if (p < 0)
      throw new Error("Cannot release a texture that was never provided by this texture manager");
    i.splice(p, 1);
    let u = k3(n), c = t6 * o * u;
    this.numBytesUsed -= c;
  }
  getNumUsedTextures() {
    return this.numUsedTextures;
  }
  getNumFreeTextures() {
    return this.numFreeTextures;
  }
  dispose() {
    this.freeTextures.forEach((e, t6) => {
      e.forEach((o) => {
        o.destroy();
      });
    }), this.usedTextures.forEach((e, t6) => {
      e.forEach((o) => {
        o.destroy();
      });
    }), this.freeTextures = /* @__PURE__ */ new Map(), this.usedTextures = /* @__PURE__ */ new Map(), this.numUsedTextures = 0, this.numFreeTextures = 0, this.numBytesUsed = 0, this.numBytesAllocated = 0;
  }
};
function v3(r, e, t6, o) {
  return `${r}_${e}_${t6}_${o}`;
}
function k3(r) {
  if (r === "rgba8unorm")
    return 16;
  throw new Error(`${r} is not supported!`);
}
function N3(r, e) {
  if (Math.max(...r) > 3)
    throw new Error("Cannot symbolically compute strides for rank > 4 tensor.");
  let t6 = r.length, o = r.map((s) => `${e}[${s}]`), n = new Array(t6 - 1);
  n[t6 - 2] = o[t6 - 1];
  for (let s = t6 - 3; s >= 0; --s)
    n[s] = `(${n[s + 1]} * ${o[s + 1]})`;
  return n;
}
var A3 = (r, e, t6, o) => {
  let n = { dtype: o.dtype, shape: o.shape }, s = $ee(t6, n, e), a = r.createShaderModule({ code: s, label: e.constructor.name });
  return r.createComputePipeline({ compute: { module: a, entryPoint: "_start" }, label: e.constructor.name, layout: "auto" });
};
function Rt(r) {
  if (r <= 1)
    return "i32";
  if (r === 2)
    return "vec2<i32>";
  if (r === 3)
    return "vec3<i32>";
  if (r === 4)
    return "vec4<i32>";
  if (r === 5)
    return "vec5";
  if (r === 6)
    return "vec6";
  throw Error(`GPU for rank ${r} is not yet supported`);
}
function $o(r) {
  if (r === 0)
    return "x";
  if (r === 1)
    return "y";
  if (r === 2)
    return "z";
  if (r === 3)
    return "w";
  if (r === 4)
    return "u";
  if (r === 5)
    return "v";
  throw Error(`Index ${r} is not yet supported`);
}
function se(...r) {
  let e;
  switch (r.length) {
    case 0:
      e = `
        fn main()
      `;
      break;
    case 1:
      e = `
        fn main(${r[0]} : i32)
      `;
      break;
    default:
      throw Error("Unreachable");
  }
  return e;
}
function T3(r) {
  let e;
  return e = `
     ${Eee()}
      fn _start(@builtin(local_invocation_id) LocalId : vec3<u32>,
                @builtin(global_invocation_id) GlobalId : vec3<u32>,
                @builtin(local_invocation_index) LocalIndex: u32,
                @builtin(workgroup_id) WorkgroupId : vec3<u32>,
                @builtin(num_workgroups) NumWorkgroups : vec3<u32>) {
        localId = LocalId;
        localIndex = LocalIndex;
        globalId = GlobalId;
        numWorkgroups = NumWorkgroups;
        workgroupId = WorkgroupId;
        ${r ? "main(getGlobalIndex());" : "main();"};
      }
    `, e;
}
function Eee() {
  return `
  @compute @workgroup_size(workgroupSizeX, workgroupSizeY, workgroupSizeZ)
`;
}
function $ee(r, e, t6) {
  let o = [], n = t6.workgroupSize[0] * t6.workgroupSize[1] * t6.workgroupSize[2];
  if (o.push(`
      const workgroupSizeX = ${t6.workgroupSize[0]}u;
      const workgroupSizeY = ${t6.workgroupSize[1]}u;
      const workgroupSizeZ = ${t6.workgroupSize[2]}u;

      var<private> localId: vec3<u32>;
      var<private> localIndex: u32;
      var<private> globalId: vec3<u32>;
      var<private> numWorkgroups: vec3<u32>;
      var<private> workgroupId: vec3<u32>;

      // Only used when the y/z dimension of workgroup size is 1.
      fn getGlobalIndex() -> i32 {
        ${F3(t6) ? "  return i32(globalId.x);" : `  return i32((workgroupId.z * numWorkgroups.x * numWorkgroups.y +
                workgroupId.y * numWorkgroups.x + workgroupId.x) * ${n} +
                localIndex);
        `}
      }
    `), t6.isFromPixels) {
    o.push(`
        struct Uniform {
          size            : i32,
          numChannels     : i32,
          outShapeStrides : vec2<i32>,
        };

        @group(0) @binding(0) var<storage, read_write> result: array<${wc(e.dtype, t6.isVec4)}>;
        @group(0) @binding(2) var<uniform> uniforms: Uniform;
      `);
    let f = $3(t6);
    return [_3, o.join(`
`), E3(e.shape), t6.getUserCode(), T3(f)].join(`
`);
  }
  let s = "struct Uniforms { NAN : f32, INFINITY : f32, ";
  t6.variableNames.forEach((f, h) => {
    let g = Rt(r[h].shape.length);
    s += `${f.charAt(0).toLowerCase() + f.slice(1)}Shape : ${g}, `;
  });
  let a = Rt(e.shape.length);
  s += `outShape : ${a}, `;
  let i = e.shape.length - 1, p = Rt(i);
  s += `
         outShapeStrides: ${p}, `, t6.size && (s += "size : i32, "), t6.uniforms && (s += t6.uniforms), s += "};", s = Lee(s), o.push(s), t6.atomic ? o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<atomic<i32>>;
    `) : o.push(`
      @group(0) @binding(0) var<storage, read_write> result: array<${wc(e.dtype, t6.isVec4)}>;
    `), t6.variableNames.forEach((f, h) => {
    o.push(`
      @group(0) @binding(${1 + h}) var<storage, read> ${f}: array<${t6.variableTypes ? t6.variableTypes[h] : wc(r[h].dtype, t6.isVec4)}>;
        `);
  }), s !== "" && o.push(`
      @group(0) @binding(${1 + t6.variableNames.length}) var<uniform> uniforms: Uniforms;
      `);
  let u = Oee(e.shape, t6.dispatchLayout), c = [_3 + Aee, o.join(`
`), E3(e.shape), u, Pee(e.shape.length)];
  t6.atomic || c.push(Mee(e.shape, e.dtype, t6.isVec4));
  let l = r.map((f, h) => Dee(f, e.shape, t6.variableTypes ? t6.variableTypes[h] === "vec4<f32>" : t6.isVec4, t6.dispatchLayout.x.length === e.shape.length)).join(`
`);
  c.push(l), c.push(t6.getUserCode());
  let m = $3(t6);
  return c.push(T3(m)), c.join(`
`);
}
function R3(r, e, t6, o) {
  let n = r.shaderKey;
  if (r.isFromPixels)
    return n;
  let s = t6.map((c) => c.dtype).concat(o.dtype), a = t6.map((c) => S.getBroadcastDims(c.shape, o.shape)), i = t6.map((c) => y.arraysEqual(c.shape, o.shape)).join("_"), p = a.map((c) => c.join("_")).join(";"), u = F3(r) ? "flatDispatch" : "";
  return n += "_" + (r.workgroupSize ? r.workgroupSize.join(",") : "") + e.map((c) => c.length).join(",") + s.join(",") + r.variableNames.join(",") + p + i + u, n;
}
var _3 = `
  struct vec5 {x: i32, y: i32, z: i32, w: i32, u: i32};
  struct vec6 {x: i32, y: i32, z: i32, w: i32, u: i32, v: i32};

  // Checks whether coordinates lie within the bounds of the shape.
  fn coordsInBounds2D(coord : vec2<i32>, shape : vec2<i32>) -> bool {
    return all(coord >= vec2<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds3D(coord : vec3<i32>, shape : vec3<i32>) -> bool {
    return all(coord >= vec3<i32>(0)) && all(coord < shape);
  }
  fn coordsInBounds4D(coord : vec4<i32>, shape : vec4<i32>) -> bool {
    return all(coord >= vec4<i32>(0)) && all(coord < shape);
  }

  fn getIndexFromCoords1D(coord : i32, shape : i32) -> i32 {
    return coord;
  }
  fn getIndexFromCoords2D(coords : vec2<i32>, shape : vec2<i32>) -> i32 {
    return dot(coords, vec2<i32>(shape.y, 1));
  }
  fn getIndexFromCoords3D(coords : vec3<i32>, shape : vec3<i32>) -> i32 {
    return dot(coords, vec3<i32>(shape.y * shape.z, shape.z, 1));
  }
  fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
    return dot(coords, vec4<i32>(
        shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
  }
  fn getIndexFromCoords5D(coords : vec5, shape : vec5) -> i32 {
    let shapeStrides: vec5 = vec5(shape.y * shape.z * shape.w * shape.u, shape.z * shape.w * shape.u, shape.w * shape.u, shape.u, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u;
  }
  fn getIndexFromCoords6D(coords : vec6, shape : vec6) -> i32 {
    let shapeStrides: vec6 = vec6(shape.y * shape.z * shape.w * shape.u * shape.v, shape.z * shape.w * shape.u * shape.v, shape.w * shape.u * shape.v, shape.u * shape.v, shape.v, 1);
    return coords.x*shapeStrides.x + coords.y*shapeStrides.y + coords.z*shapeStrides.z + coords.w*shapeStrides.w + coords.u*shapeStrides.u + coords.v*shapeStrides.v;
  }

  fn idiv(a: i32, b: i32, sign: f32) -> i32 {
    var res: i32 = a / b;
    let modulo: i32 = a % b;
    if (sign < 0. && modulo != 0) {
      res = res - 1;
    }
    return res;
  }

  // NaN defination in IEEE 754-1985 is :
  //   - sign = either 0 or 1.
  //   - biased exponent = all 1 bits.
  //   - fraction = anything except all 0 bits (since all 0 bits represents infinity).
  // https://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_non-numbers
  fn isnan(val: f32) -> bool {
    let floatToUint: u32 = bitcast<u32>(val);
    return (floatToUint & 0x7fffffffu) > 0x7f800000u;
  }
  fn isnanVec4(val : vec4<f32>) -> vec4<bool> {
    return vec4<bool>(isnan(val[0]), isnan(val[1]), isnan(val[2]), isnan(val[3]));
  }
`;
var Aee = `
  fn isinf(val: f32) -> bool {
    return abs(val) == uniforms.INFINITY;
  }
`;
function E3(r) {
  let e = r.length;
  if (e <= 1)
    return "fn getCoordsFromIndex(index : i32) -> i32 { return index; }";
  let t6 = y.computeStrides(r), o = Rt(e), n = [];
  for (let a = 0; a < e; a++)
    n.push(`d${a}`);
  if (t6.length === 1)
    return `    fn getCoordsFromIndex(index : i32) -> vec2<i32> {
      let d0 = index / uniforms.outShapeStrides; let d1 = index - d0 * uniforms.outShapeStrides;
      return vec2<i32>(d0, d1);
    }`;
  let s;
  return s = "var index2 = index;" + t6.map((a, i) => {
    let p = `let ${n[i]} = index2 / uniforms.outShapeStrides.${$o(i)}`, u = i === t6.length - 1 ? `let ${n[i + 1]} = index2 - ${n[i]} * uniforms.outShapeStrides.${$o(i)}` : `index2 = index2 - ${n[i]} * uniforms.outShapeStrides.${$o(i)}`;
    return `${p}; ${u};`;
  }).join(""), `
    fn getCoordsFromIndex(index : i32) -> ${o} {
      ${s}
      return ${o}(${n.join(",")});
    }
  `;
}
function Ree(r, e) {
  let t6 = r.name, o = r.shape.length, n = Rt(o), s = "get" + t6.charAt(0).toUpperCase() + t6.slice(1), a = ["d0", "d1", "d2", "d3", "d4", "d5"].slice(0, o), i = a.map((c) => `${c} : i32`).join(", ");
  if (o < 1)
    return e ? `
        fn ${s}() -> vec4<f32> {
          return vec4<f32>(${t6}[0]);
        }
      ` : `
      fn ${s}() ->f32 {
        return f32(${t6}[0]);
      }
    `;
  let p = `uniforms.${t6.charAt(0).toLowerCase() + t6.slice(1)}Shape`, u = `${o}D`;
  return o === 0 && (u = "1D"), e ? `
      fn ${s}(${i}) -> vec4<f32> {
        return vec4<f32>(${t6}[getIndexFromCoords${u}(${n}(${a.join(",")}),
          ${p}) / 4]);
      }
      ` : `
    fn ${s}(${i}) -> f32 {
      return f32(${t6}[getIndexFromCoords${u}(${n}(${a.join(",")}),
        ${p})]);
    }
   `;
}
function Fee(r, e, t6, o) {
  let n = r.name, s = n.charAt(0).toUpperCase() + n.slice(1), a = "get" + s + "ByOutput", i = r.shape.length, p = e.length, u = Rt(p);
  if (y.arraysEqual(r.shape, e) && o)
    return t6 ? `
      fn ${a}Index(globalIndex : i32) -> vec4<f32> {
        return vec4<f32>(${n}[globalIndex]);
      }

      fn ${a}Coords(coords : ${u}) -> vec4<f32> {
        return vec4<f32>(${n}[${p > 1 ? "getOutputIndexFromCoords(coords)" : "coords"} / 4]);
      }
      ` : `
    fn ${a}Index(globalIndex : i32) -> f32 {
      return f32(${n}[globalIndex]);
    }

    fn ${a}Coords(coords : ${u}) -> f32 {
      return f32(${n}[${p > 1 ? "getOutputIndexFromCoords(coords)" : "coords"}]);
    }
    `;
  let c = S.getBroadcastDims(r.shape, e), l = p - i, m = "";
  if (i === 0)
    return t6 ? `
    fn ${a}Index(globalIndex : i32) -> vec4<f32> {
      return get${s}();
    }

    fn ${a}Coords(coords : ${u}) -> vec4<f32> {
      return get${s}();
    }
  ` : `
    fn ${a}Index(globalIndex : i32) -> f32{
      return get${s}();
    }

    fn ${a}Coords(coords : ${u}) -> f32{
      return get${s}();
    }
  `;
  p < 2 && c.length >= 1 ? m = "coords = 0;" : m = c.map((g) => `coords.${$o(g + l)} = 0;`).join(`
`);
  let d = "";
  if (p < 2 && i > 0)
    d = "coords";
  else if (p > 1) {
    let g = Rt(i), x = r.shape.map((b, C) => `coords.${$o(C + l)}`).join(", ");
    d = `${g}(${x})`;
  } else
    d = "coords";
  let f = `uniforms.${n.charAt(0).toLowerCase() + n.slice(1)}Shape`, h = `${i}D`;
  return t6 ? `
    fn ${a}Index(globalIndex : i32) -> vec4<f32> {
      var coords = getCoordsFromIndex(globalIndex);
      ${m}
      return ${n}[getIndexFromCoords${h}(${d}, ${f}) / 4];
    }

    fn ${a}Coords(coordsIn : ${u}) -> vec4<f32> {
      var coords = coordsIn;
      ${m}
      return ${n}[getIndexFromCoords${h}(${d}, ${f}) / 4];
    }
  ` : `
  fn ${a}Index(globalIndex : i32) -> f32 {
    var coords = getCoordsFromIndex(globalIndex);
    ${m}
    return f32(${n}[getIndexFromCoords${h}(${d}, ${f})]);
  }

  fn ${a}Coords(coordsIn : ${u}) -> f32 {
    var coords = coordsIn;
    ${m}
    return f32(${n}[getIndexFromCoords${h}(${d}, ${f})]);
  }
`;
}
function Dee(r, e, t6, o) {
  let n = Ree(r, t6);
  return r.shape.length <= e.length && (n += Fee(r, e, t6, o)), n;
}
function Oee(r, e) {
  let { x: t6, y: o = [], z: n = [] } = e, s = r.length, a = t6.length + o.length + n.length;
  if (a !== s)
    return "";
  if (t6.length === s)
    return `fn getOutputCoords() -> ${Rt(s)}{
    let globalIndex = getGlobalIndex();
    return getCoordsFromIndex(globalIndex);
  }
  `;
  let i = "", p = [t6, o, n];
  for (let m = 0; m < p.length; m++) {
    let d = p[m];
    if (d.length !== 0)
      if (d.length === 1)
        i += `let d${d[0]} = i32(globalId[${m}]);`;
      else {
        let f = N3(d, "uniforms.outShape");
        i += `var index${m} = i32(globalId[${m}]);`;
        for (let h = 0; h < f.length; h++)
          i += `let d${d[h]} = index${m} / ${f[h]};`, h === f.length - 1 ? i += `let d${d[h + 1]} = index${m} - d${d[h]} * ${f[h]};` : i += `index${m} = index${m} - d${d[h]} * ${f[h]};`;
      }
  }
  let u = [];
  for (let m = 0; m < a; m++)
    u.push(`d${m}`);
  let c = Rt(a), l = `fn getOutputCoords() -> ${c} {
  ${i}
`;
  return u.length === 0 ? l += `return ${c}(0); }` : l += `return ${c}(${u.join(",")}); }`, l;
}
function Pee(r) {
  let e = "";
  switch (r) {
    case 0:
    case 1:
      e += `
        fn getOutputIndexFromCoords(coords : i32) -> i32 {
          return coords;
        }
        `;
      break;
    case 2:
      e += `
        fn getOutputIndexFromCoords(coords : vec2<i32>) -> i32 {
          return dot(coords, vec2<i32>(uniforms.outShapeStrides, 1));
        }
        `;
      break;
    case 3:
      e += `
        fn getOutputIndexFromCoords(coords : vec3<i32>) -> i32 {
          return dot(coords, vec3<i32>(uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, 1));
        }
        `;
      break;
    case 4:
      e += `
        fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
          return dot(coords, vec4<i32>(
            uniforms.outShapeStrides.x, uniforms.outShapeStrides.y, uniforms.outShapeStrides.z, 1));
        }
        `;
      break;
    case 5:
      e += `
        fn getOutputIndexFromCoords(coords : vec5) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u;
        }
        `;
      break;
    case 6:
      e += `
        fn getOutputIndexFromCoords(coords : vec6) -> i32 {
          return coords.x * uniforms.outShapeStrides.x +
              coords.y * uniforms.outShapeStrides.y +
              coords.z * uniforms.outShapeStrides.z +
              coords.w * uniforms.outShapeStrides.w +
              coords.u * uniforms.outShapeStrides.u +
              coords.v;
        }
        `;
      break;
    default:
      y.assert(false, () => `Unsupported ${r}D shape`);
      break;
  }
  return e;
}
function F3(r) {
  return r.dispatch[1] === 1 && r.dispatch[2] === 1;
}
function wc(r, e) {
  return r === "float32" ? e ? "vec4<f32>" : "f32" : r === "int32" || r === "bool" ? e ? "vec4<i32>" : "i32" : r;
}
function Mee(r, e, t6) {
  let o = r.length, n = wc(e, t6), s;
  if (t6 ? s = `fn setOutputAtIndex(flatIndex : i32, value : vec4<f32>) {
      result[flatIndex] = ${n}(value);
    }
    fn setOutputAtIndexI32(flatIndex : i32, value : vec4<i32>) {
      result[flatIndex] = ${n}(value);
    }` : s = `fn setOutputAtIndex(flatIndex : i32, value : f32) {
      result[flatIndex] = ${n}(value);
    }
    fn setOutputAtIndexI32(flatIndex : i32, value : i32) {
      result[flatIndex] = ${n}(value);
    }`, o >= 2) {
    let a = ["d0", "d1", "d2", "d3", "d4", "d5"].slice(0, o), i = Rt(o);
    t6 ? s += `
      fn setOutputAtCoords(${a.map((p) => `${p} : i32`).join(", ")}, value : vec4<f32>) {
        let flatIndex = getOutputIndexFromCoords(${i}(${a.join(", ")}));
        setOutputAtIndex(flatIndex / 4, value);
      }
      fn setOutputAtCoordsI32(${a.map((p) => `${p} : i32`).join(", ")}, value : vec4<i32>) {
        let flatIndex = getOutputIndexFromCoords(${i}(${a.join(", ")}));
        setOutputAtIndexI32(flatIndex / 4, value);
      }
    ` : s += `
      fn setOutputAtCoords(${a.map((p) => `${p} : i32`).join(", ")}, value : f32) {
        let flatIndex = getOutputIndexFromCoords(${i}(${a.join(", ")}));
        setOutputAtIndex(flatIndex, value);
      }
      fn setOutputAtCoordsI32(${a.map((p) => `${p} : i32`).join(", ")}, value : i32) {
        let flatIndex = getOutputIndexFromCoords(${i}(${a.join(", ")}));
        setOutputAtIndexI32(flatIndex, value);
      }
    `;
  }
  return s;
}
function Lee(r) {
  let e = /(\w+)\s*:\s*vec(5|6)/g;
  r = r.replace(e, (o) => "@align(16) " + o);
  let t6 = /vec(5|6)\s*,\s*(\w+)/g;
  return r = r.replace(t6, (o, n, s) => `vec${n}, @align(16) ${s}`), r;
}
function $3(r) {
  return !(r.dispatchLayout.hasOwnProperty("y") && r.dispatchLayout.y.length !== 0 || r.dispatchLayout.hasOwnProperty("z") && r.dispatchLayout.z.length !== 0);
}
var nI = {};
Ue(nI, { ArrayBufferToTypedArray: () => oI, GPUBytesPerElement: () => rI, MatMulProgramType: () => Ao, computeDispatch: () => re, computeWorkPerThreadForConv2d: () => Ll, computeWorkgroupInfoForMatMul: () => tI, computeWorkgroupSizeForConv2d: () => Ml, flatDispatchLayout: () => ue, isWebGPUSupported: () => Bl, tilesFitEvenlyIntoShape: () => Vee });
var zu = (r) => {
  let e = 1;
  for (let t6 = 0; t6 < r.length; t6++)
    e *= r[t6];
  return e;
};
function Vee(r, e) {
  if (r.length !== e.length)
    throw new Error(`Cannot compute whether rank ${r.length} tiles fit evenly into rank ${e.length} shape - ranks must match.`);
  return e.every((t6, o) => t6 % r[o] === 0);
}
function re(r, e, t6 = [1, 1, 1], o = [1, 1, 1]) {
  let [n, s, a] = [Math.ceil(zu(r.x.map((i) => e[i])) / (t6[0] * o[0])), r.y ? Math.ceil(zu(r.y.map((i) => e[i])) / (t6[1] * o[1])) : 1, r.z ? Math.ceil(zu(r.z.map((i) => e[i])) / (t6[2] * o[2])) : 1];
  return [n, s, a];
}
function tI(r, e, t6, o = false) {
  let n = [8, 8, 1], s = [4, 4, 1];
  return o || (r <= 8 && (s[1] = 1), e <= 16 && t6 <= 16 && (n[0] = 4)), { workgroupSize: n, elementsPerThread: s };
}
function Ml(r, e, t6 = false) {
  if (t6)
    return [8, 8, 1];
  let o = zu(r.x.map((s) => e[s])), n = zu(r.y.map((s) => e[s]));
  return o <= 4 ? [4, 16, 1] : n <= 4 ? [16, 4, 1] : [16, 16, 1];
}
function Ll(r, e, t6 = false) {
  if (t6)
    return [4, 4, 1];
  let o = zu(r.x.map((s) => e[s])), n = zu(r.y.map((s) => e[s]));
  return o <= 4 ? [1, 2, 1] : n <= 4 ? [2, 1, 1] : [2, 2, 1];
}
function ue(r) {
  return { x: r.map((e, t6) => t6) };
}
function rI(r) {
  if (r === "float32" || r === "int32" || r === "bool" || r === "string")
    return 4;
  if (r === "complex64")
    return 8;
  throw new Error(`Unknown dtype ${r}`);
}
function oI(r, e) {
  if (e === "float32")
    return new Float32Array(r);
  if (e === "int32")
    return new Int32Array(r);
  if (e === "bool" || e === "string")
    return Uint8Array.from(new Int32Array(r));
  throw new Error(`Unknown dtype ${e}`);
}
function Bl() {
  return (typeof window != "undefined" || typeof WorkerGlobalScope != "undefined") && !!navigator.gpu;
}
var Ao;
(function(r) {
  r[r.MatMulReduceProgram = 0] = "MatMulReduceProgram", r[r.MatMulSplitKProgram = 1] = "MatMulSplitKProgram", r[r.MatMulSmallOutputSizeProgram = 2] = "MatMulSmallOutputSizeProgram", r[r.MatMulPackedProgram = 3] = "MatMulPackedProgram", r[r.MatMulMax = 4] = "MatMulMax";
})(Ao || (Ao = {}));
var zee = O().getNumber("WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD");
var Wee = (r, e) => {
  let t6 = r.limits.maxComputeWorkgroupsPerDimension, o = e.dispatchLayout, n = e.dispatch;
  if (n.every((a) => a <= t6))
    return n;
  y.assert(n[0] > t6 && o.y === void 0 && o.z === void 0, () => "Dispatch size exceeds WebGPU limits in Y or Z dimension.");
  let s = Math.ceil(Math.sqrt(n[0]));
  return s > t6 ? (s = Math.ceil(Math.cbrt(n[0])), y.assert(s <= t6, () => "Total dispatch size exceeds WebGPU maximum."), [s, s, s]) : [s, s, 1];
};
var Ui = class extends Zr {
  constructor(e, t6) {
    if (super(), this.commandQueueOwnedIds = /* @__PURE__ */ new WeakSet(), this.dispatchNumberInEncoder = 0, this.disposed = false, this.downloadWaitMs = 0, this.tensorDataPendingDisposal = [], this.stagingPendingDisposal = [], this.uniformPendingDisposal = [], this.uploadWaitMs = 0, !Bl())
      throw new Error("WebGPU is not supported on this device");
    this.pipelineCache = {}, this.device = e, this.queue = e.queue, this.currentCommandEncoder = null, this.currentComputePass = null, this.supportTimeQuery = e.features.has("timestamp-query-inside-passes"), this.adapterInfo = new kg(t6), this.thresholdToIncreaseWorkgroups = this.adapterInfo.intelGPUGeneration >= 12 ? 16 : 8, this.bufferManager = new Ng(this.device), this.textureManager = new Tg(this.device), this.tensorMap = new Do(this, cr()), this.supportTimeQuery && (this.querySet = this.device.createQuerySet({ type: "timestamp", count: 2 })), O().getBool("WEBGPU_USE_PROFILE_TOOL") && (this.dummyCanvas = document.createElement("canvas"), this.dummyCanvas.width = 1, this.dummyCanvas.height = 1, this.dummyContext = this.dummyCanvas.getContext("webgpu"), this.dummyContext.configure({ device: e, format: "bgra8unorm" }), document.body.appendChild(this.dummyCanvas));
  }
  nextDataId() {
    return Ui.nextDataId++;
  }
  floatPrecision() {
    return 32;
  }
  defaultGpuBufferUsage() {
    return GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST;
  }
  disposeData(e, t6 = false) {
    if (this.tensorDataPendingDisposal.indexOf(e) >= 0)
      return false;
    if (!this.tensorMap.has(e))
      return true;
    let o = this.tensorMap.get(e);
    if (this.decRef(e), !t6 && o.refCount > 0)
      return false;
    if (this.commandQueueOwnedIds.has(e))
      return this.tensorDataPendingDisposal.push(e), false;
    let { complexTensorInfos: n } = this.tensorMap.get(e);
    return n != null && (this.disposeData(n.real.dataId, t6), this.disposeData(n.imag.dataId, t6)), this.releaseResource(e), this.tensorMap.delete(e), true;
  }
  memory() {
    return { numBytesInGPU: this.bufferManager.numBytesUsed, numBytesAllocatedInGPU: this.bufferManager.numBytesAllocated, unreliable: false };
  }
  releaseResource(e) {
    let t6 = this.tensorMap.get(e);
    if (!(!t6 || !t6.resourceInfo)) {
      if ("texture" in t6.resourceInfo) {
        let o = t6.resourceInfo;
        o.texture instanceof GPUTexture && this.textureManager.releaseTexture(o.texture, o.width, o.height, o.format, o.usage), o.texture = null;
      } else {
        let o = t6.resourceInfo;
        this.bufferManager.releaseBuffer(o.buffer, o.size, o.usage), o.buffer = null;
      }
      t6.resourceInfo = null;
    }
  }
  refCount(e) {
    return this.tensorMap.has(e) ? this.tensorMap.get(e).refCount : 0;
  }
  incRef(e) {
    let t6 = this.tensorMap.get(e);
    t6.refCount++;
  }
  decRef(e) {
    if (this.tensorMap.has(e)) {
      let t6 = this.tensorMap.get(e);
      t6.refCount--;
    }
  }
  write(e, t6, o) {
    if (o === "complex64" && e != null)
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    let n = { id: this.nextDataId() };
    return this.tensorMap.set(n, { dtype: o, shape: t6, values: e, refCount: 1 }), n;
  }
  move(e, t6, o, n, s) {
    if (n === "complex64")
      throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");
    this.tensorMap.set(e, { dtype: n, shape: o, values: t6, refCount: s });
  }
  submitQueue() {
    this.ensureComputePassEnded(), this.queue.submit([this.currentCommandEncoder.finish()]), this.currentCommandEncoder = null, this.dispatchNumberInEncoder = 0, this.commandQueueOwnedIds = /* @__PURE__ */ new WeakSet(), this.tensorDataPendingDisposal.forEach((e) => {
      this.releaseResource(e), this.tensorMap.delete(e);
    }), this.uniformPendingDisposal.forEach((e) => this.bufferManager.releaseBuffer(e.buffer, e.size, e.usage)), this.stagingPendingDisposal.forEach((e) => this.bufferManager.releaseUploadBuffer(e.buffer, e.size, e.usage)), this.tensorDataPendingDisposal = [], this.uniformPendingDisposal = [], this.stagingPendingDisposal = [];
  }
  ensureCommandEncoderReady() {
    this.currentCommandEncoder || (this.currentCommandEncoder = this.device.createCommandEncoder());
  }
  ensureComputePassEnded() {
    this.currentComputePass && (this.currentComputePass.end(), this.currentComputePass = null);
  }
  getComputePass() {
    return this.currentComputePass || (this.currentComputePass = this.currentCommandEncoder.beginComputePass()), this.currentComputePass;
  }
  async getBufferData(e, t6) {
    let o = this.bufferManager.acquireBuffer(t6, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ);
    this.ensureCommandEncoderReady(), this.ensureComputePassEnded(), this.currentCommandEncoder.copyBufferToBuffer(e, 0, o, 0, t6), this.submitQueue(), await o.mapAsync(GPUMapMode.READ);
    let n = o.getMappedRange().slice(0);
    return o.unmap(), o != null && this.bufferManager.releaseBuffer(o, t6, GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ), O().getBool("WEBGPU_USE_PROFILE_TOOL") && (y.assert(this.dummyContext !== void 0, () => "Fail to get context for profiling tool"), this.dummyContext.getCurrentTexture()), n;
  }
  convertAndCacheOnCPU(e, t6) {
    let o = this.tensorMap.get(e);
    return this.releaseResource(e), o.values = t6, o.values;
  }
  readSync(e) {
    let t6 = this.tensorMap.get(e), { values: o } = t6;
    if (o == null)
      throw new Error("WebGPU readSync is only available for CPU-resident tensors.");
    return o;
  }
  async read(e) {
    if (!this.tensorMap.has(e))
      throw new Error(`Tensor ${e} was not registered!`);
    let t6 = this.tensorMap.get(e), { values: o } = t6;
    if (o != null)
      return this.convertAndCacheOnCPU(e, o);
    let n;
    if (t6.dtype === "complex64") {
      let s = await Promise.all([this.read(t6.complexTensorInfos.real.dataId), this.read(t6.complexTensorInfos.imag.dataId)]), a = s[0], i = s[1];
      n = S.mergeRealAndImagArrays(a, i);
    } else {
      let s = t6.resourceInfo, a = await this.getBufferData(s.buffer, s.size);
      n = oI(a, t6.dtype);
    }
    return this.convertAndCacheOnCPU(e, n), n;
  }
  readToGPU(e) {
    let t6 = this.tensorMap.get(e), { values: o, dtype: n, shape: s, resourceInfo: a } = t6;
    if (n === "complex64")
      throw new Error("Does not support reading buffer for complex64 dtype.");
    if (a == null)
      throw o != null ? new Error("Data is not on GPU but on CPU.") : new Error("There is no data on GPU or CPU.");
    let i = a.size, p = this.bufferManager.acquireBuffer(i, a.usage);
    this.ensureCommandEncoderReady(), this.ensureComputePassEnded(), this.currentCommandEncoder.copyBufferToBuffer(a.buffer, 0, p, 0, i), this.submitQueue();
    let u = this.makeTensorInfo(s, n), c = cr().makeTensorFromTensorInfo(u), l = this.tensorMap.get(u.dataId);
    return l.resourceInfo = { size: i, usage: this.defaultGpuBufferUsage(), buffer: p }, { tensorRef: c, buffer: p, bufSize: i };
  }
  bufferSync(e) {
    let t6 = this.readSync(e.dataId);
    if (e.dtype === "string")
      try {
        let o = t6.map((n) => y.decodeString(n));
        return le(e.shape, e.dtype, o);
      } catch (o) {
        throw new Error("Failed to decode encoded string bytes into utf-8");
      }
    return le(e.shape, e.dtype, t6);
  }
  async time(e) {
    this.supportTimeQuery || console.warn("This device doesn't support timestamp-query-inside-passes extension. Start Chrome browser with flag --disable-dawn-features=disallow_unsafe_apis then try again. Otherwise, zero will be shown for the kernel time when profiling mode is enabled. Using performance.now is not workable for webgpu since it doesn't support synchronous data read from GPU.");
    let t6 = this.activeTimers, o = [], n = false;
    this.programTimersStack == null ? (this.programTimersStack = o, n = true) : this.activeTimers.push(o), this.activeTimers = o, e();
    let s = y.flatten(this.activeTimers.map((u) => u.query)).filter((u) => u != null), a = y.flatten(this.activeTimers.map((u) => u.name)).filter((u) => u != null);
    this.activeTimers = t6, n && (this.programTimersStack = null);
    let i = { uploadWaitMs: this.uploadWaitMs, downloadWaitMs: this.downloadWaitMs, kernelMs: null, wallMs: null }, p = await Promise.all(s);
    return i.kernelMs = y.sum(p), i.getExtraProfileInfo = () => p.map((u, c) => ({ name: a[c], ms: u })).map((u) => `${u.name}: ${u.ms}`).join(", "), this.uploadWaitMs = 0, this.downloadWaitMs = 0, i;
  }
  makeTensorInfo(e, t6, o) {
    return t6 === "string" && o != null && o.length > 0 && y.isString(o[0]) && (o = o.map((s) => y.encodeString(s))), { dataId: this.write(o, e, t6), shape: e, dtype: t6 };
  }
  tensorToBinding(e) {
    if (!e)
      return null;
    let t6 = this.tensorMap.get(e.dataId);
    if ("texture" in t6.resourceInfo) {
      let n = t6.resourceInfo;
      return n.texture instanceof GPUExternalTexture ? n.texture : n.texture.createView();
    }
    let o = t6.resourceInfo;
    return { offset: 0, size: o.size, buffer: o.buffer };
  }
  async getQueryTime(e) {
    return this.supportTimeQuery ? this.getTimeFromQuerySet(e) : 0;
  }
  uploadToGPU(e) {
    let t6 = this.tensorMap.get(e);
    if (t6.resourceInfo)
      return;
    let o = rI(t6.dtype) * y.sizeFromShape(t6.shape), n = this.bufferManager.acquireBuffer(o, this.defaultGpuBufferUsage());
    if (t6.resourceInfo = { size: o, usage: this.defaultGpuBufferUsage(), buffer: n }, t6.values) {
      let s = this.bufferManager.acquireUploadBuffer(o, GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC), a = s.getMappedRange();
      t6.dtype === "int32" || t6.dtype === "bool" ? new Int32Array(a).set(t6.values) : new Float32Array(a).set(t6.values), s.unmap(), this.ensureCommandEncoderReady(), this.ensureComputePassEnded(), this.currentCommandEncoder.copyBufferToBuffer(s, 0, n, 0, o);
      let i = { size: o, usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC, buffer: s };
      this.stagingPendingDisposal.push(i);
    }
  }
  makeUniforms(e) {
    let t6 = 0, o = 0, n = [];
    e.forEach((p) => {
      p.data.length === 0 && (p.data = [1]);
      let u;
      switch (p.data.length) {
        case 1:
          u = 4;
          break;
        case 2:
          u = 8;
          break;
        case 3:
          u = 16;
          break;
        case 4:
          u = 16;
          break;
        case 5:
          u = 16;
          break;
        case 6:
          u = 16;
          break;
        default:
          y.assert(false, () => `Unsupported ${p.data.length}D shape`);
      }
      (o === 5 || o === 6) && (u = 16), t6 = Math.ceil(t6 / u) * u, o = p.data.length, n.push(t6), t6 += p.data.length * 4;
    });
    let s = new ArrayBuffer(t6);
    e.forEach((p, u) => {
      let c = n[u];
      p.type === "int32" ? new Int32Array(s, c, p.data.length).set(p.data) : p.type === "uint32" ? new Uint32Array(s, c, p.data.length).set(p.data) : new Float32Array(s, c, p.data.length).set(p.data);
    });
    let a = this.bufferManager.acquireBuffer(t6, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);
    this.queue.writeBuffer(a, 0, s, 0, t6);
    let i = { size: t6, usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM, buffer: a };
    return this.uniformPendingDisposal.push(i), { offset: 0, size: t6, buffer: a };
  }
  runWebGPUProgram(e, t6, o, n, s) {
    if (s || (s = this.makeTensorInfo(e.outputShape, o)), y.sizeFromShape(s.shape) === 0)
      return this.tensorMap.get(s.dataId).values = y.getTypedArrayFromDType(s.dtype, 0), s;
    this.uploadToGPU(s.dataId), e.dispatch = Wee(this.device, e);
    let a = [], i = [];
    if (!e.isFromPixels) {
      a.push({ type: "float32", data: [NaN] }, { type: "float32", data: [1 / 0] }), i = t6.concat(s).map((x) => x.shape);
      let h = "int32";
      i.map((x) => {
        a.push({ type: h, data: x });
      });
      let g = y.computeStrides(s.shape);
      if (a.push({ type: h, data: g }), e.size) {
        let x = y.sizeFromShape(e.outputShape);
        a.push({ type: h, data: [e.isVec4 ? x / 4 : x] });
      }
    }
    let p = t6.map((h, g) => {
      if (h.dtype === "complex64")
        throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");
      return this.uploadToGPU(h.dataId), { dtype: this.tensorMap.get(h.dataId).dtype, shape: h.shape, name: e.variableNames[g] };
    }), u = R3(e, i, p, s), c;
    u in this.pipelineCache ? c = this.pipelineCache[u] : (c = A3(this.device, e, p, s), this.pipelineCache[u] = c), n && (a = [...a, ...n]);
    let l = [this.tensorToBinding(s), ...t6.map((h) => this.tensorToBinding(h)), this.makeUniforms(a)], m = this.device.createBindGroup({ layout: c.getBindGroupLayout(0), entries: l.map((h, g) => ({ binding: g, resource: h })) });
    this.ensureCommandEncoderReady();
    let d = this.getComputePass(), f = this.activeTimers != null;
    return f && this.supportTimeQuery && d.writeTimestamp(this.querySet, 0), d.setPipeline(c), d.setBindGroup(0, m), d.dispatchWorkgroups(e.dispatch[0], e.dispatch[1], e.dispatch[2]), f && this.supportTimeQuery && d.writeTimestamp(this.querySet, 1), this.dispatchNumberInEncoder++, t6.forEach((h) => {
      this.commandQueueOwnedIds.add(h.dataId);
    }), this.commandQueueOwnedIds.add(s.dataId), O().get("WEBGPU_DEFERRED_SUBMIT_BATCH_SIZE") <= this.dispatchNumberInEncoder && this.submitQueue(), f && this.activeTimers.push({ name: e.constructor.name, query: this.getQueryTime(this.querySet) }), s;
  }
  async getTimeFromQuerySet(e) {
    let t6 = this.bufferManager.acquireBuffer(16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE), o = this.bufferManager.acquireBuffer(16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST);
    this.ensureCommandEncoderReady(), this.ensureComputePassEnded(), this.currentCommandEncoder.resolveQuerySet(e, 0, 2, t6, 0), this.currentCommandEncoder.copyBufferToBuffer(t6, 0, o, 0, 16), this.submitQueue(), await o.mapAsync(GPUMapMode.READ);
    let n = new BigUint64Array(o.getMappedRange()), s = Number(n[1] - n[0]);
    return o.unmap(), this.bufferManager.releaseBuffer(o, 16, GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST), this.bufferManager.releaseBuffer(t6, 16, GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE), s / 1e6;
  }
  shouldExecuteOnCPU(e, t6 = zee) {
    return O().getBool("WEBGPU_CPU_FORWARD") && e.every((o) => this.tensorMap.get(o.dataId).resourceInfo == null && y.sizeFromShape(o.shape) < t6);
  }
  numDataIds() {
    return this.tensorMap.numDataIds() - this.tensorDataPendingDisposal.length;
  }
  dispose() {
    this.disposed || (this.bufferManager.dispose(), this.textureManager.dispose(), this.disposed = true);
  }
};
Ui.nextDataId = 0;
Bl() && Ci("webgpu", async () => {
  O().set("CHECK_COMPUTATION_FOR_ERRORS", false);
  let r = { powerPreference: O().get("WEBGPU_USE_LOW_POWER_GPU") ? "low-power" : "high-performance" }, e = await navigator.gpu.requestAdapter(r), t6 = {};
  e.features.has("timestamp-query-inside-passes") && (t6.requiredFeatures = ["timestamp-query-inside-passes"]);
  let o = e.limits;
  t6.requiredLimits = { maxComputeWorkgroupStorageSize: o.maxComputeWorkgroupStorageSize, maxComputeWorkgroupsPerDimension: o.maxComputeWorkgroupsPerDimension, maxStorageBufferBindingSize: o.maxStorageBufferBindingSize };
  let n = await e.requestDevice(t6), s = await e.requestAdapterInfo();
  return new Ui(n, s);
}, 3);
var ye;
(function(r) {
  r[r.ADD = 0] = "ADD", r[r.ATAN2 = 1] = "ATAN2", r[r.COMPLEX_MULTIPLY_IMAG = 2] = "COMPLEX_MULTIPLY_IMAG", r[r.COMPLEX_MULTIPLY_REAL = 3] = "COMPLEX_MULTIPLY_REAL", r[r.DIV = 4] = "DIV", r[r.EQUAL = 5] = "EQUAL", r[r.GREATER = 6] = "GREATER", r[r.GREATER_EQUAL = 7] = "GREATER_EQUAL", r[r.INT_DIV = 8] = "INT_DIV", r[r.LESS = 9] = "LESS", r[r.LESS_EQUAL = 10] = "LESS_EQUAL", r[r.LOGICAL_AND = 11] = "LOGICAL_AND", r[r.MAX = 12] = "MAX", r[r.MIN = 13] = "MIN", r[r.MOD = 14] = "MOD", r[r.MUL = 15] = "MUL", r[r.NOT_EQUAL = 16] = "NOT_EQUAL", r[r.POW = 17] = "POW", r[r.PRELU = 18] = "PRELU", r[r.SQUARED_DIFFERENCE = 19] = "SQUARED_DIFFERENCE", r[r.SUB = 20] = "SUB";
})(ye || (ye = {}));
var D3 = `
  if (isnan(a)) { return a; }
  if (isnan(b)) { return b; }
  `;
var O3 = `
  if (isNaN.r) {
    resultTemp.r = valueForNaN;
  }
  if (isNaN.g) {
    resultTemp.g = valueForNaN;
  }
  if (isNaN.b) {
    resultTemp.b = valueForNaN;
  }
  if (isNaN.a) {
    resultTemp.a = valueForNaN;
  }
  `;
var aI = `
  let isNaN = isnanVec4(a) | isnanVec4(b);
  ${O3}
  `;
var Uee = "return a + b;";
var Gee = "return areal * breal - aimag * bimag;";
var Hee = "return areal * bimag + aimag * breal;";
var qee = "return a / b;";
var Kee = "return f32(a == b);";
var jee = "return vec4<f32>(a == b);";
var Xee = "return f32(a > b);";
var Yee = "return vec4<f32>(a > b);";
var Qee = "return f32(a >= b);";
var Zee = "return vec4<f32>(a >= b);";
var Jee = `
  let s = sign(a) * sign(b);
  let ia = i32(round(a));
  let ib = i32(round(b));
  return f32(idiv(ia, ib, s));
`;
var ete = `
  let ia = vec4<i32>(round(a));
  let ib = vec4<i32>(round(b));
  let cond = ib != vec4<i32>(0);
  var resultTemp = vec4<i32>(0);
  let s = sign(a) * sign(b);

  // Windows (D3D) wants guaranteed non-zero int division at compile-time.
  if (cond[0]) {
    resultTemp[0] = idiv(ia[0], ib[0], s[0]);
  }
  if (cond[1]) {
    resultTemp[1] = idiv(ia[1], ib[1], s[1]);
  }
  if (cond[2]) {
    resultTemp[2] = idiv(ia[2], ib[2], s[2]);
  }
  if (cond[3]) {
    resultTemp[3] = idiv(ia[3], ib[3], s[3]);
  }
  return vec4<f32>(resultTemp);
`;
var tte = "return f32(a < b);";
var rte = "return vec4<f32>(a < b);";
var ote = "return f32(a <= b);";
var nte = "return vec4<f32>(a <= b);";
var ste = "return f32(f32(a) >= 1.0 && f32(b) >= 1.0);";
var ate = `return (vec4<f32>(a >= vec4<f32>(1.0)) *
  vec4<f32>(b >= vec4<f32>(1.0)));`;
var ite = `
  ${D3}
  if (b == 0.) {
    return uniforms.NAN;
  }
  var resultTemp = a % b;
  if ((a < 0. && b < 0.) || (a >= 0. && b > 0.)) {
    return resultTemp;
  } else {
    return (resultTemp + b) % b;
  }
`;
var ute = `
  let valueForNaN = uniforms.NAN;
  var resultTemp = vec4<f32>(a % b);
  ${aI}

  if (b[0] == 0.) {
    resultTemp[0] = uniforms.NAN;
  }
  if (b[1] == 0.) {
    resultTemp[1] = uniforms.NAN;
  }
  if (b[2] == 0.) {
    resultTemp[2] = uniforms.NAN;
  }
  if (b[3] == 0.) {
    resultTemp[3] = uniforms.NAN;
  }

  if (!((a[0] < 0. && b[0] < 0.) || (a[0] >= 0. && b[0] > 0.))) {
    resultTemp[0] = (resultTemp[0] + b[0]) % b[0];
  }
  if (!((a[1] < 0. && b[1] < 0.) || (a[1] >= 0. && b[1] > 0.))) {
    resultTemp[1] = (resultTemp[1] + b[1]) % b[1];
  }
  if (!((a[2] < 0. && b[2] < 0.) || (a[2] >= 0. && b[2] > 0.))) {
    resultTemp[2] = (resultTemp[2] + b[2]) % b[2];
  }
  if (!((a[3] < 0. && b[3] < 0.) || (a[3] >= 0. && b[3] > 0.))) {
    resultTemp[3] = (resultTemp[3] + b[3]) % b[3];
  }

  return resultTemp;
`;
var pte = "return a * b;";
var cte = `
  if (isnan(a) || isnan(b)) {
    return 1.0;
  }
  return f32(a != b);
`;
var lte = `
  var resultTemp = vec4<f32>(a != b);
  let valueForNaN = 1.0;
  ${aI}

  return resultTemp;
`;
var mte = `
  if(a < 0.0 && floor(b) < b) {
    return uniforms.NAN;
  }
  if (b == 0.0) {
    return 1.0;
  }
  if (round(abs(b) % 2.0) != 1.0) {
    return pow(abs(a), b);
  }
  return sign(a) * pow(abs(a), b);
`;
var dte = `
  let isModRound1Bool = vec4<i32>(round(abs(b) % vec4<f32>(2.0))) == vec4<i32>(1);
  let isModRound1 = vec4<f32>(isModRound1Bool);
  let multiplier = sign(a) * isModRound1 + (vec4<f32>(1.0) - isModRound1);
  var resultTemp = multiplier * pow(abs(a), b);

  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS
  let isExpZero = b == vec4<f32>(0.0);
  if (isExpZero.r) {
    resultTemp.r = 1.0;
  }
  if (isExpZero.g) {
    resultTemp.g = 1.0;
  }
  if (isExpZero.b) {
    resultTemp.b = 1.0;
  }
  if (isExpZero.a) {
    resultTemp.a = 1.0;
  }
  let isNaN = (a < vec4<f32>(0.0)) & (floor(b) < b);
  let valueForNaN = uniforms.NAN;
  ${O3}
  return resultTemp;
`;
var fte = "if (a < 0.0) { return b * a; }  return a;";
var hte = `
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (b * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`;
var gte = "return (a - b) * (a - b);";
var xte = "return a - b;";
function sI(r, e, t6 = "uniforms.NAN") {
  let o = e ? aI : D3;
  return e ? `
    let valueForNaN = ${t6};
    var resultTemp = vec4<f32>(${r}(a, b));
    ` + o + `
    return resultTemp;
  ` : o + `
    return ${r}(a, b);
  `;
}
function Ic(r, e) {
  switch (r) {
    case ye.ADD:
      return Uee;
    case ye.ATAN2:
      return sI("atan2", e);
    case ye.COMPLEX_MULTIPLY_IMAG:
      return Hee;
    case ye.COMPLEX_MULTIPLY_REAL:
      return Gee;
    case ye.DIV:
      return qee;
    case ye.EQUAL:
      return e ? jee : Kee;
    case ye.GREATER:
      return e ? Yee : Xee;
    case ye.GREATER_EQUAL:
      return e ? Zee : Qee;
    case ye.INT_DIV:
      return e ? ete : Jee;
    case ye.LESS:
      return e ? rte : tte;
    case ye.LESS_EQUAL:
      return e ? nte : ote;
    case ye.LOGICAL_AND:
      return e ? ate : ste;
    case ye.MAX:
      return sI("max", e);
    case ye.MIN:
      return sI("min", e);
    case ye.MOD:
      return e ? ute : ite;
    case ye.MUL:
      return pte;
    case ye.NOT_EQUAL:
      return e ? lte : cte;
    case ye.POW:
      return e ? dte : mte;
    case ye.PRELU:
      return e ? hte : fte;
    case ye.SQUARED_DIFFERENCE:
      return gte;
    case ye.SUB:
      return xte;
    default:
      throw new Error(`BinaryType ${r} is not implemented!`);
  }
}
var Q;
(function(r) {
  r[r.ABS = 0] = "ABS", r[r.ACOS = 1] = "ACOS", r[r.ACOSH = 2] = "ACOSH", r[r.ASIN = 3] = "ASIN", r[r.ASINH = 4] = "ASINH", r[r.ATAN = 5] = "ATAN", r[r.ATANH = 6] = "ATANH", r[r.CEIL = 7] = "CEIL", r[r.COS = 8] = "COS", r[r.COSH = 9] = "COSH", r[r.ELU = 10] = "ELU", r[r.ERF = 11] = "ERF", r[r.EXP = 12] = "EXP", r[r.EXPM1 = 13] = "EXPM1", r[r.FLOOR = 14] = "FLOOR", r[r.IS_FINITE = 15] = "IS_FINITE", r[r.IS_INF = 16] = "IS_INF", r[r.IS_NAN = 17] = "IS_NAN", r[r.LINEAR = 18] = "LINEAR", r[r.LOG = 19] = "LOG", r[r.LOG1P = 20] = "LOG1P", r[r.LOGICAL_NOT = 21] = "LOGICAL_NOT", r[r.NEG = 22] = "NEG", r[r.RELU = 23] = "RELU", r[r.RELU6 = 24] = "RELU6", r[r.LEAKYRELU = 25] = "LEAKYRELU", r[r.RECIPROCAL = 26] = "RECIPROCAL", r[r.RSQRT = 27] = "RSQRT", r[r.SIN = 28] = "SIN", r[r.SINH = 29] = "SINH", r[r.SIGMOID = 30] = "SIGMOID", r[r.SQRT = 31] = "SQRT", r[r.SQUARE = 32] = "SQUARE", r[r.TAN = 33] = "TAN", r[r.TANH = 34] = "TANH", r[r.TO_INT = 35] = "TO_INT";
})(Q || (Q = {}));
var yte = "return abs(a);";
var bte = `
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return acos(a);
`;
var Cte = `
  if (a < 1.) {
    return uniforms.NAN;
  }
  return acosh(a);
`;
var Ste = `
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  return asin(a);
`;
var wte = "return asinh(a);";
var Ite = `
  if (isnan(a)) {
    return uniforms.NAN;
  }
  return atan(a);
`;
var vte = `
  if (abs(a) > 1.) {
    return uniforms.NAN;
  }
  if (a == 1.) {
    return uniforms.INFINITY;
  }
  if (a == -1.) {
    return -uniforms.INFINITY;
  }
  return atanh(a);
`;
var kte = "return ceil(a);";
var Nte = "return cos(a);";
var Tte = `
  let e2x = exp(-a);
  return (e2x + 1.0 / e2x) / 2.0;
`;
var _te = "return exp(a) - 1.0;";
var Ete = "if (a >= 0.0) { return a; }  return (exp(a) - 1.0);";
var $te = `
  var resFloat = exp(a) - vec4<f32>(1.0);
  if (a.r >= 0.0) {
    resFloat.r = a.r;
  }
  if (a.g >= 0.0) {
    resFloat.g = a.g;
  }
  if (a.b >= 0.0) {
    resFloat.b = a.b;
  }
  if (a.a >= 0.0) {
    resFloat.a = a.a;
  }
  return resFloat;
`;
var Ate = `
  // Error function is calculated approximately with elementary function.
  // See "Handbook of Mathematical Functions with Formulas,
  // Graphs, and Mathematical Tables", Abramowitz and Stegun.
  let p = ${S.ERF_P};
  let a1 = ${S.ERF_A1};
  let a2 = ${S.ERF_A2};
  let a3 = ${S.ERF_A3};
  let a4 = ${S.ERF_A4};
  let a5 = ${S.ERF_A5};

  let sign = sign(a);
  let absA = abs(a);
  let t = 1.0 / (1.0 + p * absA);
  return sign * (1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * exp(-absA * absA));
`;
var Rte = "return exp(a);";
var Fte = "return floor(a);";
var Dte = "return f32(!isnan(a) && !isinf(a));";
var Ote = "return f32(isinf(a));";
var Pte = "return f32(isnan(a));";
var Mte = "return a;";
var Lte = `if (a < 0.0) { return uniforms.NAN; }
  return log(a);`;
var Bte = `
  if (isnan(a)) { return a; }
  return log(1.0 + a);
`;
var Vte = "return f32(!(a >= 1.0));";
var zte = "return -a;";
var Wte = "if (a < 0.0) { return uniforms.alpha * a; } return a;";
var Ute = `
  let aLessThanZero = vec4<f32>(a < vec4<f32>(0.0));
  return (aLessThanZero * (uniforms.alpha * a)) + ((vec4<f32>(1.0) - aLessThanZero) * a);
`;
var Gte = "return 1.0 / a;";
var Hte = "return select(a, 0.0, a < 0.0);";
var qte = "return clamp(a, 0.0, 6.0);";
var Kte = "return clamp(a, vec4<f32>(0.0, 0.0, 0.0, 0.0), vec4<f32>(6.0, 6.0, 6.0, 6.0));";
var jte = `
  return select(a, vec4<f32>(0.0), a < vec4<f32>(0.0));
`;
var Xte = "return inverseSqrt(a);";
var Yte = "return 1.0 / (1.0 + exp(-1.0 * a));";
var Qte = "return sin(a);";
var Zte = `
  let e2x = exp(a);
  return (e2x - 1.0 / e2x) / 2.0;
`;
var Jte = "return sqrt(a);";
var ere = "return a * a;";
var tre = "return tan(a);";
var rre = `
  let e2x = exp(-2.0 * abs(a));
  return sign(a) * (1.0 - e2x) / (1.0 + e2x);
`;
var ore = "return f32(i32((a)));";
function Ha(r, e) {
  switch (r) {
    case Q.ABS:
      return yte;
    case Q.ACOS:
      return bte;
    case Q.ACOSH:
      return Cte;
    case Q.ASIN:
      return Ste;
    case Q.ASINH:
      return wte;
    case Q.ATAN:
      return Ite;
    case Q.ATANH:
      return vte;
    case Q.COS:
      return Nte;
    case Q.COSH:
      return Tte;
    case Q.CEIL:
      return kte;
    case Q.ELU:
      return e ? $te : Ete;
    case Q.ERF:
      return Ate;
    case Q.EXP:
      return Rte;
    case Q.EXPM1:
      return _te;
    case Q.FLOOR:
      return Fte;
    case Q.IS_FINITE:
      return Dte;
    case Q.IS_INF:
      return Ote;
    case Q.IS_NAN:
      return Pte;
    case Q.LINEAR:
      return Mte;
    case Q.LOG:
      return Lte;
    case Q.LOG1P:
      return Bte;
    case Q.LOGICAL_NOT:
      return Vte;
    case Q.NEG:
      return zte;
    case Q.LEAKYRELU:
      return e ? Ute : Wte;
    case Q.RECIPROCAL:
      return Gte;
    case Q.RELU:
      return e ? jte : Hte;
    case Q.RELU6:
      return e ? Kte : qte;
    case Q.RSQRT:
      return Xte;
    case Q.SIGMOID:
      return Yte;
    case Q.SIN:
      return Qte;
    case Q.SINH:
      return Zte;
    case Q.SQRT:
      return Jte;
    case Q.SQUARE:
      return ere;
    case Q.TAN:
      return tre;
    case Q.TANH:
      return rre;
    case Q.TO_INT:
      return ore;
    default:
      throw new Error(`BinaryType ${r} is not implemented!`);
  }
}
var kt = (r) => {
  switch (r) {
    case 1:
      return "f32";
    case 2:
      return "vec2<f32>";
    case 3:
      return "vec3<f32>";
    case 4:
      return "vec4<f32>";
    default:
      throw new Error(`${r}-component is not supported.`);
  }
};
function ur(r, e = false, t6 = false, o = 3) {
  if (r === null)
    return "";
  let n = "";
  if (r === "linear")
    n = Ha(Q.LINEAR);
  else if (r === "relu")
    n = Ha(Q.RELU, t6);
  else if (r === "elu")
    n = Ha(Q.ELU, t6);
  else if (r === "relu6")
    n = Ha(Q.RELU6, t6);
  else if (r === "prelu")
    n = Ic(ye.PRELU, t6);
  else if (r === "sigmoid")
    n = Ha(Q.SIGMOID, t6);
  else if (r === "leakyrelu")
    n = Ha(Q.LEAKYRELU, t6);
  else
    throw new Error(`Activation ${r} has not been implemented for the WebGPU backend.`);
  let a = kt(t6 ? 4 : 1), i = "";
  return e ? i = `
      fn activation(a : ${a}, coords : vec${o}<i32>) -> ${a} {
        let b = getPreluActivationWeightsByOutputCoords(coords);
        ${n}
      }` : i = `
      fn activation(a : ${a}, coords : vec${o}<i32>) -> ${a} {
        ${n}
      }`, i;
}
function Hr(r, e) {
  return `
      ${r ? "value = value + getBiasByOutputCoords(coords);" : ""}
      ${e ? "value = activation(value, coords);" : ""}
      `;
}
function iI(r, e, t6, o, n = false, s = false, a = false, i = 1) {
  y.assert(t6 && i === 1 || !t6, () => `transposeA ${t6} is not compatible with component size ${i}`);
  let p = `
      let batch = ${r ? "0" : "batchIn"};
      ${t6 ? "value = getA(batch, col, row);" : "value = getA(batch, row, col);"}

    `, u = o ? "value = getB(batch, col, row);" : "value = getB(batch, row, col);";
  return `
  fn mm_readA(batchIn: i32, row: i32, colIn: i32) -> ${kt(i)} {
    var value = ${kt(i)}(0.0);
    let col = colIn * ${i};
    ${n && a ? p : `
    ${t6 ? "if(row < uniforms.dimAOuter && col < uniforms.dimInner)" : "if(row < uniforms.aShape[1] && col < uniforms.aShape[2])"}
    {
      ${p}
    }
    `}
    return value;
  }

  fn mm_readB(batchIn: i32, row: i32, colIn: i32) -> ${kt(i)} {
    let col = colIn * ${i};
    let batch = ${e ? "0" : "batchIn"};
    var value = ${kt(i)}(0.0);
    ${u}
    return value;
  }
  `;
}
function Vl(r, e, t6, o, n, s, a = false, i = false, p = false, u = 1) {
  return `
  ${iI(t6, o, n, s, a, i, p, u)}
  fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${kt(u)}) {
    let col = colIn * ${u};
    ${a && i ? "" : "if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)"}
    {
      var value = valueIn;
      let coords = vec3<i32>(batch, row, col);
      ${Hr(r, e)}
      setOutputAtCoords(coords[0], coords[1], coords[2], value);
    }
  }
  `;
}
var nre = (r) => r ? `
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol);
        ` : `
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol);
        `;
var sre = (r, e) => r ? `
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${e === 3 ? "" : "let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${e === 3 ? "" : "acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }` : `
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${e === 3 ? "" : "acc[i] = BCached3 * ACached.w + acc[i];"}
        }`;
function Wu(r, e, t6 = false, o = 32, n = false, s = 32, a = false) {
  let i = e[1] * r[1], p = e[0] * r[0], u = t6 ? i : o, c = t6 ? o : i, l = u / e[0], m = o / e[1];
  return y.assert((t6 && l === 4 && r[1] === 4 || !t6 && (l === 3 || l === 4)) && u % e[0] === 0 && o % e[1] === 0 && r[0] === 4, () => `If transposeA ${t6} is true, innerElementSize ${l} and workPerThread[1] ${r[1]} must be 4.
          Otherwise, innerElementSize ${l} must be 3 or 4.
      tileAWidth ${u} must be divisible by workgroupSize[0]${e[0]}. tileInner ${o} must be divisible by workgroupSize[1] ${e[1]}. colPerThread ${r[0]} must be 4.`), `
  var<workgroup> mm_Asub : array<array<vec${l}<f32>, ${u / l}>, ${c}>;
  var<workgroup> mm_Bsub : array<array<vec4<f32>, ${p / r[0]}>, ${o}>;

  const rowPerThread = ${r[1]};
  const colPerThread = ${r[0]};
  const innerElementSize = ${l};
  const tileInner = ${o};

  ${se()} {
    let localRow = i32(localId.y);
    let tileRow = ${a ? "0" : "localRow * rowPerThread"};
    let tileCol = i32(localId.x);

    let globalRow = ${a ? "0" : "i32(globalId.y) * rowPerThread"};
    let globalCol = i32(globalId.x);
    let batch = ${n ? "0" : "i32(globalId.z)"};
    let globalRowStart = i32(workgroupId.y) * ${i};

    let numTiles = ${n ? `${Math.ceil(s / o)}` : "(uniforms.dimInner - 1) / tileInner + 1"};
    var kStart = ${n ? `i32(globalId.z) * ${s}` : "0"};

    var acc: array<vec4<f32>, rowPerThread>;

    // Loop over shared dimension.
    let tileRowB = localRow * ${m};
    for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
            let inputRow = tileRow + innerRow;
            let inputCol = tileCol;
            ${nre(t6)}
        }

        // Load one tile of B into local memory.
        for (var innerRow = 0; innerRow < ${m}; innerRow = innerRow + 1) {
            let inputRow = tileRowB + innerRow;
            let inputCol = tileCol;
            mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol);
        }
        kStart = kStart + tileInner;
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
            let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
            let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
            let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
            ${l === 3 ? "" : "let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

            ${sre(t6, l)}
        }

        workgroupBarrier();
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
        mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
    }
  }`;
}
var P3 = (r) => r ? `
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart + inputCol);
        ` : `
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRowStart + inputRow,
          kStart + inputCol);
        `;
var are = (r) => r ? "let ACached = mm_Asub[k][tileRow + innerRow];" : "let ACached = mm_Asub[tileRow + innerRow][k];";
function Uu(r, e, t6 = false, o = 32, n = false, s = 32, a = false) {
  let i = r[1] * e[1], p = r[0] * e[0], u = t6 ? i : o, c = t6 ? o : i;
  y.assert(c % e[1] === 0 && u % e[0] === 0 && o % e[1] === 0, () => `tileAHight ${c} must be divisible by workgroupSize[1]${e[1]}, tileAWidth ${u} must be divisible by workgroupSize[0]${e[0]}, tileInner ${o} must be divisible by workgroupSize[1]${e[1]}`);
  let l = c / e[1], m = u / e[0], d = o / e[1], f = a ? `
      let localRow = i32(localId.y);
      let localCol = i32(localId.x);
      let globalRowStart = i32(workgroupId.y) * ${i};
      let globalColStart = i32(workgroupId.x) * ${p};

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        for (var inputRow = localRow; inputRow < ${c}; inputRow = inputRow + ${e[1]}) {
          for (var inputCol = localCol; inputCol < ${u}; inputCol = inputCol + ${e[0]}) {
            ${P3(t6)}
          }
        }
        // Load one tile of B into local memory.
        for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${e[1]}) {
              for (var inputCol = localCol; inputCol < ${p}; inputCol = inputCol + ${e[0]}) {
            mm_Bsub[inputRow][inputCol] = mm_readB(batch,
              kStart + inputRow,
              globalColStart + inputCol);
          }
        }
        kStart = kStart + tileInner;
        workgroupBarrier();

        // Compute acc values for a single thread.
        var BCached : array<f32, colPerThread>;
        for (var k = 0; k < tileInner; k = k + 1) {
          for (var inner = 0; inner < colPerThread; inner = inner + 1) {
            BCached[inner] = mm_Bsub[k][localCol + inner * ${e[0]}];
          }
          for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
            let ACached = ${t6 ? `mm_Asub[k][localRow + innerRow * ${e[1]}];` : `mm_Asub[localRow + innerRow * ${e[1]}][k];`}
            for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
              acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                  ACached * BCached[innerCol];
            }
          }
        }
        workgroupBarrier();
      }
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
        let gRow = globalRowStart + localRow + innerRow * ${e[1]};
        for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
          let gCol = globalColStart + localCol + innerCol * ${e[0]};
          mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
        }
      }
      ` : `
  let tileRow = i32(localId.y) * rowPerThread;
  let tileCol = i32(localId.x) * colPerThread;

  let globalRow = i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x) * colPerThread;
  let globalRowStart = i32(workgroupId.y) * ${i};

  let tileRowA = i32(localId.y) * ${l};
  let tileColA = i32(localId.x) * ${m};
  let tileRowB = i32(localId.y) * ${d};
  // Loop over shared dimension.
  for (var t = 0; t < numTiles; t = t + 1) {
    // Load one tile of A into local memory.
    for (var innerRow = 0; innerRow < ${l}; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < ${m}; innerCol = innerCol + 1) {
        let inputRow = tileRowA + innerRow;
        let inputCol = tileColA + innerCol;
        ${P3(t6)}
      }
    }

    // Load one tile of B into local memory.
    for (var innerRow = 0; innerRow < ${d}; innerRow = innerRow + 1) {
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let inputRow = tileRowB + innerRow;
        let inputCol = tileCol + innerCol;
        mm_Bsub[inputRow][inputCol] = mm_readB(batch,
          kStart + inputRow,
          globalCol + innerCol);
      }
    }
    kStart = kStart + tileInner;
    workgroupBarrier();

    // Compute acc values for a single thread.
    var BCached : array<f32, colPerThread>;
    for (var k = 0; k < tileInner; k = k + 1) {
      for (var inner = 0; inner < colPerThread; inner = inner + 1) {
        BCached[inner] = mm_Bsub[k][tileCol + inner];
      }

      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
        ${are(t6)}
        for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
          acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
        }
      }
    }

    workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      mm_write(batch, globalRow + innerRow, globalCol + innerCol,
          acc[innerRow][innerCol]);
    }
  }
  `;
  return `
    var<workgroup> mm_Asub : array<array<f32, ${u}>, ${c}>;
    var<workgroup> mm_Bsub : array<array<f32, ${p}>, ${o}>;
    const rowPerThread = ${r[1]};
    const colPerThread = ${r[0]};
    const tileInner = ${o};

    ${se()} {
      let batch = ${n ? "0" : "i32(globalId.z)"};
      let numTiles = ${n ? `${Math.ceil(s / o)}` : "(uniforms.dimInner - 1) / tileInner + 1"};
      var kStart = ${n ? `i32(globalId.z) * ${s}` : "0"};

      var acc : array<array<f32, colPerThread>, rowPerThread>;

      // Without this initialization strange values show up in acc.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
        for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
          acc[innerRow][innerCol] = 0.0;
        }
      }
      ${f}
    }
  `;
}
var ire = (r) => r ? `
      mm_readA(batch, colA, globalRow),
      mm_readA(batch, colA + 1, globalRow),
      mm_readA(batch, colA + 2, globalRow),
      mm_readA(batch, colA + 3, globalRow)
  ` : `
      mm_readA(batch, globalRow, colA),
      mm_readA(batch, globalRow, colA + 1),
      mm_readA(batch, globalRow, colA + 2),
      mm_readA(batch, globalRow, colA + 3)
  `;
function ure(r, e = false) {
  return y.assert(r[1] === 1 && r[2] === 1, () => `A linear work group size is required. But got ${r}.`), `
    const tileSize = ${r[0] * 4};
    var<workgroup> mm_Asub : array<vec4<f32>, ${r[0]}>;

    ${se()} {
      let tileCol = i32(localId.x);
      let globalCol = i32(globalId.x);
      let globalRow = i32(globalId.y);

      let numTiles = (uniforms.dimInner - 1) / tileSize + 1;
      let batch = i32(globalId.z);
      // Without this initialization strange values show up in acc.
      var acc = 0.0;

      // Loop over shared dimension.
      for (var t = 0; t < numTiles; t = t + 1) {
        // Load one tile of A into local memory.
        let colA = t * tileSize + tileCol * 4;
        mm_Asub[tileCol] = vec4<f32>(${ire(e)});
        workgroupBarrier();

        // Compute acc values for a single thread.
        for (var k = 0; k < tileSize / 4; k = k + 1) {
          let rowB = t * tileSize + k * 4;
          let BCached = vec4<f32>(mm_readB(batch, rowB, globalCol),
                              mm_readB(batch, rowB + 1, globalCol),
                              mm_readB(batch, rowB + 2, globalCol),
                              mm_readB(batch, rowB + 3, globalCol));

          let ACached = mm_Asub[k];
          acc = acc + dot(ACached, BCached);
        }

        workgroupBarrier();
      }

      mm_write(batch, globalRow, globalCol, acc);
    }
  `;
}
var _g = class {
  constructor(e, t6, o, n, s = false, a = false, i = null, p = null, u = null, c = false) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.outputShape = t6, this.dispatchLayout = { x: [2], y: [1], z: [0] };
    let l = s ? e[1] : e[2];
    if (this.isVec4 = (l % 4 === 0 && !s || t6[1] % 4 === 0 && s) && t6[2] % 4 === 0 && !a, this.isVectorA = t6[1] === 1 && !s, !this.isVec4 && this.isVectorA)
      this.elementsPerThread = [1, 1, 1], this.workgroupSize = [32, 1, 1];
    else {
      let f = tI(t6[1], l, t6[2], s);
      this.workgroupSize = f.workgroupSize, this.elementsPerThread = f.elementsPerThread;
    }
    this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread);
    let m = i != null, d = u != null;
    m && this.variableNames.push("bias"), d && this.variableNames.push("preluActivationWeights"), this.sequentialAccessByThreads = c, this.transposeA = s, this.transposeB = a, this.addBias = m, this.activation = p, this.hasPreluActivationWeights = d, this.batchAEqualOne = o, this.batchBEqualOne = n, [this.fitAOuter, this.fitBOuter, this.fitInner] = this.getShapeFit(t6[1], t6[2], l), this.shaderKey = `matMulPacked_${this.elementsPerThread}_${s}_${a}_${this.activation}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.isVectorA}_${this.batchAEqualOne}_${this.batchBEqualOne}_${this.sequentialAccessByThreads}`;
  }
  getShapeFit(e, t6, o) {
    let n = this.workgroupSize[1] * this.elementsPerThread[1], s = this.workgroupSize[0] * this.elementsPerThread[0];
    !this.isVec4 && this.isVectorA ? this.tileInner = this.workgroupSize[0] * 4 : this.tileInner = s;
    let a = e % n === 0, i = t6 % s === 0, p = o % this.tileInner === 0;
    return [a, i, p];
  }
  getUserCode() {
    return `
      ${ur(this.activation, this.hasPreluActivationWeights, this.isVec4)}
      ${Vl(this.addBias, this.activation, this.batchAEqualOne, this.batchBEqualOne, false, this.transposeB, this.fitAOuter, this.fitBOuter, this.fitInner, this.isVec4 ? 4 : 1)}
      ${this.isVec4 ? Wu(this.elementsPerThread, this.workgroupSize, this.transposeA, this.tileInner, false, null, this.isVectorA) : this.isVectorA ? ure(this.workgroupSize, this.transposeA) : Uu(this.elementsPerThread, this.workgroupSize, this.transposeA, this.tileInner, false, null, this.sequentialAccessByThreads)}
    `;
  }
};
function pre() {
  return `
    var<workgroup> sumValues : array<f32, workgroupSizeX>;
    ${se()} {
      let coords = getOutputCoords();
      let batch = coords[0];
      let row = coords[1];
      let col = coords[2];
      var sum = 0.0;
      let Length = uniforms.dimInner;
      for (var k = i32(localId.x); k < Length; k = k + i32(workgroupSizeX)) {
        let dataA = mm_readA(batch, row, k);
        let dataB = mm_readB(batch, k, col);
        sum = sum + dataA * dataB;
      }
      sumValues[localId.x] = sum;
      workgroupBarrier();

      for(var currentSize = workgroupSizeX / 2u; currentSize > 1u;
          currentSize = currentSize / 2u) {
        if (localId.x < currentSize)
        {
          sumValues[localId.x] = sumValues[localId.x] + sumValues[localId.x + currentSize];
        }
        workgroupBarrier();
      }

      if (localId.x == 0u) {
        sum = sumValues[0] + sumValues[1];
        mm_write(batch, row, col, sum);
      }
    }
  `;
}
var Eg = class {
  constructor(e, t6, o, n = false, s = false, a = null, i = null, p = null) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workgroupSize = [256, 1, 1], this.outputShape = e, this.dispatchLayout = { x: [], y: [1, 2], z: [0] }, this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize);
    let u = a != null, c = p != null;
    u && this.variableNames.push("bias"), c && this.variableNames.push("preluActivationWeights"), this.transposeA = n, this.transposeB = s, this.addBias = u, this.activation = i, this.hasPreluActivationWeights = c, this.batchAEqualOne = t6, this.batchBEqualOne = o, this.shaderKey = `matMulReduce_${this.activation}_${n}_${s}_${this.batchAEqualOne}_${this.batchBEqualOne}`;
  }
  getUserCode() {
    return `
      ${ur(this.activation, this.hasPreluActivationWeights)}
      ${Vl(this.addBias, this.activation, this.batchAEqualOne, this.batchBEqualOne, this.transposeA, this.transposeB)}
      ${pre()}
    `;
  }
};
function cre(r) {
  let e = r[1], t6 = r[0], o = e > t6 ? e : t6;
  return `
  var<workgroup> mm_Asub : array<array<f32, ${o}>, ${e}>;
  var<workgroup> mm_Bsub : array<array<f32, ${t6}>, ${o}>;

  // If the output size is small for matrix multiplication, avoid to use vec4
  // and handle some elements per thread to optimally utilize the ALU.
  // Read data from global memory to registers firstly, then store them into
  // shared memory, so it is instruction-Level parallelism for arithmetic
  // operations and others handle IO operations between barrier api, makes ALU
  // and load/store units work simultaneously, could improves the performance.
  ${se()} {
    let tileRow = i32(localId.y);
    let tileCol = i32(localId.x);
    let globalRow = i32(globalId.y);
    let globalCol = i32(globalId.x);
    let batch = i32(globalId.z);

    // uniforms.dimInner should be greater than 0.
    let numTiles = (uniforms.dimInner - 1) / ${o} + 1;
    var acc = 0.0;

    var globalColA = tileCol;
    var globalRowB = 0;
    var regA = mm_readA(batch, globalRow, globalColA);
    var regB0 = mm_readB(batch, globalRowB + 2 * tileRow, globalCol);
    var regB1 = mm_readB(batch, globalRowB + 2 * tileRow + 1, globalCol);
    globalColA = globalColA + ${o};
    globalRowB = globalRowB + ${o};

    for (var t = 0; t < numTiles; t = t + 1) {
      mm_Asub[tileRow][tileCol] = regA;
      mm_Bsub[2 * tileRow][tileCol] = regB0;
      mm_Bsub[2 * tileRow + 1][tileCol] = regB1;

      workgroupBarrier();

      regA = mm_readA(batch, globalRow, globalColA);
      regB0 = mm_readB(batch, globalRowB + 2 * tileRow, globalCol);
      regB1 = mm_readB(batch, globalRowB + 2 * tileRow + 1, globalCol);
      globalColA = globalColA + ${o};
      globalRowB = globalRowB + ${o};

      for (var k = 0; k < ${o}; k = k + 1) {
        acc = acc + mm_Asub[tileRow][k] * mm_Bsub[k][tileCol];
      }
      workgroupBarrier();
    }

    mm_write(batch, globalRow, globalCol, acc);
  }
  `;
}
var $g = class {
  constructor(e, t6, o, n = false, s = false, a = null, i = null, p = null) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workgroupSize = [16, 8, 1], this.outputShape = o, this.dispatchLayout = { x: [2], y: [1], z: [0] }, this.dispatch = [Math.ceil(o[2] / this.workgroupSize[0]), Math.ceil(o[1] / this.workgroupSize[1]), o[0]];
    let u = a != null;
    u && this.variableNames.push("bias");
    let c = p != null;
    c && this.variableNames.push("preluActivationWeights"), this.transposeA = n, this.transposeB = s, this.addBias = u, this.activation = i, this.hasPreluActivationWeights = c, this.batchAEqualOne = e[0] === 1, this.batchBEqualOne = t6[0] === 1, this.shaderKey = `matMulSmallOutputSize_${this.activation}_${n}_${s}_${this.batchAEqualOne}_${this.batchBEqualOne}`;
  }
  getUserCode() {
    return `
      ${ur(this.activation, this.hasPreluActivationWeights)}
      ${Vl(this.addBias, this.activation, this.batchAEqualOne, this.batchBEqualOne, this.transposeA, this.transposeB)}
      ${cre(this.workgroupSize)}
    `;
  }
};
var Ag = class {
  constructor(e, t6, o, n, s = false, a = false) {
    this.variableNames = ["A", "B"], this.uniforms = "dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.workgroupSize = [8, 8, 1], this.atomic = true, this.isVec4 = false, this.splitedDimInner = 128, y.assert(e[0] === 1, () => "MatMulSplitKProgram only supports batch = 1."), this.outputShape = e, this.dispatchLayout = { x: [2], y: [1], z: [0, 3] }, this.isVec4 = (s && this.outputShape[1] % 4 === 0 || !s && t6 % 4 === 0) && this.outputShape[2] % 4 === 0, this.elementsPerThread = [4, 4, this.splitedDimInner], this.isVec4 || (this.outputShape[1] < 16 && (this.elementsPerThread[1] = 1), this.outputShape[2] < 16 && (this.elementsPerThread[0] = 1)), this.dispatch = re(this.dispatchLayout, [this.outputShape[0], this.outputShape[1], this.outputShape[2], t6], this.workgroupSize, this.elementsPerThread), this.transposeA = s, this.transposeB = a, this.batchAEqualOne = o, this.batchBEqualOne = n, this.shaderKey = `matMulSplitK_${s}_${a}_${o}_${n}_${this.elementsPerThread}_${this.isVec4}`;
  }
  getUserCode() {
    let e = (n) => `
      for (var i = 0; i < ${n}; i = i + 1)
      {
        var oldValue = atomicLoad(&(result[flatIndex + i]));
        var exchanged = false;
        for (; !exchanged;) {
          let newValueF32 = bitcast<f32>(oldValue) + ${n > 1 ? "value[i]" : "value"};
          let newValue = bitcast<i32>(newValueF32);
          let res = atomicCompareExchangeWeak(&(result[flatIndex + i]), oldValue, newValue);
          oldValue = res.old_value;
          exchanged = res.exchanged;
        }
      }
      `, t6 = this.isVec4 ? 4 : 1;
    return `
      ${iI(this.batchAEqualOne, this.batchBEqualOne, false, this.transposeB, false, false, false, t6)}
      fn mm_write(batch: i32, row : i32, colIn : i32, value : ${kt(t6)}) {
        let col = colIn * ${t6};
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter) {
          let coords = vec3<i32>(batch, row, col);
          let flatIndex = getOutputIndexFromCoords(coords);
          // The problem is that we should initialize output to zero before using.
          // Otherwise, the original value will be added to the result.
          ${e(t6)}
        }
      }
      ${this.isVec4 ? Wu(this.elementsPerThread, this.workgroupSize, this.transposeA, 32, true, this.splitedDimInner) : Uu(this.elementsPerThread, this.workgroupSize, this.transposeA, 32, true, this.splitedDimInner)}
    `;
  }
};
var Rg = class {
  constructor(e, t6 = null, o = null, n = null) {
    this.uniforms = "", this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.addBias = t6 != null, this.hasPreluActivationWeights = n != null, this.activation = o, this.addBias && this.variableNames.push("bias"), this.hasPreluActivationWeights && this.variableNames.push("preluActivationWeights"), this.shaderKey = `biasActivation_${o}`;
  }
  getUserCode() {
    return `
    ${ur(this.activation, this.hasPreluActivationWeights)}
    ${se("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        var value = getXByOutputIndex(index);
        ${Hr(this.addBias, this.activation)}
        setOutputAtIndex(index, value);
      }
    }
    `;
  }
};
var Fg = class {
  constructor(e) {
    this.variableNames = [], this.outputShape = [], this.uniforms = "value : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "fill";
  }
  getUserCode() {
    return `
    ${se("index")} {
      if (index < uniforms.size) {
        setOutputAtIndex(index, uniforms.value);
      }
    }
  `;
  }
};
function dr(r) {
  let { backend: e, attrs: t6 } = r, { shape: o, value: n } = t6, { dtype: s } = t6;
  if (s = s || y.inferDtype(n), s === "string") {
    let a = y.getArrayFromDType(s, y.sizeFromShape(o));
    return a.fill(n), e.makeTensorInfo(o, s, a);
  } else {
    let a = new Fg(o), i = [{ type: "float32", data: [n] }];
    return e.runWebGPUProgram(a, [], s, i);
  }
}
var M3 = { kernelName: Cs, backendName: "webgpu", kernelFunc: dr };
function de(r) {
  let { inputs: e, attrs: t6 } = r, { x: o } = e, { shape: n } = t6, s = y.sizeFromShape(o.shape), a = y.inferFromImplicitShape(n, s), i = y.sizeFromShape(a);
  return y.assert(s === i, () => `The new shape (${a}) has ${i} elements and the old shape (${o.shape}) has ${s} elements. The new shape and old shape must have the same number of elements.`), r.backend.incRef(o.dataId), { dataId: o.dataId, shape: a, dtype: o.dtype };
}
var L3 = { kernelName: Ns, backendName: "webgpu", kernelFunc: de };
function Gu({ a: r, b: e, transposeA: t6, transposeB: o, backend: n, bias: s = null, preluActivationWeights: a = null, leakyreluAlpha: i = 0, activation: p = null }) {
  let u = r.shape.length, c = e.shape.length, l = t6 ? r.shape[u - 2] : r.shape[u - 1], m = o ? e.shape[c - 1] : e.shape[c - 2], d = t6 ? r.shape[u - 1] : r.shape[u - 2], f = o ? e.shape[c - 2] : e.shape[c - 1], h = r.shape.slice(0, -2), g = e.shape.slice(0, -2), x = y.sizeFromShape(h), b = y.sizeFromShape(g), w = br.assertAndGetBroadcastShape(r.shape.slice(0, -2), e.shape.slice(0, -2)).concat([d, f]);
  y.assert(l === m, () => `Error in matMul: inner shapes (${l}) and (${m}) of Tensors with shapes ${r.shape} and ${e.shape} and transposeA=${t6} and transposeB=${o} must match.`);
  let k = t6 ? [x, l, d] : [x, d, l], _ = o ? [b, f, m] : [b, m, f], $ = de({ inputs: { x: r }, backend: n, attrs: { shape: k } }), A = de({ inputs: { x: e }, backend: n, attrs: { shape: _ } }), R = [$, A], D = Math.max(x, b), P = x === 1, M = b === 1, L = [$, A], W = [{ type: "int32", data: [d] }, { type: "int32", data: [f] }, { type: "int32", data: [l] }], V, U, q = [D, d, f], H = O().get("WEBGPU_MATMUL_PROGRAM_TYPE");
  if (H < 0) {
    let X = O().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"), Z = X > 0 ? X : n.thresholdToIncreaseWorkgroups, ee = D * Math.ceil(d / 32) * Math.ceil(f / 32);
    ee <= Z || d <= 8 && ee <= Z * 2 ? D * d * f <= 128 ? H = Ao.MatMulReduceProgram : D === 1 && m >= 2e3 ? H = Ao.MatMulSplitKProgram : H = Ao.MatMulSmallOutputSizeProgram : H = Ao.MatMulPackedProgram;
  }
  switch (H) {
    case Ao.MatMulReduceProgram:
      V = new Eg(q, P, M, t6, o, s, p, a);
      break;
    case Ao.MatMulSplitKProgram: {
      if (U = dr({ backend: n, attrs: { shape: q, value: 0, dtype: r.dtype } }), V = new Ag(q, m, P, M, t6, o), s || p) {
        U = n.runWebGPUProgram(V, L, r.dtype, W, U);
        let Z = new Rg(U.shape, s, p, a), ee = null, Y = [U];
        s && Y.push(s), a && Y.push(a), p === "leakyrelu" && (ee = [{ type: "float32", data: [i] }], Z.uniforms += " alpha : f32,");
        let J = n.runWebGPUProgram(Z, Y, U.dtype, ee);
        R.push(U);
        let ie = de({ inputs: { x: J }, backend: n, attrs: { shape: w } });
        R.push(J);
        for (let pe of R)
          n.disposeData(pe.dataId);
        return ie;
      }
      break;
    }
    case Ao.MatMulSmallOutputSizeProgram:
      V = new $g(k, _, q, t6, o, s, p, a);
      break;
    case Ao.MatMulPackedProgram:
      let X = n.adapterInfo.isIntel();
      V = new _g(k, q, P, M, t6, o, s, p, a, X);
      break;
    default:
      throw new Error(`Unsupported MatMulProgramType ${H}.`);
  }
  s && L.push(s), a && L.push(a), p === "leakyrelu" && (W.push({ type: "float32", data: [i] }), V.uniforms += " alpha : f32,"), U = n.runWebGPUProgram(V, L, r.dtype, W, U);
  let j = de({ inputs: { x: U }, backend: n, attrs: { shape: w } });
  R.push(U);
  for (let X of R)
    n.disposeData(X.dataId);
  return j;
}
function lre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { a: n, b: s, bias: a, preluActivationWeights: i } = e, { transposeA: p, transposeB: u, activation: c, leakyreluAlpha: l } = o;
  return Gu({ a: n, b: s, transposeA: p, transposeB: u, backend: t6, bias: a, preluActivationWeights: i, leakyreluAlpha: l, activation: c });
}
var B3 = { kernelName: fo, backendName: "webgpu", kernelFunc: lre };
var zl = class {
  constructor(e, t6, o) {
    this.variableNames = ["AReal", "AImag", "BReal", "BImag"], this.workgroupSize = [128, 1, 1], this.size = true, this.outputShape = S.assertAndGetBroadcastShape(t6, o), this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = `binaryOpComplex_${e}`, this.op = e;
  }
  getUserCode() {
    return `
      fn binaryOpComplex(
          areal : f32, aimag : f32, breal : f32, bimag : f32) -> f32 {
        ${Ic(this.op, false)}
      }

      ${se("index")} {
        if(index < uniforms.size) {
          let areal = getARealByOutputIndex(index);
          let aimag = getAImagByOutputIndex(index);
          let breal = getBRealByOutputIndex(index);
          let bimag = getBImagByOutputIndex(index);
          setOutputAtIndex(index, binaryOpComplex(areal, aimag, breal, bimag));
        }
      }
    `;
  }
};
var Hu = class {
  constructor(e, t6, o) {
    this.size = true, this.variableNames = ["A", "B"], this.outputShape = S.assertAndGetBroadcastShape(t6, o), this.dispatchLayout = ue(this.outputShape), this.op = e, this.useSharedMemoryWithA = t6.length <= 1 && o.length > 1 && t6[0] < 128, this.useSharedMemoryWithB = o.length <= 1 && t6.length > 1 && o[0] < 128, this.useSharedMemoryWithA || this.useSharedMemoryWithB ? (this.isVec4 = false, this.lastDimensionSize = this.useSharedMemoryWithB ? o[0] : t6[0], this.shaderKey = `binary_${this.type}_${e}_${this.lastDimensionSize}_${this.useSharedMemoryWithB}`, this.type = "shared", this.workgroupSize = [256, 1, 1], this.workPerThread = 1) : (y.arraysEqual(t6, o) && y.sizeFromShape(t6) % 4 === 0 ? (this.isVec4 = true, this.type = "vec4", this.workPerThread = 4) : (this.isVec4 = false, this.type = "plain", this.workPerThread = 1), this.shaderKey = `binary_${this.type}_${e}`, this.workgroupSize = [128, 1, 1]), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);
  }
  getUserCode() {
    let e, t6 = this.isVec4 ? "vec4<f32>" : "f32", o = `
    fn binaryOperation(a : ${t6}, b : ${t6}) -> ${t6} {
      ${Ic(this.op, this.isVec4)}
    };
    `;
    if (this.type === "shared") {
      let n = this.lastDimensionSize > 1 ? `coords[${this.outputShape.length - 1}]` : "0", s = this.useSharedMemoryWithB ? `let a = getAByOutputIndex(index);
          let b = sharedBuf[${n}];` : `let a = sharedBuf[${n}];
          let b = getBByOutputIndex(index);`;
      e = `
        ${o}
        var<workgroup> sharedBuf : array<f32, ${this.lastDimensionSize}>;
        ${se("index")} {
          // Fill in the shared memory buffer.
          let localIndex = i32(localId.x);
          if(localIndex < ${this.lastDimensionSize}) {
            sharedBuf[localIndex] = f32(${this.useSharedMemoryWithB ? "B" : "A"}[localIndex]);
          }
          workgroupBarrier();

          if(index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            ${s}
            setOutputAtIndex(index, binaryOperation(a, b));
          }
        }
        `;
    } else
      e = `
       ${o}
       ${se("index")} {
         if (index < uniforms.size) {
           let a = getAByOutputIndex(index);
           let b = getBByOutputIndex(index);
           setOutputAtIndex(index, binaryOperation(a, b));
         }
       }
       `;
    return e;
  }
};
function Ft(r) {
  let { inputs: e } = r, { x: t6 } = e;
  return r.backend.incRef(t6.dataId), { dataId: t6.dataId, shape: t6.shape, dtype: t6.dtype };
}
var V3 = { kernelName: mo, backendName: "webgpu", kernelFunc: Ft };
function po(r) {
  let { inputs: e, backend: t6 } = r, { real: o, imag: n } = e, s = t6.makeTensorInfo(o.shape, "complex64"), a = t6.tensorMap.get(s.dataId), i = Ft({ inputs: { x: o }, backend: t6 }), p = Ft({ inputs: { x: n }, backend: t6 });
  return a.complexTensorInfos = { real: i, imag: p }, s;
}
var z3 = { kernelName: ei, backendName: "webgpu", kernelFunc: po };
var Ro = class {
  constructor(e, t6) {
    this.variableNames = ["A"], this.size = true;
    let o = 128;
    this.workgroupSize = [o, 1, 1], this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.op = t6, this.shaderKey = `unary_${t6}`;
  }
  getUserCode() {
    return `
      fn unaryOperation(a : f32) -> f32 {
        ${Ha(this.op, false)}
      }
      ${se("index")} {
        if (index < uniforms.size) {
          let a = getAByOutputIndex(index);
          setOutputAtIndex(index, unaryOperation(a));
        }
      }
      `;
  }
};
function Se({ opType: r, cpuKernelImpl: e, dtype: t6 }) {
  return ({ inputs: o, backend: n }) => {
    let { x: s } = o, a = n, i = t6 || s.dtype;
    if (a.shouldExecuteOnCPU([s]) && e != null) {
      let u = a.tensorMap.get(s.dataId), c = e(u.values, i);
      return a.makeTensorInfo(s.shape, i, c);
    }
    let p = new Ro(s.shape, r);
    return a.runWebGPUProgram(p, [s], i);
  };
}
function ot({ opType: r, cpuKernelImpl: e, supportsComplex: t6 = false, dtype: o }) {
  return ({ inputs: n, backend: s }) => {
    let { a, b: i } = n, p = s;
    if (t6 && a.dtype === "complex64") {
      let l = p.tensorMap.get(a.dataId), m = p.tensorMap.get(i.dataId), d, f;
      if (r !== ye.MUL)
        [d, f] = [[l.complexTensorInfos.real, m.complexTensorInfos.real], [l.complexTensorInfos.imag, m.complexTensorInfos.imag]].map((g) => {
          let [x, b] = g, C = { dataId: x.dataId, dtype: x.dtype, shape: a.shape }, w = { dataId: b.dataId, dtype: b.dtype, shape: i.shape }, k = new Hu(r, a.shape, i.shape);
          return p.runWebGPUProgram(k, [C, w], dt(x.dtype, b.dtype));
        });
      else {
        let g = new zl(ye.COMPLEX_MULTIPLY_REAL, a.shape, i.shape), x = new zl(ye.COMPLEX_MULTIPLY_IMAG, a.shape, i.shape), b = [{ dataId: l.complexTensorInfos.real.dataId, dtype: l.complexTensorInfos.real.dtype, shape: a.shape }, { dataId: l.complexTensorInfos.imag.dataId, dtype: l.complexTensorInfos.imag.dtype, shape: a.shape }, { dataId: m.complexTensorInfos.real.dataId, dtype: m.complexTensorInfos.real.dtype, shape: i.shape }, { dataId: m.complexTensorInfos.imag.dataId, dtype: m.complexTensorInfos.imag.dtype, shape: i.shape }];
        d = p.runWebGPUProgram(g, b, "float32"), f = p.runWebGPUProgram(x, b, "float32");
      }
      let h = po({ inputs: { real: d, imag: f }, backend: p });
      return p.disposeData(d.dataId), p.disposeData(f.dataId), h;
    }
    let u = o || dt(a.dtype, i.dtype);
    if ((a.dtype === "string" || i.dtype === "string" || p.shouldExecuteOnCPU([a, i])) && e != null) {
      let l = p.tensorMap.get(a.dataId).values, m = p.tensorMap.get(i.dataId).values, d = a.dtype === "string" ? S.fromUint8ToStringArray(l) : l, f = a.dtype === "string" ? S.fromUint8ToStringArray(m) : m, [h, g] = e(a.shape, i.shape, d, f, u);
      return p.makeTensorInfo(g, u, h);
    }
    let c = new Hu(r, a.shape, i.shape);
    return p.runWebGPUProgram(c, [a, i], u);
  };
}
var { addImpl: W3, castImpl: U3, ceilImpl: G3, concatImpl: H3, equalImpl: q3, expImpl: K3, expm1Impl: j3, floorImpl: X3, gatherNdImpl: Y3, gatherV2Impl: Q3, greaterEqualImpl: Z3, greaterImpl: J3, lessEqualImpl: eM, lessImpl: tM, logImpl: rM, maxImpl: oM, maximumImpl: nM, minimumImpl: sM, multiplyImpl: aM, negImpl: iM, notEqualImpl: uM, prodImpl: pM, rangeImpl: cM, rsqrtImpl: lM, scatterImpl: mM, simpleAbsImpl: dM, sliceImpl: fM, stridedSliceImpl: hM, stringNGramsImpl: gM, subImpl: xM, tileImpl: yM, topKImpl: bM, transposeImpl: CM, uniqueImpl: kNt } = Qp;
var mre = Se({ opType: Q.ABS, cpuKernelImpl: dM });
var SM = { kernelName: gs, backendName: "webgpu", kernelFunc: mre };
var dre = Se({ opType: Q.ACOS });
var wM = { kernelName: sa, backendName: "webgpu", kernelFunc: dre };
var fre = Se({ opType: Q.ACOSH });
var IM = { kernelName: aa, backendName: "webgpu", kernelFunc: fre };
var hre = ot({ opType: ye.ADD, cpuKernelImpl: W3, supportsComplex: true });
var vM = { kernelName: eo, backendName: "webgpu", kernelFunc: hre };
var Dg = class {
  constructor(e) {
    this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e[0], this.variableNames = e.map((t6, o) => `T${o}`), this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.shaderKey = "addN";
  }
  getUserCode() {
    let e = [];
    this.variableNames.forEach((n) => {
      e.push(`let v${n} = get${n}ByOutputCoords(coords);`);
    });
    let t6 = this.variableNames.map((n) => `v${n}`).join(" + ");
    return `
      ${se("index")} {
        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if (flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            ${e.join(`
        `)}
            setOutputAtIndex(flatIndex, ${t6});
          }
        }
      }
    `;
  }
};
function gre(r) {
  let { inputs: e, backend: t6 } = r, o = e;
  if (o.length === 1)
    return Ft({ inputs: { x: o[0] }, backend: t6 });
  let n = o.map((i) => i.dtype).reduce((i, p) => dt(i, p)), s = o.map((i) => i.shape), a = new Dg(s);
  return t6.runWebGPUProgram(a, o, n);
}
var kM = { kernelName: Mo, backendName: "webgpu", kernelFunc: gre };
var Og = class {
  constructor(e, t6) {
    this.variableNames = ["A"], this.workgroupSize = [16, 16, 1];
    let o = new Array(e.length);
    for (let n = 0; n < o.length; n++)
      o[n] = e[t6[n]];
    this.outputShape = o, this.dispatchLayout = { x: [0], y: [1] }, this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, [1, 1, 1]), this.shaderKey = "transposeShared";
  }
  getUserCode() {
    return y.assert(this.workgroupSize[0] === this.workgroupSize[1], () => `Must be a square tile, current tile shape is ${this.workgroupSize[0]} x ${this.workgroupSize[1]}`), `
      const tileSize = ${this.workgroupSize[0]};
      var<workgroup> tile : array<array<f32, ${this.workgroupSize[0] + 1}>, ${this.workgroupSize[0]}>;
      ${se()} {
        var x = i32(workgroupId.x) * tileSize + i32(localId.x);
        var y = i32(workgroupId.y) * tileSize + i32(localId.y);
        let width = uniforms.outShape[0];
        let height = uniforms.outShape[1];
        if (x < width && y < height) {
          tile[localId.y][localId.x] = f32(A[y * width + x]);
        }
        workgroupBarrier();

        x = i32(workgroupId.y) * tileSize + i32(localId.x);
        y = i32(workgroupId.x) * tileSize + i32(localId.y);
        if (x < height && y < width) {
          setOutputAtIndex((y * height + x), tile[localId.x]
            [localId.y]);
        }
      }
    `;
  }
};
var Pg = class {
  constructor(e, t6) {
    this.variableNames = ["A"], this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true;
    let o = new Array(e.length);
    for (let n = 0; n < o.length; n++)
      o[n] = e[t6[n]];
    this.outputShape = o, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.newDim = t6, this.shaderKey = `transpose_${t6}`;
  }
  getUserCode() {
    let e = Rt(this.outputShape.length), t6 = xre(this.newDim);
    return `
      ${se("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let resRC = getCoordsFromIndex(flatIndex);
            setOutputAtIndex(flatIndex, A[getIndexFromCoords${this.outputShape.length}D(
              ${e}(${t6}), uniforms.aShape)]);
          }
        }
      }
    `;
  }
};
function xre(r) {
  let e = r.length;
  if (e > 6)
    throw Error(`Transpose for rank ${e} is not yet supported`);
  let t6 = new Array(e);
  for (let o = 0; o < r.length; o++)
    t6[r[o]] = `resRC.${$o(o)}`;
  return t6.join();
}
function Nr(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { perm: s } = o, a = t6, i = n.shape.length, p = new Array(i);
  for (let c = 0; c < p.length; c++)
    p[c] = n.shape[s[c]];
  if (t6.shouldExecuteOnCPU([n])) {
    let l = a.tensorMap.get(n.dataId).values, m = CM(l, n.shape, n.dtype, s, p);
    return t6.makeTensorInfo(p, n.dtype, m);
  }
  if (n.shape.length === 2 && y.arraysEqual(s, [1, 0])) {
    let c = new Og(n.shape, s);
    return a.runWebGPUProgram(c, [n], n.dtype);
  }
  let u = new Pg(n.shape, s);
  return a.runWebGPUProgram(u, [n], n.dtype);
}
var NM = { kernelName: ro, backendName: "webgpu", kernelFunc: Nr };
var Mg = class {
  constructor(e, t6) {
    this.workgroupSize = [64, 1, 1], this.variableNames = ["x"], this.uniforms = "reduceSize : i32,", this.size = true, this.inputShape = [e.batchSize, e.inSize];
    let [o] = S.computeOutAndReduceShapes(this.inputShape, [1]);
    this.outputShape = o.length === 0 ? [1] : o, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, [1, 1, 1]), this.reduceType = t6, this.shaderKey = `reduce_${t6}`;
  }
  getUserCode() {
    let e = "", t6 = "0.0";
    this.reduceType === "min" || this.reduceType === "max" ? (e = `
         if (isnan(candidate)) {
          bestValue = uniforms.NAN;
         } else if (!isnan(bestValue) && candidate ${this.reduceType === "min" ? "<" : ">"} bestValue)
           {  bestValue = candidate; }`, t6 = "f32(x[offset])") : this.reduceType === "sum" || this.reduceType === "mean" ? e = " bestValue = bestValue + candidate; " : this.reduceType === "prod" ? (e = " bestValue = bestValue * candidate; ", t6 = "1.0") : this.reduceType === "all" ? (e = " bestValue = f32(bestValue >= 1.0 && candidate >= 1.0); ", t6 = "1.0") : this.reduceType === "any" && (e = " bestValue = f32(bestValue >= 1.0 || candidate >= 1.0); ", t6 = "0.0");
    let o = this.reduceType === "mean" ? "setOutputAtIndex(outputIndex, bestValue / f32(uniforms.reduceSize));" : "setOutputAtIndex(outputIndex, bestValue);";
    return `
       fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
       }

       ${`
         var<workgroup> xBestValues : array<f32, ${this.workgroupSize[0]}>;
       `}
       fn getOffset(outputIndex : i32) -> i32 {
         let outputCoords = getCoordsFromIndex(outputIndex);
         let offset = ${this.outputShape.length === 1 ? "outputCoords" : "outputCoords[0]"} * uniforms.reduceSize;
          return offset;
       }
       ${se("index")} {
         let outputIndex = index / i32(workgroupSizeX);
         let offset = getOffset(outputIndex);
         var bestValue = ${t6};
         let Length = uniforms.reduceSize;
         let WorkPerThread = DIV_CEIL(u32(Length), workgroupSizeX);
         for (var k = i32(localId.x); k < Length && outputIndex < uniforms.size;
             k = k + i32(workgroupSizeX)) {
           let candidate = f32(x[offset + k]);
           ${e}
         }
         xBestValues[localId.x] = bestValue;
         workgroupBarrier();

         var reduceSize = min(u32(Length), workgroupSizeX);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            ${e}
            xBestValues[localId.x] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (localId.x == 0u && outputIndex < uniforms.size) {
          ${o}
        }
       }
     `;
  }
};
function qr(r, e, t6, o, n) {
  let s = r.shape.length, a = [], i = y.parseAxisParam(e, r.shape), p = i, u = S.getAxesPermutation(p, s), c = r;
  u != null && (c = Nr({ inputs: { x: r }, attrs: { perm: u }, backend: n }), p = S.getInnerMostAxes(p.length, s), a.push(c)), S.assertAxesAreInnerMostDims(o, p, s);
  let [l, m] = S.computeOutAndReduceShapes(c.shape, p), d = l;
  t6 && (d = S.expandShapeToKeepDim(l, i));
  let f;
  if ((o === "max" || o === "prod") && n.shouldExecuteOnCPU([c])) {
    let h = n.tensorMap.get(c.dataId).values;
    switch (o) {
      case "max":
        let g = oM(h, y.sizeFromShape(m), d, r.dtype);
        f = n.makeTensorInfo(d, r.dtype, g);
        break;
      case "prod":
        let { outVals: x, outShape: b, outDtype: C } = pM(c.shape, c.dtype, h, p);
        f = n.makeTensorInfo(b, C, x);
        break;
      default:
        throw new Error(`${o} CPU implementation is not yet supported.`);
    }
  } else {
    let h = y.sizeFromShape(m), x = y.sizeFromShape(c.shape) / h, b = { windowSize: h, inSize: h, batchSize: x, outSize: 1 }, C = o === "mean" ? "float32" : ka(r.dtype), w = [{ type: "int32", data: [h] }], k = new Mg(b, o), _ = n.runWebGPUProgram(k, [c], C, w);
    a.push(_), f = de({ inputs: { x: _ }, attrs: { shape: d }, backend: n });
  }
  return a.forEach((h) => n.disposeData(h.dataId)), f;
}
function yre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { keepDims: s, axis: a } = o;
  return qr(n, a, s, "all", t6);
}
var TM = { kernelName: Lo, backendName: "webgpu", kernelFunc: yre };
function bre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { keepDims: s, axis: a } = o;
  return qr(n, a, s, "any", t6);
}
var _M = { kernelName: Bo, backendName: "webgpu", kernelFunc: bre };
var vc = class {
  constructor(e, t6, o) {
    this.workgroupSize = [64, 1, 1], this.variableNames = ["x"], this.uniforms = "infinityValue : f32,", this.size = true;
    let n = [t6];
    this.op = o === "min" ? "<" : ">";
    let [s, a] = S.computeOutAndReduceShapes(e, n);
    this.outputShape = s.length === 0 ? [1] : s, this.dispatchLayout = ue(this.outputShape), y.sizeFromShape(a) < 32 || y.sizeFromShape(s) > 1e3 ? (this.type = "plain", this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize)) : (this.type = "shared", this.dispatch = re(this.dispatchLayout, this.outputShape, [1, 1, 1])), this.inputShape = e, this.shaderKey = `argMinMax_${this.op}_${this.type}`;
  }
  getUserCode() {
    let e = () => this.inputShape.length === 1 ? "uniforms.xShape" : `uniforms.xShape.${$o(this.inputShape.length - 1)}`, t6 = () => {
      let o = "";
      if (this.outputShape.length === 1)
        this.inputShape.length !== 1 && (o += "outputCoords,");
      else
        for (let n = 0; n < this.outputShape.length; n++)
          o += `outputCoords.${$o(n)},`;
      return o;
    };
    return this.type === "shared" ? `
      fn DIV_CEIL(a : u32, b : u32) -> u32 {
        return ((a - 1u) / b + 1u);
      }

      ${`
      var<workgroup> xBestIndices : array<i32, ${this.workgroupSize[0]}>;
      var<workgroup> xBestValues : array<f32, ${this.workgroupSize[0]}>;
    `}

      ${se("index")} {
        let outputIndex = index / i32(workgroupSizeX);
        let reduceLength = ${e()};

        var bestIndex = i32(localId.x);
        var bestValue = uniforms.infinityValue;
        let outputCoords = getCoordsFromIndex(outputIndex);
        for (var k = i32(localId.x); k < reduceLength && outputIndex < uniforms.size;
            k = k + i32(workgroupSizeX)) {
          let candidate = getX(${t6()} k);
          if (!isnan(candidate) && candidate ${this.op} bestValue) {
            bestValue = candidate;
            bestIndex = k;
          }
        }
        xBestValues[localId.x] = bestValue;
        xBestIndices[localId.x] = bestIndex;
        workgroupBarrier();

        var reduceSize = min(u32(reduceLength), workgroupSizeX);
        for (var currentSize = reduceSize / 2u; reduceSize > 1u;
            currentSize = reduceSize / 2u) {
          let interval = DIV_CEIL(reduceSize, 2u);
          if (localId.x < currentSize) {
            let candidate = xBestValues[localId.x + interval];
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              xBestValues[localId.x] = bestValue;
              xBestIndices[localId.x] = xBestIndices[localId.x + interval];
            }
          }
          reduceSize = interval;
          workgroupBarrier();
        }

        if (localId.x == 0u && outputIndex < uniforms.size) {
          setOutputAtIndexI32(outputIndex, xBestIndices[localId.x]);
        }
      }
    ` : `
      ${se("index")} {
        if (index < uniforms.size) {
          let outputCoords = getCoordsFromIndex(index);
          var bestIndex = 0;
          var bestValue = getX(${t6()} 0);
          let reduceLength = ${e()};
          for (var i = 1; i < reduceLength; i++) {
            let candidate = getX(${t6()} i);
            if (candidate ${this.op} bestValue) {
              bestValue = candidate;
              bestIndex = i;
            }
          }
          setOutputAtIndexI32(index, bestIndex);
        }
      }
      `;
  }
};
function Cre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s } = o, a = y.parseAxisParam(s, n.shape), i = S.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = Nr({ inputs: { x: n }, backend: t6, attrs: { perm: i } }), u.push(p), a = S.getInnerMostAxes(a.length, p.shape.length)), S.assertAxesAreInnerMostDims("argMax", [a[0]], p.shape.length);
  let c = new vc(p.shape, a[0], "max"), l = [{ type: "float32", data: [Number.NEGATIVE_INFINITY] }], m = t6.runWebGPUProgram(c, [p], "int32", l);
  return u.forEach((d) => t6.disposeData(d.dataId)), m;
}
var EM = { kernelName: Vo, backendName: "webgpu", kernelFunc: Cre };
function Sre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s } = o, a = y.parseAxisParam(s, n.shape), i = S.getAxesPermutation(a, n.shape.length), p = n, u = [];
  i != null && (p = Nr({ inputs: { x: n }, backend: t6, attrs: { perm: i } }), u.push(p), a = S.getInnerMostAxes(a.length, p.shape.length)), S.assertAxesAreInnerMostDims("argMin", [a[0]], p.shape.length);
  let c = new vc(p.shape, a[0], "min"), l = [{ type: "float32", data: [Number.POSITIVE_INFINITY] }], m = t6.runWebGPUProgram(c, [p], "int32", l);
  return u.forEach((d) => t6.disposeData(d.dataId)), m;
}
var $M = { kernelName: Za, backendName: "webgpu", kernelFunc: Sre };
var wre = Se({ opType: Q.ASIN });
var AM = { kernelName: ia, backendName: "webgpu", kernelFunc: wre };
var Ire = Se({ opType: Q.ASINH });
var RM = { kernelName: ua, backendName: "webgpu", kernelFunc: Ire };
var vre = Se({ opType: Q.ATAN });
var FM = { kernelName: pa, backendName: "webgpu", kernelFunc: vre };
var kre = ot({ opType: ye.ATAN2 });
var DM = { kernelName: la, backendName: "webgpu", kernelFunc: kre };
var Nre = Se({ opType: Q.ATANH });
var OM = { kernelName: ca, backendName: "webgpu", kernelFunc: Nre };
var Wl = class {
  constructor(e, t6) {
    this.variableNames = ["x"], this.uniforms = "stride : vec2<i32>, pad : vec2<i32>, dilation : vec2<i32>, convDims : vec2<i32>, filterDims : vec2<i32>,", this.workgroupSize = [128, 1, 1], this.size = true, this.outputShape = e.outShape, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = `pool2D_${t6}`, this.poolType = t6;
  }
  getUserCode() {
    let e = "resultValue = max(value, resultValue);";
    this.poolType === "avg" && (e = "resultValue = resultValue + value; count = count + 1.0;");
    let t6 = "resultValue";
    return this.poolType === "avg" && (t6 = "resultValue / count"), `
      ${se("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.yz) * uniforms.stride - uniforms.pad;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          var resultValue = ${this.poolType === "avg" ? "0.0" : "-1.0 / pow(10.0, -20.0)"};
          var count = 0.0;

          for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + uniforms.dilation.x) {
            let xR = xRCorner + wR;

            if (xR < 0 || xR >= uniforms.convDims.x) {
              continue;
            }

            for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + uniforms.dilation.y) {
              let xC = xCCorner + wC;
              if (xC < 0 || xC >= uniforms.convDims.y) {
                continue;
              }

              let value = getX(batch, xR, xC, coords[3]);
              ${e}
            }
          }

          setOutputAtIndex(index, ${t6});
        }
      }
    `;
  }
};
var Lg = class {
  constructor(e) {
    this.variableNames = ["x"], this.uniforms = "stride : vec2<i32>,", this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = e.outShape, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "poolWithFilterSizeEqualsOne";
  }
  getUserCode() {
    return `
      ${se("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let batch = coords[0];
          let d = coords[3];

          let xRCCorner = coords.yz * uniforms.stride;
          let xRCorner = xRCCorner.x;
          let xCCorner = xRCCorner.y;

          let value = getX(batch, xRCorner, xCCorner, d);
          setOutputAtIndex(index, value);
        }
      }
    `;
  }
};
function Ul(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { reductionIndices: s, keepDims: a } = o;
  return qr(n, s, a, "max", t6);
}
var PM = { kernelName: yn, backendName: "webgpu", kernelFunc: Ul };
function uI(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { keepDims: s, axis: a } = o;
  return qr(n, a, s, "mean", t6);
}
var MM = { kernelName: Sn, backendName: "webgpu", kernelFunc: uI };
function Bg(r, e, t6, o) {
  if (e.filterWidth === 1 && e.filterHeight === 1 && y.arraysEqual(e.inShape, e.outShape))
    return Ft({ inputs: { x: r }, backend: o });
  if (e.filterWidth === e.inWidth && e.filterHeight === e.inHeight && e.batchSize === 1 && e.padInfo.type === "VALID") {
    let a = r.shape.length, i = de({ inputs: { x: r }, backend: o, attrs: { shape: [r.shape[a - 3] * r.shape[a - 2], r.shape[a - 1]] } }), p;
    t6 === "avg" ? p = uI({ inputs: { x: i }, backend: o, attrs: { axis: 0, keepDims: false } }) : (y.assert(t6 === "max", () => `Invalid pool type ${t6}`), p = Ul({ inputs: { x: i }, backend: o, attrs: { reductionIndices: 0, keepDims: false } }));
    let u = de({ inputs: { x: p }, backend: o, attrs: { shape: e.outShape } });
    return o.disposeData(i.dataId), o.disposeData(p.dataId), u;
  }
  let n, s = [{ type: "int32", data: [e.strideHeight, e.strideWidth] }];
  return e.filterHeight === 1 && e.filterWidth === 1 ? n = new Lg(e) : (t6 === "avg" ? n = new Wl(e, "avg") : (y.assert(t6 === "max", () => `Invalid pool type ${t6}`), n = new Wl(e, "max")), s.push({ type: "int32", data: [e.padInfo.top, e.padInfo.left] }, { type: "int32", data: [e.dilationHeight, e.dilationWidth] }, { type: "int32", data: [e.inHeight, e.inWidth] }, { type: "int32", data: [e.effectiveFilterHeight, e.effectiveFilterWidth] })), o.runWebGPUProgram(n, [r], r.dtype, s);
}
function Tre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1, c = S.computePool2DInfo(n.shape, s, a, u, i, p);
  return Bg(n, c, "avg", t6);
}
var LM = { kernelName: zo, backendName: "webgpu", kernelFunc: Tre };
function _re(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { a: n, b: s } = e, { transposeA: a, transposeB: i } = o;
  return Gu({ a: n, b: s, transposeA: a, transposeB: i, backend: t6 });
}
var BM = { kernelName: Wo, backendName: "webgpu", kernelFunc: _re };
var Vg = class {
  constructor(e, t6) {
    this.variableNames = ["source"], this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t6, this.rank = t6.length, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.start = e, this.uniforms = `start : ${Rt(e.length)}, `, this.shaderKey = "slice";
  }
  getUserCode() {
    let e = Rt(this.rank), t6 = Ere(this.rank), o;
    return this.start.length === 1 ? o = this.outputShape.map((s, a) => "sourceLoc = uniforms.start + coords;") : o = this.outputShape.map((s, a) => `sourceLoc.${pI[a]} = uniforms.start.${$o(a)} + coords.${pI[a]};`), `
      ${se("index")} {
        if (index < uniforms.size) {
          var sourceLoc : ${e};
          let coords = getCoordsFromIndex(index);
          ${o.join(`
`)}
          setOutputAtIndex(index, getSource(${t6}));
        }
      }
    `;
  }
};
var pI = ["x", "y", "z", "w", "u", "v"];
function Ere(r) {
  if (r === 1)
    return "sourceLoc";
  if (r <= 6)
    return pI.slice(0, r).map((e) => `sourceLoc.${e}`).join(",");
  throw Error(`Slicing for rank ${r} is not yet supported`);
}
function ds(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { begin: s, size: a } = o, [i, p] = ut.parseSliceParams(n, s, a);
  if (ut.assertParamsValid(n, i, p), t6.shouldExecuteOnCPU([n]) || n.dtype === "string") {
    let l = t6.tensorMap.get(n.dataId), m = fM(l.values, i, p, n.shape, n.dtype);
    return t6.makeTensorInfo(p, n.dtype, m);
  }
  if (y.sizeFromShape(p) === 0)
    return t6.makeTensorInfo(p, n.dtype, []);
  let u = new Vg(i, p), c = [{ type: "int32", data: i }];
  return t6.runWebGPUProgram(u, [n], n.dtype, c);
}
var VM = { kernelName: _s, backendName: "webgpu", kernelFunc: ds };
var $re = (r) => {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { blockShape: s, crops: a } = o;
  y.assert(n.shape.length <= 4, () => "batchToSpaceND for rank > 4 with a WebGPU backend not implemented yet");
  let i = s.reduce((b, C) => b * C), p = S.getReshaped(n.shape, s, i), u = S.getPermuted(p.length, s.length), c = S.getReshapedPermuted(n.shape, s, i), l = S.getSliceBeginCoords(a, s.length), m = S.getSliceSize(c, a, s.length), d = [], f = de({ inputs: { x: n }, backend: t6, attrs: { shape: p } }), h = Nr({ inputs: { x: f }, backend: t6, attrs: { perm: u } }), g = de({ inputs: { x: h }, backend: t6, attrs: { shape: c } }), x = ds({ inputs: { x: g }, backend: t6, attrs: { begin: l, size: m } });
  return d.push(f), d.push(h), d.push(g), d.forEach((b) => t6.disposeData(b.dataId)), x;
};
var zM = { kernelName: xs, backendName: "webgpu", kernelFunc: $re };
var Are = `
  fn bincount_write(index: i32, value: f32) {
    var oldValue = atomicLoad(& (result[index]));
    var exchanged = false;
    for (; !exchanged;) {
      let newValueF32 = bitcast<f32>(oldValue) + value;
      let newValue = bitcast<i32>(newValueF32);
      let res = atomicCompareExchangeWeak(
          &(result[index]), oldValue, newValue);
      oldValue = res.old_value;
      exchanged = res.exchanged;
    }
  }
`;
var Rre = `
  fn bincount_write(index: i32, value: f32) {
    result[index] = value;
  }
`;
var kc = class {
  constructor(e, t6, o = false) {
    this.outputShape = [], this.variableNames = ["x"], this.uniforms = "binCountSize : i32,", this.workgroupSize = [64, 1, 1], this.atomic = true, this.hasWeights = true, this.binaryOutput = false, this.outputShape = e, this.rank = e.length, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.binaryOutput = o, o && (this.atomic = false), this.hasWeights = t6, this.hasWeights && this.variableNames.push("w"), this.shaderKey = `bincount_${this.hasWeights}_${this.binaryOutput}_${this.rank}`;
  }
  getUserCode() {
    return `
    ${this.binaryOutput ? Rre : Are}
  ${se("index")} {
    ${this.rank === 1 ? `if (index < uniforms.xShape) {
      let indexVal = i32(getX(index));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput ? 1 : this.hasWeights ? "f32(getW(index))" : "1."};
        bincount_write(indexVal, value);
      }
    }` : `let coord = getCoordsFromIndex(index);
    if (coordsInBounds2D(coord, uniforms.xShape)) {
      let indexVal = i32(getX(coord[0], coord[1]));
      if (indexVal < uniforms.binCountSize) {
        let value = ${this.binaryOutput ? 1 : this.hasWeights ? "f32(getW(coord[0], coord[1]))" : "1."};
        bincount_write(coord.x * uniforms.binCountSize + indexVal, value);
      }
    }`}
  }
  `;
  }
};
function Fre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, weights: s } = e, { size: a } = o, i = y.sizeFromShape(n.shape), u = y.sizeFromShape(s.shape) > 0, c = [a], l = s.dtype, m = dr({ backend: t6, attrs: { shape: c, value: 0, dtype: l } }), d = new kc([i], u), f = [{ type: "int32", data: [a] }], h = u ? [n, s] : [n];
  return t6.runWebGPUProgram(d, h, l, f, m);
}
var WM = { kernelName: Ja, backendName: "webgpu", kernelFunc: Fre };
var cI = ot({ opType: ye.NOT_EQUAL, dtype: "bool", cpuKernelImpl: uM });
var UM = { kernelName: Nn, backendName: "webgpu", kernelFunc: cI };
function qa(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e, n = t6.tensorMap.get(o.dataId);
  return Ft({ inputs: { x: n.complexTensorInfos.real }, backend: t6 });
}
var GM = { kernelName: ai, backendName: "webgpu", kernelFunc: qa };
function HM(r, e) {
  let t6 = new Ro(r.shape, Q.TO_INT), o = e.runWebGPUProgram(t6, [r], "int32");
  return { dataId: o.dataId, shape: o.shape, dtype: o.dtype };
}
function lI(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { dtype: s } = o;
  if (s === "complex64") {
    if (n.dtype === "complex64")
      return Ft({ inputs: { x: n }, backend: t6 });
    let a = Vr(n.shape), i = lI({ inputs: { x: n }, backend: t6, attrs: { dtype: "float32" } }), p = po({ inputs: { real: i, imag: a }, backend: t6 });
    return a.dispose(), t6.disposeData(i.dataId), p;
  }
  if (n.dtype === "complex64") {
    let a = qa({ inputs: { input: n }, backend: t6 }), i = lI({ inputs: { x: a }, backend: t6, attrs: { dtype: s } });
    return t6.disposeData(a.dataId), i;
  }
  if (!y.hasEncodingLoss(n.dtype, s)) {
    let a = Ft({ inputs: { x: n }, backend: t6 });
    return { dataId: a.dataId, shape: a.shape, dtype: s };
  }
  if (t6.shouldExecuteOnCPU([n])) {
    let a = t6.tensorMap.get(n.dataId).values, [i, p, u] = U3(a, n.shape, n.dtype, s);
    return t6.makeTensorInfo(i, p, u);
  }
  if (s === "int32")
    return HM(n, t6);
  if (s === "bool") {
    let a = t6.makeTensorInfo([], "bool", y.getTypedArrayFromDType("bool", 1)), p = cI({ inputs: { a: n, b: a }, backend: t6 });
    return t6.disposeData(a.dataId), p;
  }
  throw new Error(`Error in Cast: failed to cast ${n.dtype} to ${s}`);
}
var qM = { kernelName: co, backendName: "webgpu", kernelFunc: lI };
var Dre = Se({ opType: Q.CEIL, cpuKernelImpl: G3 });
var KM = { kernelName: Uo, backendName: "webgpu", kernelFunc: Dre };
var zg = class {
  constructor(e) {
    this.variableNames = ["A"], this.uniforms = "minVal : f32, maxVal : f32,", this.workPerThread = 4, this.workgroupSize = [64, 1, 1], this.isVec4 = true, this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.shaderKey = "clipVec4";
  }
  getUserCode() {
    return `
      ${se("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          var clampedValue : vec4<f32>;
          for (var i = 0; i < 4; i = i + 1) {
            if (isnan(value[i])) {
              clampedValue[i] = value[i];
            } else {
              clampedValue[i] = clamp(value[i], uniforms.minVal, uniforms.maxVal);
            }
          }

          setOutputAtIndex(index, clampedValue);
        }
      }
    `;
  }
};
var Wg = class {
  constructor(e) {
    this.variableNames = ["A"], this.uniforms = "minVal : f32, maxVal : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "clip";
  }
  getUserCode() {
    return `
      ${se("index")} {
        if(index < uniforms.size) {
          let value = getAByOutputIndex(index);
          if (isnan(value)) {
            setOutputAtIndex(index, value);
            return;
          }
          setOutputAtIndex(index, clamp(value, uniforms.minVal, uniforms.maxVal));
        }
      }
    `;
  }
};
function Ore(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { clipValueMin: s, clipValueMax: a } = o, i, p = [{ type: "float32", data: [s] }, { type: "float32", data: [a] }];
  return y.sizeFromShape(n.shape) % 4 === 0 ? i = new zg(n.shape) : i = new Wg(n.shape), t6.runWebGPUProgram(i, [n], n.dtype, p);
}
var jM = { kernelName: lo, backendName: "webgpu", kernelFunc: Ore };
var Ug = class {
  constructor(e) {
    this.uniforms = "", this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = S.computeOutShape(e, 1), this.variableNames = e.map((t6, o) => `T${o}`), this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]), this.offsetLength = e.length - 1;
    for (let t6 = 0; t6 < this.offsetLength; t6++)
      this.uniforms += `offset${t6} : i32,`;
    this.shaderKey = "concat";
  }
  getUserCode() {
    let e = [];
    if (this.offsetLength > 0) {
      e.push("if (yC < uniforms.offset0){ setOutputAtCoords(coords.x, coords.y, getT0(yR, yC)); }");
      for (let s = 1; s < this.offsetLength; s++)
        e.push(`else if (yC < uniforms.offset${[s]}){ setOutputAtCoords(coords.x, coords.y, getT${s}(yR, yC - uniforms.offset${s - 1})); }`);
      let o = this.offsetLength, n = this.offsetLength - 1;
      e.push(`else { setOutputAtCoords(coords.x, coords.y, getT${o}(yR, yC - uniforms.offset${n})); }`);
    } else
      e.push("setOutputAtCoords(coords.x, coords.y, getT0(yR, yC));");
    return `
      ${se("index")} {
        for(var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let flatIndex = index * ${this.workPerThread} + i;
          if(flatIndex < uniforms.size) {
            let coords = getCoordsFromIndex(flatIndex);
            let yR = coords.x;
            let yC = coords.y;

            ${e.join(`
        `)}
          }
        }
      }
    `;
  }
};
function qu(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e, n = t6.tensorMap.get(o.dataId);
  return Ft({ inputs: { x: n.complexTensorInfos.imag }, backend: t6 });
}
var XM = { kernelName: si, backendName: "webgpu", kernelFunc: qu };
function Nc(r, e, t6) {
  let o = r[0].dtype;
  if (o === "complex64") {
    let f = r.map((C) => qa({ inputs: { input: C }, backend: t6 })), h = r.map((C) => qu({ inputs: { input: C }, backend: t6 })), g = Nc(f, e, t6), x = Nc(h, e, t6), b = po({ inputs: { real: g, imag: x }, backend: t6 });
    return f.forEach((C) => t6.disposeData(C.dataId)), h.forEach((C) => t6.disposeData(C.dataId)), t6.disposeData(g.dataId), t6.disposeData(x.dataId), b;
  }
  let n = t6.shouldExecuteOnCPU(r);
  if (o === "string" && (n = true), n) {
    let f = r.map((k) => {
      let $ = [-1, y.sizeFromShape(k.shape.slice(e))];
      return de({ inputs: { x: k }, backend: t6, attrs: { shape: $ } });
    }), h = f.map((k) => ({ vals: t6.readSync(k.dataId), shape: k.shape })), g = S.computeOutShape(f.map((k) => k.shape), 1), x = f[0].shape[0] === 1, b = H3(h, g, o, x), C = S.computeOutShape(r.map((k) => k.shape), e), w = t6.makeTensorInfo(C, o, b);
    return f.forEach((k) => t6.disposeData(k.dataId)), w;
  }
  let s = t6.device.limits.maxStorageBuffersPerShaderStage - 1;
  if (r.length > s) {
    let f = [];
    for (let g = 0; g < r.length; g += s) {
      let x = r.slice(g, g + s);
      f.push(Nc(x, e, t6));
    }
    let h = Nc(f, e, t6);
    for (let g of f)
      t6.disposeData(g.dataId);
    return h;
  }
  let { tensors2D: a, outShape: i } = Pre(r, e, t6), p = a.map((f) => f.shape), u = new Ug(p), c = [], l = new Array(p.length - 1);
  if (l.length > 0) {
    l[0] = p[0][1], c.push({ type: "int32", data: [l[0]] });
    for (let f = 1; f < l.length; f++)
      l[f] = l[f - 1] + p[f][1], c.push({ type: "int32", data: [l[f]] });
  }
  let m = t6.runWebGPUProgram(u, a, a[0].dtype, c);
  a.forEach((f) => t6.disposeData(f.dataId));
  let d = de({ inputs: { x: m }, backend: t6, attrs: { shape: i } });
  return t6.disposeData(m.dataId), d;
}
function Pre(r, e, t6) {
  let o = S.computeOutShape(r.map((s) => s.shape), e);
  return { tensors2D: r.map((s) => de({ inputs: { x: s }, backend: t6, attrs: { shape: [y.sizeFromShape(s.shape.slice(0, e)), y.sizeFromShape(s.shape.slice(e))] } })), outShape: o };
}
function mI(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { axis: n } = o, s = y.parseAxisParam(n, e[0].shape)[0], a = e.map((u) => u.shape);
  S.assertParamsConsistent(a, s);
  let i = S.computeOutShape(e.map((u) => u.shape), s);
  if (y.sizeFromShape(i) === 0)
    return t6.makeTensorInfo(i, e[0].dtype, []);
  let p = e.filter((u) => y.sizeFromShape(u.shape) > 0);
  return p.length === 1 ? Ft({ inputs: { x: p[0] }, backend: t6 }) : Nc(p, s, t6);
}
var YM = { kernelName: ys, backendName: "webgpu", kernelFunc: mI };
function Mre(r, e, t6, o, n = false, s = null, a = false, i = 4, p = 4, u = 4) {
  let c = (R) => {
    switch (R) {
      case 1:
        return "resData = x[xIndex];";
      case 3:
        return "resData = vec3<f32>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);";
      case 4:
        return "resData = x[xIndex / 4];";
      default:
        throw new Error(`innerElementSize ${R} is not supported.`);
    }
  }, l = (R) => {
    switch (R) {
      case 1:
        return "return W[row * uniforms.wShape[3] + colIn];";
      case 4:
        return "return W[row * uniforms.wShape[3] / 4 + colIn];";
      default:
        throw new Error(`innerElementSize ${R} is not supported.`);
    }
  }, m = r ? `
      let coord = vec4<i32>(batch, xRow, xCol, xCh);
      ` : `
      let coord = vec4<i32>(batch, xCh, xRow, xCol);
      `, d = r ? `
      let coords = vec4<i32>(
        batch,
        row / outWidth,
        row % outWidth,
        col);
      ` : `
      let coords = vec4<i32>(
        batch,
        row,
        col / outWidth,
        col % outWidth);
      `, f = r ? "uniforms.xShape[1]" : "uniforms.xShape[2]", h = r ? "uniforms.xShape[2]" : "uniforms.xShape[3]", g = r ? "row" : "col", x = r ? "col" : "row", b = `
      let inChannels = uniforms.wShape[2];
      let outWidth = ${r ? "uniforms.outShape[2]" : "uniforms.outShape[3]"};
      let outRow = ${g} / outWidth;
      let outCol = ${g} % outWidth;

      let WRow = ${x} / (uniforms.filterDims[1] * inChannels);
      let WCol = ${x} / inChannels % uniforms.filterDims[1];
      let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
      let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
      let xCh = ${x} % inChannels;
      var resData = ${kt(i)}(0.0);
      // The bounds checking is always needed since we use it to pad zero for
      // the 'same' padding type.
      if (xRow >= 0 && xRow < ${f} && xCol >= 0 && xCol < ${h}) {
        ${m}
        let xIndex = getIndexFromCoords4D(coord, uniforms.xShape);
        ${c(i)}
      }
      return resData;`, C = r ? e && o ? `
      let col = colIn * ${i};
      ${b}` : `
      let col = colIn * ${i};
      if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${b}
      }
      return ${kt(i)}(0.0);` : o && t6 ? `
      let col = colIn * ${i};
      ${b}` : `
      let col = colIn * ${i};
      if (row < uniforms.dimInner && col < uniforms.dimBOuter) {
        ${b}
      }
      return ${kt(i)}(0.0);`, w = `${l(p)}`, k = kt(u), _ = r ? kt(i) : kt(p), $ = r ? kt(p) : kt(i);
  return `
      ${ur(s, a, u === 4, 4)}
      fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${_} {
        ${r ? C : w}
      }

      fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${$} {
        ${r ? w : C}
      }

      fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${k}) {
        let col = colIn * ${u};
        if (row < uniforms.dimAOuter && col < uniforms.dimBOuter)
        {
        var value = valueIn;
        let outWidth = ${r ? "uniforms.outShape[2]" : "uniforms.outShape[3]"};
        ${d}
        ${Hr(n, s)}
        setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }`;
}
var Gg = class {
  constructor(e, t6, o, n, s = false, a = null, i = false, p = false) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.outputShape = e.outShape, this.isChannelsLast = e.dataFormat === "channelsLast", this.isVec4 = ((e.inChannels % 4 === 0 || e.inChannels % 3 === 0) && this.isChannelsLast || e.outWidth % 4 === 0 && !this.isChannelsLast) && e.outChannels % 4 === 0, this.dispatchLayout = this.isChannelsLast ? { x: [3], y: [1, 2], z: [0] } : { x: [2, 3], y: [1], z: [0] }, this.workgroupSize = Ml(this.dispatchLayout, this.outputShape, this.isVec4), this.elementsPerThread = Ll(this.dispatchLayout, this.outputShape, this.isVec4), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread), this.isVec4 ? (this.isChannelsLast && e.inChannels % 4 !== 0 ? (this.innerElementSize = 3, this.variableTypes = ["f32", "vec4<f32>"]) : (this.innerElementSize = 4, this.variableTypes = ["vec4<f32>", "vec4<f32>"]), s && (this.variableNames.push("bias"), this.variableTypes.push("vec4<f32>")), i && (this.variableNames.push("preluActivationWeights"), this.variableTypes.push("vec4<f32>"))) : (this.innerElementSize = this.elementsPerThread[0], s && this.variableNames.push("bias"), i && this.variableNames.push("preluActivationWeights")), this.sequentialAccessByThreads = p, this.addBias = s, this.activation = a, this.hasPreluActivationWeights = i, this.tileAOuter = this.workgroupSize[1] * this.elementsPerThread[1], this.tileBOuter = this.workgroupSize[0] * this.elementsPerThread[0], this.tileInner = Math.max(this.workgroupSize[0] * this.innerElementSize, this.workgroupSize[1]), this.fitAOuter = t6 % this.tileAOuter === 0, this.fitBOuter = o % this.tileBOuter === 0, this.fitInner = n % this.tileInner === 0, this.shaderKey = `conv2DMM_${this.elementsPerThread}_${this.activation}}_${this.fitAOuter}_${this.fitBOuter}_${this.fitInner}_${this.isVec4}_${this.innerElementSize}_${this.isChannelsLast}_${this.sequentialAccessByThreads}`;
  }
  getUserCode() {
    let e = this.isVec4 ? Wu(this.elementsPerThread, this.workgroupSize, !this.isChannelsLast, this.tileInner) : Uu(this.elementsPerThread, this.workgroupSize, !this.isChannelsLast, this.tileInner, false, null, this.sequentialAccessByThreads), t6 = this.isVec4 ? [this.innerElementSize, 4, 4] : [1, 1, 1];
    return `
    ${Mre(this.isChannelsLast, this.fitAOuter, this.fitBOuter, this.fitInner, this.addBias, this.activation, this.hasPreluActivationWeights, t6[0], t6[1], t6[2])}
    ${e}
  `;
  }
};
var Hg = class {
  constructor(e, t6 = false, o = null, n = false) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims: vec2<i32>, pad: vec2<i32>, stride: vec2<i32>, dilation: vec2<i32>,", this.workgroupSize = [4, 4, 8], this.outputShape = e.outShape, this.isChannelsLast = e.dataFormat === "channelsLast", this.dispatchLayout = this.isChannelsLast ? { x: [2], y: [1], z: [0, 3] } : { x: [3], y: [2], z: [0, 1] }, this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.addBias = t6, this.activation = o, this.hasPreluActivationWeights = n, t6 && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), this.shaderKey = `conv2dnaive_${this.activation}_${this.isChannelsLast}`;
  }
  getUserCode() {
    return `
       ${ur(this.activation, this.hasPreluActivationWeights, false, 4)}
       fn readInp(batch : i32, row : i32, col : i32, chan : i32) -> f32{
         let coords = vec4<i32>(batch, row, col, chan);
         if (coordsInBounds4D(coords, uniforms.xShape)) {
           return  getX(batch, row, col, chan);
         } else {
          return 0.0;
         }
       }
       fn readFilt(row : i32, col : i32, xChannel : i32, outChannel : i32) -> f32{
         let coords = vec4<i32>(row, col, xChannel, outChannel);
         if(coordsInBounds4D(coords, uniforms.wShape)) {
           return getW(row, col, xChannel, outChannel);
          } else {
            return 0.0;
          }
       }
       fn writeResult(batch : i32, row : i32, col : i32, chan : i32, valueIn : f32) {
         let coords = ${this.isChannelsLast ? "vec4<i32>(batch, row, col, chan);" : "vec4<i32>(batch, chan, row, col);"}
         if (coordsInBounds4D(coords, uniforms.outShape)) {
           var value = valueIn;
           ${Hr(this.addBias, this.activation)}
           setOutputAtCoords(coords.x, coords.y, coords.z, coords.w, value);
         }
       }
       ${se("index")} {
         let coords = getOutputCoords();
         let batch = coords[0];
         let outChannel = ${this.isChannelsLast ? "coords[3];" : "coords[1];"}
         let outRow = ${this.isChannelsLast ? "coords[1];" : "coords[2];"}
         let outCol = ${this.isChannelsLast ? "coords[2];" : "coords[3];"}
         var acc : f32 = 0.0;
         for (var row = 0; row < uniforms.filterDims[0]; row = row + 1) {
           for (var col = 0; col < uniforms.filterDims[1]; col = col + 1) {
             let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * row - uniforms.pad[0];
             let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * col - uniforms.pad[1];
             for (var xChannel = 0; xChannel < ${this.isChannelsLast ? "uniforms.xShape[3];" : "uniforms.xShape[1];"} xChannel = xChannel + 1) {
               ${this.isChannelsLast ? "let v = readInp(batch, xRow, xCol, xChannel);" : "let v = readInp(batch, xChannel, xRow, xCol);"}
               let f = readFilt(row, col, xChannel, outChannel);
               acc = acc + v * f;
             }
           }
         }
         writeResult(batch, outRow, outCol, outChannel, acc);
       }
     `;
  }
};
var qg = class {
  constructor(e, t6) {
    this.variableNames = ["x"], this.uniforms = `pad : vec2<i32>, stride : vec2<i32>, dilation : vec2<i32>, outWidth : i32, itemsPerBlockRow : i32,
       inChannels : i32,`, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.isChannelsLast = t6, this.shaderKey = `im2col_${this.isChannelsLast}`;
  }
  getUserCode() {
    let e = this.isChannelsLast ? 1 : 2, t6 = this.isChannelsLast ? 2 : 3, o = this.isChannelsLast ? "coords[1]" : "coords[2]", n = this.isChannelsLast ? "coords[2]" : "coords[1]", s = this.isChannelsLast ? "getX(batch, xRow, xCol, ch)" : "getX(batch, ch, xRow, xCol)";
    return `
    ${se("index")} {
      let coords = getCoordsFromIndex(index);
      if(index < uniforms.size) {
        let batch = coords[0];
        let row = ${o};
        let col = ${n};
        let offsetY = (row / uniforms.outWidth) * uniforms.stride[0] - uniforms.pad[0];
        let xRow = offsetY + uniforms.dilation[0] * (col / uniforms.itemsPerBlockRow);
        var value = 0.0;
        if(xRow < uniforms.xShape[${e}] && xRow >= 0) {
          let offsetX = (row % uniforms.outWidth) * uniforms.stride[1] -
              uniforms.pad[1];
          let xCol = offsetX + uniforms.dilation[1] * ((col %
              uniforms.itemsPerBlockRow) / uniforms.inChannels);
          let ch = col % uniforms.inChannels;
          if(xCol < uniforms.xShape[${t6}] && xCol >= 0) {
            value = ${s};
          }
        }
        setOutputAtIndex(index, value);
      }
    }
   `;
  }
};
function Kg(r, e) {
  let t6 = r.length;
  return t6 >= 3 ? e ? [...r.slice(0, -3), r[t6 - 3] * r[t6 - 2], r[t6 - 1]] : [...r.slice(0, -3), r[t6 - 3], r[t6 - 2] * r[t6 - 1]] : !e && t6 === 1 && r[0] > 1 ? [r[0], 1] : null;
}
function Lre({ x: r, filter: e, convInfo: t6, backend: o, bias: n = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let p = t6.dataFormat === "channelsLast", u = !p, c = false, l = p && t6.filterHeight === t6.inHeight && t6.filterWidth === t6.inWidth && t6.padInfo.type === "VALID", m = [], d, f;
  if (l) {
    let x = t6.inHeight * t6.inWidth * t6.inChannels;
    d = de({ inputs: { x: r }, backend: o, attrs: { shape: [1, t6.batchSize, x] } }), f = de({ inputs: { x: e }, backend: o, attrs: { shape: [1, x, t6.outChannels] } });
  } else
    d = de({ inputs: { x: r }, backend: o, attrs: { shape: p ? [t6.batchSize, t6.inHeight * t6.inWidth, t6.inChannels] : [t6.batchSize, t6.inChannels, t6.inHeight * t6.inWidth] } }), f = de({ inputs: { x: e }, backend: o, attrs: { shape: [1, t6.inChannels, t6.outChannels] } });
  if (m.push(d), m.push(f), s != null) {
    let x = Kg(s.shape, p);
    x != null && (s = de({ inputs: { x: s }, backend: o, attrs: { shape: x } }), m.push(s));
  }
  if (n != null) {
    let x = Kg(n.shape, p);
    x != null && (n = de({ inputs: { x: n }, backend: o, attrs: { shape: x } }), m.push(n));
  }
  let h = Gu({ a: p ? d : f, b: p ? f : d, transposeA: u, transposeB: c, backend: o, bias: n, activation: i, preluActivationWeights: s, leakyreluAlpha: a }), g = de({ inputs: { x: h }, backend: o, attrs: { shape: t6.outShape } });
  m.push(h);
  for (let x of m)
    o.disposeData(x.dataId);
  return g;
}
function Bre({ x: r, filter: e, convInfo: t6, backend: o, bias: n = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let { filterWidth: p, filterHeight: u, inChannels: c, strideWidth: l, strideHeight: m, padInfo: d, outWidth: f, outHeight: h, dilationWidth: g, dilationHeight: x, dataFormat: b } = t6, C = b === "channelsLast", w = p * u * c, k = h * f, _ = C ? [t6.batchSize, k, w] : [t6.batchSize, w, k], $ = new qg(_, C), A = [{ type: "int32", data: [d.top, d.left] }, { type: "int32", data: [m, l] }, { type: "int32", data: [x, g] }, { type: "int32", data: [f] }, { type: "int32", data: [c * p] }, { type: "int32", data: [c] }], R = o.runWebGPUProgram($, [r], r.dtype, A), D = [];
  D.push(R);
  let P = de({ inputs: { x: e }, backend: o, attrs: { shape: [1, w, -1] } });
  if (D.push(P), s != null) {
    let U = Kg(s.shape, C);
    U != null && (s = de({ inputs: { x: s }, backend: o, attrs: { shape: U } }), D.push(s));
  }
  if (n != null) {
    let U = Kg(n.shape, C);
    U != null && (n = de({ inputs: { x: n }, backend: o, attrs: { shape: U } }), D.push(n));
  }
  let W = Gu({ a: C ? R : P, b: C ? P : R, transposeA: !C, transposeB: false, backend: o, bias: n, activation: i, preluActivationWeights: s, leakyreluAlpha: a }), V = de({ inputs: { x: W }, backend: o, attrs: { shape: t6.outShape } });
  D.push(W);
  for (let U of D)
    o.disposeData(U.dataId);
  return V;
}
function jg({ x: r, filter: e, convInfo: t6, backend: o, bias: n = null, preluActivationWeights: s = null, leakyreluAlpha: a = 0, activation: i = null }) {
  let p = n != null, u = s != null, c = t6.dataFormat === "channelsLast", l = c && t6.filterHeight === t6.inHeight && t6.filterWidth === t6.inWidth && t6.padInfo.type === "VALID", m = O().getBool("WEBGPU_USE_NAIVE_CONV2D_DEBUG");
  if (!m && (l || t6.filterHeight === 1 && t6.filterWidth === 1 && t6.dilationHeight === 1 && t6.dilationWidth === 1 && t6.strideHeight === 1 && t6.strideWidth === 1 && (t6.padInfo.type === "SAME" || t6.padInfo.type === "VALID")))
    return Lre({ x: r, filter: e, convInfo: t6, backend: o, bias: n, activation: i, preluActivationWeights: s, leakyreluAlpha: a });
  let d = O().getNumber("WEBGPU_THRESHOLD_TO_INCREASE_WORKGROUPS_FOR_MATMUL"), f = d > 0 ? d : o.thresholdToIncreaseWorkgroups, h = t6.batchSize * Math.ceil(t6.outHeight * t6.outWidth / 32) * Math.ceil(t6.outChannels / 32);
  if (O().getBool("WEBGPU_CONV_SEPARATE_IM2COL_SHADER") || h <= f)
    return Bre({ x: r, filter: e, convInfo: t6, backend: o, bias: n, preluActivationWeights: s, leakyreluAlpha: a, activation: i });
  let g, x = [t6.padInfo.top, t6.padInfo.left], b = [{ type: "int32", data: [t6.filterHeight, t6.filterWidth] }, { type: "int32", data: [...x] }, { type: "int32", data: [t6.strideHeight, t6.strideWidth] }, { type: "int32", data: [t6.dilationHeight, t6.dilationWidth] }];
  if (m)
    g = new Hg(t6, p, i, u);
  else {
    let _ = c ? t6.outHeight * t6.outWidth : t6.outChannels, $ = c ? t6.outChannels : t6.outHeight * t6.outWidth, A = t6.filterHeight * t6.filterWidth * t6.inChannels;
    b.push({ type: "int32", data: [_] }, { type: "int32", data: [$] }, { type: "int32", data: [A] });
    let R = o.adapterInfo.isIntel();
    g = new Gg(t6, _, $, A, p, i, u, R);
  }
  let C = [], w = [r, e];
  p && (!c && n.shape.length === 1 && (n = de({ inputs: { x: n }, backend: o, attrs: { shape: [n.shape[0], 1, 1] } }), C.push(n)), w.push(n)), u && (!c && s.shape.length === 1 && (s = de({ inputs: { x: s }, backend: o, attrs: { shape: [s.shape[0], 1, 1] } }), C.push(s)), w.push(s)), i === "leakyrelu" && (b.push({ type: "float32", data: [a] }), g.uniforms += " alpha : f32,");
  let k = o.runWebGPUProgram(g, w, r.dtype, b);
  for (let _ of C)
    o.disposeData(_.dataId);
  return k;
}
function Vre(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { x: n, filter: s } = e, { strides: a, pad: i, dataFormat: p, dilations: u, dimRoundingMode: c } = t6, l = S.convertConv2DDataFormat(p), m = S.computeConv2DInfo(n.shape, s.shape, a, u, i, c, false, l);
  return jg({ x: n, filter: s, convInfo: m, backend: o });
}
var QM = { kernelName: Go, backendName: "webgpu", kernelFunc: Vre };
function zre(r = 4) {
  let e = (s) => {
    switch (s) {
      case 1:
        return "return W[getIndexFromCoords4D(coord, uniforms.wShape)];";
      case 4:
        return `
            let coord1 = vec4<i32>(coordX, coordY, col + 1, rowInner);
            let coord2 = vec4<i32>(coordX, coordY, col + 2, rowInner);
            let coord3 = vec4<i32>(coordX, coordY, col + 3, rowInner);
            let v0 = W[getIndexFromCoords4D(coord, uniforms.wShape)];
            let v1 = W[getIndexFromCoords4D(coord1, uniforms.wShape)];
            let v2 = W[getIndexFromCoords4D(coord2, uniforms.wShape)];
            let v3 = W[getIndexFromCoords4D(coord3, uniforms.wShape)];
            return vec4<f32>(v0, v1, v2, v3);
            `;
      default:
        throw new Error(`innerElementSize ${s} is not supported.`);
    }
  }, o = `if (row < uniforms.dimAOuter && col < uniforms.dimInner) {
        ${`
      let outRow = row / uniforms.outShape[2];
      let outCol = row % uniforms.outShape[2];

      let WRow = col / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
      let WCol = col / uniforms.outBackprop[3] % uniforms.filterDims[1];
      let xR = f32(outRow - uniforms.pads[0] + WRow) / f32(uniforms.stride[0]);
      let xC = f32(outCol - uniforms.pads[1] + WCol) / f32(uniforms.stride[1]);
      if (xR < 0.0 || xR >= f32(uniforms.outBackprop[1]) || fract(xR) > 0.0) {
        return ${kt(r)}(0.0);
      }
      if (xC < 0.0 || xC >= f32(uniforms.outBackprop[2]) || fract(xC) > 0.0) {
        return ${kt(r)}(0.0);
      }
      let coord = vec4<i32>(
          batch,
          i32(xR),
          i32(xC),
          col % uniforms.outBackprop[3]);
      return x[getIndexFromCoords4D(coord, uniforms.xShape)/${r}];`}
      }
      return ${kt(r)}(0.0);`;
  return `
  fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${kt(r)} {
    let col = colIn * ${r};
    ${o}
  }

  fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${kt(r)} {
    let col = colIn * ${r};
    let coordX = uniforms.filterDims.x - 1 -
        row / (uniforms.filterDims[1] * uniforms.outBackprop[3]);
    let coordY = uniforms.filterDims.y - 1 -
        (row / uniforms.outBackprop[3]) % uniforms.filterDims[1];
    if (row < uniforms.dimInner && col < uniforms.dimBOuter &&
        coordX >= 0 && coordY >= 0) {
      let rowInner = row % uniforms.outBackprop[3];
      let coord = vec4<i32>(coordX, coordY, col, rowInner);
      ${e(r)}
    }
    return ${kt(r)}(0.0);
  }

  fn mm_write(batch: i32, row : i32, colIn : i32, valueInput : ${kt(r)}) {
    let col = colIn * ${r};
    if (row < uniforms.dimAOuter && (col + ${r - 1}) < uniforms.dimBOuter) {
      var value = valueInput;
      let outCoord = vec4<i32>(
          batch,
          row / uniforms.outShape[2],
          row % uniforms.outShape[2],
          col);
      result[getIndexFromCoords4D(outCoord, uniforms.outShape)/${r}] = value;
    }
  }`;
}
var Xg = class {
  constructor(e) {
    this.variableNames = ["x", "W"], this.uniforms = "filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32,", this.outputShape = e.inShape, y.assert(e.dataFormat === "channelsLast", () => "TODO: NCHW is unimplemented"), this.isVec4 = e.inChannels % 4 === 0 && e.outChannels % 4 === 0, this.dispatchLayout = { x: [3], y: [1, 2], z: [0] }, this.workgroupSize = Ml(this.dispatchLayout, this.outputShape, this.isVec4), this.elementsPerThread = Ll(this.dispatchLayout, this.outputShape, this.isVec4), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, this.elementsPerThread), this.isVec4 && (this.variableTypes = ["vec4<f32>", "f32"]), this.shaderKey = `conv2DDerInputMM_${this.isVec4}_${this.elementsPerThread}`;
  }
  getUserCode() {
    let e = this.isVec4 ? Wu(this.elementsPerThread, this.workgroupSize) : Uu(this.elementsPerThread, this.workgroupSize);
    return `
    ${zre(this.isVec4 ? 4 : 1)}
    ${e}
    `;
  }
};
var Yg = class {
  constructor(e) {
    this.variableNames = ["dy", "W"], this.uniforms = "filterDims : vec2<i32>, pads : vec2<i32>, stride : vec2<i32>, outBackprop : vec4<i32>,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.inShape, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.isChannelsLast = e.dataFormat === "channelsLast", this.shaderKey = `conv2DDerInput_${this.isChannelsLast}`;
  }
  getUserCode() {
    let e = this.isChannelsLast ? 1 : 2, t6 = this.isChannelsLast ? 2 : 3, o = this.isChannelsLast ? 3 : 1;
    return `
    ${se("index")} {
      if(index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let batch = coords[0];
        let d1 = coords[${o}];

        let dyCorner = vec2<i32>(coords[${e}], coords[${t6}]) - uniforms.pads;
        let dyRCorner = dyCorner.x;
        let dyCCorner = dyCorner.y;

        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
        // ? = to be determined. : = across all values in that axis.
        var dotProd = 0.0;
        for (var wR = 0; wR < uniforms.filterDims.x; wR = wR + 1) {
          let dyR = (f32(dyRCorner) + f32(wR)) / f32(uniforms.stride.x);
          let wRPerm = uniforms.filterDims.x - 1 - wR;
          if (dyR < 0.0 || dyR >= f32(uniforms.outBackprop[1]) || fract(dyR) > 0.0 ||
              wRPerm < 0) {
            continue;
          }
          let idyR = i32(dyR);

          for (var wC = 0; wC < uniforms.filterDims.y; wC = wC + 1) {
            let dyC = (f32(dyCCorner) + f32(wC)) / f32(uniforms.stride.y);
            let wCPerm = uniforms.filterDims.y - 1 - wC;
            if (dyC < 0.0 || dyC >= f32(uniforms.outBackprop[2]) ||
                fract(dyC) > 0.0 || wCPerm < 0) {
              continue;
            }
            let idyC = i32(dyC);

            for (var d2 = 0; d2 < uniforms.outBackprop[3]; d2 = d2 + 1) {
              if (${this.isChannelsLast}) {
                let xValue = getDy(batch, idyR, idyC, d2);
                let wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd = dotProd + xValue * wValue;
              } else {
                let xValue = getDy(batch, d2, idyR, idyC);
                let wValue = getW(wRPerm, wCPerm, d1, d2);
                dotProd = dotProd + xValue * wValue;
              }

            }
          }
        }
        setOutputAtIndex(index, dotProd);
      }
    }
  `;
  }
};
function Wre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { dy: n, filter: s } = e, { inputShape: a, strides: i, pad: p, dataFormat: u, dimRoundingMode: c } = o, l = S.convertConv2DDataFormat(u), m = S.computeConv2DInfo(a, s.shape, i, 1, p, c, false, l), d = [{ type: "int32", data: [m.filterHeight, m.filterWidth] }, { type: "int32", data: [m.filterHeight - 1 - m.padInfo.top, m.filterWidth - 1 - m.padInfo.left] }, { type: "int32", data: [m.strideHeight, m.strideWidth] }, { type: "int32", data: [m.batchSize, m.outHeight, m.outWidth, m.outChannels] }], f;
  if (O().getBool("WEBGPU_USE_NAIVE_CONV2D_TRANSPOSE") || m.filterHeight <= 2 && m.filterWidth <= 2 && m.outChannels <= 16 && m.inChannels === 1)
    f = new Yg(m);
  else {
    f = new Xg(m);
    let h = m.inHeight * m.inWidth, g = m.inChannels, x = m.filterHeight * m.filterWidth * m.outChannels;
    d.push({ type: "uint32", data: [h] }, { type: "uint32", data: [g] }, { type: "uint32", data: [x] });
  }
  return t6.runWebGPUProgram(f, [n, s], "float32", d);
}
var ZM = { kernelName: Ho, backendName: "webgpu", kernelFunc: Wre };
var Ure = Se({ opType: Q.COS });
var JM = { kernelName: qo, backendName: "webgpu", kernelFunc: Ure };
var Gre = Se({ opType: Q.COSH });
var eL = { kernelName: Ko, backendName: "webgpu", kernelFunc: Gre };
var Qg = class {
  constructor(e, t6, o, n) {
    this.variableNames = ["Image", "Boxes", "BoxInd"], this.uniforms = "extrapolationValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true;
    let [s] = t6;
    this.outputShape = [s, o[0], o[1], e], this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.methodId = n === "bilinear" ? 1 : 0, this.cropHeightBiggerThan1 = this.outputShape[1] > 1, this.cropWidthBiggerThan1 = this.outputShape[2] > 1, this.shaderKey = `cropAndResize_${this.methodId}_${this.cropHeightBiggerThan1}_${this.cropWidthBiggerThan1}`;
  }
  getUserCode() {
    let [e, t6] = ["f32(uniforms.imageShape[1] - 1)", "f32(uniforms.imageShape[2] - 1)"], [o, n, s] = this.cropHeightBiggerThan1 ? [`(${e} / f32(uniforms.outShape[1] - 1))`, "(y2-y1) * height_ratio", `y1*${e} + f32(y)*(height_scale)`] : ["0.0", "0.0", `0.5 * (y1+y2) * ${e}`], [a, i, p] = this.cropWidthBiggerThan1 ? [`(${t6} / f32(uniforms.outShape[2] - 1))`, "(x2-x1) * width_ratio", `x1*${t6} + f32(x)*(width_scale)`] : ["0.0", "0.0", `0.5 * (x1+x2) * ${t6}`];
    return `
    ${se("index")} {
      if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
        let height_ratio = f32(${o});
        let width_ratio = f32(${a});
        let b = coords[0];
        let y = coords[1];
        let x = coords[2];
        let d = coords[3];
        // get box vals
        let y1 = getBoxes(b, 0);
        let x1 = getBoxes(b, 1);
        let y2 = getBoxes(b, 2);
        let x2 = getBoxes(b, 3);
        // get image in batch index
        let bInd = i32(round(getBoxInd(b)));
        if(bInd < 0 || bInd >= uniforms.outShape[0]) {
          return;
        }
        let height_scale = ${n};
        let width_scale = ${i};
        let in_y = ${s};
        if( in_y < 0.0 || in_y > ${e} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let in_x = ${p};
        if( in_x < 0.0 || in_x > ${t6} ) {
          setOutputAtIndex(index, uniforms.extrapolationValue);
          return;
        }
        let sourceFracIndexCR = vec2<f32>(in_x,in_y);
        if(${this.methodId} == 1) {
          // Compute the four integer indices.
          let sourceFloorCR = vec2<i32>(sourceFracIndexCR);
          let sourceCeilCR = vec2<i32>(ceil(sourceFracIndexCR));
          let topLeft = getImage(bInd, sourceFloorCR.y, sourceFloorCR.x, d);
          let bottomLeft = getImage(bInd, sourceCeilCR.y, sourceFloorCR.x, d);
          let topRight = getImage(bInd, sourceFloorCR.y, sourceCeilCR.x, d);
          let bottomRight = getImage(bInd, sourceCeilCR.y, sourceCeilCR.x, d);
          let fracCR = sourceFracIndexCR - vec2<f32>(sourceFloorCR);
          let top = topLeft + (topRight - topLeft) * fracCR.x;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;
          let newValue = top + (bottom - top) * fracCR.y;
          setOutputAtIndex(index, newValue);
        } else {
          // Compute the coordinators of nearest neighbor point.
          let sourceNearestCR = vec2<i32>(floor(
            sourceFracIndexCR + vec2<f32>(0.5,0.5)));
          let newValue = getImage(
            bInd, sourceNearestCR.y, sourceNearestCR.x, d);
          setOutputAtIndex(index, newValue);
        }
      }
    }
    `;
  }
};
var Hre = (r) => {
  let { inputs: e, backend: t6, attrs: o } = r, { image: n, boxes: s, boxInd: a } = e, { cropSize: i, method: p, extrapolationValue: u } = o, c = new Qg(n.shape[3], s.shape, i, p), l = [{ type: "float32", data: [u] }];
  return t6.runWebGPUProgram(c, [n, s, a], "float32", l);
};
var tL = { kernelName: Yo, backendName: "webgpu", kernelFunc: Hre };
var Ku;
(function(r) {
  r.Prod = "*", r.Sum = "+";
})(Ku || (Ku = {}));
var Gl = class {
  constructor(e, t6, o, n) {
    this.variableNames = ["x"], this.uniforms = "index : f32,", this.size = true, this.workgroupSize = [128, 1, 1], this.outputShape = t6, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.exclusive = o, this.reverse = n, this.op = e, this.shaderKey = `cum_${this.op}_${this.exclusive}_${this.reverse}`;
  }
  getUserCode() {
    let e = this.outputShape.length, t6 = this.op === Ku.Prod ? "1.0" : "0.0", o = this.exclusive ? t6 : `getX(${rL(e, "coords", this.op)})`, n = this.outputShape[this.outputShape.length - 1], s = "", a = "";
    return this.exclusive ? (s = this.reverse ? `end != ${n - 1}` : "end != 0", a = this.reverse ? "end + 1" : "end - 1") : (s = this.reverse ? `end + pow2 < ${n}` : "end >= pow2", a = this.reverse ? "end + pow2" : "end - pow2"), `
      ${se("index")} {
       if (index < uniforms.size) {
         var coords = getCoordsFromIndex(index);

         let end = ${oL(e, "coords", this.op)};
         var val = ${o};
         let pow2 = i32(pow(2.0, uniforms.index));
         if (${s}) {
           let idx = ${a};
           ${oL(e, "coords", this.op)} = idx;
           val ${this.op}= getX(${rL(e, "coords", this.op)});
         }
         setOutputAtIndex(index, val);
       }
      }
    `;
  }
};
function rL(r, e, t6) {
  if (r === 1)
    return `${e}`;
  if (r === 2)
    return `${e}.x, ${e}.y`;
  if (r === 3)
    return `${e}.x, ${e}.y, ${e}.z`;
  if (r === 4)
    return `${e}.x, ${e}.y, ${e}.z, ${e}.w`;
  throw Error(`Cumulative ${t6} for rank ${r} is not yet supported`);
}
function oL(r, e, t6) {
  if (r === 1)
    return `${e}`;
  if (r === 2)
    return `${e}.y`;
  if (r === 3)
    return `${e}.z`;
  if (r === 4)
    return `${e}.w`;
  throw Error(`Cumulative ${t6} for rank ${r} is not yet supported`);
}
function Zg(r, e, t6, o, n, s) {
  let a = e.shape.length, i = S.getAxesPermutation([o], a), p = e;
  i != null && (p = Nr({ inputs: { x: e }, backend: t6, attrs: { perm: i } }));
  let u = S.getInnerMostAxes(1, a)[0];
  if (u !== a - 1)
    throw new Error(`WebGPU cumprod shader expects an inner-most axis=${e.shape.length - 1} but got axis=${o}`);
  let c = p.shape[u], l = Ft({ inputs: { x: p }, backend: t6 });
  for (let m = 0; m <= Math.ceil(Math.log2(c)) - 1; m++) {
    let d = new Gl(r, p.shape, false, s), f = l, h = [{ type: "float32", data: [m] }];
    l = t6.runWebGPUProgram(d, [l], l.dtype, h), t6.disposeData(f.dataId);
  }
  if (n) {
    let m = new Gl(r, p.shape, n, s), d = l, f = [{ type: "float32", data: [0] }];
    l = t6.runWebGPUProgram(m, [l], l.dtype, f), t6.disposeData(d.dataId);
  }
  if (i != null) {
    let m = S.getUndoAxesPermutation(i), d = Nr({ inputs: { x: l }, backend: t6, attrs: { perm: m } });
    return t6.disposeData(l.dataId), t6.disposeData(p.dataId), d;
  }
  return l;
}
function qre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, exclusive: a, reverse: i } = o;
  return Zg(Ku.Prod, n, t6, s, a, i);
}
var nL = { kernelName: jo, backendName: "webgpu", kernelFunc: qre };
function Kre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, exclusive: a, reverse: i } = o;
  return Zg(Ku.Sum, n, t6, s, a, i);
}
var sL = { kernelName: Xo, backendName: "webgpu", kernelFunc: Kre };
function jre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, weights: s } = e, { size: a, binaryOutput: i } = o, p = n.shape.length === 1, c = y.sizeFromShape(s.shape) > 0, l = s.dtype, m = p ? [n.shape[0]] : [n.shape[0], n.shape[1]], d = p ? [a] : [n.shape[0], a], f = dr({ backend: t6, attrs: { shape: d, value: 0, dtype: l } }), h = new kc(m, c, i), g = [{ type: "int32", data: [a] }], x = c ? [n, s] : [n];
  return t6.runWebGPUProgram(h, x, l, g, f);
}
var aL = { kernelName: ti, backendName: "webgpu", kernelFunc: jre };
var Jg = class {
  constructor(e, t6) {
    this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.uniforms = "blockSize : i32,", this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = `depthToSpace_${t6}`, this.dataFormat = t6;
  }
  getUserCode() {
    return `
      ${se("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let h = ${this.getHeightCoordString()};
          let w = ${this.getWidthCoordString()};
          let d = ${this.getDepthCoordString()};

          let in_h = h / uniforms.blockSize;
          let offset_h = h % uniforms.blockSize;
          let in_w = w / uniforms.blockSize;
          let offset_w = w % uniforms.blockSize;
          let offset_d = (offset_h * uniforms.blockSize + offset_w) *
            ${this.getOutputDepthSize()};
          let in_d = d + offset_d;

          let rlt = ${this.getInputSamplingString()};
          setOutputAtIndex(index, rlt);
        }
      }`;
  }
  getHeightCoordString() {
    return this.dataFormat === "NHWC" ? "coords[1]" : "coords[2]";
  }
  getWidthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[2]" : "coords[3]";
  }
  getDepthCoordString() {
    return this.dataFormat === "NHWC" ? "coords[3]" : "coords[1]";
  }
  getOutputDepthSize() {
    return this.dataFormat === "NHWC" ? "uniforms.outShape[3]" : "uniforms.outShape[1]";
  }
  getInputSamplingString() {
    return this.dataFormat === "NHWC" ? "getX(b, in_h, in_w, in_d)" : "getX(b, in_d, in_h, in_w)";
  }
};
function Xre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { blockSize: s, dataFormat: a } = o, i = n.shape[0], p = a === "NHWC" ? n.shape[1] : n.shape[2], u = a === "NHWC" ? n.shape[2] : n.shape[3], c = a === "NHWC" ? n.shape[3] : n.shape[1], l = p * s, m = u * s, d = c / (s * s), f = a === "NHWC" ? [i, l, m, d] : [i, d, l, m], h = [{ type: "int32", data: [s] }], g = new Jg(f, a);
  return t6.runWebGPUProgram(g, [n], n.dtype, h);
}
var iL = { kernelName: Qo, backendName: "webgpu", kernelFunc: Xre };
var ex = class {
  constructor(e, t6, o, n = false, s = null, a = false) {
    this.variableNames = ["x", "W"], this.uniforms = "pad : vec2<i32>, inDims : vec2<i32>,", this.workgroupSize = [16, 16, 1], this.outputShape = e, this.dispatchLayout = { x: [3], y: [2], z: [0, 1] }, this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), n && this.variableNames.push("bias"), a && this.variableNames.push("preluActivationWeights"), this.addBias = n, this.activation = s, this.hasPreluActivation = a, this.filterHeight = t6, this.filterWidth = o, this.shaderKey = `depthwiseNCHW_${this.activation}_${this.filterHeight}_${this.filterWidth}`;
  }
  getUserCode() {
    let e = this.filterWidth * this.filterHeight, t6 = this.workgroupSize[0] * this.workgroupSize[1] * this.workgroupSize[2], o = this.workgroupSize[1] + this.filterHeight - 1, n = this.workgroupSize[0] + this.filterWidth - 1;
    return `
      ${ur(this.activation, this.hasPreluActivation, false, 4)}

      var<workgroup> mm_Asub : array<array<f32, ${n}>, ${o}>;
      var<workgroup> mm_Bsub : array<array<f32, ${this.filterWidth}>, ${this.filterHeight}>;
      fn readX(batch : i32, channel : i32, row : i32, col : i32) -> f32 {
        var value = 0.0;
        if (row >=0 && row < uniforms.inDims[0] && col >=0 && col < uniforms.inDims[1])
        {
          value = getX(batch, channel, row, col);
        }
        return value;
      }

      ${se()} {
        let coords = getOutputCoords();
        let batch = coords[0];
        let xRCCorner = vec2<i32>(coords.zw) - uniforms.pad;
        let channelMul = uniforms.wShape[3];
        let d1 = coords[1] / channelMul;
        let q = coords[1] % channelMul;

        let inputRowStart = xRCCorner.x;
        let inputColStart = xRCCorner.y;

        let localRow = i32(localId.y);
        let localCol = i32(localId.x);

        // Load one tile of X into local memory.
        for (var inputRow = localRow; inputRow < ${o}; inputRow = inputRow + ${this.workgroupSize[1]}) {
          for (var inputCol = localCol; inputCol < ${n}; inputCol = inputCol + ${this.workgroupSize[0]}) {
            let rowOffset = inputRow - localRow;
            let colOffset = inputCol - localCol;
            mm_Asub[inputRow][inputCol] = readX(batch, d1, inputRowStart + rowOffset, inputColStart + colOffset);
          }
        }

        // Load one tile of W into local memory.
        var wIndex = i32(localIndex);
        ${e < t6 ? `if (wIndex < ${e})` : `for(; wIndex < ${e}; wIndex = wIndex + ${t6})`}

        {
          let wRow = wIndex / ${this.filterWidth};
          let wCol = wIndex % ${this.filterWidth};
          mm_Bsub[wRow][wCol] = getW(wRow, wCol, d1, q);
        }

        workgroupBarrier();

        var value = 0.0;
        for (var wR = 0; wR < ${this.filterHeight}; wR = wR + 1) {
          for (var wC = 0; wC < ${this.filterWidth}; wC = wC + 1) {
            let xVal = mm_Asub[localRow + wR][localCol + wC];
            let wVal = mm_Bsub[wR][wC];
            value = fma(xVal, wVal, value);
          }
        }
        ${Hr(this.addBias, this.activation)}
        if (coordsInBounds4D(coords, uniforms.outShape)) {
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `;
  }
};
var Tc = class {
  constructor(e, t6 = false, o = null, n = false) {
    this.variableNames = ["x", "W"], this.uniforms = "pad : vec2<i32>, inDims : vec2<i32>,", this.workgroupSize = [4, 4, 4], this.workPerThread = 4, this.isVec4 = true, this.outputShape = e.outShape, this.dispatchLayout = { x: [3], y: [2], z: [0, 1] }, this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, [4, this.workPerThread, 1]), y.assert(e.dataFormat === "channelsLast", () => "TODO: NCHW is unimplemented"), t6 && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), this.convInfo = e, this.addBias = t6, this.activation = o, this.hasPreluActivation = n, this.shaderKey = `depthwiseVec4_${o}_${this.convInfo.filterHeight}_${this.convInfo.filterWidth}_${this.convInfo.strideHeight}_${this.convInfo.strideWidth}_${this.workPerThread}`;
  }
  getUserCode() {
    let e = (this.workPerThread - 1) * this.convInfo.strideWidth + this.convInfo.filterWidth;
    return `
      ${ur(this.activation, this.hasPreluActivation, true, 4)}
      fn readX(batch : i32, row : i32, col : i32, channel : i32) -> vec4<f32> {
        var value = vec4<f32>(0.0);
        if (col >=0 && col < uniforms.inDims[1]) {
          value = getX(batch, row, col, channel);
        }
        return value;
      }

      const strideHeight = ${this.convInfo.strideHeight};
      const strideWidth = ${this.convInfo.strideWidth};
      ${se()} {
        let batch = i32(globalId.z) / uniforms.outShape[1];
        let r = i32(globalId.z) % uniforms.outShape[1];
        let c = i32(globalId.y) * ${this.workPerThread};
        let d1 = i32(globalId.x) * 4;
        let xRCCorner = vec2<i32>(r, c) * vec2<i32>(strideHeight, strideWidth) - uniforms.pad;

        let xRCorner = xRCCorner.x;
        let xCCorner = xRCCorner.y;
        var xVals : array<vec4<f32>, ${e}>;
        var dotProd : array<vec4<f32>, ${this.workPerThread}>;
        for (var i = 0; i < ${this.workPerThread}; i++) {
          dotProd[i] = vec4<f32>(0.0);
        }

        // Use constant instead of uniform can give better performance.
        for (var wR = 0; wR < ${this.convInfo.filterHeight}; wR = wR + 1) {
          let xR = xRCorner + wR;
          if (xR >=0 && xR < uniforms.inDims[0]) {
            for (var i = 0; i < ${e}; i++) {
              xVals[i] = readX(batch, xR, xCCorner + i, d1);
            }
            for (var wC = 0; wC < ${this.convInfo.filterWidth}; wC = wC + 1) {
              let wValue = getW(wR, wC, d1, 0);
              for (var i = 0; i < ${this.workPerThread}; i++) {
                dotProd[i] = fma(xVals[i * strideWidth + wC], wValue, dotProd[i]);
              }
            }
          }
        }

        for (var i = 0; i < ${this.workPerThread}; i = i + 1) {
          let coords = vec4<i32>(batch, r, c + i, d1);
          if (coordsInBounds4D(coords, uniforms.outShape)) {
            var value = dotProd[i];
            ${Hr(this.addBias, this.activation)}
            setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
          }
        }
      }
    `;
  }
};
var _c = class {
  constructor(e, t6 = false, o = null, n = false) {
    this.variableNames = ["x", "W"], this.uniforms = `pad : vec2<i32>, inDims : vec2<i32>, filterHeight : i32,
      filterWidth : i32, stride : vec2<i32>, dilation : vec2<i32>,`, this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = e.outShape, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.isChannelsLast = e.dataFormat === "channelsLast", t6 && this.variableNames.push("bias"), n && this.variableNames.push("preluActivationWeights"), this.convInfo = e, this.addBias = t6, this.activation = o, this.hasPreluActivation = n, this.shaderKey = `depthwise_${this.activation}_${this.isChannelsLast}`;
  }
  getUserCode() {
    let e = this.isChannelsLast ? "getX(batch, xR, xC, d1);" : "getX(batch, d1, xR, xC);";
    return `
      ${ur(this.activation, this.hasPreluActivation, false, 4)}

      ${se("index")} {
        if (index < uniforms.size) {
          let coords = getOutputCoords();
          let batch = coords[0];
          let xRCCorner = vec2<i32>(coords.${this.isChannelsLast ? "yz" : "zw"}) * uniforms.stride - uniforms.pad;
          let d2 = coords[${this.isChannelsLast ? 3 : 1}];
          let channelMul = uniforms.wShape[3];
          let d1 = d2 / channelMul;
          let q = d2 % channelMul;

          let inputRowStart = xRCCorner.x;
          let inputColStart = xRCCorner.y;
          let inputRowEnd = inputRowStart + uniforms.filterHeight *
              uniforms.dilation[0];
          let inputColEnd = inputColStart + uniforms.filterWidth *
              uniforms.dilation[1];

          // Convolve x(?, ?, d1)|x(d1, ?, ?) with w(:, :, d1, q) to get
          // y(yR, yC, d2)|y(d2, yR, yC). ? = to be determined. : = across all
          // values in that axis. x(?, ?, d1) and y(yR, yC, d2) is for NHWC.
          // x(d1, ?, ?) and y(d2, yR, yC) is for NCHW.
          var value = 0.0;

          // Extract if checking out of for loop for performance.
          if (inputRowStart >= 0 && inputColStart >= 0 &&
            inputRowEnd < uniforms.inDims[0] &&
                inputColEnd < uniforms.inDims[1]) {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilation[0];

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilation[1];

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            } else {
              for (var wR = 0; wR < uniforms.filterHeight; wR = wR + 1) {
                let xR = inputRowStart + wR * uniforms.dilation[0];

                if (xR < 0 || xR >= uniforms.inDims[0]) {
                  continue;
                }

                for (var wC = 0; wC < uniforms.filterWidth; wC = wC + 1) {
                  let xC = inputColStart + wC * uniforms.dilation[1];

                  if (xC < 0 || xC >= uniforms.inDims[1]) {
                    continue;
                  }

                  let xVal = ${e};
                  let wVal = getW(wR, wC, d1, q);
                  value = value + xVal * wVal;
                }
              }
            }
            ${Hr(this.addBias, this.activation)}
          setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
        }
      }
    `;
  }
};
function Yre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s } = e, { strides: a, pad: i, dataFormat: p, dilations: u, dimRoundingMode: c } = o, l = S.convertConv2DDataFormat(p), m = u;
  m == null && (m = [1, 1]);
  let d = S.computeConv2DInfo(n.shape, s.shape, a, m, i, c, true, l), f = [{ type: "int32", data: [d.padInfo.top, d.padInfo.left] }, { type: "int32", data: [d.inHeight, d.inWidth] }], h = d.dataFormat === "channelsLast", g;
  return !h && d.inHeight > 16 && d.inWidth > 16 && d.strideHeight === 1 && d.strideWidth === 1 && d.dilationWidth === 1 && d.dilationHeight === 1 && d.inChannels === d.outChannels ? g = new ex(d.outShape, d.filterHeight, d.filterWidth) : h && d.outHeight > 4 && d.outWidth > 4 && d.strideWidth <= 2 && d.inChannels === d.outChannels && d.dilationHeight === 1 && d.dilationWidth === 1 && d.inChannels % 4 === 0 ? g = new Tc(d) : (g = new _c(d), f.push({ type: "int32", data: [d.filterHeight] }, { type: "int32", data: [d.filterWidth] }, { type: "int32", data: [d.strideHeight, d.strideWidth] }, { type: "int32", data: [d.dilationHeight, d.dilationWidth] })), t6.runWebGPUProgram(g, [n, s], n.dtype, f);
}
var uL = { kernelName: Zo, backendName: "webgpu", kernelFunc: Yre };
var dI = ot({ opType: ye.MUL, cpuKernelImpl: aM, supportsComplex: true });
var pL = { kernelName: kn, backendName: "webgpu", kernelFunc: dI };
function Hl(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o;
  return qr(n, s, a, "sum", t6);
}
var cL = { kernelName: Hn, backendName: "webgpu", kernelFunc: Hl };
function Qre(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { equation: n } = o, s = e, { allDims: a, summedDims: i, idDims: p } = S.decodeEinsumEquation(n, s.length);
  S.checkEinsumDimSizes(a.length, p, s);
  let { path: u, steps: c } = S.getEinsumComputePath(i, p), l = c.length, m = null, d = a.length, f = [];
  for (let h = 0; h < l; ++h) {
    for (let g of c[h]) {
      let { permutationIndices: x, expandDims: b } = S.getEinsumPermutation(d, p[g]), C;
      S.isIdentityPermutation(x) ? C = s[g] : (C = Nr({ inputs: { x: s[g] }, backend: t6, attrs: { perm: x } }), f.push(C));
      let w = C.shape.slice();
      for (let k = 0; k < b.length; ++k)
        w.splice(b[k], 0, 1);
      y.arraysEqual(C.shape, w) || (C = de({ inputs: { x: C }, backend: t6, attrs: { shape: w } }), f.push(C)), m === null ? m = C : (m = dI({ inputs: { a: C, b: m }, backend: t6 }), f.push(m));
    }
    h < l - 1 && (u[h] >= 0 && (m = Hl({ inputs: { x: m }, backend: t6, attrs: { axis: u[h] - (a.length - d), keepDims: false } }), f.push(m)), d--);
  }
  for (let h of f)
    h !== m && t6.disposeData(h.dataId);
  return m;
}
var lL = { kernelName: ri, backendName: "webgpu", kernelFunc: Qre };
var Zre = Se({ opType: Q.ELU });
var mL = { kernelName: en, backendName: "webgpu", kernelFunc: Zre };
var Jre = ot({ opType: ye.EQUAL, dtype: "bool", cpuKernelImpl: q3 });
var dL = { kernelName: tn, backendName: "webgpu", kernelFunc: Jre };
var eoe = Se({ opType: Q.ERF });
var fL = { kernelName: ma, backendName: "webgpu", kernelFunc: eoe };
var fI = Se({ opType: Q.EXP, cpuKernelImpl: K3, dtype: "float32" });
var hL = { kernelName: rn, backendName: "webgpu", kernelFunc: fI };
function tx(r) {
  let { inputs: e, attrs: t6, backend: o } = r, { dim: n } = t6, { input: s } = e, a = s.shape.length, i = s.shape.slice(), p = n;
  return n < 0 && (y.assert(-(a + 1) <= n, () => `Axis must be in the interval [${-(a + 1)}, ${a}]`), p = a + n + 1), i.splice(p, 0, 1), de({ inputs: { x: s }, backend: o, attrs: { shape: i } });
}
var gL = { kernelName: bs, backendName: "webgpu", kernelFunc: tx };
var toe = Se({ opType: Q.EXPM1, cpuKernelImpl: j3 });
var xL = { kernelName: da, backendName: "webgpu", kernelFunc: toe };
var ql = class {
  constructor(e, t6) {
    this.variableNames = ["real", "imag"], this.outputShape = [], this.uniforms = "exponentMultiplier : f32, denominator: f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t6, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.component = e, this.shaderKey = `fft_${e}`;
  }
  getUserCode() {
    return `
    fn unaryOpComplex(real: f32, expR: f32, imag: f32, expI: f32) -> f32 {
      ${this.component === "real" ? "return real * expR - imag * expI;" : "return real * expI + imag * expR;"}
    }

    fn mulMatDFT(batch: i32, index: i32) -> f32 {
      let indexRatio = f32(index) / f32(uniforms.realShape[1]);
      let exponentMultiplierTimesIndexRatio =
          uniforms.exponentMultiplier * indexRatio;

      var result = 0.0;

      for (var i = 0; i < uniforms.realShape[1]; i = i + 1) {
        // x = (-2|2 * PI / N) * index * i;
        let x = exponentMultiplierTimesIndexRatio * f32(i);
        let expR = cos(x);
        let expI = sin(x);
        let real = getReal(batch, i);
        let imag = getImag(batch, i);

        result = result +
            unaryOpComplex(real, expR, imag, expI) / uniforms.denominator;
      }

      return result;
    }

    ${se("index")} {
      if (index < uniforms.size) {
        let coords = getOutputCoords();
        setOutputAtIndex(index, mulMatDFT(coords[0], coords[1]));
      }
    }
  `;
  }
};
function rx(r, e, t6) {
  let o = t6.tensorMap.get(r.dataId), n = y.sizeFromShape(r.shape), s = r.shape[r.shape.length - 1], a = n / s, i = [], p = de({ inputs: { x: r }, backend: t6, attrs: { shape: [a, s] } });
  i.push(p);
  let u = p.shape, c = new ql("real", u), l = new ql("imag", u), m = [{ dataId: o.complexTensorInfos.real.dataId, dtype: o.complexTensorInfos.real.dtype, shape: u }, { dataId: o.complexTensorInfos.imag.dataId, dtype: o.complexTensorInfos.imag.dtype, shape: u }], d = e ? 2 * Math.PI : -2 * Math.PI, f = e ? u[1] : 1, h = [{ type: "float32", data: [d] }, { type: "float32", data: [f] }], g = t6.runWebGPUProgram(c, m, "float32", h);
  i.push(g);
  let x = t6.runWebGPUProgram(l, m, "float32", h);
  i.push(x);
  let b = po({ inputs: { real: g, imag: x }, backend: t6 });
  i.push(b);
  let C = de({ inputs: { x: b }, backend: t6, attrs: { shape: r.shape } });
  return i.forEach((w) => t6.disposeData(w.dataId)), C;
}
function roe(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e;
  return rx(o, false, t6);
}
var yL = { kernelName: oi, backendName: "webgpu", kernelFunc: roe };
var ox = class {
  constructor(e) {
    this.outputShape = [], this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "flipLeftRight";
  }
  getUserCode() {
    return `
      ${se("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let coordX = uniforms.xShape[2] - coords[2] - 1;
          let outputValue = getX(coords[0], coords[1], coordX, coords[3]);
          setOutputAtIndex(index, outputValue);
        }
      }
    `;
  }
};
var bL = { kernelName: on, backendName: "webgpu", kernelFunc: ({ inputs: r, backend: e }) => {
  let { image: t6 } = r, o = e, n = new ox(t6.shape);
  return o.runWebGPUProgram(n, [t6], t6.dtype);
} };
var ooe = Se({ opType: Q.FLOOR, cpuKernelImpl: X3 });
var CL = { kernelName: nn, backendName: "webgpu", kernelFunc: ooe };
var noe = ot({ opType: ye.INT_DIV, dtype: "int32" });
var SL = { kernelName: sn, backendName: "webgpu", kernelFunc: noe };
var nx = class {
  constructor(e, t6, o = false) {
    this.isFromPixels = true, this.outputShape = [0], this.variableNames = [], this.workgroupSize = [256, 1, 1], this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, [t6, 1, 1]), this.importVideo = o, this.shaderKey = `fromPixels_${this.importVideo}`;
  }
  getUserCode() {
    let e = this.importVideo ? "textureLoad(src, vec2<i32>(coords.yx));" : "textureLoad(src, vec2<i32>(coords.yx), 0)";
    return `
      @binding(1) @group(0) var src: ${this.importVideo ? "texture_external" : "texture_2d<f32>"};
      ${se("index")} {
        let flatIndex = index * uniforms.numChannels;
        if (flatIndex < uniforms.size) {
          let coords = getCoordsFromIndex(flatIndex);
          let values = ${e};
          for (var i = 0; i < uniforms.numChannels; i = i + 1) {
            result[flatIndex + i] = i32(floor(255.0 * values[i]));
          }
        }
      }
  `;
  }
};
var wL = { kernelName: Zi, backendName: "webgpu", kernelFunc: soe };
var Ec;
var hI = O().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
var sx = /* @__PURE__ */ new Map();
function soe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { pixels: n } = e, { numChannels: s } = o;
  if (n == null)
    throw new Error("pixels passed to tf.browser.fromPixels() can not be null");
  let a = typeof HTMLVideoElement != "undefined" && n instanceof HTMLVideoElement, i = typeof HTMLImageElement != "undefined" && n instanceof HTMLImageElement, p = typeof HTMLCanvasElement != "undefined" && n instanceof HTMLCanvasElement || typeof OffscreenCanvas != "undefined" && n instanceof OffscreenCanvas, u = typeof ImageBitmap != "undefined" && n instanceof ImageBitmap, [c, l] = a ? [n.videoWidth, n.videoHeight] : [n.width, n.height], m = [l, c, s], d = false, f = a || i;
  if (u || p || f) {
    let b;
    if (d) {
      let D = n;
      if (!sx.has(D) || sx.get(D).expired) {
        let P = { source: D };
        sx.set(D, t6.device.importExternalTexture(P));
      }
      b = { width: c, height: l, format: null, usage: null, texture: sx.get(D) };
    } else {
      if (f) {
        let L = O().getBool("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU");
        (Ec == null || L !== hI) && (hI = L, Ec = document.createElement("canvas").getContext("2d", { willReadFrequently: hI })), Ec.canvas.width = c, Ec.canvas.height = l, Ec.drawImage(n, 0, 0, c, l), n = Ec.canvas;
      }
      let D = GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING, P = "rgba8unorm", M = t6.textureManager.acquireTexture(m[1], m[0], P, D);
      t6.queue.copyExternalImageToTexture({ source: n }, { texture: M }, [m[1], m[0]]), b = { width: c, height: l, format: P, usage: D, texture: M };
    }
    let C = y.sizeFromShape(m), w = y.computeStrides(m), k = new nx(m, s, d), _ = [{ type: "uint32", data: [C] }, { type: "uint32", data: [s] }, { type: "uint32", data: [...w] }], $ = t6.makeTensorInfo([l, c], "int32"), A = t6.tensorMap.get($.dataId);
    A.resourceInfo = b;
    let R = t6.runWebGPUProgram(k, [$], "int32", _);
    return t6.disposeData($.dataId), R;
  }
  let h = n.data, g = h;
  if (s != null && s !== 4) {
    g = new Uint8Array(n.width * n.height * s);
    let b = h.length, C = 0;
    for (let w = 0; w < b; w++)
      w % 4 < s && (g[C++] = h[w]);
  }
  let x = t6.makeTensorInfo(m, "int32", new Int32Array(g));
  return t6.uploadToGPU(x.dataId), x;
}
var ax = class {
  constructor(e, t6, o, n, s) {
    this.uniforms = "varianceEpsilon : f32,", this.workgroupSize = [128, 1, 1], this.size = true, this.variableNames = ["x", "mean", "variance"], S.assertAndGetBroadcastShape(e, t6), S.assertAndGetBroadcastShape(e, o), this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), n != null && (S.assertAndGetBroadcastShape(e, n), this.variableNames.push("offset")), s != null && (S.assertAndGetBroadcastShape(e, s), this.variableNames.push("scale")), this.offsetShape = n, this.scaleShape = s, this.shaderKey = "batchNorm";
  }
  getUserCode() {
    let e = "0.0";
    this.offsetShape != null && (e = "getOffsetByOutputIndex(index)");
    let t6 = "1.0";
    return this.scaleShape != null && (t6 = "getScaleByOutputIndex(index)"), `
      ${se("index")} {
        if (index < uniforms.size)
        {
          let xValue = getXByOutputIndex(index);
          let meanValue = getMeanByOutputIndex(index);
          let varianValue = getVarianceByOutputIndex(index);
          let offsetValue = ${e};
          let scaleValue = ${t6};
          let inv = scaleValue * inverseSqrt(varianValue + f32(uniforms.varianceEpsilon));
          setOutputAtIndex(index,dot(vec3<f32>(xValue, -meanValue, offsetValue), vec3<f32>(inv, inv, 1.0)));
        }
      }
  `;
  }
};
var IL = { kernelName: an, backendName: "webgpu", kernelFunc: ({ inputs: r, attrs: e, backend: t6 }) => {
  let { x: o, scale: n, offset: s, mean: a, variance: i } = r, { varianceEpsilon: p } = e, u = t6, c = [o, a, i], l = null;
  s != null && (l = s.shape, c.push(s));
  let m = null;
  n != null && (m = n.shape, c.push(n));
  let d = new ax(o.shape, a.shape, i.shape, l, m), f = [{ type: "float32", data: [p] }];
  return u.runWebGPUProgram(d, c, o.dtype, f);
} };
function aoe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = e, { strides: p, pad: u, dataFormat: c, dilations: l, dimRoundingMode: m, activation: d, leakyreluAlpha: f } = o, h = S.convertConv2DDataFormat(c), g = S.computeConv2DInfo(n.shape, s.shape, p, l, u, m, false, h);
  return jg({ x: n, filter: s, convInfo: g, backend: t6, bias: a, preluActivationWeights: i, leakyreluAlpha: f, activation: d });
}
var vL = { kernelName: ho, backendName: "webgpu", kernelFunc: aoe };
function ioe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, filter: s, bias: a, preluActivationWeights: i } = e, { strides: p, pad: u, dilations: c, dimRoundingMode: l, activation: m, leakyreluAlpha: d } = o, f = c;
  f == null && (f = [1, 1]), y.assert(S.eitherStridesOrDilationsAreOne(p, f), () => `Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${p} and dilations '${f}'`);
  let h = S.computeConv2DInfo(n.shape, s.shape, p, f, u, l, true), g = [n, s], x = a != null, b = i != null;
  x && g.push(a), b && g.push(i);
  let C = [{ type: "int32", data: [h.padInfo.top, h.padInfo.left] }, { type: "int32", data: [h.inHeight, h.inWidth] }], w;
  return h.outHeight > 4 && h.outWidth > 4 && h.strideWidth <= 2 && h.inChannels === h.outChannels && h.dilationHeight === 1 && h.dilationWidth === 1 && h.inChannels % 4 === 0 ? w = new Tc(h, x, m, b) : (w = new _c(h, x, m, b), C.push({ type: "int32", data: [h.filterHeight] }, { type: "int32", data: [h.filterWidth] }, { type: "int32", data: [h.strideHeight, h.strideWidth] }, { type: "int32", data: [h.dilationHeight, h.dilationWidth] })), m === "leakyrelu" && (C.push({ type: "float32", data: [d] }), w.uniforms += " alpha : f32,"), t6.runWebGPUProgram(w, g, "float32", C);
}
var kL = { kernelName: go, backendName: "webgpu", kernelFunc: ioe };
var ix = class {
  constructor(e, t6) {
    this.variableNames = ["A", "indices"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t6, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = `gathernd_${e}`, this.sliceDim = e, this.uniforms = `sliceDim : i32, strides : ${Rt(e)},`;
  }
  getUserCode() {
    let e;
    return this.sliceDim > 1 ? e = "uniforms.strides[j]" : e = "uniforms.strides", `
      ${se("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          var flattenIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexTemp = i32(round(getIndices(coords[0], j)));
            let strideNum = ${e};
            flattenIndex = flattenIndex + indexTemp * strideNum;
          }

          setOutputAtIndex(index, getA(flattenIndex, coords[1]));
        }
      }
      `;
  }
};
function uoe(r) {
  let { inputs: e, backend: t6 } = r, { params: o, indices: n } = e, s = n.shape, a = s[s.length - 1], i = y.sizeFromShape(o.shape), [p, u, c, l] = S.prepareAndValidate(o, n), m = de({ inputs: { x: n }, backend: t6, attrs: { shape: [u, a] } }), d = de({ inputs: { x: o }, backend: t6, attrs: { shape: [y.sizeFromShape(o.shape) / c, c] } });
  if (t6.shouldExecuteOnCPU([o, n]) || o.dtype === "string") {
    let b = t6.readSync(n.dataId), C = t6.bufferSync(o), w = Y3(b, C, o.dtype, u, a, c, l, o.shape, i);
    return t6.makeTensorInfo(p, o.dtype, w.values);
  }
  let f = new ix(a, [u, c]), h = [{ type: "int32", data: [a] }, { type: "int32", data: l }], g = t6.runWebGPUProgram(f, [d, m], d.dtype, h), x = de({ inputs: { x: g }, backend: t6, attrs: { shape: p } });
  return t6.disposeData(m.dataId), t6.disposeData(d.dataId), t6.disposeData(g.dataId), x;
}
var NL = { kernelName: un, backendName: "webgpu", kernelFunc: uoe };
var ux = class {
  constructor(e, t6) {
    this.variableNames = ["A", "indices"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e.slice(), this.aShape = e, this.outputShape = t6, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "gather";
  }
  getUserCode() {
    let e = poe(this.aShape);
    return `
      ${se("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let indexZ = i32(getIndices(resRC.x, resRC.z));
          let inBounds = select(0.0, 1.0, indexZ >= 0 && indexZ < uniforms.aShape[2]);
          setOutputAtIndex(index, inBounds * getA(${e}));
        }
      }
    `;
  }
};
function poe(r) {
  let e = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], t6 = [];
  for (let o = 0; o < r.length; o++)
    o === 2 ? t6.push("indexZ") : t6.push(`${e[o]}`);
  return t6.join();
}
function gI(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n, indices: s } = e, { axis: a, batchDims: i } = o, p = y.parseAxisParam(a, n.shape)[0], u = S.segment_util.collectGatherOpShapeInfo(n, s, p, i), c = y.sizeFromShape(s.shape), l = [], m = de({ inputs: { x: n }, backend: t6, attrs: { shape: [u.batchSize, u.outerSize, u.dimSize, u.sliceSize] } }), d = de({ inputs: { x: s }, backend: t6, attrs: { shape: [u.batchSize, c / u.batchSize] } });
  l.push(m), l.push(d);
  let f = [u.batchSize, u.outerSize, c / u.batchSize, u.sliceSize];
  if (t6.shouldExecuteOnCPU([n, s])) {
    let C = t6.tensorMap.get(d.dataId).values, w = le(d.shape, d.dtype, C), _ = t6.tensorMap.get(m.dataId).values, $ = le(m.shape, m.dtype, _), A = Q3($, w, f);
    return l.forEach((R) => t6.disposeData(R.dataId)), t6.makeTensorInfo(u.outputShape, A.dtype, A.values);
  }
  let h = new ux(m.shape, f), g = t6.runWebGPUProgram(h, [m, d], m.dtype);
  l.push(g);
  let x = de({ inputs: { x: g }, backend: t6, attrs: { shape: u.outputShape } });
  return l.forEach((b) => t6.disposeData(b.dataId)), x;
}
var TL = { kernelName: Ss, backendName: "webgpu", kernelFunc: gI };
var coe = ot({ opType: ye.GREATER, cpuKernelImpl: J3, dtype: "bool" });
var _L = { kernelName: pn, backendName: "webgpu", kernelFunc: coe };
var loe = ot({ opType: ye.GREATER_EQUAL, dtype: "bool", cpuKernelImpl: Z3 });
var EL = { kernelName: cn, backendName: "webgpu", kernelFunc: loe };
function moe(r) {
  let { inputs: e, backend: t6 } = r, { input: o } = e;
  return rx(o, true, t6);
}
var $L = { kernelName: ni, backendName: "webgpu", kernelFunc: moe };
var doe = Se({ opType: Q.IS_FINITE, dtype: "bool" });
var AL = { kernelName: fa, backendName: "webgpu", kernelFunc: doe };
var foe = Se({ opType: Q.IS_INF, dtype: "bool" });
var RL = { kernelName: ha, backendName: "webgpu", kernelFunc: foe };
var hoe = Se({ opType: Q.IS_NAN, dtype: "bool" });
var FL = { kernelName: ln, backendName: "webgpu", kernelFunc: hoe };
function goe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { alpha: s } = o, a = [{ type: "float32", data: [s] }], i = new Ro(n.shape, Q.LEAKYRELU);
  return i.uniforms = "alpha : f32,", t6.runWebGPUProgram(i, [n], "float32", a);
}
var DL = { kernelName: mn, backendName: "webgpu", kernelFunc: goe };
var xoe = ot({ opType: ye.LESS, dtype: "bool", cpuKernelImpl: tM });
var OL = { kernelName: dn, backendName: "webgpu", kernelFunc: xoe };
var yoe = ot({ opType: ye.LESS_EQUAL, dtype: "bool", cpuKernelImpl: eM });
var PL = { kernelName: fn, backendName: "webgpu", kernelFunc: yoe };
var boe = Se({ opType: Q.LOG, cpuKernelImpl: rM });
var ML = { kernelName: hn, backendName: "webgpu", kernelFunc: boe };
var Coe = Se({ opType: Q.LOG1P });
var LL = { kernelName: ga, backendName: "webgpu", kernelFunc: Coe };
var Soe = ot({ opType: ye.LOGICAL_AND, dtype: "bool" });
var BL = { kernelName: gn, backendName: "webgpu", kernelFunc: Soe };
var woe = Se({ opType: Q.LOGICAL_NOT });
var VL = { kernelName: xn, backendName: "webgpu", kernelFunc: woe };
var Ioe = ot({ opType: ye.MAX, cpuKernelImpl: nM });
var zL = { kernelName: bn, backendName: "webgpu", kernelFunc: Ioe };
function voe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { filterSize: s, strides: a, pad: i, dimRoundingMode: p } = o, u = 1, c = S.computePool2DInfo(n.shape, s, a, u, i, p);
  return Bg(n, c, "max", t6);
}
var WL = { kernelName: Cn, backendName: "webgpu", kernelFunc: voe };
function koe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o;
  return qr(n, s, a, "min", t6);
}
var UL = { kernelName: wn, backendName: "webgpu", kernelFunc: koe };
var Noe = ot({ opType: ye.MIN, cpuKernelImpl: sM });
var GL = { kernelName: In, backendName: "webgpu", kernelFunc: Noe };
var px = class {
  constructor(e, t6, o) {
    this.uniforms = "", this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t6.map((n, s) => n[0] + e[s] + n[1]), this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.xShape = e, t6.map((n, s) => {
      this.uniforms += ` pad${s} : vec2<i32>,`;
    }), this.offset = o === "reflect" ? 0 : 1, this.shaderKey = `mirrorPad_${o}`;
  }
  getUserCode() {
    let e = this.xShape.length, t6 = this.xShape.map((u, c) => `uniforms.pad${c}[0]`).join(","), o = this.xShape.map((u, c) => `uniforms.pad${c}[0] + uniforms.xShape${e > 1 ? `[${c}]` : ""}`).join(","), n = e === 1 ? "start" : "start[i]", s = e === 1 ? "end" : "end[i]", a = e === 1 ? "outC" : "outC[i]", i = Rt(e), p = e > 1 ? ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, e) : "coords";
    return `
      ${se("index")} {
        if (index < uniforms.size) {
          let start = ${i}(${t6});
          let end = ${i}(${o});
          var outC = getCoordsFromIndex(index);
          for (var i = 0; i < ${e}; i = i + 1) {
            if (${a} < ${n}) {
              ${a} = ${n} * 2 - ${a} - ${this.offset};
            } else if(${a} >= ${s}) {
              ${a} = (${s} - 1) * 2 - ${a} + ${this.offset};
            }
          }
          let coords = outC - start;
          setOutputAtIndex(index, getX(${p}));
        }
      }
    `;
  }
};
var HL = { kernelName: vn, backendName: "webgpu", kernelFunc: ({ inputs: r, attrs: e, backend: t6 }) => {
  let { x: o } = r, { paddings: n, mode: s } = e, a = t6, i = n.map((c) => ({ type: "int32", data: [c[0], c[1]] })), p = new px(o.shape, n, s);
  return a.runWebGPUProgram(p, [o], o.dtype, i);
} };
var Toe = ot({ opType: ye.MOD });
var qL = { kernelName: ya, backendName: "webgpu", kernelFunc: Toe };
function _oe(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  if (t6.shouldExecuteOnCPU([o])) {
    let s = t6.tensorMap.get(o.dataId), [a, i] = iM(s.values, o.shape, o.dtype);
    return t6.makeTensorInfo(i, o.dtype, a);
  }
  let n = new Ro(o.shape, Q.NEG);
  return t6.runWebGPUProgram(n, [o], o.dtype);
}
var KL = { kernelName: ws, backendName: "webgpu", kernelFunc: _oe };
function Eoe(r) {
  console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: e, backend: t6, attrs: o } = r, { boxes: n, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p } = o, u = t6.readSync(n.dataId), c = t6.readSync(s.dataId), { selectedIndices: l } = Lt.nonMaxSuppressionV3Impl(u, c, a, i, p);
  return t6.makeTensorInfo([l.length], "int32", new Int32Array(l));
}
var jL = { kernelName: Tn, backendName: "webgpu", kernelFunc: Eoe };
function $oe(r) {
  console.warn("tf.nonMaxSuppression() in webgpu locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");
  let { inputs: e, backend: t6, attrs: o } = r, { boxes: n, scores: s } = e, { maxOutputSize: a, iouThreshold: i, scoreThreshold: p, softNmsSigma: u } = o, c = t6.readSync(n.dataId), l = t6.readSync(s.dataId), m = a, d = i, f = p, h = u, { selectedIndices: g, selectedScores: x } = Lt.nonMaxSuppressionV5Impl(c, l, m, d, f, h);
  return [t6.makeTensorInfo([g.length], "int32", new Int32Array(g)), t6.makeTensorInfo([x.length], "float32", new Float32Array(x))];
}
var XL = { kernelName: _n, backendName: "webgpu", kernelFunc: $oe };
var cx = class {
  constructor(e, t6) {
    this.variableNames = ["x"], this.uniforms = "onValue : f32, offValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [e, t6], this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "onehot";
  }
  getUserCode() {
    return `
      ${se("index")} {
        if(index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          setOutputAtIndex(index, mix(uniforms.offValue, uniforms.onValue,
                                      f32(i32(round(getX(coords.x))) == coords.y)));
        }
      }
    `;
  }
};
function Aoe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { indices: n } = e, { dtype: s, depth: a, onValue: i, offValue: p } = o, u = y.sizeFromShape(n.shape), c = new cx(u, a), l = de({ inputs: { x: n }, backend: t6, attrs: { shape: [u] } }), m = [{ type: "float32", data: [i] }, { type: "float32", data: [p] }], d = t6.runWebGPUProgram(c, [l], s, m);
  t6.disposeData(l.dataId);
  let f = [...n.shape, a], h = de({ inputs: { x: d }, backend: t6, attrs: { shape: f } });
  return t6.disposeData(d.dataId), h;
}
var YL = { kernelName: En, backendName: "webgpu", kernelFunc: Aoe };
function Kl(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  if (o.dtype === "complex64") {
    let n = qa({ inputs: { input: o }, backend: t6 }), s = Kl({ inputs: { x: n }, backend: t6 }), a = qu({ inputs: { input: o }, backend: t6 }), i = Kl({ inputs: { x: a }, backend: t6 }), p = po({ inputs: { real: s, imag: i }, backend: t6 });
    return t6.disposeData(n.dataId), t6.disposeData(s.dataId), t6.disposeData(a.dataId), t6.disposeData(i.dataId), p;
  } else
    return dr({ attrs: { shape: o.shape, dtype: o.dtype, value: o.dtype === "string" ? "" : 0 }, backend: t6 });
}
var QL = { kernelName: Fs, backendName: "webgpu", kernelFunc: Kl };
function ZL(r) {
  let { inputs: e, backend: t6 } = r, { x: o } = e;
  if (o.dtype === "string")
    throw new Error("onesLike is not supported under string dtype");
  if (o.dtype === "complex64") {
    let n = qa({ inputs: { input: o }, backend: t6 }), s = ZL({ inputs: { x: n }, backend: t6 }), a = qu({ inputs: { input: o }, backend: t6 }), i = Kl({ inputs: { x: a }, backend: t6 }), p = po({ inputs: { real: s, imag: i }, backend: t6 });
    return t6.disposeData(n.dataId), t6.disposeData(s.dataId), t6.disposeData(a.dataId), t6.disposeData(i.dataId), p;
  } else
    return dr({ attrs: { shape: o.shape, dtype: o.dtype, value: 1 }, backend: t6 });
}
var JL = { kernelName: Is, backendName: "webgpu", kernelFunc: ZL };
function Roe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { axis: n } = o;
  if (e.length === 1)
    return tx({ inputs: { input: e[0] }, backend: t6, attrs: { dim: n } });
  let s = e[0].shape, a = e[0].dtype;
  e.forEach((c) => {
    y.assertShapesMatch(s, c.shape, "All tensors passed to stack must have matching shapes"), y.assert(a === c.dtype, () => "All tensors passed to stack must have matching dtypes");
  });
  let i = [], p = e.map((c) => {
    let l = tx({ inputs: { input: c }, backend: t6, attrs: { dim: n } });
    return i.push(l), l;
  }), u = mI({ inputs: p, backend: t6, attrs: { axis: n } });
  return i.forEach((c) => t6.disposeData(c.dataId)), u;
}
var eB = { kernelName: vs, backendName: "webgpu", kernelFunc: Roe };
var lx = class {
  constructor(e, t6) {
    this.variableNames = ["x"], this.uniforms = "constantValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t6.map((o, n) => o[0] + e[n] + o[1]), this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), t6.map((o, n) => {
      this.uniforms += ` pad${n} : vec2<i32>,`;
    }), this.xShape = e, this.shaderKey = "pad";
  }
  getUserCode() {
    let e = this.xShape.length, t6 = Rt(e), o = this.xShape.map((l, m) => `uniforms.pad${m}[0]`).join(","), n = this.xShape.map((l, m) => `uniforms.pad${m}[0] + uniforms.xShape${e > 1 ? `[${m}]` : ""}`).join(","), s = e > 1 ? `${t6}(${o})` : `${o}`, a = e > 1 ? `${t6}(${n})` : `${n}`, i = e > 1 ? "any(outC < start)" : "outC < start", p = e > 1 ? "any(outC >= end)" : "outC >= end", u = e > 1 ? ["coords[0]", "coords[1]", "coords[2]", "coords[3]"].slice(0, e) : "coords";
    return `
      ${se("index")} {
        if (index < uniforms.size) {
          let start = ${s};
          let end = ${a};
          let outC = getCoordsFromIndex(index);

          if (${i} || ${p}) {
            setOutputAtIndex(index, uniforms.constantValue);
          } else {
            let coords = outC - start;
            setOutputAtIndex(index, getX(${u}));
          }
        }
      }
    `;
  }
};
var xI = (r) => {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { paddings: s, constantValue: a } = o;
  if (s.every((u) => y.arraysEqual(u, [0, 0])))
    return Ft({ inputs: { x: n }, backend: t6 });
  if (y.sizeFromShape(n.shape) === 0) {
    let u = s.map((c, l) => c[0] + n.shape[l] + c[1]);
    return dr({ backend: t6, attrs: { shape: u, value: a, dtype: n.dtype } });
  }
  let i = [{ type: "float32", data: [a] }];
  s.map((u) => i.push({ type: "int32", data: [u[0], u[1]] }));
  let p = new lx(n.shape, s);
  return t6.runWebGPUProgram(p, [n], n.dtype, i);
};
var tB = { kernelName: $n, backendName: "webgpu", kernelFunc: xI };
var Foe = ot({ opType: ye.POW });
var rB = { kernelName: An, backendName: "webgpu", kernelFunc: Foe };
function Doe(r) {
  let { inputs: e, backend: t6 } = r, { x: o, alpha: n } = e, s = new Hu(ye.PRELU, o.shape, n.shape);
  return t6.runWebGPUProgram(s, [o, n], "float32");
}
var oB = { kernelName: Rn, backendName: "webgpu", kernelFunc: Doe };
function Ooe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { axis: s, keepDims: a } = o;
  return qr(n, s, a, "prod", t6);
}
var nB = { kernelName: Fn, backendName: "webgpu", kernelFunc: Ooe };
var Poe = (r) => {
  let { backend: e, attrs: t6 } = r, { start: o, stop: n, step: s, dtype: a } = t6, i = cM(o, n, s, a);
  return e.makeTensorInfo([i.length], a, i);
};
var sB = { kernelName: ks, backendName: "webgpu", kernelFunc: Poe };
var yI = ot({ opType: ye.DIV });
var aB = { kernelName: Jo, backendName: "webgpu", kernelFunc: yI };
var Moe = Se({ opType: Q.RECIPROCAL });
var iB = { kernelName: Dn, backendName: "webgpu", kernelFunc: Moe };
var Loe = Se({ opType: Q.RELU });
var uB = { kernelName: On, backendName: "webgpu", kernelFunc: Loe };
var Boe = Se({ opType: Q.RELU6 });
var pB = { kernelName: Ln, backendName: "webgpu", kernelFunc: Boe };
var mx = class {
  constructor(e, t6, o) {
    this.variableNames = ["x"], this.uniforms = "adjustHeightWidth : vec2<f32>, halfPixelCenters : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [e[0], t6, o, e[3]], this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "resizeBilinear";
  }
  getUserCode() {
    return `
      ${se("index")} {
        if (index < uniforms.size) {
        let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC =
            (vec2<f32>(rc) + vec2<f32>(uniforms.halfPixelCenters)) *
            effectiveInputOverOutputRatioRC - vec2<f32>(uniforms.halfPixelCenters);

          // Compute the four integer indices.
          let sourceFloorRC = vec2<i32>(sourceFracIndexRC);
          let sourceCeilRC = vec2<i32>(
            min(vec2<f32>(uniforms.xShape.yz) - vec2<f32>(1.0), ceil(sourceFracIndexRC)));

          let topLeft = getX(b, sourceFloorRC.x, sourceFloorRC.y, d);
          let bottomLeft = getX(b, sourceCeilRC.x, sourceFloorRC.y, d);
          let topRight = getX(b, sourceFloorRC.x, sourceCeilRC.y, d);
          let bottomRight = getX(b, sourceCeilRC.x, sourceCeilRC.y, d);

          let fracRC = sourceFracIndexRC - vec2<f32>(sourceFloorRC);

          let top = topLeft + (topRight - topLeft) * fracRC.y;
          let bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;
          let newValue = top + (bottom - top) * fracRC.x;

          setOutputAtIndex(index, newValue);
        }
      }
    `;
  }
};
function Voe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { images: n } = e, { alignCorners: s, size: a, halfPixelCenters: i } = o, [p, u] = a, c = s && p > 1 ? 1 : 0, l = s && u > 1 ? 1 : 0, d = [{ type: "float32", data: [c, l] }, { type: "float32", data: [i ? 0.5 : 0] }], f = new mx(n.shape, p, u);
  return t6.runWebGPUProgram(f, [n], "float32", d);
}
var cB = { kernelName: Mn, backendName: "webgpu", kernelFunc: Voe };
var dx = class {
  constructor(e, t6, o, n) {
    this.variableNames = ["x"], this.uniforms = "adjustHeightWidth : vec2<f32>, roundBase : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = [e[0], t6, o, e[3]], this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.halfPixelCenters = n, this.shaderKey = `resizeNearest_${n}`;
  }
  getUserCode() {
    let e;
    return this.halfPixelCenters ? e = "max((vec2<f32>(rc) + vec2<f32>(0.5)) * effectiveInputOverOutputRatioRC, vec2<f32>(0.0))" : e = "vec2<f32>(rc) * effectiveInputOverOutputRatioRC", `
      ${se("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let b = coords[0];
          let d = coords[3];
          let rc = coords.yz;

          let effectiveInSize = vec2<f32>(
            f32(uniforms.xShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.xShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveOutSize = vec2<f32>(
            f32(uniforms.outShape.y) - uniforms.adjustHeightWidth[0],
            f32(uniforms.outShape.z) - uniforms.adjustHeightWidth[1]);

          let effectiveInputOverOutputRatioRC =
              effectiveInSize / effectiveOutSize;

          // Fractional source index
          let sourceFracIndexRC = ${e};

          // Compute the coordinators of nearest neighbor point.
          let inputShapeRC = vec2<f32>(f32(uniforms.xShape.y), f32(uniforms.xShape.z));
          let sourceNearestRC = vec2<i32>(
            min(inputShapeRC - 1.0, floor(sourceFracIndexRC + uniforms.roundBase)));
          let newValue = getX(b, sourceNearestRC.x, sourceNearestRC.y, d);

          setOutputAtIndex(index, newValue);
        }
      }
    `;
  }
};
function zoe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { images: n } = e, { alignCorners: s, halfPixelCenters: a, size: i } = o, [p, u] = i, c = s && p > 1 ? 1 : 0, l = s && u > 1 ? 1 : 0, d = [{ type: "float32", data: [c, l] }, { type: "float32", data: [s ? 0.5 : 0] }], f = new dx(n.shape, p, u, a);
  return t6.runWebGPUProgram(f, [n], n.dtype, d);
}
var lB = { kernelName: Pn, backendName: "webgpu", kernelFunc: zoe };
var fx = class {
  constructor(e) {
    this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = " axis : vec4<i32>,", this.shaderKey = "reverse";
  }
  getUserCode() {
    return `
      
      // Using uniform variables as judging conditions, so the function has
      // coherent execution within all threads.
      fn getReverseCoords(coords : vec4<i32>) -> vec4<i32> {
        var reverseCoords = coords;
        if (uniforms.axis[0] == 1) {
          reverseCoords[0] = uniforms.xShape[0] - coords[0] - 1;
        }
        if (uniforms.axis[1] == 1) {
          reverseCoords[1] = uniforms.xShape[1] - coords[1] - 1;
        }
        if (uniforms.axis[2] == 1) {
          reverseCoords[2] = uniforms.xShape[2] - coords[2] - 1;
        }
        if (uniforms.axis[3] == 1) {
          reverseCoords[3] = uniforms.xShape[3] - coords[3] - 1;
        }

        return reverseCoords;
      }
    
      ${se("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let reverseCoords = getReverseCoords(coords);
          setOutputAtIndex(index, getX(reverseCoords[0],
              reverseCoords[1], reverseCoords[2], reverseCoords[3]));
        }
      }
    `;
  }
};
function Woe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { dims: s } = o, a = n.shape.length;
  if (a === 0)
    return Ft({ inputs: { x: n }, backend: t6 });
  let i = n.shape, p = [1, 1, 1, 1];
  i.forEach((g, x) => {
    let b = x + 4 - a;
    p[b] = g;
  });
  let u = y.parseAxisParam(s, n.shape), c = [0, 0, 0, 0];
  u.forEach((g) => {
    let x = g + 4 - a;
    c[x] = 1;
  });
  let l = [{ type: "int32", data: c }], m = de({ inputs: { x: n }, backend: t6, attrs: { shape: p } }), d = new fx(p), f = t6.runWebGPUProgram(d, [m], m.dtype, l);
  t6.disposeData(m.dataId);
  let h = de({ inputs: { x: f }, backend: t6, attrs: { shape: i } });
  return t6.disposeData(f.dataId), h;
}
var mB = { kernelName: Bn, backendName: "webgpu", kernelFunc: Woe };
var hx = class {
  constructor(e, t6) {
    this.outputShape = [], this.variableNames = ["x"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = `centerX : f32, centerY : f32, sinRadians : f32,
          cosRadians : f32,`, this.shaderKey = "rotate", this.outputShape = e, typeof t6 == "number" ? (this.uniforms += " fillValue : f32,", this.fillSnippet = "var outputValue = uniforms.fillValue;", this.shaderKey += "_float") : (this.uniforms += " fillValue : vec3<f32>,", this.fillSnippet = "var outputValue = uniforms.fillValue[coords[3]];", this.shaderKey += "_vec3");
  }
  getUserCode() {
    return `
        ${se("index")} {
          if (index < uniforms.size) {
            let coords = getCoordsFromIndex(index);
            let coordXFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.cosRadians - (f32(coords[1]) - uniforms.centerY) *
                uniforms.sinRadians;
            let coordYFloat = (f32(coords[2]) - uniforms.centerX) *
                uniforms.sinRadians + (f32(coords[1]) - uniforms.centerY) *
                uniforms.cosRadians;
            let coordX = i32(round(coordXFloat + uniforms.centerX));
            let coordY = i32(round(coordYFloat + uniforms.centerY));
            ${this.fillSnippet}
            if(coordX >= 0 && coordX < uniforms.xShape[2] && coordY >= 0 &&
                coordY < uniforms.xShape[1]) {
              outputValue = getX(coords[0], coordY, coordX, coords[3]);
            }
            setOutputAtIndex(index, outputValue);
          }
        }
      `;
  }
};
var dB = { kernelName: es, backendName: "webgpu", kernelFunc: ({ inputs: r, attrs: e, backend: t6 }) => {
  let { image: o } = r, { radians: n, fillValue: s, center: a } = e, i = t6, p = new hx(o.shape, s), [u, c] = S.getImageCenter(a, o.shape[1], o.shape[2]), l = [{ type: "float32", data: [u] }, { type: "float32", data: [c] }, { type: "float32", data: [Math.sin(n)] }, { type: "float32", data: [Math.cos(n)] }];
  return typeof s == "number" ? l.push({ type: "float32", data: [Number.parseFloat(s.toFixed(2))] }) : l.push({ type: "float32", data: s }), i.runWebGPUProgram(p, [o], o.dtype, l);
} };
var Uoe = Se({ opType: Q.RSQRT, cpuKernelImpl: lM });
var fB = { kernelName: Vn, backendName: "webgpu", kernelFunc: Uoe };
var Gi = class {
  constructor(e, t6, o, n, s, a, i, p = true) {
    this.variableNames = ["updates", "indices"], this.workgroupSize = [64, 1, 1], this.atomic = true, this.outputShape = a, this.type = i, this.sumDupeIndices = p, this.dispatchLayout = ue(e), this.dispatch = re(this.dispatchLayout, e, this.workgroupSize), this.sliceDimGreaterThanOne = t6 > 1, this.shaderKey = `scatter_${o}_${n}_${this.sliceDimGreaterThanOne}_${i}_${p}`;
    let u = Rt(s.length);
    this.uniforms = `sliceDim : i32, strides: ${u}, updatesSize: i32,`, this.updatesRank = n, this.indicesRank = o;
  }
  getUserCode() {
    let e = "";
    this.indicesRank === 1 ? e = "coords[0]" : this.indicesRank === 2 && (e = "coords[0], j");
    let t6 = `getIndices(${e})`, o = this.sliceDimGreaterThanOne ? "uniforms.strides[j]" : "uniforms.strides", n = "", s = "";
    this.dispatchLayout.x.length === 1 ? (n = "flattenedIndex", s = `
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> i32 {
        return index;
      }
      `) : this.dispatchLayout.x.length === 2 && (n = "vec2<i32>(flattenedIndex, coords[1])", s = `
      fn getUpdatesCoordsFromFlatIndex(index : i32) -> vec2<i32> {
        // N.B. |updates| could be a scalar tensor, conceptually representing a
        // 2D tensor with all values equal to that. By design, its size must be
        // the same as |outShape[1]| in one dimension, and |indicesShape[0]|
        // gives the other.
        let sliceSize = uniforms.outShape[1];
        let d0 = index / sliceSize;
        let d1 = index - d0 * sliceSize;
        return vec2<i32>(d0, d1);
      }
      `);
    let i = `getUpdates(${Array.from({ length: this.updatesRank }, (c, l) => `coords[${l}]`).join(", ")})`, p = (c, l) => {
      let m = `atomicAdd(${c}, bitcast<i32>(${l}))`;
      this.type === "float32" && (m = `
          {
            var oldBits = 0;
            var newBits = bitcast<i32>(${l});
            loop {
              let info = atomicCompareExchangeWeak(${c}, oldBits, newBits);
              if (info.exchanged) {
                break;
              }
              oldBits = info.old_value;
              let oldValue = bitcast<f32>(oldBits);
              let newValue = oldValue + (${l});
              newBits = bitcast<i32>(newValue);
            }
          }
        `);
      let d = `atomicStore(${c}, bitcast<i32>(${l}));`;
      return this.sumDupeIndices ? m : d;
    };
    return `
    ${s}

      ${se("index")} {
        if (index < uniforms.updatesSize) {
          let coords = getUpdatesCoordsFromFlatIndex(index);
          var flattenedIndex = 0;
          for (var j = 0; j < uniforms.sliceDim; j = j + 1) {
            let indexInside = i32(round(${t6}));
            flattenedIndex = flattenedIndex + indexInside * ${o};
          }
          let updateValue =
              ${wc(this.type, false)}(${i});
          let flatIndex = getOutputIndexFromCoords(${n});

          ${p("&result[flatIndex]", "updateValue")};
        }
      }`;
  }
};
function Goe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { indices: n, updates: s } = e, { shape: a } = o, { sliceRank: i, numUpdates: p, sliceSize: u, strides: c, outputSize: l } = S.calculateShapes(s, n, a), m = [l / u, u];
  if (l === 0)
    return t6.makeTensorInfo(a, n.dtype);
  let d = de({ inputs: { x: n }, backend: t6, attrs: { shape: [p, i] } }), f = de({ inputs: { x: s }, backend: t6, attrs: { shape: [p, u] } }), h = f.dtype, g = dr({ backend: t6, attrs: { shape: m, value: 0, dtype: h } }), x = y.sizeFromShape(f.shape), b = [{ type: "int32", data: [i] }, { type: "int32", data: c }, { type: "int32", data: [x] }], C = new Gi(f.shape, i, d.shape.length, f.shape.length, c, m, h), w = t6.runWebGPUProgram(C, [f, d], h, b, g), k = de({ inputs: { x: w }, backend: t6, attrs: { shape: a } });
  return t6.disposeData(d.dataId), t6.disposeData(f.dataId), t6.disposeData(w.dataId), k;
}
var hB = { kernelName: zn, backendName: "webgpu", kernelFunc: Goe };
var gx = class {
  constructor(e, t6) {
    this.outputShape = [], this.variableNames = ["sortedSequence", "values"], this.uniforms = "numInputs : i32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.side = t6, this.shaderKey = `search_sorted_${t6}`;
  }
  getUserCode() {
    return `
      fn findBound(batch: i32, value: f32) -> i32 {
        var left = i32(0);
        var right = uniforms.numInputs;
        while (left < right) {
          var mid = (left + right) / 2;
          if (getSortedSequence(batch, mid) ${this.side === "left" ? "<" : "<="} value) {
            left = mid + 1;
          } else {
            right = mid;
          }
        }
        return right;
      }

      ${se("index")} {
        if (index < uniforms.size) {
          let coords = getCoordsFromIndex(index);
          let value = getValuesByOutputIndex(index);
          setOutputAtIndexI32(index, findBound(coords[0], value));
        }
      }
    `;
  }
};
function Hoe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { sortedSequence: n, values: s } = e, { side: a } = o, i = new gx([s.shape[0], s.shape[1]], a), p = [{ type: "int32", data: [n.shape[1]] }];
  return t6.runWebGPUProgram(i, [n, s], "int32", p);
}
var gB = { kernelName: ii, backendName: "webgpu", kernelFunc: Hoe };
var xx = class {
  constructor(e, t6, o) {
    this.variableNames = ["c", "a", "b"], this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = t6, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.cRank = e, this.rank = o, this.shaderKey = "select";
  }
  getUserCode() {
    let e, t6;
    if (this.rank > 4)
      throw Error(`Where for rank ${this.rank} is not yet supported`);
    if (this.rank === 1)
      t6 = "resRC", e = "resRC";
    else {
      let n = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], s = [], a = [];
      for (let i = 0; i < this.outputShape.length; i++)
        a.push(`${n[i]}`), i < this.cRank && s.push(`${n[i]}`);
      e = s.join(), t6 = a.join();
    }
    return `
      ${se("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          let cVal = getC(${e});
          if (cVal >= 1.0) {
            setOutputAtIndex(index, getA(${t6}));
          } else {
            setOutputAtIndex(index, getB(${t6}));
          }
        }
      }
    `;
  }
};
function qoe(r) {
  let { inputs: e, backend: t6 } = r, { condition: o, t: n, e: s } = e, a = new xx(o.shape.length, n.shape, n.shape.length);
  return t6.runWebGPUProgram(a, [o, n, s], dt(n.dtype, s.dtype));
}
var xB = { kernelName: Ts, backendName: "webgpu", kernelFunc: qoe };
var Koe = Se({ opType: Q.SIGMOID });
var yB = { kernelName: Un, backendName: "webgpu", kernelFunc: Koe };
var joe = Se({ opType: Q.SIN });
var bB = { kernelName: Wn, backendName: "webgpu", kernelFunc: joe };
var Xoe = Se({ opType: Q.SINH });
var CB = { kernelName: Sa, backendName: "webgpu", kernelFunc: Xoe };
var bI = ot({ opType: ye.SUB, cpuKernelImpl: xM, supportsComplex: true });
var SB = { kernelName: Xn, backendName: "webgpu", kernelFunc: bI };
function Yoe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { logits: n } = e, { dim: s } = o, a = y.parseAxisParam([s], n.shape), i = Ul({ inputs: { x: n }, backend: t6, attrs: { reductionIndices: a, keepDims: false } }), p = S.expandShapeToKeepDim(i.shape, a), u = de({ inputs: { x: i }, backend: t6, attrs: { shape: p } }), c = bI({ inputs: { a: n, b: u }, backend: t6 }), l = fI({ inputs: { x: c }, backend: t6 }), m = Hl({ inputs: { x: l }, backend: t6, attrs: { axis: a, keepDims: false } }), d = de({ inputs: { x: m }, backend: t6, attrs: { shape: p } }), f = yI({ inputs: { a: l, b: d }, backend: t6 });
  return t6.disposeData(i.dataId), t6.disposeData(u.dataId), t6.disposeData(c.dataId), t6.disposeData(l.dataId), t6.disposeData(m.dataId), t6.disposeData(d.dataId), f;
}
var wB = { kernelName: qn, backendName: "webgpu", kernelFunc: Yoe };
var Qoe = (r) => {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { blockShape: s, paddings: a } = o;
  y.assert(n.shape.length <= 4, () => "spaceToBatchND for rank > 4 with a WebGPU backend not implemented yet");
  let i = s.reduce((x, b) => x * b), p = [[0, 0]];
  p.push(...a);
  for (let x = 1 + s.length; x < n.shape.length; ++x)
    p.push([0, 0]);
  let u = [], c = xI({ inputs: { x: n }, backend: t6, attrs: { paddings: p, constantValue: 0 } }), l = S.getReshaped(c.shape, s, i, false), m = S.getPermuted(l.length, s.length, false), d = S.getReshapedPermuted(c.shape, s, i, false), f = de({ inputs: { x: c }, backend: t6, attrs: { shape: l } }), h = Nr({ inputs: { x: f }, backend: t6, attrs: { perm: m } }), g = de({ inputs: { x: h }, backend: t6, attrs: { shape: d } });
  return u.push(c), u.push(f), u.push(h), u.forEach((x) => t6.disposeData(x.dataId)), g;
};
var IB = { kernelName: Es, backendName: "webgpu", kernelFunc: Qoe };
var yx = class {
  constructor(e, t6) {
    this.variableNames = ["A"], this.workgroupSize = [64, 1, 1], this.size = true;
    let o = new Array(e.length);
    for (let n = 0; n < o.length; n++)
      o[n] = e[n] * t6[n];
    this.outputShape = o, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.rank = this.outputShape.length, this.shaderKey = "tile";
  }
  getUserCode() {
    let e = Zoe(this.rank, "uniforms.");
    return `
      ${se("index")} {
        if (index < uniforms.size) {
          let resRC = getCoordsFromIndex(index);
          setOutputAtIndex(index, getA(${e}));
        }
      }
    `;
  }
};
function Zoe(r, e = "") {
  if (r >= 5)
    throw Error(`Tile for rank ${r} is not yet supported`);
  if (r === 1)
    return `(resRC % ${e}aShape)`;
  let t6 = ["resRC.x", "resRC.y", "resRC.z", "resRC.w"], o = [];
  for (let n = 0; n < r; n++)
    o.push(`(${t6[n]} % ${e}aShape[${n}])`);
  return o.join();
}
function CI(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { reps: s } = o;
  if (t6.shouldExecuteOnCPU([n]) || n.dtype === "string" || n.shape.length >= 5) {
    let p = t6.readSync(n.dataId), u = n.dtype === "string" ? p.map((m) => y.decodeString(m)) : p, c = le(n.shape, n.dtype, u), l = yM(c, s);
    return t6.makeTensorInfo(l.shape, l.dtype, l.values);
  }
  let a = new yx(n.shape, s);
  return t6.runWebGPUProgram(a, [n], n.dtype);
}
var vB = { kernelName: to, backendName: "webgpu", kernelFunc: CI };
function Joe(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { sparseIndices: n, sparseValues: s, defaultValue: a } = e, { outputShape: i } = o, { sliceRank: p, numUpdates: u, sliceSize: c, strides: l, outputSize: m } = S.calculateShapes(s, n, i), d = false;
  if (s.dtype === "string") {
    let A = t6.bufferSync(n), R = t6.bufferSync(s), D = y.decodeString(t6.readSync(a.dataId)[0]), P = mM(A, R, i, m, c, u, p, l, D, d);
    return t6.makeTensorInfo(i, P.dtype, P.values);
  }
  let f = [m / c, c], h = de({ inputs: { x: n }, backend: t6, attrs: { shape: [u, p] } }), g = s.shape.length ? de({ inputs: { x: s }, backend: t6, attrs: { shape: [u, c] } }) : Ft({ inputs: { x: s }, backend: t6 }), x = g.dtype, b = t6.makeTensorInfo([], x, y.makeZerosTypedArray(1, x)), C = de({ inputs: { x: a }, backend: t6, attrs: { shape: Array(f.length).fill(1) } }), w = CI({ inputs: { x: C }, backend: t6, attrs: { reps: f } }), k = y.sizeFromShape([u, c]), _ = [{ type: "int32", data: [p] }, { type: "int32", data: l }, { type: "int32", data: [k] }];
  switch (u) {
    case 0:
      break;
    case 1:
      {
        let A = new Gi([u, c], p, h.shape.length, g.shape.length, l, f, x, d);
        t6.runWebGPUProgram(A, [g, h], x, _, w);
      }
      break;
    default:
      {
        let A = new Gi([u, c], p, h.shape.length, b.shape.length, l, f, x, d);
        t6.runWebGPUProgram(A, [b, h], x, _, w);
      }
      {
        let A = new Gi([u, c], p, h.shape.length, g.shape.length, l, f, x);
        t6.runWebGPUProgram(A, [g, h], x, _, w);
      }
  }
  let $ = de({ inputs: { x: w }, backend: t6, attrs: { shape: i } });
  return t6.disposeData(h.dataId), t6.disposeData(g.dataId), t6.disposeData(C.dataId), t6.disposeData(b.dataId), t6.disposeData(w.dataId), $;
}
var kB = { kernelName: li, backendName: "webgpu", kernelFunc: Joe };
function ene(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { numOrSizeSplits: s, axis: a } = o, i = y.parseAxisParam(a, n.shape)[0], p = S.prepareSplitSize(n, s, i), u = n.shape.length, c = new Array(u).fill(0), l = n.shape.slice();
  return p.map((m) => {
    let d = [...l];
    d[i] = m;
    let f = ds({ inputs: { x: n }, backend: t6, attrs: { begin: c, size: d } });
    return c[i] += m, f;
  });
}
var NB = { kernelName: $s, backendName: "webgpu", kernelFunc: ene };
var tne = Se({ opType: Q.SQRT });
var TB = { kernelName: Gn, backendName: "webgpu", kernelFunc: tne };
var _B = { kernelName: mi, backendName: "webgpu", kernelFunc: ({ inputs: r, backend: e }) => {
  let { x: t6 } = r, o = e, n = new Ro(t6.shape, Q.SQUARE);
  return o.runWebGPUProgram(n, [t6], t6.dtype);
} };
var rne = ot({ opType: ye.SQUARED_DIFFERENCE });
var EB = { kernelName: Kn, backendName: "webgpu", kernelFunc: rne };
var bx = class {
  constructor(e) {
    this.variableNames = ["x"], this.workPerThread = 1, this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize, [this.workPerThread, 1, 1]);
    let t6 = Rt(this.outputShape.length);
    this.uniforms = `begin : ${t6},  strides : ${t6}, `, this.shaderKey = "stridedSlice";
  }
  getUserCode() {
    let e = this.outputShape.length, t6 = "";
    if (e === 1)
      t6 = "coords * uniforms.strides + uniforms.begin";
    else {
      let n = 0;
      t6 = this.outputShape.map((s, a) => (n++, this.outputShape.length === 1 ? `coords * uniforms.strides[${a}] + uniforms.begin[${a}]` : `coords[${n - 1}] * uniforms.strides[${a}] + uniforms.begin[${a}]`)).join(",");
    }
    return `
       ${se("index")} {
         if (index < uniforms.size) {
           let coords = getCoordsFromIndex(index);
           setOutputAtIndex(index, getX(${t6}));
         }
       }
     `;
  }
};
function one(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { begin: s, end: a, strides: i, beginMask: p, endMask: u, ellipsisMask: c, newAxisMask: l, shrinkAxisMask: m } = o, { finalShapeSparse: d, finalShape: f, isIdentity: h, sliceDim0: g, isSimpleSlice: x, begin: b, end: C, strides: w } = ut.sliceInfo(n.shape, s, a, i, p, u, c, l, m), k;
  if (h)
    k = de({ inputs: { x: n }, backend: t6, attrs: { shape: f } });
  else if (g || x) {
    y.assert(n.shape.length >= 1, () => `Input must have rank at least 1, got: ${n.shape.length}`);
    let _ = ut.computeOutShape(b, C, w), $ = ds({ inputs: { x: n }, backend: t6, attrs: { begin: b, size: _ } });
    k = de({ inputs: { x: $ }, backend: t6, attrs: { shape: f } }), t6.disposeData($.dataId);
  } else if (t6.shouldExecuteOnCPU([n])) {
    let $ = t6.readSync(n.dataId), A = le(n.shape, n.dtype, $), R = hM(d, A, w, b);
    k = t6.makeTensorInfo(f, n.dtype, R.values);
  } else {
    let $ = new bx(d), A = [{ type: "int32", data: b }, { type: "int32", data: w }], R = t6.runWebGPUProgram($, [n], n.dtype, A);
    k = de({ inputs: { x: R }, backend: t6, attrs: { shape: f } }), t6.disposeData(R.dataId);
  }
  return k;
}
var $B = { kernelName: jn, backendName: "webgpu", kernelFunc: one };
function nne(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { separator: n, nGramWidths: s, leftPad: a, rightPad: i, padWidth: p, preserveShortSequences: u } = o, { data: c, dataSplits: l } = e, m = t6.readSync(c.dataId), d = t6.readSync(l.dataId), [f, h] = gM(m, d, n, s, a, i, p, u);
  return [t6.makeTensorInfo([f.length], "string", f), t6.makeTensorInfo(l.shape, "int32", h)];
}
var AB = { kernelName: As, backendName: "webgpu", kernelFunc: nne };
var sne = Se({ opType: Q.TAN });
var RB = { kernelName: Yn, backendName: "webgpu", kernelFunc: sne };
var ane = Se({ opType: Q.TANH });
var FB = { kernelName: Qn, backendName: "webgpu", kernelFunc: ane };
var Cx = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = `inputSize : i32, firstPass : i32, negativeInf : f32,
        dir : i32, inc : i32,`, this.shaderKey = "swap";
  }
  getUserCode() {
    return `
        ${se("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // We compare elements pair-wise within a group of size 2 * inc.
            // The comparing rule for each group alternates between ascending
            // and descending. Within each group, we compare each pair at
            // positions i and i+inc. To decide whether an element at position i
            // is x0 or x1, we mod it by 2 * inc, if the result is smaller than
            // inc, it is in the first half of the group, we denote it as x0,
            // otherwise we denote it as x1.
            // For example, as shown in the Bitonic top K paper referenced
            // above, Figure5(a) shows that element[1] is in the second half of
            // the group when group size is 2, but it is in the first half of
            // the group when group size is 4.
            let isFirstInPair = elemIdx % (2 * uniforms.inc) < uniforms.inc;
            var i = 0;
            if (isFirstInPair) {
              i = elemIdx;
            } else {
              i = elemIdx - uniforms.inc;
            }

            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }

            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.inc;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.inc));
            }

            var x0 = f32(0.0);
            var x1 = f32(0.0);
            if (i0 < uniforms.inputSize) {
              x0 = getX(batch, i0);
            } else {
              x0 = uniforms.negativeInf;
            }
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = uniforms.negativeInf;
            }

            let reverse = elemIdx % (2 * uniforms.dir) >= uniforms.dir;
            let isGreater = x0 > x1 || (x0 == x1 && i1 > i0);
            if (reverse == isGreater) {
              // Elements in opposite order of direction
              let iTemp = i0;
              i0 = i1;
              i1 = iTemp;
            }
            if (isFirstInPair) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `;
  }
};
var Sx = class {
  constructor(e) {
    this.variableNames = ["x", "indices"], this.workgroupSize = [256, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.uniforms = "inputSize : i32, firstPass : i32, k : i32,", this.shaderKey = "merge";
  }
  getUserCode() {
    return `
        ${se("index")} {
          if (index < uniforms.size) {
            let outC = getCoordsFromIndex(index);
            let batch = outC[0];
            let elemIdx = outC[1];
            // The output size is half of the previous size.
            // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _
            // (k=4), we only need to output the indices at positions |, the
            // indices at positions _ can be thrown away, see Figure5(b) After
            // Phase 2 (Merge phase) in the Bitonic Top K paper referenced
            // above.
            // For example, the paper shows we only need to output the orange
            // bars. The output sequence should look like this | | | | | | | |.
            // Because the sequence is halved, to map the output index back to
            // the previous sequence to find the corresponding value, we need
            // to double the index. When we double the index, we basically
            // interpolate a position, so 2i looks like
            // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k
            // position of each 2k positions by - elemIdx % k. E.g. for output
            // at index 4,5,6,7, we want to get the corresponding element at
            // original index 8,9,10,11, for output at index 8,9,10,11,
            // we want to get the corresponding element at original index
            // 16,17,18,19, so on and so forth.

            var i = 0;
            if (elemIdx < uniforms.k) {
              i = elemIdx;
            } else {
              i = elemIdx * 2 - elemIdx % uniforms.k;
            }
            var i0 = 0;
            if (uniforms.firstPass == 1) {
              i0 = i;
            } else {
              i0 = i32(getIndices(batch, i));
            }
            var i1 = 0;
            if (uniforms.firstPass == 1) {
              i1 = i + uniforms.k;
            } else {
              i1 = i32(getIndices(batch, i + uniforms.k));
            }

            let x0 = getX(batch, i0);
            var x1 = f32(0.0);
            if (i1 < uniforms.inputSize) {
              x1 = getX(batch, i1);
            } else {
              x1 = x0;
            }

            if (x0 >= x1) {
              setOutputAtIndex(index, f32(i0));
            } else {
              setOutputAtIndex(index, f32(i1));
            }
          }
        }
      `;
  }
};
function $c(r, e) {
  e !== null && r.disposeData(e.dataId);
}
function DB(r) {
  let e = 1;
  for (; e < r; )
    e *= 2;
  return e;
}
function ine(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { x: n } = e, { k: s, sorted: a } = o, i = n.shape, p = i[i.length - 1];
  if (t6.shouldExecuteOnCPU([n])) {
    let k = t6.readSync(n.dataId), [_, $] = bM(k, i, n.dtype, s, a);
    return [t6.makeTensorInfo(_.shape, _.dtype, _.values), t6.makeTensorInfo($.shape, $.dtype, $.values)];
  }
  if (s === 0)
    return i[i.length - 1] = 0, [t6.makeTensorInfo(i, n.dtype, []), t6.makeTensorInfo(i, "int32", [])];
  if (p === 1)
    return [n, dr({ attrs: { shape: i, dtype: "int32", value: 0 }, backend: t6 })];
  let c = y.sizeFromShape(i) / p, l = de({ inputs: { x: n }, attrs: { shape: [c, p] }, backend: t6 }), m = DB(s), d = DB(p), f = null, h = () => f === null ? [l, l] : [l, f], g = (k, _, $) => {
    let A = h(), R = new Cx($), P = [{ type: "int32", data: [p] }, { type: "int32", data: [f === null ? 1 : 0] }, { type: "float32", data: [Number.NEGATIVE_INFINITY] }, { type: "int32", data: [k] }, { type: "int32", data: [_] }], M = f;
    f = t6.runWebGPUProgram(R, A, "int32", P), $c(t6, M);
  };
  for (let k = 1; k < m; k *= 2) {
    let _ = k * 2;
    for (let $ = k; $ >= 1; $ /= 2)
      g(_, $, [c, d]);
  }
  for (let k = d; k > m; k /= 2) {
    let _ = h(), $ = new Sx([c, k / 2]), R = [{ type: "int32", data: [p] }, { type: "int32", data: [f === null ? 1 : 0] }, { type: "int32", data: [m] }], D = f;
    f = t6.runWebGPUProgram($, _, "int32", R), $c(t6, D);
    let P = m / 2, M = P * 2;
    for (let L = P; L >= 1; L /= 2)
      g(M, L, f.shape);
  }
  let x = f;
  f = ds({ inputs: { x: f }, backend: t6, attrs: { begin: 0, size: [c, s] } }), $c(t6, x);
  let b = gI({ inputs: { x: l, indices: f }, backend: t6, attrs: { axis: 1, batchDims: 1 } });
  $c(t6, l);
  let C = i.slice(0, -1);
  C.push(s), x = f, f = de({ inputs: { x: f }, attrs: { shape: C }, backend: t6 }), $c(t6, x);
  let w = b;
  return b = de({ inputs: { x: b }, attrs: { shape: C }, backend: t6 }), $c(t6, w), [b, f];
}
var OB = { kernelName: Zn, backendName: "webgpu", kernelFunc: ine };
var wx = class {
  constructor(e) {
    this.variableNames = ["Image", "Transforms"], this.uniforms = "interpolationModeId : i32, fillModeId : i32, fillValue : f32,", this.workgroupSize = [64, 1, 1], this.size = true, this.outputShape = e, this.dispatchLayout = ue(this.outputShape), this.dispatch = re(this.dispatchLayout, this.outputShape, this.workgroupSize), this.shaderKey = "transform";
  }
  getUserCode() {
    return `
          fn mapCoord(outCoord : f32, len : f32) -> f32{
            var inCoord = outCoord;
            if(uniforms.fillModeId == 2) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  if (inCoord < sz2) {
                    inCoord = sz2 * f32(i32(f32(-inCoord / sz2))) +
                    inCoord;
                  }
                  if (inCoord < -len) {
                    inCoord = inCoord + sz2;
                  } else {
                    inCoord = -inCoord - 1.0;
                  }
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz2 = 2.0 * len;
                  inCoord = inCoord - sz2 * f32(i32(f32(inCoord / sz2)));
                  if (inCoord >= len) {
                    inCoord = sz2 - inCoord - 1.0;
                  }
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 3) {
              if (inCoord < 0.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord + len * (f32(i32(f32(-inCoord / sz))) + 1.0);
                }
              } else if (inCoord > len - 1.0) {
                if (len <= 1.0) {
                  inCoord = 0.0;
                } else {
                  let sz = len - 1.0;
                  inCoord = inCoord - len * f32(i32(f32(inCoord / sz)));
                }
              }
              return clamp(inCoord, 0.0, len - 1.0);
            } else if (uniforms.fillModeId == 4) {
              return clamp(outCoord, 0.0, len - 1.0);
            }
            return outCoord;
          }
          fn readWithFillValue(batch : i32, coordY : i32, coordX : i32,
            channel : i32) -> f32 {
            var outputValue : f32;
            if (0 <= coordY && coordY < uniforms.imageShape[1] && 0 <= coordX && coordX < uniforms.imageShape[2]) {
                outputValue = getImage(batch, coordY, coordX, channel);
            } else {
              outputValue = uniforms.fillValue;
            }
            return outputValue;
          }

          ${se("index")} {
            if (index < uniforms.size) {
              let coords = getCoordsFromIndex(index);
              var outputValue : f32;
              let batch = coords[0];
              let x = coords[2];
              let y = coords[1];
              let channel = coords[3];
              let xf = f32(x);
              let yf = f32(y);
              let a1 = getTransforms(batch, 0);
              let a2 = getTransforms(batch, 1);
              let a3 = getTransforms(batch, 2);
              let b1 = getTransforms(batch, 3);
              let b2 = getTransforms(batch, 4);
              let b3 = getTransforms(batch, 5);
              let c1 = getTransforms(batch, 6);
              let c2 = getTransforms(batch, 7);
              let projection = c1 * xf + c2 * yf + 1.0;
              if (projection == 0.0) {
                outputValue = uniforms.fillValue;
              } else {
                let inX = (a1 * xf + a2 * yf + a3) / projection;
                let inY = (b1 * xf + b2 * yf + b3) / projection;
                let mapX = mapCoord(inX, f32(uniforms.imageShape[2]));
                let mapY = mapCoord(inY, f32(uniforms.imageShape[1]));

                if (uniforms.interpolationModeId == 1) {
                  let coordY = i32(round(mapY));
                  let coordX = i32(round(mapX));
                  outputValue = readWithFillValue(batch, coordY, coordX,
                    channel);
                } else {
                  let yFloor = floor(mapY);
                  let xFloor = floor(mapX);
                  let yCeil = yFloor + 1.0;
                  let xCeil = xFloor + 1.0;
                  let valueYFloor = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yFloor), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yFloor), i32(xCeil), channel);
                  let valueYCeil = (xCeil - mapX) *
                  readWithFillValue(batch, i32(yCeil), i32(xFloor), channel) +
                  (mapX - xFloor) *
                  readWithFillValue(batch, i32(yCeil), i32(xCeil), channel);
                  outputValue = (yCeil - mapY) * valueYFloor +
                  (mapY - yFloor) * valueYCeil;
                }
              }
              setOutputAtIndex(index, outputValue);
            }
          }
        `;
  }
};
function une(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { image: n, transforms: s } = e, { interpolation: a, fillMode: i, fillValue: p, outputShape: u } = o, [c, l, m, d] = n.shape, [f, h] = u != null ? u : [l, m], g = [c, f, h, d], x = new wx(g), b = a === "nearest" ? 1 : 2, C;
  switch (i) {
    case "constant":
      C = 1;
      break;
    case "reflect":
      C = 2;
      break;
    case "wrap":
      C = 3;
      break;
    case "nearest":
      C = 4;
      break;
    default:
      C = 1;
      break;
  }
  let w = [{ type: "int32", data: [b] }, { type: "int32", data: [C] }, { type: "float32", data: [p] }];
  return t6.runWebGPUProgram(x, [n, s], "float32", w);
}
var PB = { kernelName: Jn, backendName: "webgpu", kernelFunc: une };
function pne(r) {
  let { inputs: e, backend: t6, attrs: o } = r, { value: n } = e, { axis: s } = o;
  s < 0 && (s += n.shape.length);
  let a = n, i = a.shape.length, p = n.shape[s], u = new Array(i - 1), c = 0;
  for (let h = 0; h < i; h++)
    h !== s && (u[c++] = a.shape[h]);
  let l = [], m = new Array(i).fill(0), d = a.shape.slice();
  d[s] = 1;
  let f = new Array(p);
  for (let h = 0; h < f.length; h++) {
    m[s] = h;
    let g = ds({ inputs: { x: a }, backend: t6, attrs: { begin: m, size: d } }), x = de({ inputs: { x: g }, backend: t6, attrs: { shape: u } });
    f[h] = x, l.push(g);
  }
  return l.forEach((h) => t6.disposeData(h.dataId)), f;
}
var MB = { kernelName: Rs, backendName: "webgpu", kernelFunc: pne };
var cne = [B3, SM, wM, IM, vM, kM, TM, _M, EM, $M, AM, RM, FM, DM, OM, LM, BM, zM, WM, qM, KM, jM, z3, YM, QM, ZM, JM, eL, tL, nL, sL, aL, iL, uL, lL, mL, dL, fL, hL, gL, xL, yL, M3, bL, wL, CL, SL, IL, vL, kL, NL, TL, _L, EL, V3, $L, XM, AL, RL, FL, DL, OL, PL, LL, ML, BL, VL, PM, zL, WL, MM, UL, GL, HL, qL, pL, KL, jL, XL, UM, YL, JL, eB, tB, rB, oB, nB, sB, GM, aB, iB, uB, pB, L3, cB, lB, mB, dB, fB, hB, gB, xB, yB, bB, CB, VM, $B, AB, wB, IB, kB, NB, TB, _B, EB, SB, cL, RB, FB, vB, OB, PB, NM, MB, QL];
for (let r of cne)
  Ia(r);
var LB = "4.1.0";
var lne = "4.1.0";
var mne = "4.1.0";
var dne = "4.1.0";
var fne = "4.1.0";
var hne = "0.0.1-alpha.16";
var gne = { tfjs: LB, "tfjs-core": LB, "tfjs-converter": lne, "tfjs-backend-cpu": mne, "tfjs-backend-webgl": dne, "tfjs-backend-wasm": fne, "tfjs-backend-webgpu": hne };
function log(...msg) {
  const dt2 = new Date();
  const ts = `${dt2.getHours().toString().padStart(2, "0")}:${dt2.getMinutes().toString().padStart(2, "0")}:${dt2.getSeconds().toString().padStart(2, "0")}.${dt2.getMilliseconds().toString().padStart(3, "0")}`;
  if (msg)
    console.log(ts, "Human:", ...msg);
}
function join(folder, file) {
  const separator = folder.endsWith("/") ? "" : "/";
  const skipJoin = file.startsWith(".") || file.startsWith("/") || file.startsWith("http:") || file.startsWith("https:") || file.startsWith("file:");
  const path = skipJoin ? `${file}` : `${folder}${separator}${file}`;
  if (!path.toLocaleLowerCase().includes(".json"))
    throw new Error(`modelpath error: expecting json file: ${path}`);
  return path;
}
var now = () => {
  if (typeof performance !== "undefined")
    return performance.now();
  return parseInt((Number(process.hrtime.bigint()) / 1e3 / 1e3).toString());
};
function validate(defaults, config3, parent = "config", msgs = []) {
  for (const key of Object.keys(config3)) {
    if (typeof config3[key] === "object") {
      validate(defaults[key], config3[key], key, msgs);
    } else {
      const defined = defaults && typeof defaults[key] !== "undefined";
      if (!defined)
        msgs.push({ reason: "unknown property", where: `${parent}.${key} = ${config3[key]}` });
      const same = defaults && typeof defaults[key] === typeof config3[key];
      if (defined && !same)
        msgs.push({ reason: "property type mismatch", where: `${parent}.${key} = ${config3[key]}`, expected: typeof defaults[key] });
    }
  }
  if (config3.debug && parent === "config" && msgs.length > 0)
    log("invalid configuration", msgs);
  return msgs;
}
function mergeDeep(...objects) {
  const isObject = (obj) => obj && typeof obj === "object";
  return objects.reduce((prev, obj) => {
    Object.keys(obj || {}).forEach((key) => {
      const pVal = prev[key];
      const oVal = obj[key];
      if (Array.isArray(pVal) && Array.isArray(oVal))
        prev[key] = pVal.concat(...oVal);
      else if (isObject(pVal) && isObject(oVal))
        prev[key] = mergeDeep(pVal, oVal);
      else
        prev[key] = oVal;
    });
    return prev;
  }, {});
}
var config = {
  backend: "",
  modelBasePath: "",
  cacheModels: true,
  validateModels: true,
  wasmPath: "",
  wasmPlatformFetch: false,
  debug: false,
  async: true,
  warmup: "full",
  cacheSensitivity: 0.7,
  skipAllowed: false,
  deallocate: false,
  flags: {},
  softwareKernels: false,
  filter: {
    enabled: true,
    equalization: false,
    width: 0,
    height: 0,
    flip: false,
    return: true,
    autoBrightness: true,
    brightness: 0,
    contrast: 0,
    sharpness: 0,
    blur: 0,
    saturation: 0,
    hue: 0,
    negative: false,
    sepia: false,
    vintage: false,
    kodachrome: false,
    technicolor: false,
    polaroid: false,
    pixelate: 0
  },
  gesture: {
    enabled: true
  },
  face: {
    enabled: true,
    detector: {
      modelPath: "blazeface.json",
      rotation: true,
      maxDetected: 1,
      skipFrames: 99,
      skipTime: 2500,
      minConfidence: 0.2,
      iouThreshold: 0.1,
      mask: false,
      return: false
    },
    mesh: {
      enabled: true,
      modelPath: "facemesh.json",
      keepInvalid: false
    },
    attention: {
      enabled: false,
      modelPath: "facemesh-attention.json"
    },
    iris: {
      enabled: true,
      modelPath: "iris.json"
    },
    emotion: {
      enabled: true,
      minConfidence: 0.1,
      skipFrames: 99,
      skipTime: 1500,
      modelPath: "emotion.json"
    },
    description: {
      enabled: true,
      modelPath: "faceres.json",
      skipFrames: 99,
      skipTime: 3e3,
      minConfidence: 0.1
    },
    antispoof: {
      enabled: false,
      skipFrames: 99,
      skipTime: 4e3,
      modelPath: "antispoof.json"
    },
    liveness: {
      enabled: false,
      skipFrames: 99,
      skipTime: 4e3,
      modelPath: "liveness.json"
    }
  },
  body: {
    enabled: true,
    modelPath: "movenet-lightning.json",
    maxDetected: -1,
    minConfidence: 0.3,
    skipFrames: 1,
    skipTime: 200
  },
  hand: {
    enabled: true,
    rotation: true,
    skipFrames: 99,
    skipTime: 1e3,
    minConfidence: 0.5,
    iouThreshold: 0.2,
    maxDetected: -1,
    landmarks: true,
    detector: {
      modelPath: "handtrack.json"
    },
    skeleton: {
      modelPath: "handlandmark-lite.json"
    }
  },
  object: {
    enabled: false,
    modelPath: "centernet.json",
    minConfidence: 0.2,
    iouThreshold: 0.4,
    maxDetected: 10,
    skipFrames: 99,
    skipTime: 2e3
  },
  segmentation: {
    enabled: false,
    modelPath: "rvm.json",
    ratio: 0.5,
    mode: "default"
  }
};
var vertexIdentity = `
  precision highp float;
  attribute vec2 pos;
  attribute vec2 uv;
  varying vec2 vUv;
  uniform float flipY;
  void main(void) {
    vUv = uv;
    gl_Position = vec4(pos.x, pos.y*flipY, 0.0, 1.);
  }
`;
var colorMatrixWithAlpha = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform float m[20];
  void main(void) {
    vec4 c = texture2D(texture, vUv);
    gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[3] * c.a + m[4];
    gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[8] * c.a + m[9];
    gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[13] * c.a + m[14];
    gl_FragColor.a = m[15] * c.r + m[16] * c.g + m[17] * c.b + m[18] * c.a + m[19];
  }
`;
var colorMatrixWithoutAlpha = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform float m[20];
  void main(void) {
    vec4 c = texture2D(texture, vUv);
    gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[4];
    gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[9];
    gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[14];
    gl_FragColor.a = c.a;
  }
`;
var pixelate = `
  precision highp float;
  varying vec2 vUv;
  uniform vec2 size;
  uniform sampler2D texture;
  vec2 pixelate(vec2 coord, vec2 size) {
    return floor( coord / size ) * size;
  }
  void main(void) {
    gl_FragColor = vec4(0.0);
    vec2 coord = pixelate(vUv, size);
    gl_FragColor += texture2D(texture, coord);
  }
`;
var blur = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform vec2 px;
  void main(void) {
    gl_FragColor = vec4(0.0);
    gl_FragColor += texture2D(texture, vUv + vec2(-7.0*px.x, -7.0*px.y))*0.0044299121055113265;
    gl_FragColor += texture2D(texture, vUv + vec2(-6.0*px.x, -6.0*px.y))*0.00895781211794;
    gl_FragColor += texture2D(texture, vUv + vec2(-5.0*px.x, -5.0*px.y))*0.0215963866053;
    gl_FragColor += texture2D(texture, vUv + vec2(-4.0*px.x, -4.0*px.y))*0.0443683338718;
    gl_FragColor += texture2D(texture, vUv + vec2(-3.0*px.x, -3.0*px.y))*0.0776744219933;
    gl_FragColor += texture2D(texture, vUv + vec2(-2.0*px.x, -2.0*px.y))*0.115876621105;
    gl_FragColor += texture2D(texture, vUv + vec2(-1.0*px.x, -1.0*px.y))*0.147308056121;
    gl_FragColor += texture2D(texture, vUv                             )*0.159576912161;
    gl_FragColor += texture2D(texture, vUv + vec2( 1.0*px.x,  1.0*px.y))*0.147308056121;
    gl_FragColor += texture2D(texture, vUv + vec2( 2.0*px.x,  2.0*px.y))*0.115876621105;
    gl_FragColor += texture2D(texture, vUv + vec2( 3.0*px.x,  3.0*px.y))*0.0776744219933;
    gl_FragColor += texture2D(texture, vUv + vec2( 4.0*px.x,  4.0*px.y))*0.0443683338718;
    gl_FragColor += texture2D(texture, vUv + vec2( 5.0*px.x,  5.0*px.y))*0.0215963866053;
    gl_FragColor += texture2D(texture, vUv + vec2( 6.0*px.x,  6.0*px.y))*0.00895781211794;
    gl_FragColor += texture2D(texture, vUv + vec2( 7.0*px.x,  7.0*px.y))*0.0044299121055113265;
  }
`;
var convolution = `
  precision highp float;
  varying vec2 vUv;
  uniform sampler2D texture;
  uniform vec2 px;
  uniform float m[9];
  void main(void) {
    vec4 c11 = texture2D(texture, vUv - px); // top left
    vec4 c12 = texture2D(texture, vec2(vUv.x, vUv.y - px.y)); // top center
    vec4 c13 = texture2D(texture, vec2(vUv.x + px.x, vUv.y - px.y)); // top right
    vec4 c21 = texture2D(texture, vec2(vUv.x - px.x, vUv.y) ); // mid left
    vec4 c22 = texture2D(texture, vUv); // mid center
    vec4 c23 = texture2D(texture, vec2(vUv.x + px.x, vUv.y) ); // mid right
    vec4 c31 = texture2D(texture, vec2(vUv.x - px.x, vUv.y + px.y) ); // bottom left
    vec4 c32 = texture2D(texture, vec2(vUv.x, vUv.y + px.y) ); // bottom center
    vec4 c33 = texture2D(texture, vUv + px ); // bottom right
    gl_FragColor = 
    c11 * m[0] + c12 * m[1] + c22 * m[2] +
    c21 * m[3] + c22 * m[4] + c23 * m[5] +
    c31 * m[6] + c32 * m[7] + c33 * m[8];
    gl_FragColor.a = c22.a;
  }
`;
var collect = (source, prefix, collection) => {
  const r = new RegExp("\\b" + prefix + " \\w+ (\\w+)", "ig");
  source.replace(r, (match2, name) => {
    collection[name] = 0;
    return match2;
  });
};
var GLProgram = class {
  constructor(gl2, vertexSource, fragmentSource) {
    __publicField(this, "uniform", {});
    __publicField(this, "attribute", {});
    __publicField(this, "gl");
    __publicField(this, "id");
    __publicField(this, "compile", (source, type) => {
      const shader = this.gl.createShader(type);
      if (!shader) {
        log("filter: could not create shader");
        return null;
      }
      this.gl.shaderSource(shader, source);
      this.gl.compileShader(shader);
      if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
        log(`filter: gl compile failed: ${this.gl.getShaderInfoLog(shader) || "unknown"}`);
        return null;
      }
      return shader;
    });
    this.gl = gl2;
    const vertexShader = this.compile(vertexSource, this.gl.VERTEX_SHADER);
    const fragmentShader = this.compile(fragmentSource, this.gl.FRAGMENT_SHADER);
    this.id = this.gl.createProgram();
    if (!vertexShader || !fragmentShader)
      return;
    if (!this.id) {
      log("filter: could not create webgl program");
      return;
    }
    this.gl.attachShader(this.id, vertexShader);
    this.gl.attachShader(this.id, fragmentShader);
    this.gl.linkProgram(this.id);
    if (!this.gl.getProgramParameter(this.id, this.gl.LINK_STATUS)) {
      log(`filter: gl link failed: ${this.gl.getProgramInfoLog(this.id) || "unknown"}`);
      return;
    }
    this.gl.useProgram(this.id);
    collect(vertexSource, "attribute", this.attribute);
    for (const a in this.attribute)
      this.attribute[a] = this.gl.getAttribLocation(this.id, a);
    collect(vertexSource, "uniform", this.uniform);
    collect(fragmentSource, "uniform", this.uniform);
    for (const u in this.uniform)
      this.uniform[u] = this.gl.getUniformLocation(this.id, u);
  }
};
function GLImageFilter() {
  let drawCount = 0;
  let sourceTexture = null;
  let lastInChain = false;
  let currentFramebufferIndex = -1;
  let tempFramebuffers = [null, null];
  let filterChain = [];
  let vertexBuffer = null;
  let currentProgram = null;
  const fxcanvas = canvas(100, 100);
  const shaderProgramCache = {};
  const DRAW = { INTERMEDIATE: 1 };
  const gl2 = fxcanvas.getContext("webgl");
  if (!gl2) {
    log("filter: cannot get webgl context");
    return;
  }
  this.gl = gl2;
  function resize(width, height) {
    if (width === fxcanvas.width && height === fxcanvas.height)
      return;
    fxcanvas.width = width;
    fxcanvas.height = height;
    if (!vertexBuffer) {
      const vertices = new Float32Array([-1, -1, 0, 1, 1, -1, 1, 1, -1, 1, 0, 0, -1, 1, 0, 0, 1, -1, 1, 1, 1, 1, 1, 0]);
      vertexBuffer = gl2.createBuffer();
      gl2.bindBuffer(gl2.ARRAY_BUFFER, vertexBuffer);
      gl2.bufferData(gl2.ARRAY_BUFFER, vertices, gl2.STATIC_DRAW);
      gl2.pixelStorei(gl2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);
    }
    gl2.viewport(0, 0, fxcanvas.width, fxcanvas.height);
    tempFramebuffers = [null, null];
  }
  function createFramebufferTexture(width, height) {
    const fbo = gl2.createFramebuffer();
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, fbo);
    const renderbuffer = gl2.createRenderbuffer();
    gl2.bindRenderbuffer(gl2.RENDERBUFFER, renderbuffer);
    const texture = gl2.createTexture();
    gl2.bindTexture(gl2.TEXTURE_2D, texture);
    gl2.texImage2D(gl2.TEXTURE_2D, 0, gl2.RGBA, width, height, 0, gl2.RGBA, gl2.UNSIGNED_BYTE, null);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MAG_FILTER, gl2.LINEAR);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MIN_FILTER, gl2.LINEAR);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_S, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_T, gl2.CLAMP_TO_EDGE);
    gl2.framebufferTexture2D(gl2.FRAMEBUFFER, gl2.COLOR_ATTACHMENT0, gl2.TEXTURE_2D, texture, 0);
    gl2.bindTexture(gl2.TEXTURE_2D, null);
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, null);
    return { fbo, texture };
  }
  function getTempFramebuffer(index2) {
    tempFramebuffers[index2] = tempFramebuffers[index2] || createFramebufferTexture(fxcanvas.width, fxcanvas.height);
    return tempFramebuffers[index2];
  }
  function draw(flags = 0) {
    if (!currentProgram)
      return;
    let source = null;
    let target = null;
    let flipY = false;
    if (drawCount === 0)
      source = sourceTexture;
    else
      source = getTempFramebuffer(currentFramebufferIndex).texture || null;
    drawCount++;
    if (lastInChain && !(flags & DRAW.INTERMEDIATE)) {
      target = null;
      flipY = drawCount % 2 === 0;
    } else {
      currentFramebufferIndex = (currentFramebufferIndex + 1) % 2;
      target = getTempFramebuffer(currentFramebufferIndex).fbo || null;
    }
    gl2.bindTexture(gl2.TEXTURE_2D, source);
    gl2.bindFramebuffer(gl2.FRAMEBUFFER, target);
    gl2.uniform1f(currentProgram.uniform["flipY"], flipY ? -1 : 1);
    gl2.drawArrays(gl2.TRIANGLES, 0, 6);
  }
  function compileShader(fragmentSource) {
    if (shaderProgramCache[fragmentSource]) {
      currentProgram = shaderProgramCache[fragmentSource];
      gl2.useProgram((currentProgram ? currentProgram.id : null) || null);
      return currentProgram;
    }
    currentProgram = new GLProgram(gl2, vertexIdentity, fragmentSource);
    if (!currentProgram) {
      log("filter: could not get webgl program");
      return null;
    }
    const floatSize = Float32Array.BYTES_PER_ELEMENT;
    const vertSize = 4 * floatSize;
    gl2.enableVertexAttribArray(currentProgram.attribute["pos"]);
    gl2.vertexAttribPointer(currentProgram.attribute["pos"], 2, gl2.FLOAT, false, vertSize, 0 * floatSize);
    gl2.enableVertexAttribArray(currentProgram.attribute["uv"]);
    gl2.vertexAttribPointer(currentProgram.attribute["uv"], 2, gl2.FLOAT, false, vertSize, 2 * floatSize);
    shaderProgramCache[fragmentSource] = currentProgram;
    return currentProgram;
  }
  const filter = {
    colorMatrix: (matrix) => {
      const m = new Float32Array(matrix);
      m[4] /= 255;
      m[9] /= 255;
      m[14] /= 255;
      m[19] /= 255;
      const shader = m[18] === 1 && m[3] === 0 && m[8] === 0 && m[13] === 0 && m[15] === 0 && m[16] === 0 && m[17] === 0 && m[19] === 0 ? colorMatrixWithoutAlpha : colorMatrixWithAlpha;
      const program = compileShader(shader);
      if (!program)
        return;
      gl2.uniform1fv(program.uniform["m"], m);
      draw();
    },
    brightness: (brightness) => {
      const b = (brightness || 0) + 1;
      filter.colorMatrix([
        b,
        0,
        0,
        0,
        0,
        0,
        b,
        0,
        0,
        0,
        0,
        0,
        b,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    saturation: (amount) => {
      const x = (amount || 0) * 2 / 3 + 1;
      const y10 = (x - 1) * -0.5;
      filter.colorMatrix([
        x,
        y10,
        y10,
        0,
        0,
        y10,
        x,
        y10,
        0,
        0,
        y10,
        y10,
        x,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    desaturate: () => {
      filter.saturation(-1);
    },
    contrast: (amount) => {
      const v10 = (amount || 0) + 1;
      const o = -128 * (v10 - 1);
      filter.colorMatrix([
        v10,
        0,
        0,
        0,
        o,
        0,
        v10,
        0,
        0,
        o,
        0,
        0,
        v10,
        0,
        o,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    negative: () => {
      filter.contrast(-2);
    },
    hue: (rotation) => {
      rotation = (rotation || 0) / 180 * Math.PI;
      const cos = Math.cos(rotation);
      const sin = Math.sin(rotation);
      const lumR = 0.213;
      const lumG = 0.715;
      const lumB = 0.072;
      filter.colorMatrix([
        lumR + cos * (1 - lumR) + sin * -lumR,
        lumG + cos * -lumG + sin * -lumG,
        lumB + cos * -lumB + sin * (1 - lumB),
        0,
        0,
        lumR + cos * -lumR + sin * 0.143,
        lumG + cos * (1 - lumG) + sin * 0.14,
        lumB + cos * -lumB + sin * -0.283,
        0,
        0,
        lumR + cos * -lumR + sin * -(1 - lumR),
        lumG + cos * -lumG + sin * lumG,
        lumB + cos * (1 - lumB) + sin * lumB,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    desaturateLuminance: () => {
      filter.colorMatrix([
        0.2764723,
        0.929708,
        0.0938197,
        0,
        -37.1,
        0.2764723,
        0.929708,
        0.0938197,
        0,
        -37.1,
        0.2764723,
        0.929708,
        0.0938197,
        0,
        -37.1,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    sepia: () => {
      filter.colorMatrix([
        0.393,
        0.7689999,
        0.18899999,
        0,
        0,
        0.349,
        0.6859999,
        0.16799999,
        0,
        0,
        0.272,
        0.5339999,
        0.13099999,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    brownie: () => {
      filter.colorMatrix([
        0.5997023498159715,
        0.34553243048391263,
        -0.2708298674538042,
        0,
        47.43192855600873,
        -0.037703249837783157,
        0.8609577587992641,
        0.15059552388459913,
        0,
        -36.96841498319127,
        0.24113635128153335,
        -0.07441037908422492,
        0.44972182064877153,
        0,
        -7.562075277591283,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    vintagePinhole: () => {
      filter.colorMatrix([
        0.6279345635605994,
        0.3202183420819367,
        -0.03965408211312453,
        0,
        9.651285835294123,
        0.02578397704808868,
        0.6441188644374771,
        0.03259127616149294,
        0,
        7.462829176470591,
        0.0466055556782719,
        -0.0851232987247891,
        0.5241648018700465,
        0,
        5.159190588235296,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    kodachrome: () => {
      filter.colorMatrix([
        1.1285582396593525,
        -0.3967382283601348,
        -0.03992559172921793,
        0,
        63.72958762196502,
        -0.16404339962244616,
        1.0835251566291304,
        -0.05498805115633132,
        0,
        24.732407896706203,
        -0.16786010706155763,
        -0.5603416277695248,
        1.6014850761964943,
        0,
        35.62982807460946,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    technicolor: () => {
      filter.colorMatrix([
        1.9125277891456083,
        -0.8545344976951645,
        -0.09155508482755585,
        0,
        11.793603434377337,
        -0.3087833385928097,
        1.7658908555458428,
        -0.10601743074722245,
        0,
        -70.35205161461398,
        -0.231103377548616,
        -0.7501899197440212,
        1.847597816108189,
        0,
        30.950940869491138,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    polaroid: () => {
      filter.colorMatrix([
        1.438,
        -0.062,
        -0.062,
        0,
        0,
        -0.122,
        1.378,
        -0.122,
        0,
        0,
        -0.016,
        -0.016,
        1.483,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    shiftToBGR: () => {
      filter.colorMatrix([
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        1,
        0
      ]);
    },
    convolution: (matrix) => {
      const m = new Float32Array(matrix);
      const pixelSizeX = 1 / fxcanvas.width;
      const pixelSizeY = 1 / fxcanvas.height;
      const program = compileShader(convolution);
      if (!program)
        return;
      gl2.uniform1fv(program.uniform["m"], m);
      gl2.uniform2f(program.uniform["px"], pixelSizeX, pixelSizeY);
      draw();
    },
    detectEdges: () => {
      filter.convolution.call(this, [
        0,
        1,
        0,
        1,
        -4,
        1,
        0,
        1,
        0
      ]);
    },
    sobelX: () => {
      filter.convolution.call(this, [
        -1,
        0,
        1,
        -2,
        0,
        2,
        -1,
        0,
        1
      ]);
    },
    sobelY: () => {
      filter.convolution.call(this, [
        -1,
        -2,
        -1,
        0,
        0,
        0,
        1,
        2,
        1
      ]);
    },
    sharpen: (amount) => {
      const a = amount || 1;
      filter.convolution.call(this, [
        0,
        -1 * a,
        0,
        -1 * a,
        1 + 4 * a,
        -1 * a,
        0,
        -1 * a,
        0
      ]);
    },
    emboss: (size2) => {
      const s = size2 || 1;
      filter.convolution.call(this, [
        -2 * s,
        -1 * s,
        0,
        -1 * s,
        1,
        1 * s,
        0,
        1 * s,
        2 * s
      ]);
    },
    blur: (size2) => {
      const blurSizeX = size2 / 7 / fxcanvas.width;
      const blurSizeY = size2 / 7 / fxcanvas.height;
      const program = compileShader(blur);
      if (!program)
        return;
      gl2.uniform2f(program.uniform["px"], 0, blurSizeY);
      draw(DRAW.INTERMEDIATE);
      gl2.uniform2f(program.uniform["px"], blurSizeX, 0);
      draw();
    },
    pixelate: (size2) => {
      const blurSizeX = size2 / fxcanvas.width;
      const blurSizeY = size2 / fxcanvas.height;
      const program = compileShader(pixelate);
      if (!program)
        return;
      gl2.uniform2f(program.uniform["size"], blurSizeX, blurSizeY);
      draw();
    }
  };
  this.add = function(name) {
    const args = Array.prototype.slice.call(arguments, 1);
    const func = filter[name];
    filterChain.push({ func, args });
  };
  this.reset = function() {
    filterChain = [];
  };
  this.get = function() {
    return filterChain;
  };
  this.apply = function(image) {
    resize(image.width, image.height);
    drawCount = 0;
    if (!sourceTexture)
      sourceTexture = gl2.createTexture();
    gl2.bindTexture(gl2.TEXTURE_2D, sourceTexture);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_S, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_WRAP_T, gl2.CLAMP_TO_EDGE);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MIN_FILTER, gl2.NEAREST);
    gl2.texParameteri(gl2.TEXTURE_2D, gl2.TEXTURE_MAG_FILTER, gl2.NEAREST);
    gl2.texImage2D(gl2.TEXTURE_2D, 0, gl2.RGBA, gl2.RGBA, gl2.UNSIGNED_BYTE, image);
    for (let i = 0; i < filterChain.length; i++) {
      lastInChain = i === filterChain.length - 1;
      const f = filterChain[i];
      f.func.apply(this, f.args || []);
    }
    return fxcanvas;
  };
  this.draw = function(image) {
    this.add("brightness", 0);
    return this.apply(image);
  };
}
async function histogramEqualization(inputImage) {
  const squeeze = inputImage.shape.length === 4 ? Up(inputImage) : inputImage;
  const rgb2 = Oa(squeeze, 3, 2);
  const min = [sl(rgb2[0]), sl(rgb2[1]), sl(rgb2[2])];
  const max = [Us(rgb2[0]), Us(rgb2[1]), Us(rgb2[2])];
  const absMax = await Promise.all(max.map((channel) => channel.data()));
  const maxValue = Math.max(absMax[0][0], absMax[1][0], absMax[2][0]);
  const maxRange = maxValue > 1 ? 255 : 1;
  const factor = maxRange / maxValue;
  let final;
  if (factor > 1) {
    const sub = [Ne(rgb2[0], min[0]), Ne(rgb2[1], min[1]), Ne(rgb2[2], min[2])];
    const range = [Ne(max[0], min[0]), Ne(max[1], min[1]), Ne(max[2], min[2])];
    const enh = [ae(sub[0], factor), ae(sub[1], factor), ae(sub[2], factor)];
    const stack = Sr([enh[0], enh[1], enh[2]], 2);
    final = z(stack, [1, squeeze.shape[0] || 0, squeeze.shape[1] || 0, 3]);
    Dt([...sub, ...range, ...enh]);
  } else {
    final = Fa(squeeze, 0);
  }
  Dt([...rgb2, ...min, ...max, rgb2, squeeze, inputImage]);
  return final;
}
var maxSize = 3840;
var inCanvas = null;
var outCanvas = null;
var tmpCanvas = null;
var fx2;
var last = {
  inputSum: 0,
  cacheDiff: 1,
  sumMethod: 0,
  inputTensor: void 0
};
function reset() {
  last.inputSum = 0;
  last.cacheDiff = 1;
  last.sumMethod = 0;
  last.inputTensor = void 0;
}
function canvas(width, height) {
  let c;
  if (env.browser) {
    if (env.worker) {
      if (typeof OffscreenCanvas === "undefined")
        throw new Error("canvas error: attempted to run in web worker but OffscreenCanvas is not supported");
      c = new OffscreenCanvas(width, height);
    } else {
      if (typeof document === "undefined")
        throw new Error("canvas error: attempted to run in browser but DOM is not defined");
      c = document.createElement("canvas");
      c.width = width;
      c.height = height;
    }
  } else {
    if (typeof env.Canvas !== "undefined")
      c = new env.Canvas(width, height);
    else if (typeof globalThis.Canvas !== "undefined")
      c = new globalThis.Canvas(width, height);
  }
  return c;
}
function copy(input, output) {
  const outputCanvas = output || canvas(input.width, input.height);
  const ctx = outputCanvas.getContext("2d");
  ctx.drawImage(input, 0, 0);
  return outputCanvas;
}
async function process2(input, config3, getTensor = true) {
  var _a2, _b2, _c2;
  if (!input) {
    if (config3.debug)
      log("input error: input is missing");
    return { tensor: null, canvas: null };
  }
  if (!(input instanceof it) && !(typeof Image !== "undefined" && input instanceof Image) && !(typeof globalThis.Canvas !== "undefined" && input instanceof globalThis.Canvas) && !(typeof ImageData !== "undefined" && input instanceof ImageData) && !(typeof ImageBitmap !== "undefined" && input instanceof ImageBitmap) && !(typeof HTMLImageElement !== "undefined" && input instanceof HTMLImageElement) && !(typeof HTMLMediaElement !== "undefined" && input instanceof HTMLMediaElement) && !(typeof HTMLVideoElement !== "undefined" && input instanceof HTMLVideoElement) && !(typeof HTMLCanvasElement !== "undefined" && input instanceof HTMLCanvasElement) && !(typeof OffscreenCanvas !== "undefined" && input instanceof OffscreenCanvas)) {
    throw new Error("input error: type not recognized");
  }
  if (input instanceof it) {
    let tensor2 = null;
    if (input["isDisposedInternal"])
      throw new Error("input error: attempted to use tensor but it is disposed");
    if (!input.shape)
      throw new Error("input error: attempted to use tensor without a shape");
    if (input.shape.length === 3) {
      if (input.shape[2] === 3) {
        tensor2 = Fa(input, 0);
      } else if (input.shape[2] === 4) {
        const rgb2 = g1(input, [0, 0, 0], [-1, -1, 3]);
        tensor2 = Fa(rgb2, 0);
        Dt(rgb2);
      }
    } else if (input.shape.length === 4) {
      if (input.shape[3] === 3) {
        tensor2 = Br(input);
      } else if (input.shape[3] === 4) {
        tensor2 = x1(input, [0, 0, 0, 0], [-1, -1, -1, 3]);
      }
    }
    if (tensor2 == null || tensor2.shape.length !== 4 || tensor2.shape[0] !== 1 || tensor2.shape[3] !== 3)
      throw new Error(`input error: attempted to use tensor with unrecognized shape: ${input.shape.toString()}`);
    if (tensor2.dtype === "int32") {
      const cast = Ke(tensor2, "float32");
      Dt(tensor2);
      tensor2 = cast;
    }
    return { tensor: tensor2, canvas: config3.filter.return ? outCanvas : null };
  }
  if (typeof input["readyState"] !== "undefined" && input.readyState <= 2) {
    if (config3.debug)
      log("input stream is not ready");
    return { tensor: null, canvas: inCanvas };
  }
  const originalWidth = input["naturalWidth"] || input["videoWidth"] || input["width"] || input["shape"] && input["shape"][1] > 0;
  const originalHeight = input["naturalHeight"] || input["videoHeight"] || input["height"] || input["shape"] && input["shape"][2] > 0;
  if (!originalWidth || !originalHeight) {
    if (config3.debug)
      log("cannot determine input dimensions");
    return { tensor: null, canvas: inCanvas };
  }
  let targetWidth = originalWidth;
  let targetHeight = originalHeight;
  if (targetWidth > maxSize) {
    targetWidth = maxSize;
    targetHeight = Math.trunc(targetWidth * originalHeight / originalWidth);
  }
  if (targetHeight > maxSize) {
    targetHeight = maxSize;
    targetWidth = Math.trunc(targetHeight * originalWidth / originalHeight);
  }
  if ((((_a2 = config3.filter) == null ? void 0 : _a2.width) || 0) > 0)
    targetWidth = config3.filter.width;
  else if ((((_b2 = config3.filter) == null ? void 0 : _b2.height) || 0) > 0)
    targetWidth = originalWidth * ((config3.filter.height || 0) / originalHeight);
  if ((config3.filter.height || 0) > 0)
    targetHeight = config3.filter.height;
  else if ((config3.filter.width || 0) > 0)
    targetHeight = originalHeight * ((config3.filter.width || 0) / originalWidth);
  if (!targetWidth || !targetHeight)
    throw new Error("input error: cannot determine dimension");
  if (!inCanvas || inCanvas.width !== targetWidth || inCanvas.height !== targetHeight)
    inCanvas = canvas(targetWidth, targetHeight);
  const inCtx = inCanvas.getContext("2d");
  if (typeof ImageData !== "undefined" && input instanceof ImageData) {
    inCtx.putImageData(input, 0, 0);
  } else {
    if (config3.filter.flip && typeof inCtx.translate !== "undefined") {
      inCtx.translate(originalWidth, 0);
      inCtx.scale(-1, 1);
      inCtx.drawImage(input, 0, 0, originalWidth, originalHeight, 0, 0, inCanvas.width, inCanvas.height);
      inCtx.setTransform(1, 0, 0, 1, 0, 0);
    } else {
      inCtx.drawImage(input, 0, 0, originalWidth, originalHeight, 0, 0, inCanvas.width, inCanvas.height);
    }
  }
  if (!outCanvas || inCanvas.width !== outCanvas.width || inCanvas.height !== outCanvas.height)
    outCanvas = canvas(inCanvas.width, inCanvas.height);
  if (config3.filter.enabled && env.webgl.supported) {
    if (!fx2)
      fx2 = env.browser ? new GLImageFilter() : null;
    env.filter = !!fx2;
    if (!(fx2 == null ? void 0 : fx2.add)) {
      if (config3.debug)
        log("input process error: cannot initialize filters");
      env.webgl.supported = false;
      config3.filter.enabled = false;
      copy(inCanvas, outCanvas);
    } else {
      fx2.reset();
      if (config3.filter.brightness !== 0)
        fx2.add("brightness", config3.filter.brightness);
      if (config3.filter.contrast !== 0)
        fx2.add("contrast", config3.filter.contrast);
      if (config3.filter.sharpness !== 0)
        fx2.add("sharpen", config3.filter.sharpness);
      if (config3.filter.blur !== 0)
        fx2.add("blur", config3.filter.blur);
      if (config3.filter.saturation !== 0)
        fx2.add("saturation", config3.filter.saturation);
      if (config3.filter.hue !== 0)
        fx2.add("hue", config3.filter.hue);
      if (config3.filter.negative)
        fx2.add("negative");
      if (config3.filter.sepia)
        fx2.add("sepia");
      if (config3.filter.vintage)
        fx2.add("brownie");
      if (config3.filter.sepia)
        fx2.add("sepia");
      if (config3.filter.kodachrome)
        fx2.add("kodachrome");
      if (config3.filter.technicolor)
        fx2.add("technicolor");
      if (config3.filter.polaroid)
        fx2.add("polaroid");
      if (config3.filter.pixelate !== 0)
        fx2.add("pixelate", config3.filter.pixelate);
      if (((_c2 = fx2.get()) == null ? void 0 : _c2.length) > 1)
        outCanvas = fx2.apply(inCanvas);
      else
        outCanvas = fx2.draw(inCanvas);
    }
  } else {
    copy(inCanvas, outCanvas);
    if (fx2)
      fx2 = null;
    env.filter = !!fx2;
  }
  if (!getTensor)
    return { tensor: null, canvas: outCanvas };
  if (!outCanvas)
    throw new Error("canvas error: cannot create output");
  let pixels;
  let depth = 3;
  if (typeof ImageData !== "undefined" && input instanceof ImageData || input.data && input.width && input.height) {
    if (env.browser && Q0) {
      pixels = Q0 ? Q0.fromPixels(input) : null;
    } else {
      depth = input.data.length / input.height / input.width;
      const arr = new Uint8Array(input.data.buffer);
      pixels = nr(arr, [input.height, input.width, depth], "int32");
    }
  } else {
    if (!tmpCanvas || outCanvas.width !== tmpCanvas.width || outCanvas.height !== tmpCanvas.height)
      tmpCanvas = canvas(outCanvas.width, outCanvas.height);
    if (Q0 && env.browser) {
      if (config3.backend === "webgl" || config3.backend === "humangl" || config3.backend === "webgpu") {
        pixels = Q0.fromPixels(outCanvas);
      } else {
        tmpCanvas = copy(outCanvas);
        pixels = Q0.fromPixels(tmpCanvas);
      }
    } else {
      const tempCanvas = copy(outCanvas);
      const tempCtx = tempCanvas.getContext("2d");
      const tempData = tempCtx.getImageData(0, 0, targetWidth, targetHeight);
      depth = tempData.data.length / targetWidth / targetHeight;
      const arr = new Uint8Array(tempData.data.buffer);
      pixels = nr(arr, [targetWidth, targetHeight, depth]);
    }
  }
  if (depth === 4) {
    const rgb2 = g1(pixels, [0, 0, 0], [-1, -1, 3]);
    Dt(pixels);
    pixels = rgb2;
  }
  if (!pixels)
    throw new Error("input error: cannot create tensor");
  const casted = Ke(pixels, "float32");
  const tensor = config3.filter.equalization ? await histogramEqualization(casted) : Fa(casted, 0);
  Dt([pixels, casted]);
  if (config3.filter.autoBrightness) {
    const max = Us(tensor);
    const maxVal = await max.data();
    config3.filter.brightness = maxVal[0] > 1 ? 1 - maxVal[0] / 255 : 1 - maxVal[0];
    Dt(max);
  }
  return { tensor, canvas: config3.filter.return ? outCanvas : null };
}
async function skip(config3, input) {
  let skipFrame = false;
  if (config3.cacheSensitivity === 0 || !input.shape || input.shape.length !== 4 || input.shape[1] > 3840 || input.shape[2] > 2160)
    return skipFrame;
  if (!last.inputTensor) {
    last.inputTensor = Br(input);
  } else if (last.inputTensor.shape[1] !== input.shape[1] || last.inputTensor.shape[2] !== input.shape[2]) {
    Dt(last.inputTensor);
    last.inputTensor = Br(input);
  } else {
    const t6 = {};
    t6.diff = Ne(input, last.inputTensor);
    t6.squared = ae(t6.diff, t6.diff);
    t6.sum = et(t6.squared);
    const diffSum = await t6.sum.data();
    const diffRelative = diffSum[0] / (input.shape[1] || 1) / (input.shape[2] || 1) / 255 / 3;
    Dt([last.inputTensor, t6.diff, t6.squared, t6.sum]);
    last.inputTensor = Br(input);
    skipFrame = diffRelative <= (config3.cacheSensitivity || 0);
  }
  return skipFrame;
}
async function compare(config3, input1, input2) {
  const t6 = {};
  if (!input1 || !input2 || input1.shape.length !== 4 || input1.shape.length !== input2.shape.length) {
    if (!config3.debug)
      log("invalid input tensor or tensor shapes do not match:", input1.shape, input2.shape);
    return 0;
  }
  if (input1.shape[0] !== 1 || input2.shape[0] !== 1 || input1.shape[3] !== 3 || input2.shape[3] !== 3) {
    if (!config3.debug)
      log("input tensors must be of shape [1, height, width, 3]:", input1.shape, input2.shape);
    return 0;
  }
  t6.input1 = Br(input1);
  t6.input2 = input1.shape[1] !== input2.shape[1] || input1.shape[2] !== input2.shape[2] ? uq.resizeBilinear(input2, [input1.shape[1], input1.shape[2]]) : Br(input2);
  t6.diff = Ne(t6.input1, t6.input2);
  t6.squared = ae(t6.diff, t6.diff);
  t6.sum = et(t6.squared);
  const diffSum = await t6.sum.data();
  const diffRelative = diffSum[0] / (input1.shape[1] || 1) / (input1.shape[2] || 1) / 255 / 3;
  Dt([t6.input1, t6.input2, t6.diff, t6.squared, t6.sum]);
  return diffRelative;
}
var _canvas;
var _image;
var _imageData;
var Env = class {
  constructor() {
    __publicField(this, "browser");
    __publicField(this, "node");
    __publicField(this, "worker");
    __publicField(this, "platform", "");
    __publicField(this, "agent", "");
    __publicField(this, "backends", []);
    __publicField(this, "initial");
    __publicField(this, "filter");
    __publicField(this, "tfjs");
    __publicField(this, "offscreen");
    __publicField(this, "perfadd", false);
    __publicField(this, "tensorflow", {
      version: void 0,
      gpu: void 0
    });
    __publicField(this, "wasm", {
      supported: void 0,
      backend: void 0,
      simd: void 0,
      multithread: void 0
    });
    __publicField(this, "webgl", {
      supported: void 0,
      backend: void 0,
      version: void 0,
      renderer: void 0,
      shader: void 0,
      vendor: void 0
    });
    __publicField(this, "webgpu", {
      supported: void 0,
      backend: void 0,
      adapter: void 0
    });
    __publicField(this, "cpu", {
      model: void 0,
      flags: []
    });
    __publicField(this, "kernels", []);
    __privateAdd(this, _canvas, void 0);
    __privateAdd(this, _image, void 0);
    __privateAdd(this, _imageData, void 0);
    this.browser = typeof navigator !== "undefined";
    this.node = typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.node !== "undefined";
    this.tfjs = { version: gne["tfjs-core"] };
    this.offscreen = typeof OffscreenCanvas !== "undefined";
    this.initial = true;
    this.worker = this.browser && this.offscreen ? typeof WorkerGlobalScope !== "undefined" : void 0;
    if (typeof navigator !== "undefined") {
      const raw = navigator.userAgent.match(/\(([^()]+)\)/g);
      if (raw == null ? void 0 : raw[0]) {
        const platformMatch = raw[0].match(/\(([^()]+)\)/g);
        this.platform = (platformMatch == null ? void 0 : platformMatch[0]) ? platformMatch[0].replace(/\(|\)/g, "") : "";
        this.agent = navigator.userAgent.replace(raw[0], "");
        if (this.platform[1])
          this.agent = this.agent.replace(raw[1], "");
        this.agent = this.agent.replace(/  /g, " ");
      }
    } else if (typeof process !== "undefined") {
      this.platform = `${process.platform} ${process.arch}`;
      this.agent = `NodeJS ${process.version}`;
    }
  }
  get Canvas() {
    return __privateGet(this, _canvas);
  }
  set Canvas(val) {
    __privateSet(this, _canvas, val);
    globalThis.Canvas = val;
  }
  get Image() {
    return __privateGet(this, _image);
  }
  set Image(val) {
    __privateSet(this, _image, val);
    globalThis.Image = val;
  }
  get ImageData() {
    return __privateGet(this, _imageData);
  }
  set ImageData(val) {
    __privateSet(this, _imageData, val);
    globalThis.ImageData = val;
  }
  async updateBackend() {
    this.backends = Object.keys(cr().registryFactory);
    try {
      this.tensorflow = {
        version: Oie()["binding"] ? Oie()["binding"].TF_Version : void 0,
        gpu: Oie()["binding"] ? Oie()["binding"].isUsingGpuDevice() : void 0
      };
    } catch (e) {
    }
    this.wasm.supported = typeof WebAssembly !== "undefined";
    this.wasm.backend = this.backends.includes("wasm");
    if (this.wasm.supported && this.wasm.backend) {
      this.wasm.simd = await O().getAsync("WASM_HAS_SIMD_SUPPORT");
      this.wasm.multithread = await O().getAsync("WASM_HAS_MULTITHREAD_SUPPORT");
    }
    const c = canvas(100, 100);
    const gl2 = c ? c.getContext("webgl2") : void 0;
    this.webgl.supported = typeof gl2 !== "undefined";
    this.webgl.backend = this.backends.includes("webgl");
    if (this.webgl.supported && this.webgl.backend && gl2) {
      this.webgl.version = gl2.getParameter(gl2.VERSION);
      this.webgl.vendor = gl2.getParameter(gl2.VENDOR);
      this.webgl.renderer = gl2.getParameter(gl2.RENDERER);
      this.webgl.shader = gl2.getParameter(gl2.SHADING_LANGUAGE_VERSION);
    }
    this.webgpu.supported = this.browser && typeof navigator.gpu !== "undefined";
    this.webgpu.backend = this.backends.includes("webgpu");
    try {
      if (this.webgpu.supported) {
        const adapter = await navigator.gpu.requestAdapter();
        this.webgpu.adapter = await (adapter == null ? void 0 : adapter.requestAdapterInfo());
      }
    } catch (e) {
      this.webgpu.supported = false;
    }
    try {
      this.kernels = Am(Aie()).map((kernel) => kernel.kernelName.toLowerCase());
    } catch (e) {
    }
  }
  updateCPU() {
    const cpu = { model: "", flags: [] };
    if (this.node && this.platform.startsWith("linux")) {
    }
    if (!this.cpu)
      Object.defineProperty(this, "cpu", { value: cpu });
    else
      this.cpu = cpu;
  }
};
_canvas = /* @__PURE__ */ new WeakMap();
_image = /* @__PURE__ */ new WeakMap();
_imageData = /* @__PURE__ */ new WeakMap();
var env = new Env();
var WebCam = class {
  constructor() {
    __publicField(this, "config");
    __publicField(this, "element");
    __publicField(this, "stream");
    __publicField(this, "devices", []);
    __publicField(this, "enumerate", async () => {
      try {
        const devices = await navigator.mediaDevices.enumerateDevices();
        this.devices = devices.filter((device) => device.kind === "videoinput");
      } catch (e) {
        this.devices = [];
      }
      return this.devices;
    });
    __publicField(this, "start", async (webcamConfig) => {
      var _a2, _b2;
      if (webcamConfig == null ? void 0 : webcamConfig.debug)
        this.config.debug = webcamConfig == null ? void 0 : webcamConfig.debug;
      if (webcamConfig == null ? void 0 : webcamConfig.crop)
        this.config.crop = webcamConfig == null ? void 0 : webcamConfig.crop;
      if (webcamConfig == null ? void 0 : webcamConfig.mode)
        this.config.mode = webcamConfig == null ? void 0 : webcamConfig.mode;
      if (webcamConfig == null ? void 0 : webcamConfig.width)
        this.config.width = webcamConfig == null ? void 0 : webcamConfig.width;
      if (webcamConfig == null ? void 0 : webcamConfig.height)
        this.config.height = webcamConfig == null ? void 0 : webcamConfig.height;
      if (webcamConfig == null ? void 0 : webcamConfig.id)
        this.config.id = webcamConfig == null ? void 0 : webcamConfig.id;
      if (webcamConfig == null ? void 0 : webcamConfig.element) {
        if (typeof webcamConfig.element === "string") {
          const el2 = document.getElementById(webcamConfig.element);
          if (el2 && el2 instanceof HTMLVideoElement) {
            this.element = el2;
          } else {
            if (this.config.debug)
              log("webcam", "cannot get dom element", webcamConfig.element);
            return;
          }
        } else if (webcamConfig.element instanceof HTMLVideoElement) {
          this.element = webcamConfig.element;
        } else {
          if (this.config.debug)
            log("webcam", "unknown dom element", webcamConfig.element);
          return;
        }
      } else {
        this.element = document.createElement("video");
      }
      const requestedConstraints = {
        audio: false,
        video: {
          facingMode: this.config.mode === "front" ? "user" : "environment",
          resizeMode: this.config.crop ? "crop-and-scale" : "none"
        }
      };
      if (((_a2 = this.config) == null ? void 0 : _a2.width) > 0)
        requestedConstraints.video.width = { ideal: this.config.width };
      if (((_b2 = this.config) == null ? void 0 : _b2.height) > 0)
        requestedConstraints.video.height = { ideal: this.config.height };
      if (this.config.id)
        requestedConstraints.video.deviceId = this.config.id;
      this.element.addEventListener("play", () => {
        if (this.config.debug)
          log("webcam", "play");
      });
      this.element.addEventListener("pause", () => {
        if (this.config.debug)
          log("webcam", "pause");
      });
      this.element.addEventListener("click", async () => {
        if (!this.element || !this.stream)
          return;
        if (this.element.paused)
          await this.element.play();
        else
          this.element.pause();
      });
      if (!(navigator == null ? void 0 : navigator.mediaDevices)) {
        if (this.config.debug)
          log("webcam", "no devices");
        return;
      }
      try {
        this.stream = await navigator.mediaDevices.getUserMedia(requestedConstraints);
      } catch (err) {
        log("webcam", err);
        return;
      }
      if (!this.stream) {
        if (this.config.debug)
          log("webcam", "no stream");
        return;
      }
      this.element.srcObject = this.stream;
      const ready = new Promise((resolve) => {
        if (!this.element)
          resolve(false);
        else
          this.element.onloadeddata = () => resolve(true);
      });
      await ready;
      await this.element.play();
      if (this.config.debug) {
        log("webcam", {
          width: this.width,
          height: this.height,
          label: this.label,
          stream: this.stream,
          track: this.track,
          settings: this.settings,
          constraints: this.constraints,
          capabilities: this.capabilities
        });
      }
    });
    __publicField(this, "pause", () => {
      if (this.element)
        this.element.pause();
    });
    __publicField(this, "play", async () => {
      if (this.element)
        await this.element.play();
    });
    __publicField(this, "stop", () => {
      if (this.config.debug)
        log("webcam", "stop");
      if (this.track)
        this.track.stop();
    });
    this.config = {
      element: void 0,
      debug: true,
      mode: "front",
      crop: false,
      width: 0,
      height: 0
    };
  }
  get track() {
    if (!this.stream)
      return void 0;
    return this.stream.getVideoTracks()[0];
  }
  get capabilities() {
    if (!this.track)
      return void 0;
    return this.track.getCapabilities ? this.track.getCapabilities() : void 0;
  }
  get constraints() {
    if (!this.track)
      return void 0;
    return this.track.getConstraints ? this.track.getConstraints() : void 0;
  }
  get settings() {
    if (!this.stream)
      return void 0;
    const track = this.stream.getVideoTracks()[0];
    return track.getSettings ? track.getSettings() : void 0;
  }
  get label() {
    if (!this.track)
      return "";
    return this.track.label;
  }
  get paused() {
    var _a2;
    return ((_a2 = this.element) == null ? void 0 : _a2.paused) || false;
  }
  get width() {
    var _a2;
    return ((_a2 = this.element) == null ? void 0 : _a2.videoWidth) || 0;
  }
  get height() {
    var _a2;
    return ((_a2 = this.element) == null ? void 0 : _a2.videoHeight) || 0;
  }
};
var models_exports = {};
__export(models_exports, {
  age: () => age,
  "anti-spoofing": () => anti_spoofing,
  antispoof: () => antispoof,
  blazeface: () => blazeface,
  "blazeface-back": () => blazeface_back,
  "blazeface-front": () => blazeface_front,
  "blazepose-detector": () => blazepose_detector,
  "blazepose-full": () => blazepose_full,
  "blazepose-heavy": () => blazepose_heavy,
  "blazepose-lite": () => blazepose_lite,
  centernet: () => centernet,
  default: () => models_default,
  efficientpose: () => efficientpose,
  "efficientpose-i-lite": () => efficientpose_i_lite,
  "efficientpose-ii-lite": () => efficientpose_ii_lite,
  "efficientpose-iv": () => efficientpose_iv,
  emotion: () => emotion,
  faceboxes: () => faceboxes,
  facemesh: () => facemesh,
  "facemesh-attention": () => facemesh_attention,
  "facemesh-attention-pinto": () => facemesh_attention_pinto,
  "facemesh-detection-full": () => facemesh_detection_full,
  "facemesh-detection-short": () => facemesh_detection_short,
  faceres: () => faceres,
  "faceres-deep": () => faceres_deep,
  gear: () => gear,
  gender: () => gender,
  "gender-ssrnet-imdb": () => gender_ssrnet_imdb,
  handdetect: () => handdetect,
  "handlandmark-full": () => handlandmark_full,
  "handlandmark-lite": () => handlandmark_lite,
  "handlandmark-sparse": () => handlandmark_sparse,
  handskeleton: () => handskeleton,
  handtrack: () => handtrack,
  "insightface-efficientnet-b0": () => insightface_efficientnet_b0,
  "insightface-ghostnet-strides1": () => insightface_ghostnet_strides1,
  "insightface-ghostnet-strides2": () => insightface_ghostnet_strides2,
  "insightface-mobilenet-emore": () => insightface_mobilenet_emore,
  "insightface-mobilenet-swish": () => insightface_mobilenet_swish,
  iris: () => iris,
  liveness: () => liveness,
  meet: () => meet,
  mobileface: () => mobileface,
  mobilefacenet: () => mobilefacenet,
  models: () => models,
  "movenet-lightning": () => movenet_lightning,
  "movenet-multipose": () => movenet_multipose,
  "movenet-thunder": () => movenet_thunder,
  nanodet: () => nanodet,
  "nanodet-e": () => nanodet_e,
  "nanodet-g": () => nanodet_g,
  "nanodet-m": () => nanodet_m,
  "nanodet-t": () => nanodet_t,
  posenet: () => posenet,
  rvm: () => rvm,
  selfie: () => selfie
});
var antispoof = 853098;
var blazeface = 538928;
var centernet = 4030290;
var emotion = 820516;
var facemesh = 1477958;
var faceres = 6978814;
var handlandmark_lite = 2023432;
var handtrack = 2964837;
var iris = 2599092;
var liveness = 592976;
var models = 0;
var movenet_lightning = 4650216;
var age = 161240;
var blazeface_back = 538928;
var blazeface_front = 402048;
var blazepose_detector = 5928856;
var blazepose_full = 6339202;
var blazepose_heavy = 27502466;
var blazepose_lite = 2726402;
var efficientpose = 5651240;
var faceboxes = 2013002;
var facemesh_attention_pinto = 2387598;
var facemesh_attention = 2382414;
var facemesh_detection_full = 1026192;
var facemesh_detection_short = 201268;
var faceres_deep = 13957620;
var gear = 1498916;
var gender_ssrnet_imdb = 161236;
var gender = 201808;
var handdetect = 3515612;
var handlandmark_full = 5431368;
var handlandmark_sparse = 5286322;
var handskeleton = 5502280;
var meet = 372228;
var mobileface = 2183192;
var mobilefacenet = 5171976;
var movenet_multipose = 9448838;
var movenet_thunder = 12477112;
var nanodet = 7574558;
var posenet = 5032780;
var rvm = 3739355;
var selfie = 212886;
var anti_spoofing = 853098;
var efficientpose_i_lite = 2269064;
var efficientpose_ii_lite = 5651240;
var efficientpose_iv = 25643252;
var insightface_efficientnet_b0 = 13013224;
var insightface_ghostnet_strides1 = 8093408;
var insightface_ghostnet_strides2 = 8049584;
var insightface_mobilenet_emore = 6938536;
var insightface_mobilenet_swish = 12168584;
var nanodet_e = 12319156;
var nanodet_g = 7574558;
var nanodet_m = 1887474;
var nanodet_t = 5294216;
var models_default = {
  antispoof,
  blazeface,
  centernet,
  emotion,
  facemesh,
  faceres,
  "handlandmark-lite": handlandmark_lite,
  handtrack,
  iris,
  liveness,
  models,
  "movenet-lightning": movenet_lightning,
  age,
  "blazeface-back": blazeface_back,
  "blazeface-front": blazeface_front,
  "blazepose-detector": blazepose_detector,
  "blazepose-full": blazepose_full,
  "blazepose-heavy": blazepose_heavy,
  "blazepose-lite": blazepose_lite,
  efficientpose,
  faceboxes,
  "facemesh-attention-pinto": facemesh_attention_pinto,
  "facemesh-attention": facemesh_attention,
  "facemesh-detection-full": facemesh_detection_full,
  "facemesh-detection-short": facemesh_detection_short,
  "faceres-deep": faceres_deep,
  gear,
  "gender-ssrnet-imdb": gender_ssrnet_imdb,
  gender,
  handdetect,
  "handlandmark-full": handlandmark_full,
  "handlandmark-sparse": handlandmark_sparse,
  handskeleton,
  meet,
  mobileface,
  mobilefacenet,
  "movenet-multipose": movenet_multipose,
  "movenet-thunder": movenet_thunder,
  nanodet,
  posenet,
  rvm,
  selfie,
  "anti-spoofing": anti_spoofing,
  "efficientpose-i-lite": efficientpose_i_lite,
  "efficientpose-ii-lite": efficientpose_ii_lite,
  "efficientpose-iv": efficientpose_iv,
  "insightface-efficientnet-b0": insightface_efficientnet_b0,
  "insightface-ghostnet-strides1": insightface_ghostnet_strides1,
  "insightface-ghostnet-strides2": insightface_ghostnet_strides2,
  "insightface-mobilenet-emore": insightface_mobilenet_emore,
  "insightface-mobilenet-swish": insightface_mobilenet_swish,
  "nanodet-e": nanodet_e,
  "nanodet-g": nanodet_g,
  "nanodet-m": nanodet_m,
  "nanodet-t": nanodet_t
};
var options = {
  cacheModels: true,
  cacheSupported: true,
  verbose: true,
  debug: false,
  modelBasePath: ""
};
var modelStats = {};
async function httpHandler(url, init4) {
  if (options.debug)
    log("load model fetch:", url, init4);
  return fetch(url, init4);
}
function setModelLoadOptions(config3) {
  options.cacheModels = config3.cacheModels;
  options.verbose = config3.debug;
  options.modelBasePath = config3.modelBasePath;
}
async function loadModel(modelPath) {
  var _a2, _b2, _c2, _d2;
  let modelUrl = join(options.modelBasePath, modelPath || "");
  if (!modelUrl.toLowerCase().endsWith(".json"))
    modelUrl += ".json";
  const modelPathSegments = modelUrl.includes("/") ? modelUrl.split("/") : modelUrl.split("\\");
  const shortModelName = modelPathSegments[modelPathSegments.length - 1].replace(".json", "");
  const cachedModelName = "indexeddb://" + shortModelName;
  modelStats[shortModelName] = {
    name: shortModelName,
    sizeFromManifest: 0,
    sizeLoadedWeights: 0,
    sizeDesired: models_exports[shortModelName],
    inCache: false,
    url: ""
  };
  options.cacheSupported = typeof indexedDB !== "undefined";
  let cachedModels = {};
  try {
    cachedModels = options.cacheSupported && options.cacheModels ? await Ea.listModels() : {};
  } catch (e) {
    options.cacheSupported = false;
  }
  modelStats[shortModelName].inCache = options.cacheSupported && options.cacheModels && Object.keys(cachedModels).includes(cachedModelName);
  modelStats[shortModelName].url = modelStats[shortModelName].inCache ? cachedModelName : modelUrl;
  const tfLoadOptions = typeof fetch === "undefined" ? {} : { fetchFunc: (url, init4) => httpHandler(url, init4) };
  let model23 = new ll(modelStats[shortModelName].url, tfLoadOptions);
  let loaded = false;
  try {
    model23.findIOHandler();
    if (options.debug)
      log("model load handler:", model23["handler"]);
  } catch (err) {
    log("error finding model i/o handler:", modelUrl, err);
  }
  try {
    const artifacts = await ((_a2 = model23.handler) == null ? void 0 : _a2.load()) || null;
    modelStats[shortModelName].sizeFromManifest = ((_b2 = artifacts == null ? void 0 : artifacts.weightData) == null ? void 0 : _b2.byteLength) || 0;
    if (artifacts)
      model23.loadSync(artifacts);
    else
      model23 = await l6(modelStats[shortModelName].inCache ? cachedModelName : modelUrl, tfLoadOptions);
    modelStats[shortModelName].sizeLoadedWeights = ((_d2 = (_c2 = model23.artifacts) == null ? void 0 : _c2.weightData) == null ? void 0 : _d2.byteLength) || 0;
    if (options.verbose)
      log("load:", { model: shortModelName, url: model23["modelUrl"], bytes: modelStats[shortModelName].sizeLoadedWeights });
    loaded = true;
  } catch (err) {
    log("error loading model:", modelUrl, err);
  }
  if (loaded && options.cacheModels && options.cacheSupported && !modelStats[shortModelName].inCache) {
    try {
      const saveResult = await model23.save(cachedModelName);
      if (options.debug)
        log("model saved:", cachedModelName, saveResult);
    } catch (err) {
      log("error saving model:", modelUrl, err);
    }
  }
  return model23;
}
var version = "3.0.1";
var config2 = {
  name: "humangl",
  priority: 999,
  canvas: null,
  gl: null,
  extensions: [],
  webGLattr: {
    alpha: false,
    antialias: false,
    premultipliedAlpha: false,
    preserveDrawingBuffer: false,
    depth: false,
    stencil: false,
    failIfMajorPerformanceCaveat: false,
    desynchronized: true
  }
};
function extensions() {
  const gl2 = config2.gl;
  if (!gl2)
    return;
  config2.extensions = gl2.getSupportedExtensions();
}
function register(instance) {
  var _a2;
  if (instance.config.backend !== "humangl")
    return;
  if (config2.name in cr().registry && !((_a2 = config2 == null ? void 0 : config2.gl) == null ? void 0 : _a2.getParameter(config2.gl.VERSION))) {
    log("humangl error: backend invalid context");
    instance.models.reset();
  }
  if (!Fie(config2.name)) {
    try {
      config2.canvas = canvas(100, 100);
    } catch (err) {
      log("humangl error: cannot create canvas:", err);
      return;
    }
    try {
      config2.gl = config2.canvas.getContext("webgl2", config2.webGLattr);
      if (!config2.gl) {
        log("humangl error: cannot get webgl context");
        return;
      }
      const glv2 = config2.gl.getParameter(config2.gl.VERSION).includes("2.0");
      if (!glv2) {
        log("backend override: using fallback webgl backend as webgl 2.0 is not detected");
        instance.config.backend = "webgl";
        return;
      }
      if (config2.canvas) {
        config2.canvas.addEventListener("webglcontextlost", (e) => {
          log("humangl error:", e.type);
          log("possible browser memory leak using webgl or conflict with multiple backend registrations");
          instance.emit("error");
          throw new Error("backend error: webgl context lost");
        });
        config2.canvas.addEventListener("webglcontextrestored", (e) => {
          log("humangl error: context restored:", e);
        });
        config2.canvas.addEventListener("webglcontextcreationerror", (e) => {
          log("humangl error: context create:", e);
        });
      }
    } catch (err) {
      log("humangl error: cannot get webgl context:", err);
      return;
    }
    try {
      RS(2, config2.gl);
    } catch (err) {
      log("humangl error: cannot set webgl context:", err);
      return;
    }
    try {
      const ctx = new Fu(config2.gl);
      Ci(config2.name, () => new Bi(ctx), config2.priority);
    } catch (err) {
      log("humangl error: cannot register webgl backend:", err);
      return;
    }
    try {
      const kernels = Am("webgl");
      kernels.forEach((kernelConfig) => {
        const newKernelConfig = { ...kernelConfig, backendName: config2.name };
        Ia(newKernelConfig);
      });
    } catch (err) {
      log("humangl error: cannot update webgl backend registration:", err);
      return;
    }
    try {
      if (O().flagRegistry.WEBGL_VERSION)
        O().set("WEBGL_VERSION", 2);
    } catch (err) {
      log("humangl error: cannot set WebGL backend flags:", err);
      return;
    }
    extensions();
    const backend = Oie();
    const current = typeof backend["gpgpu"] !== "undefined" ? backend["getGPGPUContext"]().gl : null;
    if (current) {
      if (instance.config.debug)
        log("humangl backend registered:", { webgl: current.getParameter(current.VERSION), renderer: current.getParameter(current.RENDERER) });
    } else {
      log("humangl error: no current gl context:", current, config2.gl);
    }
  }
}
var constants = {
  tf255: 255,
  tf1: 1,
  tf2: 2,
  tf05: 0.5,
  tf127: 127.5,
  rgb: [0.2989, 0.587, 0.114]
};
function init() {
  constants.tf255 = be(255, "float32");
  constants.tf1 = be(1, "float32");
  constants.tf2 = be(2, "float32");
  constants.tf05 = be(0.5, "float32");
  constants.tf127 = be(127.5, "float32");
  constants.rgb = mr([0.2989, 0.587, 0.114], "float32");
}
async function getBestBackend() {
  var _a2;
  await env.updateBackend();
  if ((_a2 = env.tensorflow) == null ? void 0 : _a2.version)
    return "tensorflow";
  if (env.webgpu.supported && env.webgpu.backend)
    return "webgpu";
  if (env.webgl.supported && env.webgl.backend)
    return "webgl";
  if (env.wasm.supported && env.wasm.backend)
    return "wasm";
  return "cpu";
}
function registerCustomOps(config3) {
  const newKernels = [];
  if (!env.kernels.includes("mod")) {
    const kernelMod = {
      kernelName: "Mod",
      backendName: Aie(),
      kernelFunc: (op2) => Ee(() => Ne(op2.inputs.a, ae(Ge(op2.inputs.a, op2.inputs.b), op2.inputs.b)))
    };
    Ia(kernelMod);
    env.kernels.push("mod");
    newKernels.push("mod");
  }
  if (!env.kernels.includes("floormod")) {
    const kernelFloorMod = {
      kernelName: "FloorMod",
      backendName: Aie(),
      kernelFunc: (op2) => Ee(() => xe(ae(Jm(op2.inputs.a, op2.inputs.b), op2.inputs.b), wk(op2.inputs.a, op2.inputs.b)))
    };
    Ia(kernelFloorMod);
    env.kernels.push("floormod");
    newKernels.push("floormod");
  }
  if (!env.kernels.includes("rotatewithoffset") && config3.softwareKernels) {
    const kernelRotateWithOffset = {
      kernelName: "RotateWithOffset",
      backendName: Aie(),
      kernelFunc: (op2) => Ee(() => {
        const backend = Aie();
        Eie("cpu");
        const t6 = uq.rotateWithOffset(op2.inputs.image, op2.attrs.radians, op2.attrs.fillValue, op2.attrs.center);
        Eie(backend);
        return t6;
      })
    };
    Ia(kernelRotateWithOffset);
    env.kernels.push("rotatewithoffset");
    newKernels.push("rotatewithoffset");
  }
  if (newKernels.length > 0 && config3.debug)
    log("registered kernels:", newKernels);
}
var defaultFlags = {};
async function check(instance, force = false) {
  var _a2;
  instance.state = "backend";
  if (((_a2 = instance.config.backend) == null ? void 0 : _a2.length) === 0)
    instance.config.backend = await getBestBackend();
  if (force || env.initial || instance.config.backend && instance.config.backend.length > 0 && Aie() !== instance.config.backend) {
    const timeStamp = now();
    if (instance.config.backend && instance.config.backend.length > 0) {
      if (typeof window === "undefined" && typeof WorkerGlobalScope !== "undefined" && instance.config.debug) {
        if (instance.config.debug)
          log("running inside web worker");
      }
      if (env.browser && instance.config.backend === "tensorflow") {
        if (instance.config.debug)
          log("override: backend set to tensorflow while running in browser");
        instance.config.backend = "webgl";
      }
      if (env.node && (instance.config.backend === "webgl" || instance.config.backend === "humangl")) {
        if (instance.config.debug)
          log(`override: backend set to ${instance.config.backend} while running in nodejs`);
        instance.config.backend = "tensorflow";
      }
      if (env.browser && instance.config.backend === "webgpu") {
        if (typeof navigator === "undefined" || typeof navigator.gpu === "undefined") {
          log("override: backend set to webgpu but browser does not support webgpu");
          instance.config.backend = "webgl";
        } else {
          const adapter = await navigator.gpu.requestAdapter();
          if (instance.config.debug)
            log("enumerated webgpu adapter:", adapter);
          if (!adapter) {
            log("override: backend set to webgpu but browser reports no available gpu");
            instance.config.backend = "webgl";
          } else {
            const adapterInfo = "requestAdapterInfo" in adapter ? await adapter.requestAdapterInfo() : void 0;
            log("webgpu adapter info:", adapterInfo);
          }
        }
      }
      let available = Object.keys(cr().registryFactory);
      if (instance.config.backend === "humangl" && !available.includes("humangl")) {
        register(instance);
        available = Object.keys(cr().registryFactory);
      }
      if (instance.config.debug)
        log("available backends:", available);
      if (!available.includes(instance.config.backend)) {
        log(`error: backend ${instance.config.backend} not found in registry`);
        instance.config.backend = env.node ? "tensorflow" : "webgl";
        if (instance.config.debug)
          log(`override: setting backend ${instance.config.backend}`);
      }
      if (instance.config.debug)
        log("setting backend:", [instance.config.backend]);
      if (instance.config.backend === "wasm") {
        if (O().flagRegistry.CANVAS2D_WILL_READ_FREQUENTLY)
          O().set("CANVAS2D_WILL_READ_FREQUENTLY", true);
        if (instance.config.debug)
          log("wasm path:", instance.config.wasmPath);
        if (typeof vee !== "undefined")
          vee(instance.config.wasmPath, instance.config.wasmPlatformFetch);
        else
          throw new Error("backend error: attempting to use wasm backend but wasm path is not set");
        let mt = false;
        let simd = false;
        try {
          mt = await O().getAsync("WASM_HAS_MULTITHREAD_SUPPORT");
          simd = await O().getAsync("WASM_HAS_SIMD_SUPPORT");
          if (instance.config.debug)
            log(`wasm execution: ${simd ? "simd" : "no simd"} ${mt ? "multithreaded" : "singlethreaded"}`);
          if (instance.config.debug && !simd)
            log("warning: wasm simd support is not enabled");
        } catch (e) {
          log("wasm detection failed");
        }
      }
      try {
        await Eie(instance.config.backend);
        await $ie();
      } catch (err) {
        log("error: cannot set backend:", instance.config.backend, err);
        return false;
      }
      if (instance.config.debug)
        defaultFlags = JSON.parse(JSON.stringify(O().flags));
    }
    if (Aie() === "humangl" || Aie() === "webgl") {
      if (O().flagRegistry.WEBGL_USE_SHAPES_UNIFORMS)
        O().set("WEBGL_USE_SHAPES_UNIFORMS", true);
      if (O().flagRegistry.WEBGL_EXP_CONV)
        O().set("WEBGL_EXP_CONV", true);
      if (instance.config.debug && typeof instance.config.deallocate !== "undefined" && instance.config.deallocate) {
        log("changing webgl: WEBGL_DELETE_TEXTURE_THRESHOLD:", true);
        O().set("WEBGL_DELETE_TEXTURE_THRESHOLD", 0);
      }
    }
    if (Aie() === "webgpu") {
    }
    if (instance.config.debug) {
      const newFlags = O().flags;
      const updatedFlags = {};
      for (const key of Object.keys(newFlags)) {
        if (defaultFlags[key] === newFlags[key])
          continue;
        updatedFlags[key] = newFlags[key];
      }
      if (instance.config.debug && Object.keys(updatedFlags).length > 0)
        log("backend:", Aie(), "flags:", updatedFlags);
    }
    if (instance.config.flags && Object.keys(instance.config.flags).length > 0) {
      if (instance.config.debug)
        log("flags:", instance.config["flags"]);
      for (const [key, val] of Object.entries(instance.config.flags)) {
        O().set(key, val);
      }
    }
    wie();
    init();
    instance.performance.initBackend = Math.trunc(now() - timeStamp);
    instance.config.backend = Aie();
    await env.updateBackend();
    registerCustomOps(instance.config);
    env.initial = false;
  }
  return true;
}
function fakeOps(kernelNames, config3) {
  for (const kernelName of kernelNames) {
    const kernelConfig = {
      kernelName,
      backendName: config3.backend,
      kernelFunc: (param) => {
        var _a2;
        if (config3.debug)
          log("kernelFunc", kernelName, config3.backend, param);
        return (_a2 = param == null ? void 0 : param.inputs) == null ? void 0 : _a2.info;
      }
    };
    Ia(kernelConfig);
  }
  env.kernels = Am(Aie()).map((kernel) => kernel.kernelName.toLowerCase());
}
var draw_exports = {};
__export(draw_exports, {
  all: () => all,
  body: () => body,
  canvas: () => canvas2,
  face: () => face,
  gesture: () => gesture,
  hand: () => hand,
  init: () => init2,
  object: () => object,
  options: () => options2,
  person: () => person
});
var getCanvasContext = (input) => {
  if (!input)
    log("draw error: invalid canvas");
  else if (!input.getContext)
    log("draw error: canvas context not defined");
  else {
    const ctx = input.getContext("2d");
    if (!ctx)
      log("draw error: cannot get canvas context");
    else
      return ctx;
  }
  return null;
};
var rad2deg = (theta) => Math.round(theta * 180 / Math.PI);
var replace = (str, source, target) => str.replace(source, typeof target === "number" ? target.toFixed(1) : target);
var colorDepth = (z8, opt) => {
  if (!opt.useDepth || typeof z8 === "undefined")
    return opt.color;
  const rgb2 = Uint8ClampedArray.from([127 + 2 * z8, 127 - 2 * z8, 255]);
  return `rgba(${rgb2[0]}, ${rgb2[1]}, ${rgb2[2]}, ${opt.alpha})`;
};
function labels(ctx, str, startX, startY, localOptions2) {
  const line = str.replace(/\[.*\]/g, "").split("\n").map((l) => l.trim());
  const x = Math.max(0, startX);
  for (let i = line.length - 1; i >= 0; i--) {
    const y10 = i * localOptions2.lineHeight + startY;
    if (localOptions2.shadowColor && localOptions2.shadowColor !== "") {
      ctx.fillStyle = localOptions2.shadowColor;
      ctx.fillText(line[i], x + 5, y10 + 16);
    }
    ctx.fillStyle = localOptions2.labelColor;
    ctx.fillText(line[i], x + 4, y10 + 15);
  }
}
function point(ctx, x, y10, z8, localOptions2) {
  ctx.fillStyle = colorDepth(z8, localOptions2);
  ctx.beginPath();
  ctx.arc(x, y10, localOptions2.pointSize, 0, 2 * Math.PI);
  ctx.fill();
}
function rect(ctx, x, y10, width, height, localOptions2) {
  ctx.beginPath();
  ctx.lineWidth = localOptions2.lineWidth;
  if (localOptions2.useCurves) {
    const cx2 = (x + x + width) / 2;
    const cy = (y10 + y10 + height) / 2;
    ctx.ellipse(cx2, cy, width / 2, height / 2, 0, 0, 2 * Math.PI);
  } else {
    ctx.moveTo(x + localOptions2.roundRect, y10);
    ctx.lineTo(x + width - localOptions2.roundRect, y10);
    ctx.quadraticCurveTo(x + width, y10, x + width, y10 + localOptions2.roundRect);
    ctx.lineTo(x + width, y10 + height - localOptions2.roundRect);
    ctx.quadraticCurveTo(x + width, y10 + height, x + width - localOptions2.roundRect, y10 + height);
    ctx.lineTo(x + localOptions2.roundRect, y10 + height);
    ctx.quadraticCurveTo(x, y10 + height, x, y10 + height - localOptions2.roundRect);
    ctx.lineTo(x, y10 + localOptions2.roundRect);
    ctx.quadraticCurveTo(x, y10, x + localOptions2.roundRect, y10);
    ctx.closePath();
  }
  ctx.stroke();
}
function lines(ctx, points, localOptions2) {
  if (points.length < 2)
    return;
  ctx.beginPath();
  ctx.moveTo(points[0][0], points[0][1]);
  for (const pt of points) {
    ctx.strokeStyle = colorDepth(pt[2] || 0, localOptions2);
    ctx.lineTo(Math.trunc(pt[0]), Math.trunc(pt[1]));
  }
  ctx.stroke();
  if (localOptions2.fillPolygons) {
    ctx.closePath();
    ctx.fill();
  }
}
function curves(ctx, points, localOptions2) {
  if (points.length < 2)
    return;
  ctx.lineWidth = localOptions2.lineWidth;
  if (!localOptions2.useCurves || points.length <= 2) {
    lines(ctx, points, localOptions2);
    return;
  }
  ctx.moveTo(points[0][0], points[0][1]);
  for (let i = 0; i < points.length - 2; i++) {
    const xc2 = (points[i][0] + points[i + 1][0]) / 2;
    const yc2 = (points[i][1] + points[i + 1][1]) / 2;
    ctx.quadraticCurveTo(points[i][0], points[i][1], xc2, yc2);
  }
  ctx.quadraticCurveTo(points[points.length - 2][0], points[points.length - 2][1], points[points.length - 1][0], points[points.length - 1][1]);
  ctx.stroke();
  if (localOptions2.fillPolygons) {
    ctx.closePath();
    ctx.fill();
  }
}
function arrow(ctx, from, to2, radius = 5) {
  let angle;
  let x;
  let y10;
  ctx.beginPath();
  ctx.moveTo(from[0], from[1]);
  ctx.lineTo(to2[0], to2[1]);
  angle = Math.atan2(to2[1] - from[1], to2[0] - from[0]);
  x = radius * Math.cos(angle) + to2[0];
  y10 = radius * Math.sin(angle) + to2[1];
  ctx.moveTo(x, y10);
  angle += 1 / 3 * (2 * Math.PI);
  x = radius * Math.cos(angle) + to2[0];
  y10 = radius * Math.sin(angle) + to2[1];
  ctx.lineTo(x, y10);
  angle += 1 / 3 * (2 * Math.PI);
  x = radius * Math.cos(angle) + to2[0];
  y10 = radius * Math.sin(angle) + to2[1];
  ctx.lineTo(x, y10);
  ctx.closePath();
  ctx.stroke();
  ctx.fill();
}
var options2 = {
  color: "rgba(173, 216, 230, 0.6)",
  labelColor: "rgba(173, 216, 230, 1)",
  shadowColor: "black",
  alpha: 0.5,
  font: 'small-caps 16px "Segoe UI"',
  lineHeight: 18,
  lineWidth: 4,
  pointSize: 2,
  roundRect: 8,
  drawPoints: false,
  drawLabels: true,
  drawBoxes: true,
  drawAttention: true,
  drawGestures: true,
  drawPolygons: true,
  drawGaze: true,
  fillPolygons: false,
  useDepth: true,
  useCurves: false,
  faceLabels: "",
  bodyLabels: "",
  bodyPartLabels: "",
  objectLabels: "",
  handLabels: "",
  fingerLabels: "",
  gestureLabels: ""
};
var meshAnnotations = {
  silhouette: [
    10,
    338,
    297,
    332,
    284,
    251,
    389,
    356,
    454,
    323,
    361,
    288,
    397,
    365,
    379,
    378,
    400,
    377,
    152,
    148,
    176,
    149,
    150,
    136,
    172,
    58,
    132,
    93,
    234,
    127,
    162,
    21,
    54,
    103,
    67,
    109
  ],
  lipsUpperOuter: [185, 40, 39, 37, 0, 267, 269, 270, 409],
  lipsLowerOuter: [61, 146, 91, 181, 84, 17, 314, 405, 321, 375, 291],
  lipsUpperInner: [191, 80, 81, 82, 13, 312, 311, 310, 415],
  lipsLowerInner: [78, 95, 88, 178, 87, 14, 317, 402, 318, 324, 308],
  lipsLowerSemiOuter: [76, 77, 90, 180, 85, 16, 315, 404, 320, 307, 306],
  lipsUpperSemiOuter: [184, 74, 73, 72, 11, 302, 303, 304, 408],
  lipsLowerSemiInner: [62, 96, 89, 179, 86, 15, 316, 403, 319, 325, 292],
  lipsUpperSemiInner: [183, 42, 41, 38, 12, 268, 271, 272, 407],
  rightEyeUpper0: [246, 161, 160, 159, 158, 157, 173],
  rightEyeLower0: [33, 7, 163, 144, 145, 153, 154, 155, 133],
  rightEyeUpper1: [247, 30, 29, 27, 28, 56, 190],
  rightEyeLower1: [130, 25, 110, 24, 23, 22, 26, 112, 243],
  rightEyeUpper2: [113, 225, 224, 223, 222, 221, 189],
  rightEyeLower2: [226, 31, 228, 229, 230, 231, 232, 233, 244],
  rightEyeLower3: [143, 111, 117, 118, 119, 120, 121, 128, 245],
  rightEyebrowUpper: [156, 70, 63, 105, 66, 107, 55, 193],
  rightEyebrowLower: [35, 124, 46, 53, 52, 65],
  rightEyeIris: [473, 474, 475, 476, 477],
  leftEyeUpper0: [466, 388, 387, 386, 385, 384, 398],
  leftEyeLower0: [263, 249, 390, 373, 374, 380, 381, 382, 362],
  leftEyeUpper1: [467, 260, 259, 257, 258, 286, 414],
  leftEyeLower1: [359, 255, 339, 254, 253, 252, 256, 341, 463],
  leftEyeUpper2: [342, 445, 444, 443, 442, 441, 413],
  leftEyeLower2: [446, 261, 448, 449, 450, 451, 452, 453, 464],
  leftEyeLower3: [372, 340, 346, 347, 348, 349, 350, 357, 465],
  leftEyebrowUpper: [383, 300, 293, 334, 296, 336, 285, 417],
  leftEyebrowLower: [265, 353, 276, 283, 282, 295],
  leftEyeIris: [468, 469, 470, 471, 472],
  midwayBetweenEyes: [168],
  noseTip: [1],
  noseBottom: [2],
  noseRightCorner: [98],
  noseLeftCorner: [327],
  rightCheek: [205],
  leftCheek: [425]
};
var meshLandmarks = {
  count: 468,
  mouth: 13,
  symmetryLine: [13, meshAnnotations.midwayBetweenEyes[0]]
};
var blazeFaceLandmarks = {
  leftEye: 0,
  rightEye: 1,
  nose: 2,
  mouth: 3,
  leftEar: 4,
  rightEar: 5,
  symmetryLine: [3, 2]
};
var irisIndices = [
  { key: "EyeUpper0", indices: [9, 10, 11, 12, 13, 14, 15] },
  { key: "EyeUpper1", indices: [25, 26, 27, 28, 29, 30, 31] },
  { key: "EyeUpper2", indices: [41, 42, 43, 44, 45, 46, 47] },
  { key: "EyeLower0", indices: [0, 1, 2, 3, 4, 5, 6, 7, 8] },
  { key: "EyeLower1", indices: [16, 17, 18, 19, 20, 21, 22, 23, 24] },
  { key: "EyeLower2", indices: [32, 33, 34, 35, 36, 37, 38, 39, 40] },
  { key: "EyeLower3", indices: [54, 55, 56, 57, 58, 59, 60, 61, 62] },
  { key: "EyebrowUpper", indices: [63, 64, 65, 66, 67, 68, 69, 70] },
  { key: "EyebrowLower", indices: [48, 49, 50, 51, 52, 53] }
];
var UV468 = [
  [0.499976992607117, 0.652534008026123],
  [0.500025987625122, 0.547487020492554],
  [0.499974012374878, 0.602371990680695],
  [0.482113003730774, 0.471979022026062],
  [0.500150978565216, 0.527155995368958],
  [0.499909996986389, 0.498252987861633],
  [0.499523013830185, 0.40106201171875],
  [0.289712011814117, 0.380764007568359],
  [0.499954998493195, 0.312398016452789],
  [0.499987006187439, 0.269918978214264],
  [0.500023007392883, 0.107050001621246],
  [0.500023007392883, 0.666234016418457],
  [0.5000159740448, 0.679224014282227],
  [0.500023007392883, 0.692348003387451],
  [0.499976992607117, 0.695277988910675],
  [0.499976992607117, 0.70593398809433],
  [0.499976992607117, 0.719385027885437],
  [0.499976992607117, 0.737019002437592],
  [0.499967992305756, 0.781370997428894],
  [0.499816000461578, 0.562981009483337],
  [0.473773002624512, 0.573909997940063],
  [0.104906998574734, 0.254140973091125],
  [0.365929991006851, 0.409575998783112],
  [0.338757991790771, 0.41302502155304],
  [0.311120003461838, 0.409460008144379],
  [0.274657994508743, 0.389131009578705],
  [0.393361985683441, 0.403706014156342],
  [0.345234006643295, 0.344011008739471],
  [0.370094001293182, 0.346076011657715],
  [0.319321990013123, 0.347265005111694],
  [0.297903001308441, 0.353591024875641],
  [0.24779200553894, 0.410809993743896],
  [0.396889001131058, 0.842755019664764],
  [0.280097991228104, 0.375599980354309],
  [0.106310002505779, 0.399955987930298],
  [0.2099249958992, 0.391353011131287],
  [0.355807989835739, 0.534406006336212],
  [0.471751004457474, 0.65040397644043],
  [0.474155008792877, 0.680191993713379],
  [0.439785003662109, 0.657229006290436],
  [0.414617002010345, 0.66654098033905],
  [0.450374007225037, 0.680860996246338],
  [0.428770989179611, 0.682690978050232],
  [0.374971002340317, 0.727805018424988],
  [0.486716985702515, 0.547628998756409],
  [0.485300987958908, 0.527395009994507],
  [0.257764995098114, 0.314490020275116],
  [0.401223003864288, 0.455172002315521],
  [0.429818987846375, 0.548614978790283],
  [0.421351999044418, 0.533740997314453],
  [0.276895999908447, 0.532056987285614],
  [0.483370006084442, 0.499586999416351],
  [0.33721199631691, 0.282882988452911],
  [0.296391993761063, 0.293242990970612],
  [0.169294998049736, 0.193813979625702],
  [0.447580009698868, 0.302609980106354],
  [0.392390012741089, 0.353887975215912],
  [0.354490011930466, 0.696784019470215],
  [0.067304998636246, 0.730105042457581],
  [0.442739009857178, 0.572826027870178],
  [0.457098007202148, 0.584792017936707],
  [0.381974011659622, 0.694710969924927],
  [0.392388999462128, 0.694203019142151],
  [0.277076005935669, 0.271932005882263],
  [0.422551989555359, 0.563233017921448],
  [0.385919004678726, 0.281364023685455],
  [0.383103013038635, 0.255840003490448],
  [0.331431001424789, 0.119714021682739],
  [0.229923993349075, 0.232002973556519],
  [0.364500999450684, 0.189113974571228],
  [0.229622006416321, 0.299540996551514],
  [0.173287004232407, 0.278747975826263],
  [0.472878992557526, 0.666198015213013],
  [0.446828007698059, 0.668527007102966],
  [0.422762006521225, 0.673889994621277],
  [0.445307999849319, 0.580065965652466],
  [0.388103008270264, 0.693961024284363],
  [0.403039008378983, 0.706539988517761],
  [0.403629004955292, 0.693953037261963],
  [0.460041999816895, 0.557139039039612],
  [0.431158006191254, 0.692366003990173],
  [0.452181994915009, 0.692366003990173],
  [0.475387006998062, 0.692366003990173],
  [0.465828001499176, 0.779190003871918],
  [0.472328990697861, 0.736225962638855],
  [0.473087012767792, 0.717857003211975],
  [0.473122000694275, 0.704625964164734],
  [0.473033010959625, 0.695277988910675],
  [0.427942007780075, 0.695277988910675],
  [0.426479011774063, 0.703539967536926],
  [0.423162013292313, 0.711845993995667],
  [0.4183090031147, 0.720062971115112],
  [0.390094995498657, 0.639572978019714],
  [0.013953999616206, 0.560034036636353],
  [0.499913990497589, 0.58014702796936],
  [0.413199990987778, 0.69539999961853],
  [0.409626007080078, 0.701822996139526],
  [0.468080013990402, 0.601534962654114],
  [0.422728985548019, 0.585985004901886],
  [0.463079988956451, 0.593783974647522],
  [0.37211999297142, 0.47341400384903],
  [0.334562003612518, 0.496073007583618],
  [0.411671012639999, 0.546965003013611],
  [0.242175996303558, 0.14767599105835],
  [0.290776997804642, 0.201445996761322],
  [0.327338010072708, 0.256527006626129],
  [0.399509996175766, 0.748921036720276],
  [0.441727995872498, 0.261676013469696],
  [0.429764986038208, 0.187834024429321],
  [0.412198007106781, 0.108901023864746],
  [0.288955003023148, 0.398952007293701],
  [0.218936994671822, 0.435410976409912],
  [0.41278201341629, 0.398970007896423],
  [0.257135003805161, 0.355440020561218],
  [0.427684992551804, 0.437960982322693],
  [0.448339998722076, 0.536936044692993],
  [0.178560003638268, 0.45755398273468],
  [0.247308000922203, 0.457193970680237],
  [0.286267012357712, 0.467674970626831],
  [0.332827985286713, 0.460712015628815],
  [0.368755996227264, 0.447206974029541],
  [0.398963987827301, 0.432654976844788],
  [0.476410001516342, 0.405806005001068],
  [0.189241006970406, 0.523923993110657],
  [0.228962004184723, 0.348950982093811],
  [0.490725994110107, 0.562400996685028],
  [0.404670000076294, 0.485132992267609],
  [0.019469000399113, 0.401564002037048],
  [0.426243007183075, 0.420431017875671],
  [0.396993011236191, 0.548797011375427],
  [0.266469985246658, 0.376977026462555],
  [0.439121007919312, 0.51895797252655],
  [0.032313998788595, 0.644356966018677],
  [0.419054001569748, 0.387154996395111],
  [0.462783008813858, 0.505746960639954],
  [0.238978996872902, 0.779744982719421],
  [0.198220998048782, 0.831938028335571],
  [0.107550002634525, 0.540755033493042],
  [0.183610007166862, 0.740257024765015],
  [0.134409993886948, 0.333683013916016],
  [0.385764002799988, 0.883153975009918],
  [0.490967005491257, 0.579378008842468],
  [0.382384985685349, 0.508572995662689],
  [0.174399003386497, 0.397670984268188],
  [0.318785011768341, 0.39623498916626],
  [0.343364000320435, 0.400596976280212],
  [0.396100014448166, 0.710216999053955],
  [0.187885001301765, 0.588537991046906],
  [0.430987000465393, 0.944064974784851],
  [0.318993002176285, 0.898285031318665],
  [0.266247987747192, 0.869701027870178],
  [0.500023007392883, 0.190576016902924],
  [0.499976992607117, 0.954452991485596],
  [0.366169989109039, 0.398822009563446],
  [0.393207013607025, 0.39553701877594],
  [0.410373002290726, 0.391080021858215],
  [0.194993004202843, 0.342101991176605],
  [0.388664990663528, 0.362284004688263],
  [0.365961998701096, 0.355970978736877],
  [0.343364000320435, 0.355356991291046],
  [0.318785011768341, 0.35834002494812],
  [0.301414996385574, 0.363156020641327],
  [0.058132998645306, 0.319076001644135],
  [0.301414996385574, 0.387449026107788],
  [0.499987989664078, 0.618434011936188],
  [0.415838003158569, 0.624195992946625],
  [0.445681989192963, 0.566076993942261],
  [0.465844005346298, 0.620640993118286],
  [0.49992299079895, 0.351523995399475],
  [0.288718998432159, 0.819945991039276],
  [0.335278987884521, 0.852819979190826],
  [0.440512001514435, 0.902418971061707],
  [0.128294005990028, 0.791940987110138],
  [0.408771991729736, 0.373893976211548],
  [0.455606997013092, 0.451801002025604],
  [0.499877005815506, 0.908990025520325],
  [0.375436991453171, 0.924192011356354],
  [0.11421000212431, 0.615022003650665],
  [0.448662012815475, 0.695277988910675],
  [0.4480200111866, 0.704632043838501],
  [0.447111994028091, 0.715808033943176],
  [0.444831997156143, 0.730794012546539],
  [0.430011987686157, 0.766808986663818],
  [0.406787008047104, 0.685672998428345],
  [0.400738000869751, 0.681069016456604],
  [0.392399996519089, 0.677703022956848],
  [0.367855995893478, 0.663918972015381],
  [0.247923001646996, 0.601333022117615],
  [0.452769994735718, 0.420849978923798],
  [0.43639200925827, 0.359887003898621],
  [0.416164010763168, 0.368713974952698],
  [0.413385987281799, 0.692366003990173],
  [0.228018000721931, 0.683571994304657],
  [0.468268007040024, 0.352671027183533],
  [0.411361992359161, 0.804327011108398],
  [0.499989002943039, 0.469825029373169],
  [0.479153990745544, 0.442654013633728],
  [0.499974012374878, 0.439637005329132],
  [0.432112008333206, 0.493588984012604],
  [0.499886006116867, 0.866917014122009],
  [0.49991300702095, 0.821729004383087],
  [0.456548988819122, 0.819200992584229],
  [0.344549000263214, 0.745438992977142],
  [0.37890899181366, 0.574010014533997],
  [0.374292999505997, 0.780184984207153],
  [0.319687992334366, 0.570737957954407],
  [0.357154995203018, 0.604269981384277],
  [0.295284003019333, 0.621580958366394],
  [0.447750002145767, 0.862477004528046],
  [0.410986006259918, 0.508723020553589],
  [0.31395098567009, 0.775308012962341],
  [0.354128003120422, 0.812552988529205],
  [0.324548006057739, 0.703992962837219],
  [0.189096003770828, 0.646299958229065],
  [0.279776990413666, 0.71465802192688],
  [0.1338230073452, 0.682700991630554],
  [0.336768001317978, 0.644733011722565],
  [0.429883986711502, 0.466521978378296],
  [0.455527991056442, 0.548622965812683],
  [0.437114000320435, 0.558896005153656],
  [0.467287987470627, 0.529924988746643],
  [0.414712011814117, 0.335219979286194],
  [0.37704598903656, 0.322777986526489],
  [0.344107985496521, 0.320150971412659],
  [0.312875986099243, 0.32233202457428],
  [0.283526003360748, 0.333190023899078],
  [0.241245999932289, 0.382785975933075],
  [0.102986000478268, 0.468762993812561],
  [0.267612010240555, 0.424560010433197],
  [0.297879010438919, 0.433175981044769],
  [0.333433985710144, 0.433878004550934],
  [0.366427004337311, 0.426115989685059],
  [0.396012008190155, 0.416696012020111],
  [0.420121014118195, 0.41022801399231],
  [0.007561000064015, 0.480777025222778],
  [0.432949006557465, 0.569517970085144],
  [0.458638995885849, 0.479089021682739],
  [0.473466008901596, 0.545744001865387],
  [0.476087987422943, 0.563830018043518],
  [0.468472003936768, 0.555056989192963],
  [0.433990985155106, 0.582361996173859],
  [0.483518004417419, 0.562983989715576],
  [0.482482999563217, 0.57784903049469],
  [0.42645001411438, 0.389798998832703],
  [0.438998997211456, 0.39649498462677],
  [0.450067013502121, 0.400434017181396],
  [0.289712011814117, 0.368252992630005],
  [0.276670008897781, 0.363372981548309],
  [0.517862021923065, 0.471948027610779],
  [0.710287988185883, 0.380764007568359],
  [0.526226997375488, 0.573909997940063],
  [0.895093023777008, 0.254140973091125],
  [0.634069979190826, 0.409575998783112],
  [0.661242008209229, 0.41302502155304],
  [0.688880026340485, 0.409460008144379],
  [0.725341975688934, 0.389131009578705],
  [0.606630027294159, 0.40370500087738],
  [0.654766023159027, 0.344011008739471],
  [0.629905998706818, 0.346076011657715],
  [0.680678009986877, 0.347265005111694],
  [0.702096998691559, 0.353591024875641],
  [0.75221198797226, 0.410804986953735],
  [0.602918028831482, 0.842862963676453],
  [0.719901978969574, 0.375599980354309],
  [0.893692970275879, 0.399959981441498],
  [0.790081977844238, 0.391354024410248],
  [0.643998026847839, 0.534487962722778],
  [0.528249025344849, 0.65040397644043],
  [0.525849997997284, 0.680191040039062],
  [0.560214996337891, 0.657229006290436],
  [0.585384011268616, 0.66654098033905],
  [0.549625992774963, 0.680860996246338],
  [0.57122802734375, 0.682691991329193],
  [0.624852001667023, 0.72809898853302],
  [0.513050019741058, 0.547281980514526],
  [0.51509702205658, 0.527251958847046],
  [0.742246985435486, 0.314507007598877],
  [0.598631024360657, 0.454979002475739],
  [0.570338010787964, 0.548575043678284],
  [0.578631997108459, 0.533622980117798],
  [0.723087012767792, 0.532054007053375],
  [0.516445994377136, 0.499638974666595],
  [0.662801027297974, 0.282917976379395],
  [0.70362401008606, 0.293271005153656],
  [0.830704987049103, 0.193813979625702],
  [0.552385985851288, 0.302568018436432],
  [0.607609987258911, 0.353887975215912],
  [0.645429015159607, 0.696707010269165],
  [0.932694971561432, 0.730105042457581],
  [0.557260990142822, 0.572826027870178],
  [0.542901992797852, 0.584792017936707],
  [0.6180260181427, 0.694710969924927],
  [0.607590973377228, 0.694203019142151],
  [0.722943007946014, 0.271963000297546],
  [0.577413976192474, 0.563166975975037],
  [0.614082992076874, 0.281386971473694],
  [0.616907000541687, 0.255886018276215],
  [0.668509006500244, 0.119913995265961],
  [0.770092010498047, 0.232020974159241],
  [0.635536015033722, 0.189248979091644],
  [0.77039098739624, 0.299556016921997],
  [0.826722025871277, 0.278755009174347],
  [0.527121007442474, 0.666198015213013],
  [0.553171992301941, 0.668527007102966],
  [0.577238023281097, 0.673889994621277],
  [0.554691970348358, 0.580065965652466],
  [0.611896991729736, 0.693961024284363],
  [0.59696102142334, 0.706539988517761],
  [0.596370995044708, 0.693953037261963],
  [0.539958000183105, 0.557139039039612],
  [0.568841993808746, 0.692366003990173],
  [0.547818005084991, 0.692366003990173],
  [0.52461302280426, 0.692366003990173],
  [0.534089982509613, 0.779141008853912],
  [0.527670979499817, 0.736225962638855],
  [0.526912987232208, 0.717857003211975],
  [0.526877999305725, 0.704625964164734],
  [0.526966989040375, 0.695277988910675],
  [0.572058022022247, 0.695277988910675],
  [0.573521018028259, 0.703539967536926],
  [0.57683801651001, 0.711845993995667],
  [0.581691026687622, 0.720062971115112],
  [0.609944999217987, 0.639909982681274],
  [0.986046016216278, 0.560034036636353],
  [0.5867999792099, 0.69539999961853],
  [0.590372025966644, 0.701822996139526],
  [0.531915009021759, 0.601536989212036],
  [0.577268004417419, 0.585934996604919],
  [0.536915004253387, 0.593786001205444],
  [0.627542972564697, 0.473352015018463],
  [0.665585994720459, 0.495950996875763],
  [0.588353991508484, 0.546862006187439],
  [0.757824003696442, 0.14767599105835],
  [0.709249973297119, 0.201507985591888],
  [0.672684013843536, 0.256581008434296],
  [0.600408971309662, 0.74900496006012],
  [0.55826598405838, 0.261672019958496],
  [0.570303976535797, 0.187870979309082],
  [0.588165998458862, 0.109044015407562],
  [0.711045026779175, 0.398952007293701],
  [0.781069993972778, 0.435405015945435],
  [0.587247014045715, 0.398931980133057],
  [0.742869973182678, 0.355445981025696],
  [0.572156012058258, 0.437651991844177],
  [0.55186802148819, 0.536570012569427],
  [0.821442008018494, 0.457556009292603],
  [0.752701997756958, 0.457181990146637],
  [0.71375697851181, 0.467626988887787],
  [0.66711300611496, 0.460672974586487],
  [0.631101012229919, 0.447153985500336],
  [0.6008620262146, 0.432473003864288],
  [0.523481011390686, 0.405627012252808],
  [0.810747981071472, 0.523926019668579],
  [0.771045982837677, 0.348959028720856],
  [0.509127020835876, 0.562718033790588],
  [0.595292985439301, 0.485023975372314],
  [0.980530977249146, 0.401564002037048],
  [0.573499977588654, 0.420000016689301],
  [0.602994978427887, 0.548687994480133],
  [0.733529984951019, 0.376977026462555],
  [0.560611009597778, 0.519016981124878],
  [0.967685997486115, 0.644356966018677],
  [0.580985009670258, 0.387160003185272],
  [0.537728011608124, 0.505385041236877],
  [0.760966002941132, 0.779752969741821],
  [0.801778972148895, 0.831938028335571],
  [0.892440974712372, 0.54076099395752],
  [0.816350996494293, 0.740260004997253],
  [0.865594983100891, 0.333687007427216],
  [0.614073991775513, 0.883246004581451],
  [0.508952975273132, 0.579437971115112],
  [0.617941975593567, 0.508316040039062],
  [0.825608015060425, 0.397674977779388],
  [0.681214988231659, 0.39623498916626],
  [0.656635999679565, 0.400596976280212],
  [0.603900015354156, 0.710216999053955],
  [0.81208598613739, 0.588539004325867],
  [0.56801301240921, 0.944564998149872],
  [0.681007981300354, 0.898285031318665],
  [0.733752012252808, 0.869701027870178],
  [0.633830010890961, 0.398822009563446],
  [0.606792986392975, 0.39553701877594],
  [0.589659988880157, 0.391062021255493],
  [0.805015981197357, 0.342108011245728],
  [0.611334979534149, 0.362284004688263],
  [0.634037971496582, 0.355970978736877],
  [0.656635999679565, 0.355356991291046],
  [0.681214988231659, 0.35834002494812],
  [0.698584973812103, 0.363156020641327],
  [0.941866993904114, 0.319076001644135],
  [0.698584973812103, 0.387449026107788],
  [0.584177017211914, 0.624107003211975],
  [0.554318010807037, 0.566076993942261],
  [0.534153997898102, 0.62064003944397],
  [0.711217999458313, 0.819975018501282],
  [0.664629995822906, 0.852871000766754],
  [0.559099972248077, 0.902631998062134],
  [0.871706008911133, 0.791940987110138],
  [0.591234028339386, 0.373893976211548],
  [0.544341027736664, 0.451583981513977],
  [0.624562978744507, 0.924192011356354],
  [0.88577002286911, 0.615028977394104],
  [0.551338016986847, 0.695277988910675],
  [0.551980018615723, 0.704632043838501],
  [0.552887976169586, 0.715808033943176],
  [0.555167973041534, 0.730794012546539],
  [0.569944024085999, 0.767035007476807],
  [0.593203008174896, 0.685675978660583],
  [0.599261999130249, 0.681069016456604],
  [0.607599973678589, 0.677703022956848],
  [0.631937980651855, 0.663500010967255],
  [0.752032995223999, 0.601315021514893],
  [0.547226011753082, 0.420395016670227],
  [0.563543975353241, 0.359827995300293],
  [0.583841025829315, 0.368713974952698],
  [0.586614012718201, 0.692366003990173],
  [0.771915018558502, 0.683578014373779],
  [0.531597018241882, 0.352482974529266],
  [0.588370978832245, 0.804440975189209],
  [0.52079701423645, 0.442565023899078],
  [0.567984998226166, 0.493479013442993],
  [0.543282985687256, 0.819254994392395],
  [0.655317008495331, 0.745514988899231],
  [0.621008992195129, 0.574018001556396],
  [0.625559985637665, 0.78031200170517],
  [0.680198013782501, 0.570719003677368],
  [0.64276397228241, 0.604337990283966],
  [0.704662978649139, 0.621529996395111],
  [0.552012026309967, 0.862591981887817],
  [0.589071989059448, 0.508637011051178],
  [0.685944974422455, 0.775357007980347],
  [0.645735025405884, 0.812640011310577],
  [0.675342977046967, 0.703978002071381],
  [0.810858011245728, 0.646304965019226],
  [0.72012197971344, 0.714666962623596],
  [0.866151988506317, 0.682704985141754],
  [0.663187026977539, 0.644596993923187],
  [0.570082008838654, 0.466325998306274],
  [0.544561982154846, 0.548375964164734],
  [0.562758982181549, 0.558784961700439],
  [0.531987011432648, 0.530140042304993],
  [0.585271000862122, 0.335177004337311],
  [0.622952997684479, 0.32277899980545],
  [0.655896008014679, 0.320163011550903],
  [0.687132000923157, 0.322345972061157],
  [0.716481983661652, 0.333200991153717],
  [0.758756995201111, 0.382786989212036],
  [0.897013008594513, 0.468769013881683],
  [0.732392013072968, 0.424547016620636],
  [0.70211398601532, 0.433162987232208],
  [0.66652500629425, 0.433866024017334],
  [0.633504986763, 0.426087975502014],
  [0.603875994682312, 0.416586995124817],
  [0.579657971858978, 0.409945011138916],
  [0.992439985275269, 0.480777025222778],
  [0.567192018032074, 0.569419980049133],
  [0.54136598110199, 0.478899002075195],
  [0.526564002037048, 0.546118021011353],
  [0.523913025856018, 0.563830018043518],
  [0.531529009342194, 0.555056989192963],
  [0.566035985946655, 0.582329034805298],
  [0.51631098985672, 0.563053965568542],
  [0.5174720287323, 0.577877044677734],
  [0.573594987392426, 0.389806985855103],
  [0.560697972774506, 0.395331978797913],
  [0.549755990505219, 0.399751007556915],
  [0.710287988185883, 0.368252992630005],
  [0.723330020904541, 0.363372981548309]
];
var TRI468 = [
  127,
  34,
  139,
  11,
  0,
  37,
  232,
  231,
  120,
  72,
  37,
  39,
  128,
  121,
  47,
  232,
  121,
  128,
  104,
  69,
  67,
  175,
  171,
  148,
  157,
  154,
  155,
  118,
  50,
  101,
  73,
  39,
  40,
  9,
  151,
  108,
  48,
  115,
  131,
  194,
  204,
  211,
  74,
  40,
  185,
  80,
  42,
  183,
  40,
  92,
  186,
  230,
  229,
  118,
  202,
  212,
  214,
  83,
  18,
  17,
  76,
  61,
  146,
  160,
  29,
  30,
  56,
  157,
  173,
  106,
  204,
  194,
  135,
  214,
  192,
  203,
  165,
  98,
  21,
  71,
  68,
  51,
  45,
  4,
  144,
  24,
  23,
  77,
  146,
  91,
  205,
  50,
  187,
  201,
  200,
  18,
  91,
  106,
  182,
  90,
  91,
  181,
  85,
  84,
  17,
  206,
  203,
  36,
  148,
  171,
  140,
  92,
  40,
  39,
  193,
  189,
  244,
  159,
  158,
  28,
  247,
  246,
  161,
  236,
  3,
  196,
  54,
  68,
  104,
  193,
  168,
  8,
  117,
  228,
  31,
  189,
  193,
  55,
  98,
  97,
  99,
  126,
  47,
  100,
  166,
  79,
  218,
  155,
  154,
  26,
  209,
  49,
  131,
  135,
  136,
  150,
  47,
  126,
  217,
  223,
  52,
  53,
  45,
  51,
  134,
  211,
  170,
  140,
  67,
  69,
  108,
  43,
  106,
  91,
  230,
  119,
  120,
  226,
  130,
  247,
  63,
  53,
  52,
  238,
  20,
  242,
  46,
  70,
  156,
  78,
  62,
  96,
  46,
  53,
  63,
  143,
  34,
  227,
  173,
  155,
  133,
  123,
  117,
  111,
  44,
  125,
  19,
  236,
  134,
  51,
  216,
  206,
  205,
  154,
  153,
  22,
  39,
  37,
  167,
  200,
  201,
  208,
  36,
  142,
  100,
  57,
  212,
  202,
  20,
  60,
  99,
  28,
  158,
  157,
  35,
  226,
  113,
  160,
  159,
  27,
  204,
  202,
  210,
  113,
  225,
  46,
  43,
  202,
  204,
  62,
  76,
  77,
  137,
  123,
  116,
  41,
  38,
  72,
  203,
  129,
  142,
  64,
  98,
  240,
  49,
  102,
  64,
  41,
  73,
  74,
  212,
  216,
  207,
  42,
  74,
  184,
  169,
  170,
  211,
  170,
  149,
  176,
  105,
  66,
  69,
  122,
  6,
  168,
  123,
  147,
  187,
  96,
  77,
  90,
  65,
  55,
  107,
  89,
  90,
  180,
  101,
  100,
  120,
  63,
  105,
  104,
  93,
  137,
  227,
  15,
  86,
  85,
  129,
  102,
  49,
  14,
  87,
  86,
  55,
  8,
  9,
  100,
  47,
  121,
  145,
  23,
  22,
  88,
  89,
  179,
  6,
  122,
  196,
  88,
  95,
  96,
  138,
  172,
  136,
  215,
  58,
  172,
  115,
  48,
  219,
  42,
  80,
  81,
  195,
  3,
  51,
  43,
  146,
  61,
  171,
  175,
  199,
  81,
  82,
  38,
  53,
  46,
  225,
  144,
  163,
  110,
  246,
  33,
  7,
  52,
  65,
  66,
  229,
  228,
  117,
  34,
  127,
  234,
  107,
  108,
  69,
  109,
  108,
  151,
  48,
  64,
  235,
  62,
  78,
  191,
  129,
  209,
  126,
  111,
  35,
  143,
  163,
  161,
  246,
  117,
  123,
  50,
  222,
  65,
  52,
  19,
  125,
  141,
  221,
  55,
  65,
  3,
  195,
  197,
  25,
  7,
  33,
  220,
  237,
  44,
  70,
  71,
  139,
  122,
  193,
  245,
  247,
  130,
  33,
  71,
  21,
  162,
  153,
  158,
  159,
  170,
  169,
  150,
  188,
  174,
  196,
  216,
  186,
  92,
  144,
  160,
  161,
  2,
  97,
  167,
  141,
  125,
  241,
  164,
  167,
  37,
  72,
  38,
  12,
  145,
  159,
  160,
  38,
  82,
  13,
  63,
  68,
  71,
  226,
  35,
  111,
  158,
  153,
  154,
  101,
  50,
  205,
  206,
  92,
  165,
  209,
  198,
  217,
  165,
  167,
  97,
  220,
  115,
  218,
  133,
  112,
  243,
  239,
  238,
  241,
  214,
  135,
  169,
  190,
  173,
  133,
  171,
  208,
  32,
  125,
  44,
  237,
  86,
  87,
  178,
  85,
  86,
  179,
  84,
  85,
  180,
  83,
  84,
  181,
  201,
  83,
  182,
  137,
  93,
  132,
  76,
  62,
  183,
  61,
  76,
  184,
  57,
  61,
  185,
  212,
  57,
  186,
  214,
  207,
  187,
  34,
  143,
  156,
  79,
  239,
  237,
  123,
  137,
  177,
  44,
  1,
  4,
  201,
  194,
  32,
  64,
  102,
  129,
  213,
  215,
  138,
  59,
  166,
  219,
  242,
  99,
  97,
  2,
  94,
  141,
  75,
  59,
  235,
  24,
  110,
  228,
  25,
  130,
  226,
  23,
  24,
  229,
  22,
  23,
  230,
  26,
  22,
  231,
  112,
  26,
  232,
  189,
  190,
  243,
  221,
  56,
  190,
  28,
  56,
  221,
  27,
  28,
  222,
  29,
  27,
  223,
  30,
  29,
  224,
  247,
  30,
  225,
  238,
  79,
  20,
  166,
  59,
  75,
  60,
  75,
  240,
  147,
  177,
  215,
  20,
  79,
  166,
  187,
  147,
  213,
  112,
  233,
  244,
  233,
  128,
  245,
  128,
  114,
  188,
  114,
  217,
  174,
  131,
  115,
  220,
  217,
  198,
  236,
  198,
  131,
  134,
  177,
  132,
  58,
  143,
  35,
  124,
  110,
  163,
  7,
  228,
  110,
  25,
  356,
  389,
  368,
  11,
  302,
  267,
  452,
  350,
  349,
  302,
  303,
  269,
  357,
  343,
  277,
  452,
  453,
  357,
  333,
  332,
  297,
  175,
  152,
  377,
  384,
  398,
  382,
  347,
  348,
  330,
  303,
  304,
  270,
  9,
  336,
  337,
  278,
  279,
  360,
  418,
  262,
  431,
  304,
  408,
  409,
  310,
  415,
  407,
  270,
  409,
  410,
  450,
  348,
  347,
  422,
  430,
  434,
  313,
  314,
  17,
  306,
  307,
  375,
  387,
  388,
  260,
  286,
  414,
  398,
  335,
  406,
  418,
  364,
  367,
  416,
  423,
  358,
  327,
  251,
  284,
  298,
  281,
  5,
  4,
  373,
  374,
  253,
  307,
  320,
  321,
  425,
  427,
  411,
  421,
  313,
  18,
  321,
  405,
  406,
  320,
  404,
  405,
  315,
  16,
  17,
  426,
  425,
  266,
  377,
  400,
  369,
  322,
  391,
  269,
  417,
  465,
  464,
  386,
  257,
  258,
  466,
  260,
  388,
  456,
  399,
  419,
  284,
  332,
  333,
  417,
  285,
  8,
  346,
  340,
  261,
  413,
  441,
  285,
  327,
  460,
  328,
  355,
  371,
  329,
  392,
  439,
  438,
  382,
  341,
  256,
  429,
  420,
  360,
  364,
  394,
  379,
  277,
  343,
  437,
  443,
  444,
  283,
  275,
  440,
  363,
  431,
  262,
  369,
  297,
  338,
  337,
  273,
  375,
  321,
  450,
  451,
  349,
  446,
  342,
  467,
  293,
  334,
  282,
  458,
  461,
  462,
  276,
  353,
  383,
  308,
  324,
  325,
  276,
  300,
  293,
  372,
  345,
  447,
  382,
  398,
  362,
  352,
  345,
  340,
  274,
  1,
  19,
  456,
  248,
  281,
  436,
  427,
  425,
  381,
  256,
  252,
  269,
  391,
  393,
  200,
  199,
  428,
  266,
  330,
  329,
  287,
  273,
  422,
  250,
  462,
  328,
  258,
  286,
  384,
  265,
  353,
  342,
  387,
  259,
  257,
  424,
  431,
  430,
  342,
  353,
  276,
  273,
  335,
  424,
  292,
  325,
  307,
  366,
  447,
  345,
  271,
  303,
  302,
  423,
  266,
  371,
  294,
  455,
  460,
  279,
  278,
  294,
  271,
  272,
  304,
  432,
  434,
  427,
  272,
  407,
  408,
  394,
  430,
  431,
  395,
  369,
  400,
  334,
  333,
  299,
  351,
  417,
  168,
  352,
  280,
  411,
  325,
  319,
  320,
  295,
  296,
  336,
  319,
  403,
  404,
  330,
  348,
  349,
  293,
  298,
  333,
  323,
  454,
  447,
  15,
  16,
  315,
  358,
  429,
  279,
  14,
  15,
  316,
  285,
  336,
  9,
  329,
  349,
  350,
  374,
  380,
  252,
  318,
  402,
  403,
  6,
  197,
  419,
  318,
  319,
  325,
  367,
  364,
  365,
  435,
  367,
  397,
  344,
  438,
  439,
  272,
  271,
  311,
  195,
  5,
  281,
  273,
  287,
  291,
  396,
  428,
  199,
  311,
  271,
  268,
  283,
  444,
  445,
  373,
  254,
  339,
  263,
  466,
  249,
  282,
  334,
  296,
  449,
  347,
  346,
  264,
  447,
  454,
  336,
  296,
  299,
  338,
  10,
  151,
  278,
  439,
  455,
  292,
  407,
  415,
  358,
  371,
  355,
  340,
  345,
  372,
  390,
  249,
  466,
  346,
  347,
  280,
  442,
  443,
  282,
  19,
  94,
  370,
  441,
  442,
  295,
  248,
  419,
  197,
  263,
  255,
  359,
  440,
  275,
  274,
  300,
  383,
  368,
  351,
  412,
  465,
  263,
  467,
  466,
  301,
  368,
  389,
  380,
  374,
  386,
  395,
  378,
  379,
  412,
  351,
  419,
  436,
  426,
  322,
  373,
  390,
  388,
  2,
  164,
  393,
  370,
  462,
  461,
  164,
  0,
  267,
  302,
  11,
  12,
  374,
  373,
  387,
  268,
  12,
  13,
  293,
  300,
  301,
  446,
  261,
  340,
  385,
  384,
  381,
  330,
  266,
  425,
  426,
  423,
  391,
  429,
  355,
  437,
  391,
  327,
  326,
  440,
  457,
  438,
  341,
  382,
  362,
  459,
  457,
  461,
  434,
  430,
  394,
  414,
  463,
  362,
  396,
  369,
  262,
  354,
  461,
  457,
  316,
  403,
  402,
  315,
  404,
  403,
  314,
  405,
  404,
  313,
  406,
  405,
  421,
  418,
  406,
  366,
  401,
  361,
  306,
  408,
  407,
  291,
  409,
  408,
  287,
  410,
  409,
  432,
  436,
  410,
  434,
  416,
  411,
  264,
  368,
  383,
  309,
  438,
  457,
  352,
  376,
  401,
  274,
  275,
  4,
  421,
  428,
  262,
  294,
  327,
  358,
  433,
  416,
  367,
  289,
  455,
  439,
  462,
  370,
  326,
  2,
  326,
  370,
  305,
  460,
  455,
  254,
  449,
  448,
  255,
  261,
  446,
  253,
  450,
  449,
  252,
  451,
  450,
  256,
  452,
  451,
  341,
  453,
  452,
  413,
  464,
  463,
  441,
  413,
  414,
  258,
  442,
  441,
  257,
  443,
  442,
  259,
  444,
  443,
  260,
  445,
  444,
  467,
  342,
  445,
  459,
  458,
  250,
  289,
  392,
  290,
  290,
  328,
  460,
  376,
  433,
  435,
  250,
  290,
  392,
  411,
  416,
  433,
  341,
  463,
  464,
  453,
  464,
  465,
  357,
  465,
  412,
  343,
  412,
  399,
  360,
  363,
  440,
  437,
  399,
  456,
  420,
  456,
  363,
  401,
  435,
  288,
  372,
  383,
  353,
  339,
  255,
  249,
  448,
  261,
  255,
  133,
  243,
  190,
  133,
  155,
  112,
  33,
  246,
  247,
  33,
  130,
  25,
  398,
  384,
  286,
  362,
  398,
  414,
  362,
  463,
  341,
  263,
  359,
  467,
  263,
  249,
  255,
  466,
  467,
  260,
  75,
  60,
  166,
  238,
  239,
  79,
  162,
  127,
  139,
  72,
  11,
  37,
  121,
  232,
  120,
  73,
  72,
  39,
  114,
  128,
  47,
  233,
  232,
  128,
  103,
  104,
  67,
  152,
  175,
  148,
  173,
  157,
  155,
  119,
  118,
  101,
  74,
  73,
  40,
  107,
  9,
  108,
  49,
  48,
  131,
  32,
  194,
  211,
  184,
  74,
  185,
  191,
  80,
  183,
  185,
  40,
  186,
  119,
  230,
  118,
  210,
  202,
  214,
  84,
  83,
  17,
  77,
  76,
  146,
  161,
  160,
  30,
  190,
  56,
  173,
  182,
  106,
  194,
  138,
  135,
  192,
  129,
  203,
  98,
  54,
  21,
  68,
  5,
  51,
  4,
  145,
  144,
  23,
  90,
  77,
  91,
  207,
  205,
  187,
  83,
  201,
  18,
  181,
  91,
  182,
  180,
  90,
  181,
  16,
  85,
  17,
  205,
  206,
  36,
  176,
  148,
  140,
  165,
  92,
  39,
  245,
  193,
  244,
  27,
  159,
  28,
  30,
  247,
  161,
  174,
  236,
  196,
  103,
  54,
  104,
  55,
  193,
  8,
  111,
  117,
  31,
  221,
  189,
  55,
  240,
  98,
  99,
  142,
  126,
  100,
  219,
  166,
  218,
  112,
  155,
  26,
  198,
  209,
  131,
  169,
  135,
  150,
  114,
  47,
  217,
  224,
  223,
  53,
  220,
  45,
  134,
  32,
  211,
  140,
  109,
  67,
  108,
  146,
  43,
  91,
  231,
  230,
  120,
  113,
  226,
  247,
  105,
  63,
  52,
  241,
  238,
  242,
  124,
  46,
  156,
  95,
  78,
  96,
  70,
  46,
  63,
  116,
  143,
  227,
  116,
  123,
  111,
  1,
  44,
  19,
  3,
  236,
  51,
  207,
  216,
  205,
  26,
  154,
  22,
  165,
  39,
  167,
  199,
  200,
  208,
  101,
  36,
  100,
  43,
  57,
  202,
  242,
  20,
  99,
  56,
  28,
  157,
  124,
  35,
  113,
  29,
  160,
  27,
  211,
  204,
  210,
  124,
  113,
  46,
  106,
  43,
  204,
  96,
  62,
  77,
  227,
  137,
  116,
  73,
  41,
  72,
  36,
  203,
  142,
  235,
  64,
  240,
  48,
  49,
  64,
  42,
  41,
  74,
  214,
  212,
  207,
  183,
  42,
  184,
  210,
  169,
  211,
  140,
  170,
  176,
  104,
  105,
  69,
  193,
  122,
  168,
  50,
  123,
  187,
  89,
  96,
  90,
  66,
  65,
  107,
  179,
  89,
  180,
  119,
  101,
  120,
  68,
  63,
  104,
  234,
  93,
  227,
  16,
  15,
  85,
  209,
  129,
  49,
  15,
  14,
  86,
  107,
  55,
  9,
  120,
  100,
  121,
  153,
  145,
  22,
  178,
  88,
  179,
  197,
  6,
  196,
  89,
  88,
  96,
  135,
  138,
  136,
  138,
  215,
  172,
  218,
  115,
  219,
  41,
  42,
  81,
  5,
  195,
  51,
  57,
  43,
  61,
  208,
  171,
  199,
  41,
  81,
  38,
  224,
  53,
  225,
  24,
  144,
  110,
  105,
  52,
  66,
  118,
  229,
  117,
  227,
  34,
  234,
  66,
  107,
  69,
  10,
  109,
  151,
  219,
  48,
  235,
  183,
  62,
  191,
  142,
  129,
  126,
  116,
  111,
  143,
  7,
  163,
  246,
  118,
  117,
  50,
  223,
  222,
  52,
  94,
  19,
  141,
  222,
  221,
  65,
  196,
  3,
  197,
  45,
  220,
  44,
  156,
  70,
  139,
  188,
  122,
  245,
  139,
  71,
  162,
  145,
  153,
  159,
  149,
  170,
  150,
  122,
  188,
  196,
  206,
  216,
  92,
  163,
  144,
  161,
  164,
  2,
  167,
  242,
  141,
  241,
  0,
  164,
  37,
  11,
  72,
  12,
  144,
  145,
  160,
  12,
  38,
  13,
  70,
  63,
  71,
  31,
  226,
  111,
  157,
  158,
  154,
  36,
  101,
  205,
  203,
  206,
  165,
  126,
  209,
  217,
  98,
  165,
  97,
  237,
  220,
  218,
  237,
  239,
  241,
  210,
  214,
  169,
  140,
  171,
  32,
  241,
  125,
  237,
  179,
  86,
  178,
  180,
  85,
  179,
  181,
  84,
  180,
  182,
  83,
  181,
  194,
  201,
  182,
  177,
  137,
  132,
  184,
  76,
  183,
  185,
  61,
  184,
  186,
  57,
  185,
  216,
  212,
  186,
  192,
  214,
  187,
  139,
  34,
  156,
  218,
  79,
  237,
  147,
  123,
  177,
  45,
  44,
  4,
  208,
  201,
  32,
  98,
  64,
  129,
  192,
  213,
  138,
  235,
  59,
  219,
  141,
  242,
  97,
  97,
  2,
  141,
  240,
  75,
  235,
  229,
  24,
  228,
  31,
  25,
  226,
  230,
  23,
  229,
  231,
  22,
  230,
  232,
  26,
  231,
  233,
  112,
  232,
  244,
  189,
  243,
  189,
  221,
  190,
  222,
  28,
  221,
  223,
  27,
  222,
  224,
  29,
  223,
  225,
  30,
  224,
  113,
  247,
  225,
  99,
  60,
  240,
  213,
  147,
  215,
  60,
  20,
  166,
  192,
  187,
  213,
  243,
  112,
  244,
  244,
  233,
  245,
  245,
  128,
  188,
  188,
  114,
  174,
  134,
  131,
  220,
  174,
  217,
  236,
  236,
  198,
  134,
  215,
  177,
  58,
  156,
  143,
  124,
  25,
  110,
  7,
  31,
  228,
  25,
  264,
  356,
  368,
  0,
  11,
  267,
  451,
  452,
  349,
  267,
  302,
  269,
  350,
  357,
  277,
  350,
  452,
  357,
  299,
  333,
  297,
  396,
  175,
  377,
  381,
  384,
  382,
  280,
  347,
  330,
  269,
  303,
  270,
  151,
  9,
  337,
  344,
  278,
  360,
  424,
  418,
  431,
  270,
  304,
  409,
  272,
  310,
  407,
  322,
  270,
  410,
  449,
  450,
  347,
  432,
  422,
  434,
  18,
  313,
  17,
  291,
  306,
  375,
  259,
  387,
  260,
  424,
  335,
  418,
  434,
  364,
  416,
  391,
  423,
  327,
  301,
  251,
  298,
  275,
  281,
  4,
  254,
  373,
  253,
  375,
  307,
  321,
  280,
  425,
  411,
  200,
  421,
  18,
  335,
  321,
  406,
  321,
  320,
  405,
  314,
  315,
  17,
  423,
  426,
  266,
  396,
  377,
  369,
  270,
  322,
  269,
  413,
  417,
  464,
  385,
  386,
  258,
  248,
  456,
  419,
  298,
  284,
  333,
  168,
  417,
  8,
  448,
  346,
  261,
  417,
  413,
  285,
  326,
  327,
  328,
  277,
  355,
  329,
  309,
  392,
  438,
  381,
  382,
  256,
  279,
  429,
  360,
  365,
  364,
  379,
  355,
  277,
  437,
  282,
  443,
  283,
  281,
  275,
  363,
  395,
  431,
  369,
  299,
  297,
  337,
  335,
  273,
  321,
  348,
  450,
  349,
  359,
  446,
  467,
  283,
  293,
  282,
  250,
  458,
  462,
  300,
  276,
  383,
  292,
  308,
  325,
  283,
  276,
  293,
  264,
  372,
  447,
  346,
  352,
  340,
  354,
  274,
  19,
  363,
  456,
  281,
  426,
  436,
  425,
  380,
  381,
  252,
  267,
  269,
  393,
  421,
  200,
  428,
  371,
  266,
  329,
  432,
  287,
  422,
  290,
  250,
  328,
  385,
  258,
  384,
  446,
  265,
  342,
  386,
  387,
  257,
  422,
  424,
  430,
  445,
  342,
  276,
  422,
  273,
  424,
  306,
  292,
  307,
  352,
  366,
  345,
  268,
  271,
  302,
  358,
  423,
  371,
  327,
  294,
  460,
  331,
  279,
  294,
  303,
  271,
  304,
  436,
  432,
  427,
  304,
  272,
  408,
  395,
  394,
  431,
  378,
  395,
  400,
  296,
  334,
  299,
  6,
  351,
  168,
  376,
  352,
  411,
  307,
  325,
  320,
  285,
  295,
  336,
  320,
  319,
  404,
  329,
  330,
  349,
  334,
  293,
  333,
  366,
  323,
  447,
  316,
  15,
  315,
  331,
  358,
  279,
  317,
  14,
  316,
  8,
  285,
  9,
  277,
  329,
  350,
  253,
  374,
  252,
  319,
  318,
  403,
  351,
  6,
  419,
  324,
  318,
  325,
  397,
  367,
  365,
  288,
  435,
  397,
  278,
  344,
  439,
  310,
  272,
  311,
  248,
  195,
  281,
  375,
  273,
  291,
  175,
  396,
  199,
  312,
  311,
  268,
  276,
  283,
  445,
  390,
  373,
  339,
  295,
  282,
  296,
  448,
  449,
  346,
  356,
  264,
  454,
  337,
  336,
  299,
  337,
  338,
  151,
  294,
  278,
  455,
  308,
  292,
  415,
  429,
  358,
  355,
  265,
  340,
  372,
  388,
  390,
  466,
  352,
  346,
  280,
  295,
  442,
  282,
  354,
  19,
  370,
  285,
  441,
  295,
  195,
  248,
  197,
  457,
  440,
  274,
  301,
  300,
  368,
  417,
  351,
  465,
  251,
  301,
  389,
  385,
  380,
  386,
  394,
  395,
  379,
  399,
  412,
  419,
  410,
  436,
  322,
  387,
  373,
  388,
  326,
  2,
  393,
  354,
  370,
  461,
  393,
  164,
  267,
  268,
  302,
  12,
  386,
  374,
  387,
  312,
  268,
  13,
  298,
  293,
  301,
  265,
  446,
  340,
  380,
  385,
  381,
  280,
  330,
  425,
  322,
  426,
  391,
  420,
  429,
  437,
  393,
  391,
  326,
  344,
  440,
  438,
  458,
  459,
  461,
  364,
  434,
  394,
  428,
  396,
  262,
  274,
  354,
  457,
  317,
  316,
  402,
  316,
  315,
  403,
  315,
  314,
  404,
  314,
  313,
  405,
  313,
  421,
  406,
  323,
  366,
  361,
  292,
  306,
  407,
  306,
  291,
  408,
  291,
  287,
  409,
  287,
  432,
  410,
  427,
  434,
  411,
  372,
  264,
  383,
  459,
  309,
  457,
  366,
  352,
  401,
  1,
  274,
  4,
  418,
  421,
  262,
  331,
  294,
  358,
  435,
  433,
  367,
  392,
  289,
  439,
  328,
  462,
  326,
  94,
  2,
  370,
  289,
  305,
  455,
  339,
  254,
  448,
  359,
  255,
  446,
  254,
  253,
  449,
  253,
  252,
  450,
  252,
  256,
  451,
  256,
  341,
  452,
  414,
  413,
  463,
  286,
  441,
  414,
  286,
  258,
  441,
  258,
  257,
  442,
  257,
  259,
  443,
  259,
  260,
  444,
  260,
  467,
  445,
  309,
  459,
  250,
  305,
  289,
  290,
  305,
  290,
  460,
  401,
  376,
  435,
  309,
  250,
  392,
  376,
  411,
  433,
  453,
  341,
  464,
  357,
  453,
  465,
  343,
  357,
  412,
  437,
  343,
  399,
  344,
  360,
  440,
  420,
  437,
  456,
  360,
  420,
  363,
  361,
  401,
  288,
  265,
  372,
  353,
  390,
  339,
  249,
  339,
  448,
  255
];
var VTX68 = [
  127,
  234,
  132,
  58,
  172,
  150,
  149,
  148,
  152,
  377,
  378,
  379,
  397,
  288,
  361,
  454,
  356,
  70,
  63,
  105,
  66,
  107,
  336,
  296,
  334,
  293,
  300,
  168,
  6,
  195,
  4,
  98,
  97,
  2,
  326,
  327,
  33,
  160,
  158,
  133,
  153,
  144,
  362,
  385,
  387,
  263,
  373,
  380,
  57,
  40,
  37,
  0,
  267,
  270,
  287,
  321,
  314,
  17,
  84,
  91,
  78,
  81,
  13,
  311,
  308,
  402,
  14,
  178
];
var VTX33 = [33, 133, 362, 263, 1, 62, 308, 159, 145, 386, 374, 6, 102, 331, 2, 13, 14, 70, 105, 107, 336, 334, 300, 54, 10, 284, 50, 280, 234, 454, 58, 288, 152];
var VTX7 = [33, 133, 362, 263, 1, 78, 308];
var UV68 = VTX68.map((x) => UV468[x]);
var UV33 = VTX33.map((x) => UV468[x]);
var UV7 = VTX7.map((x) => UV468[x]);
function connectionsToIndices(connections) {
  const indices = connections.map((connection) => connection[0]);
  indices.push(connections[connections.length - 1][1]);
  return indices;
}
var pairsLips = [
  [61, 146],
  [146, 91],
  [91, 181],
  [181, 84],
  [84, 17],
  [17, 314],
  [314, 405],
  [405, 321],
  [321, 375],
  [375, 291],
  [61, 185],
  [185, 40],
  [40, 39],
  [39, 37],
  [37, 0],
  [0, 267],
  [267, 269],
  [269, 270],
  [270, 409],
  [409, 291],
  [78, 95],
  [95, 88],
  [88, 178],
  [178, 87],
  [87, 14],
  [14, 317],
  [317, 402],
  [402, 318],
  [318, 324],
  [324, 308],
  [78, 191],
  [191, 80],
  [80, 81],
  [81, 82],
  [82, 13],
  [13, 312],
  [312, 311],
  [311, 310],
  [310, 415],
  [415, 308]
];
var pairsLeftEye = [[263, 249], [249, 390], [390, 373], [373, 374], [374, 380], [380, 381], [381, 382], [382, 362], [263, 466], [466, 388], [388, 387], [387, 386], [386, 385], [385, 384], [384, 398], [398, 362]];
var pairsLeftEyebrow = [[276, 283], [283, 282], [282, 295], [295, 285], [300, 293], [293, 334], [334, 296], [296, 336]];
var pairsLeftIris = [[474, 475], [475, 476], [476, 477], [477, 474]];
var pairsRightEye = [[33, 7], [7, 163], [163, 144], [144, 145], [145, 153], [153, 154], [154, 155], [155, 133], [33, 246], [246, 161], [161, 160], [160, 159], [159, 158], [158, 157], [157, 173], [173, 133]];
var pairsRightEyebrow = [[46, 53], [53, 52], [52, 65], [65, 55], [70, 63], [63, 105], [105, 66], [66, 107]];
var pairsRightIris = [[469, 470], [470, 471], [471, 472], [472, 469]];
var pairsFaceContour = [
  [10, 338],
  [338, 297],
  [297, 332],
  [332, 284],
  [284, 251],
  [251, 389],
  [389, 356],
  [356, 454],
  [454, 323],
  [323, 361],
  [361, 288],
  [288, 397],
  [397, 365],
  [365, 379],
  [379, 378],
  [378, 400],
  [400, 377],
  [377, 152],
  [152, 148],
  [148, 176],
  [176, 149],
  [149, 150],
  [150, 136],
  [136, 172],
  [172, 58],
  [58, 132],
  [132, 93],
  [93, 234],
  [234, 127],
  [127, 162],
  [162, 21],
  [21, 54],
  [54, 103],
  [103, 67],
  [67, 109],
  [109, 10]
];
var contourKeypoints = {
  lips: connectionsToIndices(pairsLips),
  leftEye: connectionsToIndices(pairsLeftEye),
  leftEyebrow: connectionsToIndices(pairsLeftEyebrow),
  leftIris: connectionsToIndices(pairsLeftIris),
  rightEye: connectionsToIndices(pairsRightEye),
  rightEyebrow: connectionsToIndices(pairsRightEyebrow),
  rightIris: connectionsToIndices(pairsRightIris),
  faceOval: connectionsToIndices(pairsFaceContour)
};
var LIPS_CONNECTIONS = [
  [61, 146],
  [146, 91],
  [91, 181],
  [181, 84],
  [84, 17],
  [17, 314],
  [314, 405],
  [405, 321],
  [321, 375],
  [375, 291],
  [61, 185],
  [185, 40],
  [40, 39],
  [39, 37],
  [37, 0],
  [0, 267],
  [267, 269],
  [269, 270],
  [270, 409],
  [409, 291],
  [78, 95],
  [95, 88],
  [88, 178],
  [178, 87],
  [87, 14],
  [14, 317],
  [317, 402],
  [402, 318],
  [318, 324],
  [324, 308],
  [78, 191],
  [191, 80],
  [80, 81],
  [81, 82],
  [82, 13],
  [13, 312],
  [312, 311],
  [311, 310],
  [310, 415],
  [415, 308]
];
var LEFT_EYE_CONNECTIONS = [[263, 249], [249, 390], [390, 373], [373, 374], [374, 380], [380, 381], [381, 382], [382, 362], [263, 466], [466, 388], [388, 387], [387, 386], [386, 385], [385, 384], [384, 398], [398, 362]];
var LEFT_EYEBROW_CONNECTIONS = [[276, 283], [283, 282], [282, 295], [295, 285], [300, 293], [293, 334], [334, 296], [296, 336]];
var LEFT_IRIS_CONNECTIONS = [[474, 475], [475, 476], [476, 477], [477, 474]];
var RIGHT_EYE_CONNECTIONS = [[33, 7], [7, 163], [163, 144], [144, 145], [145, 153], [153, 154], [154, 155], [155, 133], [33, 246], [246, 161], [161, 160], [160, 159], [159, 158], [158, 157], [157, 173], [173, 133]];
var RIGHT_EYEBROW_CONNECTIONS = [[46, 53], [53, 52], [52, 65], [65, 55], [70, 63], [63, 105], [105, 66], [66, 107]];
var RIGHT_IRIS_CONNECTIONS = [[469, 470], [470, 471], [471, 472], [472, 469]];
var FACE_OVAL_CONNECTIONS = [
  [10, 338],
  [338, 297],
  [297, 332],
  [332, 284],
  [284, 251],
  [251, 389],
  [389, 356],
  [356, 454],
  [454, 323],
  [323, 361],
  [361, 288],
  [288, 397],
  [397, 365],
  [365, 379],
  [379, 378],
  [378, 400],
  [400, 377],
  [377, 152],
  [152, 148],
  [148, 176],
  [176, 149],
  [149, 150],
  [150, 136],
  [136, 172],
  [172, 58],
  [58, 132],
  [132, 93],
  [93, 234],
  [234, 127],
  [127, 162],
  [162, 21],
  [21, 54],
  [54, 103],
  [103, 67],
  [67, 109],
  [109, 10]
];
function connectionsToIndices2(connections) {
  const indices = connections.map((connection) => connection[0]);
  indices.push(connections[connections.length - 1][1]);
  return indices;
}
var MEDIAPIPE_FACE_MESH_KEYPOINTS_BY_CONTOUR = {
  lips: connectionsToIndices2(LIPS_CONNECTIONS),
  leftEye: connectionsToIndices2(LEFT_EYE_CONNECTIONS),
  leftEyebrow: connectionsToIndices2(LEFT_EYEBROW_CONNECTIONS),
  leftIris: connectionsToIndices2(LEFT_IRIS_CONNECTIONS),
  rightEye: connectionsToIndices2(RIGHT_EYE_CONNECTIONS),
  rightEyebrow: connectionsToIndices2(RIGHT_EYEBROW_CONNECTIONS),
  rightIris: connectionsToIndices2(RIGHT_IRIS_CONNECTIONS),
  faceOval: connectionsToIndices2(FACE_OVAL_CONNECTIONS)
};
var indexLabelPairs = Object.entries(MEDIAPIPE_FACE_MESH_KEYPOINTS_BY_CONTOUR).map(([label, indices]) => indices.map((index2) => [index2, label])).flat();
var MEDIAPIPE_FACE_MESH_KEYPOINTS = new Map(indexLabelPairs);
var LANDMARKS_REFINEMENT_LIPS_CONFIG = [
  61,
  146,
  91,
  181,
  84,
  17,
  314,
  405,
  321,
  375,
  291,
  185,
  40,
  39,
  37,
  0,
  267,
  269,
  270,
  409,
  78,
  95,
  88,
  178,
  87,
  14,
  317,
  402,
  318,
  324,
  308,
  191,
  80,
  81,
  82,
  13,
  312,
  311,
  310,
  415,
  76,
  77,
  90,
  180,
  85,
  16,
  315,
  404,
  320,
  307,
  306,
  184,
  74,
  73,
  72,
  11,
  302,
  303,
  304,
  408,
  62,
  96,
  89,
  179,
  86,
  15,
  316,
  403,
  319,
  325,
  292,
  183,
  42,
  41,
  38,
  12,
  268,
  271,
  272,
  407
];
var LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG = [
  33,
  7,
  163,
  144,
  145,
  153,
  154,
  155,
  133,
  246,
  161,
  160,
  159,
  158,
  157,
  173,
  130,
  25,
  110,
  24,
  23,
  22,
  26,
  112,
  243,
  247,
  30,
  29,
  27,
  28,
  56,
  190,
  226,
  31,
  228,
  229,
  230,
  231,
  232,
  233,
  244,
  113,
  225,
  224,
  223,
  222,
  221,
  189,
  35,
  124,
  46,
  53,
  52,
  65,
  143,
  111,
  117,
  118,
  119,
  120,
  121,
  128,
  245,
  156,
  70,
  63,
  105,
  66,
  107,
  55,
  193
];
var LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG = [
  263,
  249,
  390,
  373,
  374,
  380,
  381,
  382,
  362,
  466,
  388,
  387,
  386,
  385,
  384,
  398,
  359,
  255,
  339,
  254,
  253,
  252,
  256,
  341,
  463,
  467,
  260,
  259,
  257,
  258,
  286,
  414,
  446,
  261,
  448,
  449,
  450,
  451,
  452,
  453,
  464,
  342,
  445,
  444,
  443,
  442,
  441,
  413,
  265,
  353,
  276,
  283,
  282,
  295,
  372,
  340,
  346,
  347,
  348,
  349,
  350,
  357,
  465,
  383,
  300,
  293,
  334,
  296,
  336,
  285,
  417
];
var localOptions;
function drawLabels(f, ctx) {
  var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2;
  if (!localOptions.drawLabels || ((_a2 = localOptions.faceLabels) == null ? void 0 : _a2.length) === 0)
    return;
  let l = localOptions.faceLabels.slice();
  if (f.score)
    l = replace(l, "[score]", 100 * f.score);
  if (f.gender)
    l = replace(l, "[gender]", f.gender);
  if (f.genderScore)
    l = replace(l, "[genderScore]", 100 * f.genderScore);
  if (f.age)
    l = replace(l, "[age]", f.age);
  if (f.distance)
    l = replace(l, "[distance]", 100 * f.distance);
  if (f.real)
    l = replace(l, "[real]", 100 * f.real);
  if (f.live)
    l = replace(l, "[live]", 100 * f.live);
  if (f.emotion && f.emotion.length > 0) {
    const emotion2 = f.emotion.map((a) => `${Math.trunc(100 * a.score)}% ${a.emotion}`);
    if (emotion2.length > 3)
      emotion2.length = 3;
    l = replace(l, "[emotions]", emotion2.join(" "));
  }
  if ((_c2 = (_b2 = f.rotation) == null ? void 0 : _b2.angle) == null ? void 0 : _c2.roll)
    l = replace(l, "[roll]", rad2deg(f.rotation.angle.roll));
  if ((_e2 = (_d2 = f.rotation) == null ? void 0 : _d2.angle) == null ? void 0 : _e2.yaw)
    l = replace(l, "[yaw]", rad2deg(f.rotation.angle.yaw));
  if ((_g2 = (_f2 = f.rotation) == null ? void 0 : _f2.angle) == null ? void 0 : _g2.pitch)
    l = replace(l, "[pitch]", rad2deg(f.rotation.angle.pitch));
  if ((_i2 = (_h2 = f.rotation) == null ? void 0 : _h2.gaze) == null ? void 0 : _i2.bearing)
    l = replace(l, "[gaze]", rad2deg(f.rotation.gaze.bearing));
  labels(ctx, l, f.box[0], f.box[1], localOptions);
}
function drawIrisElipse(f, ctx) {
  var _a2, _b2, _c2, _d2;
  if (((_a2 = f.annotations) == null ? void 0 : _a2.leftEyeIris) && ((_b2 = f.annotations) == null ? void 0 : _b2.leftEyeIris[0])) {
    ctx.strokeStyle = localOptions.useDepth ? "rgba(255, 200, 255, 0.3)" : localOptions.color;
    ctx.beginPath();
    const sizeX = Math.abs(f.annotations.leftEyeIris[3][0] - f.annotations.leftEyeIris[1][0]) / 2;
    const sizeY = Math.abs(f.annotations.leftEyeIris[4][1] - f.annotations.leftEyeIris[2][1]) / 2;
    ctx.ellipse(f.annotations.leftEyeIris[0][0], f.annotations.leftEyeIris[0][1], sizeX, sizeY, 0, 0, 2 * Math.PI);
    ctx.stroke();
    if (localOptions.fillPolygons) {
      ctx.fillStyle = localOptions.useDepth ? "rgba(255, 255, 200, 0.3)" : localOptions.color;
      ctx.fill();
    }
  }
  if (((_c2 = f.annotations) == null ? void 0 : _c2.rightEyeIris) && ((_d2 = f.annotations) == null ? void 0 : _d2.rightEyeIris[0])) {
    ctx.strokeStyle = localOptions.useDepth ? "rgba(255, 200, 255, 0.3)" : localOptions.color;
    ctx.beginPath();
    const sizeX = Math.abs(f.annotations.rightEyeIris[3][0] - f.annotations.rightEyeIris[1][0]) / 2;
    const sizeY = Math.abs(f.annotations.rightEyeIris[4][1] - f.annotations.rightEyeIris[2][1]) / 2;
    ctx.ellipse(f.annotations.rightEyeIris[0][0], f.annotations.rightEyeIris[0][1], sizeX, sizeY, 0, 0, 2 * Math.PI);
    ctx.stroke();
    if (localOptions.fillPolygons) {
      ctx.fillStyle = localOptions.useDepth ? "rgba(255, 255, 200, 0.3)" : localOptions.color;
      ctx.fill();
    }
  }
}
function drawGazeSpheres(f, ctx) {
  var _a2;
  if (localOptions.drawGaze && ((_a2 = f.rotation) == null ? void 0 : _a2.angle) && typeof Path2D !== "undefined") {
    ctx.strokeStyle = "pink";
    const valX = f.box[0] + f.box[2] / 2 - f.box[3] * rad2deg(f.rotation.angle.yaw) / 90;
    const valY = f.box[1] + f.box[3] / 2 + f.box[2] * rad2deg(f.rotation.angle.pitch) / 90;
    const pathV = new Path2D(`
      M ${f.box[0] + f.box[2] / 2} ${f.box[1]}
      C
        ${valX} ${f.box[1]},
        ${valX} ${f.box[1] + f.box[3]},
        ${f.box[0] + f.box[2] / 2} ${f.box[1] + f.box[3]}
    `);
    const pathH = new Path2D(`
      M ${f.box[0]} ${f.box[1] + f.box[3] / 2}
      C 
        ${f.box[0]} ${valY},
        ${f.box[0] + f.box[2]} ${valY},
        ${f.box[0] + f.box[2]} ${f.box[1] + f.box[3] / 2}
    `);
    ctx.stroke(pathH);
    ctx.stroke(pathV);
  }
}
function drawGazeArrows(f, ctx) {
  var _a2;
  if (localOptions.drawGaze && ((_a2 = f.rotation) == null ? void 0 : _a2.gaze.strength) && f.rotation.gaze.bearing && f.annotations.leftEyeIris && f.annotations.rightEyeIris && f.annotations.leftEyeIris[0] && f.annotations.rightEyeIris[0]) {
    ctx.strokeStyle = "pink";
    ctx.fillStyle = "pink";
    const leftGaze = [
      f.annotations.leftEyeIris[0][0] + Math.sin(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[3],
      f.annotations.leftEyeIris[0][1] + Math.cos(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[2]
    ];
    arrow(ctx, [f.annotations.leftEyeIris[0][0], f.annotations.leftEyeIris[0][1]], [leftGaze[0], leftGaze[1]], 4);
    const rightGaze = [
      f.annotations.rightEyeIris[0][0] + Math.sin(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[3],
      f.annotations.rightEyeIris[0][1] + Math.cos(f.rotation.gaze.bearing) * f.rotation.gaze.strength * f.box[2]
    ];
    arrow(ctx, [f.annotations.rightEyeIris[0][0], f.annotations.rightEyeIris[0][1]], [rightGaze[0], rightGaze[1]], 4);
  }
}
function drawFacePolygons(f, ctx) {
  if (localOptions.drawPolygons && f.mesh.length >= 468) {
    ctx.lineWidth = 1;
    for (let i = 0; i < TRI468.length / 3; i++) {
      const points = [TRI468[i * 3 + 0], TRI468[i * 3 + 1], TRI468[i * 3 + 2]].map((index2) => f.mesh[index2]);
      lines(ctx, points, localOptions);
    }
    drawIrisElipse(f, ctx);
  }
}
function drawFacePoints(f, ctx) {
  if (localOptions.drawPoints && f.mesh.length >= 468) {
    for (let i = 0; i < f.mesh.length; i++) {
      point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2], localOptions);
      if (localOptions.drawAttention) {
        if (LANDMARKS_REFINEMENT_LIPS_CONFIG.includes(i))
          point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2] + 127, localOptions);
        if (LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG.includes(i))
          point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2] - 127, localOptions);
        if (LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG.includes(i))
          point(ctx, f.mesh[i][0], f.mesh[i][1], f.mesh[i][2] - 127, localOptions);
      }
    }
  }
}
function drawFaceBoxes(f, ctx) {
  if (localOptions.drawBoxes) {
    rect(ctx, f.box[0], f.box[1], f.box[2], f.box[3], localOptions);
  }
}
function face(inCanvas2, result, drawOptions) {
  localOptions = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.font = localOptions.font;
  ctx.strokeStyle = localOptions.color;
  ctx.fillStyle = localOptions.color;
  for (const f of result) {
    drawFaceBoxes(f, ctx);
    drawLabels(f, ctx);
    if (f.mesh && f.mesh.length > 0) {
      drawFacePoints(f, ctx);
      drawFacePolygons(f, ctx);
      drawGazeSpheres(f, ctx);
      drawGazeArrows(f, ctx);
    }
  }
}
function body(inCanvas2, result, drawOptions) {
  var _a2, _b2;
  const localOptions2 = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  for (let i = 0; i < result.length; i++) {
    ctx.strokeStyle = localOptions2.color;
    ctx.fillStyle = localOptions2.color;
    ctx.lineWidth = localOptions2.lineWidth;
    ctx.font = localOptions2.font;
    if (localOptions2.drawBoxes && result[i].box && result[i].box.length === 4) {
      rect(ctx, result[i].box[0], result[i].box[1], result[i].box[2], result[i].box[3], localOptions2);
      if (localOptions2.drawLabels && ((_a2 = localOptions2.bodyLabels) == null ? void 0 : _a2.length) > 0) {
        let l = localOptions2.bodyLabels.slice();
        l = replace(l, "[score]", 100 * result[i].score);
        labels(ctx, l, result[i].box[0], result[i].box[1], localOptions2);
      }
    }
    if (localOptions2.drawPoints && result[i].keypoints) {
      for (let pt = 0; pt < result[i].keypoints.length; pt++) {
        if (!result[i].keypoints[pt].score || result[i].keypoints[pt].score === 0)
          continue;
        ctx.fillStyle = colorDepth(result[i].keypoints[pt].position[2], localOptions2);
        point(ctx, result[i].keypoints[pt].position[0], result[i].keypoints[pt].position[1], 0, localOptions2);
      }
    }
    if (localOptions2.drawLabels && ((_b2 = localOptions2.bodyPartLabels) == null ? void 0 : _b2.length) > 0 && result[i].keypoints) {
      ctx.font = localOptions2.font;
      for (const pt of result[i].keypoints) {
        if (!pt.score || pt.score === 0)
          continue;
        let l = localOptions2.bodyPartLabels.slice();
        l = replace(l, "[label]", pt.part);
        l = replace(l, "[score]", 100 * pt.score);
        labels(ctx, l, pt.position[0], pt.position[1], localOptions2);
      }
    }
    if (localOptions2.drawPolygons && result[i].keypoints && result[i].annotations) {
      for (const part of Object.values(result[i].annotations)) {
        for (const connected4 of part)
          curves(ctx, connected4, localOptions2);
      }
    }
  }
}
function hand(inCanvas2, result, drawOptions) {
  var _a2, _b2;
  const localOptions2 = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  ctx.font = localOptions2.font;
  for (const h of result) {
    if (localOptions2.drawBoxes) {
      ctx.strokeStyle = localOptions2.color;
      ctx.fillStyle = localOptions2.color;
      rect(ctx, h.box[0], h.box[1], h.box[2], h.box[3], localOptions2);
      if (localOptions2.drawLabels && ((_a2 = localOptions2.handLabels) == null ? void 0 : _a2.length) > 0) {
        let l = localOptions2.handLabels.slice();
        l = replace(l, "[label]", h.label);
        l = replace(l, "[score]", 100 * h.score);
        labels(ctx, l, h.box[0], h.box[1], localOptions2);
      }
      ctx.stroke();
    }
    if (localOptions2.drawPoints) {
      if (h.keypoints && h.keypoints.length > 0) {
        for (const pt of h.keypoints) {
          ctx.fillStyle = colorDepth(pt[2], localOptions2);
          point(ctx, pt[0], pt[1], 0, localOptions2);
        }
      }
    }
    if (localOptions2.drawLabels && h.annotations && ((_b2 = localOptions2.fingerLabels) == null ? void 0 : _b2.length) > 0) {
      for (const [part, pt] of Object.entries(h.annotations)) {
        let l = localOptions2.fingerLabels.slice();
        l = replace(l, "[label]", part);
        labels(ctx, l, pt[pt.length - 1][0], pt[pt.length - 1][1], localOptions2);
      }
    }
    if (localOptions2.drawPolygons && h.annotations) {
      const addHandLine = (part) => {
        if (!part || part.length === 0 || !part[0])
          return;
        for (let i = 0; i < part.length; i++) {
          ctx.beginPath();
          const z8 = part[i][2] || 0;
          ctx.strokeStyle = colorDepth(i * z8, localOptions2);
          ctx.moveTo(part[i > 0 ? i - 1 : 0][0], part[i > 0 ? i - 1 : 0][1]);
          ctx.lineTo(part[i][0], part[i][1]);
          ctx.stroke();
        }
      };
      ctx.lineWidth = localOptions2.lineWidth;
      addHandLine(h.annotations.index);
      addHandLine(h.annotations.middle);
      addHandLine(h.annotations.ring);
      addHandLine(h.annotations.pinky);
      addHandLine(h.annotations.thumb);
    }
  }
}
function object(inCanvas2, result, drawOptions) {
  var _a2;
  const localOptions2 = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  ctx.font = localOptions2.font;
  for (const h of result) {
    if (localOptions2.drawBoxes) {
      ctx.strokeStyle = localOptions2.color;
      ctx.fillStyle = localOptions2.color;
      rect(ctx, h.box[0], h.box[1], h.box[2], h.box[3], localOptions2);
      if (localOptions2.drawLabels && ((_a2 = localOptions2.objectLabels) == null ? void 0 : _a2.length) > 0) {
        let l = localOptions2.objectLabels.slice();
        l = replace(l, "[label]", h.label);
        l = replace(l, "[score]", 100 * h.score);
        labels(ctx, l, h.box[0], h.box[1], localOptions2);
      }
      ctx.stroke();
    }
  }
}
function gesture(inCanvas2, result, drawOptions) {
  var _a2;
  const localOptions2 = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  if (localOptions2.drawGestures && ((_a2 = localOptions2.gestureLabels) == null ? void 0 : _a2.length) > 0) {
    const ctx = getCanvasContext(inCanvas2);
    if (!ctx)
      return;
    ctx.font = localOptions2.font;
    ctx.fillStyle = localOptions2.color;
    let i = 1;
    for (let j = 0; j < result.length; j++) {
      const [where, what] = Object.entries(result[j]);
      if (what.length > 1 && what[1].length > 0) {
        const who = where[1] > 0 ? `#${where[1]}` : "";
        let l = localOptions2.gestureLabels.slice();
        l = replace(l, "[where]", where[0]);
        l = replace(l, "[who]", who);
        l = replace(l, "[what]", what[1]);
        labels(ctx, l, 8, 2 + i * localOptions2.lineHeight, localOptions2);
        i += 1;
      }
    }
  }
}
var defaultLabels = {
  face: `face
    confidence: [score]%
    [gender] [genderScore]%
    age: [age] years
    distance: [distance]cm
    real: [real]%
    live: [live]%
    [emotions]
    roll: [roll]\xB0 yaw:[yaw]\xB0 pitch:[pitch]\xB0
    gaze: [gaze]\xB0`,
  body: "body [score]%",
  bodyPart: "[label] [score]%",
  object: "[label] [score]%",
  hand: "[label] [score]%",
  finger: "[label]",
  gesture: "[where] [who]: [what]"
};
var drawTime = 0;
function person(inCanvas2, result, drawOptions) {
  const localOptions2 = mergeDeep(options2, drawOptions);
  if (!result || !inCanvas2)
    return;
  const ctx = getCanvasContext(inCanvas2);
  if (!ctx)
    return;
  ctx.lineJoin = "round";
  ctx.font = localOptions2.font;
  for (let i = 0; i < result.length; i++) {
    if (localOptions2.drawBoxes) {
      ctx.strokeStyle = localOptions2.color;
      ctx.fillStyle = localOptions2.color;
      rect(ctx, result[i].box[0], result[i].box[1], result[i].box[2], result[i].box[3], localOptions2);
      if (localOptions2.drawLabels) {
        const label = `person #${i}`;
        if (localOptions2.shadowColor && localOptions2.shadowColor !== "") {
          ctx.fillStyle = localOptions2.shadowColor;
          ctx.fillText(label, result[i].box[0] + 3, 1 + result[i].box[1] + localOptions2.lineHeight, result[i].box[2]);
        }
        ctx.fillStyle = localOptions2.labelColor;
        ctx.fillText(label, result[i].box[0] + 2, 0 + result[i].box[1] + localOptions2.lineHeight, result[i].box[2]);
      }
      ctx.stroke();
    }
  }
}
function canvas2(input, output) {
  if (!input || !output)
    return;
  const ctx = getCanvasContext(output);
  if (!ctx)
    return;
  ctx.drawImage(input, 0, 0);
}
async function all(inCanvas2, result, drawOptions) {
  if (!(result == null ? void 0 : result.performance) || !inCanvas2)
    return null;
  const timeStamp = now();
  const localOptions2 = mergeDeep(options2, drawOptions);
  const promise = Promise.all([
    face(inCanvas2, result.face, localOptions2),
    body(inCanvas2, result.body, localOptions2),
    hand(inCanvas2, result.hand, localOptions2),
    object(inCanvas2, result.object, localOptions2),
    gesture(inCanvas2, result.gesture, localOptions2)
  ]);
  drawTime = env.perfadd ? drawTime + Math.round(now() - timeStamp) : Math.round(now() - timeStamp);
  result.performance.draw = drawTime;
  return promise;
}
function init2() {
  options2.faceLabels = defaultLabels.face;
  options2.bodyLabels = defaultLabels.body;
  options2.bodyPartLabels = defaultLabels.bodyPart;
  options2.handLabels = defaultLabels.hand;
  options2.fingerLabels = defaultLabels.finger;
  options2.objectLabels = defaultLabels.object;
  options2.gestureLabels = defaultLabels.gesture;
}
var blazeposecoords_exports = {};
__export(blazeposecoords_exports, {
  connected: () => connected,
  kpt: () => kpt
});
var kpt = [
  "nose",
  "leftEyeInside",
  "leftEye",
  "leftEyeOutside",
  "rightEyeInside",
  "rightEye",
  "rightEyeOutside",
  "leftEar",
  "rightEar",
  "leftMouth",
  "rightMouth",
  "leftShoulder",
  "rightShoulder",
  "leftElbow",
  "rightElbow",
  "leftWrist",
  "rightWrist",
  "leftPinky",
  "rightPinky",
  "leftIndex",
  "rightIndex",
  "leftThumb",
  "rightThumb",
  "leftHip",
  "rightHip",
  "leftKnee",
  "rightKnee",
  "leftAnkle",
  "rightAnkle",
  "leftHeel",
  "rightHeel",
  "leftFoot",
  "rightFoot",
  "bodyCenter",
  "bodyTop",
  "leftPalm",
  "leftHand",
  "rightPalm",
  "rightHand"
];
var connected = {
  shoulders: ["leftShoulder", "rightShoulder"],
  hips: ["rightHip", "leftHip"],
  mouth: ["leftMouth", "rightMouth"],
  leftLegUpper: ["leftHip", "leftKnee"],
  leftLegLower: ["leftKnee", "leftAnkle"],
  leftFoot: ["leftAnkle", "leftHeel", "leftFoot"],
  leftTorso: ["leftShoulder", "leftHip"],
  leftArmUpper: ["leftShoulder", "leftElbow"],
  leftArmLower: ["leftElbow", "leftWrist"],
  leftHand: ["leftWrist", "leftPalm"],
  leftHandPinky: ["leftPalm", "leftPinky"],
  leftHandIndex: ["leftPalm", "leftIndex"],
  leftHandThumb: ["leftPalm", "leftThumb"],
  leftEyeOutline: ["leftEyeInside", "leftEyeOutside"],
  rightLegUpper: ["rightHip", "rightKnee"],
  rightLegLower: ["rightKnee", "rightAnkle"],
  rightFoot: ["rightAnkle", "rightHeel", "rightFoot"],
  rightTorso: ["rightShoulder", "rightHip"],
  rightArmUpper: ["rightShoulder", "rightElbow"],
  rightArmLower: ["rightElbow", "rightWrist"],
  rightHand: ["rightWrist", "rightPalm"],
  rightHandPinky: ["rightPalm", "rightPinky"],
  rightHandIndex: ["rightPalm", "rightIndex"],
  rightHandThumb: ["rightPalm", "rightThumb"],
  rightEyeOutline: ["rightEyeInside", "rightEyeOutside"]
};
var model;
var inputSize = 224;
var anchorTensor;
var numLayers = 5;
var strides = [8, 16, 32, 32, 32];
function createAnchors() {
  const anchors3 = [];
  let layerId = 0;
  while (layerId < numLayers) {
    let anchorCount = 0;
    let lastSameStrideLayer = layerId;
    while (lastSameStrideLayer < strides.length && strides[lastSameStrideLayer] === strides[layerId]) {
      anchorCount += 2;
      lastSameStrideLayer++;
    }
    const stride = strides[layerId];
    const featureMapHeight = Math.ceil(inputSize / stride);
    const featureMapWidth = Math.ceil(inputSize / stride);
    for (let y10 = 0; y10 < featureMapHeight; ++y10) {
      for (let x = 0; x < featureMapWidth; ++x) {
        for (let anchorId = 0; anchorId < anchorCount; ++anchorId) {
          anchors3.push({ x: (x + 0.5) / featureMapWidth, y: (y10 + 0.5) / featureMapHeight });
        }
      }
    }
    layerId = lastSameStrideLayer;
  }
  anchorTensor = { x: mr(anchors3.map((a) => a.x)), y: mr(anchors3.map((a) => a.y)) };
}
async function loadDetector(config3) {
  if (env.initial)
    model = null;
  if (!model && config3.body["detector"] && config3.body["detector"].modelPath || "") {
    model = await loadModel(config3.body["detector"].modelPath);
    const inputs = (model == null ? void 0 : model["executor"]) ? Object.values(model.modelSignature["inputs"]) : void 0;
    inputSize = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
  } else if (config3.debug && model)
    log("cached model:", model["modelUrl"]);
  createAnchors();
  return model;
}
var cropFactor = [5, 5];
function decodeBoxes(boxesTensor, anchor) {
  return Ee(() => {
    const split = Oa(boxesTensor, 12, 1);
    let xCenter = Up(split[0]);
    let yCenter = Up(split[1]);
    let width = Up(split[2]);
    let height = Up(split[3]);
    xCenter = xe(Ge(xCenter, inputSize), anchor.x);
    yCenter = xe(Ge(yCenter, inputSize), anchor.y);
    width = ae(Ge(width, inputSize), cropFactor[0]);
    height = ae(Ge(height, inputSize), cropFactor[1]);
    const xMin = Ne(xCenter, Ge(width, 2));
    const yMin = Ne(yCenter, Ge(height, 2));
    const xMax = xe(xMin, width);
    const yMax = xe(yMin, height);
    const boxes = Sr([xMin, yMin, xMax, yMax], 1);
    return boxes;
  });
}
async function decodeResults(boxesTensor, logitsTensor, config3, outputSize2) {
  var _a2, _b2;
  const detectedBoxes = [];
  const t6 = {};
  t6.boxes = decodeBoxes(boxesTensor, anchorTensor);
  t6.scores = zs(logitsTensor);
  t6.nms = await uq.nonMaxSuppressionAsync(t6.boxes, t6.scores, 1, ((_a2 = config3.body["detector"]) == null ? void 0 : _a2.minConfidence) || 0.1, ((_b2 = config3.body["detector"]) == null ? void 0 : _b2.iouThreshold) || 0.1);
  const nms = await t6.nms.data();
  const scores = await t6.scores.data();
  const boxes = await t6.boxes.array();
  for (const i of Array.from(nms)) {
    const score = scores[i];
    const boxRaw = boxes[i];
    const box = [Math.round(boxRaw[0] * outputSize2[0]), Math.round(boxRaw[1] * outputSize2[1]), Math.round(boxRaw[2] * outputSize2[0]), Math.round(boxRaw[3] * outputSize2[1])];
    const detectedBox = { score, boxRaw, box };
    detectedBoxes.push(detectedBox);
  }
  Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  return detectedBoxes;
}
async function detectBoxes(input, config3, outputSize2) {
  const t6 = {};
  t6.res = model == null ? void 0 : model.execute(input, ["Identity"]);
  t6.logitsRaw = He(t6.res, [0, 0, 0], [1, -1, 1]);
  t6.boxesRaw = He(t6.res, [0, 0, 1], [1, -1, -1]);
  t6.logits = Up(t6.logitsRaw);
  t6.boxes = Up(t6.boxesRaw);
  const boxes = await decodeResults(t6.boxes, t6.logits, config3, outputSize2);
  Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  return boxes;
}
function calc(keypoints, outputSize2 = [1, 1]) {
  const coords = [keypoints.map((pt) => pt[0]), keypoints.map((pt) => pt[1])];
  const min = [Math.min(...coords[0]), Math.min(...coords[1])];
  const max = [Math.max(...coords[0]), Math.max(...coords[1])];
  const box = [min[0], min[1], max[0] - min[0], max[1] - min[1]];
  const boxRaw = [box[0] / outputSize2[0], box[1] / outputSize2[1], box[2] / outputSize2[0], box[3] / outputSize2[1]];
  return { box, boxRaw };
}
function square(keypoints, outputSize2 = [1, 1]) {
  const coords = [keypoints.map((pt) => pt[0]), keypoints.map((pt) => pt[1])];
  const min = [Math.min(...coords[0]), Math.min(...coords[1])];
  const max = [Math.max(...coords[0]), Math.max(...coords[1])];
  const center = [(min[0] + max[0]) / 2, (min[1] + max[1]) / 2];
  const dist = Math.max(center[0] - min[0], center[1] - min[1], -center[0] + max[0], -center[1] + max[1]);
  const box = [Math.trunc(center[0] - dist), Math.trunc(center[1] - dist), Math.trunc(2 * dist), Math.trunc(2 * dist)];
  const boxRaw = [box[0] / outputSize2[0], box[1] / outputSize2[1], box[2] / outputSize2[0], box[3] / outputSize2[1]];
  return { box, boxRaw };
}
function scale(box, scaleFact) {
  const dist = [box[2] * scaleFact, box[3] * scaleFact];
  const newBox = [
    box[0] - (dist[0] - box[2]) / 2,
    box[1] - (dist[1] - box[3]) / 2,
    dist[0],
    dist[1]
  ];
  return newBox;
}
var model2;
var inputSize2 = 256;
var skipped = Number.MAX_SAFE_INTEGER;
var outputNodes = {
  landmarks: ["ld_3d", "activation_segmentation", "activation_heatmap", "world_3d", "output_poseflag"],
  detector: []
};
var cache = [];
var padding = [[0, 0], [0, 0], [0, 0], [0, 0]];
var lastTime = 0;
var sigmoid = (x) => 1 - 1 / (1 + Math.exp(x));
var loadDetect = (config3) => loadDetector(config3);
async function loadPose(config3) {
  if (env.initial)
    model2 = null;
  if (!model2) {
    model2 = await loadModel(config3.body.modelPath);
    const inputs = (model2 == null ? void 0 : model2["executor"]) ? Object.values(model2.modelSignature["inputs"]) : void 0;
    inputSize2 = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
  } else if (config3.debug)
    log("cached model:", model2["modelUrl"]);
  return model2;
}
function prepareImage(input, size2, cropBox) {
  var _a2, _b2;
  const t6 = {};
  if (!((_a2 = input == null ? void 0 : input.shape) == null ? void 0 : _a2[1]) || !((_b2 = input == null ? void 0 : input.shape) == null ? void 0 : _b2[2]))
    return input;
  let final;
  if (cropBox) {
    t6.cropped = uq.cropAndResize(input, [cropBox], [0], [input.shape[1], input.shape[2]]);
  }
  if (input.shape[1] !== input.shape[2]) {
    const height = [
      input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0,
      input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0
    ];
    const width = [
      input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0,
      input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0
    ];
    padding = [
      [0, 0],
      height,
      width,
      [0, 0]
    ];
    t6.pad = Hs(t6.cropped || input, padding);
    t6.resize = uq.resizeBilinear(t6.pad, [size2, size2]);
    final = Ge(t6.resize, constants.tf255);
  } else if (input.shape[1] !== size2) {
    t6.resize = uq.resizeBilinear(t6.cropped || input, [size2, size2]);
    final = Ge(t6.resize, constants.tf255);
  } else {
    final = Ge(t6.cropped || input, constants.tf255);
  }
  Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  return final;
}
function rescaleKeypoints(keypoints, outputSize2, cropBox) {
  for (const kpt4 of keypoints) {
    kpt4.position = [
      Math.trunc(kpt4.position[0] * (outputSize2[0] + padding[2][0] + padding[2][1]) / outputSize2[0] - padding[2][0]),
      Math.trunc(kpt4.position[1] * (outputSize2[1] + padding[1][0] + padding[1][1]) / outputSize2[1] - padding[1][0]),
      kpt4.position[2]
    ];
    kpt4.positionRaw = [kpt4.position[0] / outputSize2[0], kpt4.position[1] / outputSize2[1], 2 * kpt4.position[2] / (outputSize2[0] + outputSize2[1])];
  }
  if (cropBox) {
    const width = cropBox[2] - cropBox[0];
    const height = cropBox[3] - cropBox[1];
    for (const kpt4 of keypoints) {
      kpt4.positionRaw = [
        kpt4.positionRaw[0] / height + cropBox[1],
        kpt4.positionRaw[1] / width + cropBox[0],
        kpt4.positionRaw[2]
      ];
      kpt4.position = [
        Math.trunc(kpt4.positionRaw[0] * outputSize2[0]),
        Math.trunc(kpt4.positionRaw[1] * outputSize2[1]),
        kpt4.positionRaw[2]
      ];
    }
  }
  return keypoints;
}
function fixKeypoints(keypoints) {
  const leftPalm = keypoints.find((k) => k.part === "leftPalm");
  const leftWrist = keypoints.find((k) => k.part === "leftWrist");
  const leftIndex = keypoints.find((k) => k.part === "leftIndex");
  leftPalm.position[2] = ((leftWrist.position[2] || 0) + (leftIndex.position[2] || 0)) / 2;
  const rightPalm = keypoints.find((k) => k.part === "rightPalm");
  const rightWrist = keypoints.find((k) => k.part === "rightWrist");
  const rightIndex = keypoints.find((k) => k.part === "rightIndex");
  rightPalm.position[2] = ((rightWrist.position[2] || 0) + (rightIndex.position[2] || 0)) / 2;
}
async function detectLandmarks(input, config3, outputSize2) {
  if (!(model2 == null ? void 0 : model2["executor"]))
    return null;
  const t6 = {};
  [t6.ld, t6.segmentation, t6.heatmap, t6.world, t6.poseflag] = model2 == null ? void 0 : model2.execute(input, outputNodes.landmarks);
  const poseScore = (await t6.poseflag.data())[0];
  const points = await t6.ld.data();
  const distances = await t6.world.data();
  Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  const keypointsRelative = [];
  const depth = 5;
  for (let i = 0; i < points.length / depth; i++) {
    const score = sigmoid(points[depth * i + 3]);
    const presence = sigmoid(points[depth * i + 4]);
    const adjScore = Math.trunc(100 * score * presence * poseScore) / 100;
    const positionRaw = [points[depth * i + 0] / inputSize2, points[depth * i + 1] / inputSize2, points[depth * i + 2] + 0];
    const position = [Math.trunc(outputSize2[0] * positionRaw[0]), Math.trunc(outputSize2[1] * positionRaw[1]), positionRaw[2]];
    const distance2 = [distances[depth * i + 0], distances[depth * i + 1], distances[depth * i + 2] + 0];
    keypointsRelative.push({ part: kpt[i], positionRaw, position, distance: distance2, score: adjScore });
  }
  if (poseScore < (config3.body.minConfidence || 0))
    return null;
  fixKeypoints(keypointsRelative);
  const keypoints = rescaleKeypoints(keypointsRelative, outputSize2);
  const kpts = keypoints.map((k) => k.position);
  const boxes = calc(kpts, [outputSize2[0], outputSize2[1]]);
  const annotations2 = {};
  for (const [name, indexes] of Object.entries(connected)) {
    const pt = [];
    for (let i = 0; i < indexes.length - 1; i++) {
      const pt0 = keypoints.find((kpt4) => kpt4.part === indexes[i]);
      const pt1 = keypoints.find((kpt4) => kpt4.part === indexes[i + 1]);
      if (pt0 && pt1)
        pt.push([pt0.position, pt1.position]);
    }
    annotations2[name] = pt;
  }
  const body4 = { id: 0, score: Math.trunc(100 * poseScore) / 100, box: boxes.box, boxRaw: boxes.boxRaw, keypoints, annotations: annotations2 };
  return body4;
}
async function predict(input, config3) {
  var _a2, _b2, _c2;
  const outputSize2 = [input.shape[2] || 0, input.shape[1] || 0];
  const skipTime = (config3.body.skipTime || 0) > now() - lastTime;
  const skipFrame = skipped < (config3.body.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && cache !== null) {
    skipped++;
  } else {
    let boxes = [];
    if ((_b2 = (_a2 = config3.body) == null ? void 0 : _a2["detector"]) == null ? void 0 : _b2["enabled"]) {
      const preparedImage = prepareImage(input, 224);
      boxes = await detectBoxes(preparedImage, config3, outputSize2);
      Dt(preparedImage);
    } else {
      boxes = [{ box: [0, 0, 0, 0], boxRaw: [0, 0, 1, 1], score: 0 }];
    }
    for (let i = 0; i < boxes.length; i++) {
      const preparedBox = prepareImage(input, 256, (_c2 = boxes[i]) == null ? void 0 : _c2.boxRaw);
      cache.length = 0;
      const bodyResult = await detectLandmarks(preparedBox, config3, outputSize2);
      Dt(preparedBox);
      if (!bodyResult)
        continue;
      bodyResult.id = i;
      cache.push(bodyResult);
    }
    lastTime = now();
    skipped = 0;
  }
  return cache;
}
var labels2 = [
  { class: 1, label: "person" },
  { class: 2, label: "bicycle" },
  { class: 3, label: "car" },
  { class: 4, label: "motorcycle" },
  { class: 5, label: "airplane" },
  { class: 6, label: "bus" },
  { class: 7, label: "train" },
  { class: 8, label: "truck" },
  { class: 9, label: "boat" },
  { class: 10, label: "traffic light" },
  { class: 11, label: "fire hydrant" },
  { class: 12, label: "stop sign" },
  { class: 13, label: "parking meter" },
  { class: 14, label: "bench" },
  { class: 15, label: "bird" },
  { class: 16, label: "cat" },
  { class: 17, label: "dog" },
  { class: 18, label: "horse" },
  { class: 19, label: "sheep" },
  { class: 20, label: "cow" },
  { class: 21, label: "elephant" },
  { class: 22, label: "bear" },
  { class: 23, label: "zebra" },
  { class: 24, label: "giraffe" },
  { class: 25, label: "backpack" },
  { class: 26, label: "umbrella" },
  { class: 27, label: "handbag" },
  { class: 28, label: "tie" },
  { class: 29, label: "suitcase" },
  { class: 30, label: "frisbee" },
  { class: 31, label: "skis" },
  { class: 32, label: "snowboard" },
  { class: 33, label: "sports ball" },
  { class: 34, label: "kite" },
  { class: 35, label: "baseball bat" },
  { class: 36, label: "baseball glove" },
  { class: 37, label: "skateboard" },
  { class: 38, label: "surfboard" },
  { class: 39, label: "tennis racket" },
  { class: 40, label: "bottle" },
  { class: 41, label: "wine glass" },
  { class: 42, label: "cup" },
  { class: 43, label: "fork" },
  { class: 44, label: "knife" },
  { class: 45, label: "spoon" },
  { class: 46, label: "bowl" },
  { class: 47, label: "banana" },
  { class: 48, label: "apple" },
  { class: 49, label: "sandwich" },
  { class: 50, label: "orange" },
  { class: 51, label: "broccoli" },
  { class: 52, label: "carrot" },
  { class: 53, label: "hot dog" },
  { class: 54, label: "pizza" },
  { class: 55, label: "donut" },
  { class: 56, label: "cake" },
  { class: 57, label: "chair" },
  { class: 58, label: "couch" },
  { class: 59, label: "potted plant" },
  { class: 60, label: "bed" },
  { class: 61, label: "dining table" },
  { class: 62, label: "toilet" },
  { class: 63, label: "tv" },
  { class: 64, label: "laptop" },
  { class: 65, label: "mouse" },
  { class: 66, label: "remote" },
  { class: 67, label: "keyboard" },
  { class: 68, label: "cell phone" },
  { class: 69, label: "microwave" },
  { class: 70, label: "oven" },
  { class: 71, label: "toaster" },
  { class: 72, label: "sink" },
  { class: 73, label: "refrigerator" },
  { class: 74, label: "book" },
  { class: 75, label: "clock" },
  { class: 76, label: "vase" },
  { class: 77, label: "scissors" },
  { class: 78, label: "teddy bear" },
  { class: 79, label: "hair drier" },
  { class: 80, label: "toothbrush" }
];
var model3;
var inputSize3 = 0;
var last2 = [];
var lastTime2 = 0;
var skipped2 = Number.MAX_SAFE_INTEGER;
async function load(config3) {
  if (env.initial)
    model3 = null;
  if (!model3) {
    model3 = await loadModel(config3.object.modelPath);
    const inputs = (model3 == null ? void 0 : model3["executor"]) ? Object.values(model3.modelSignature["inputs"]) : void 0;
    inputSize3 = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug)
    log("cached model:", model3["modelUrl"]);
  return model3;
}
async function process3(res, outputShape, config3) {
  if (!res)
    return [];
  const t6 = {};
  const results = [];
  const detections = await res.array();
  t6.squeeze = Up(res);
  const arr = Oa(t6.squeeze, 6, 1);
  t6.stack = Sr([arr[1], arr[0], arr[3], arr[2]], 1);
  t6.boxes = Up(t6.stack);
  t6.scores = Up(arr[4]);
  t6.classes = Up(arr[5]);
  Dt([res, ...arr]);
  t6.nms = await uq.nonMaxSuppressionAsync(t6.boxes, t6.scores, config3.object.maxDetected || 0, config3.object.iouThreshold, config3.object.minConfidence || 0);
  const nms = await t6.nms.data();
  let i = 0;
  for (const id2 of Array.from(nms)) {
    const score = Math.trunc(100 * detections[0][id2][4]) / 100;
    const classVal = detections[0][id2][5];
    if (Number.isNaN(classVal))
      continue;
    const label = labels2[classVal].label;
    const [x, y10] = [
      detections[0][id2][0] / inputSize3,
      detections[0][id2][1] / inputSize3
    ];
    const boxRaw = [
      x,
      y10,
      detections[0][id2][2] / inputSize3 - x,
      detections[0][id2][3] / inputSize3 - y10
    ];
    const box = [
      Math.trunc(boxRaw[0] * outputShape[0]),
      Math.trunc(boxRaw[1] * outputShape[1]),
      Math.trunc(boxRaw[2] * outputShape[0]),
      Math.trunc(boxRaw[3] * outputShape[1])
    ];
    results.push({ id: i++, score, class: classVal, label, box, boxRaw });
  }
  Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  return results;
}
async function predict2(input, config3) {
  if (!(model3 == null ? void 0 : model3["executor"]))
    return [];
  const skipTime = (config3.object.skipTime || 0) > now() - lastTime2;
  const skipFrame = skipped2 < (config3.object.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && last2.length > 0) {
    skipped2++;
    return last2;
  }
  skipped2 = 0;
  return new Promise(async (resolve) => {
    const outputSize2 = [input.shape[2] || 0, input.shape[1] || 0];
    const resize = uq.resizeBilinear(input, [inputSize3, inputSize3]);
    const objectT = config3.object.enabled ? model3 == null ? void 0 : model3.execute(resize, ["tower_0/detections"]) : null;
    lastTime2 = now();
    Dt(resize);
    const obj = await process3(objectT, outputSize2, config3);
    last2 = obj;
    resolve(obj);
  });
}
var efficientposecoords_exports = {};
__export(efficientposecoords_exports, {
  connected: () => connected2,
  kpt: () => kpt2
});
var kpt2 = [
  "head",
  "neck",
  "rightShoulder",
  "rightElbow",
  "rightWrist",
  "chest",
  "leftShoulder",
  "leftElbow",
  "leftWrist",
  "bodyCenter",
  "rightHip",
  "rightKnee",
  "rightAnkle",
  "leftHip",
  "leftKnee",
  "leftAnkle"
];
var connected2 = {
  leftLeg: ["leftHip", "leftKnee", "leftAnkle"],
  rightLeg: ["rightHip", "rightKnee", "rightAnkle"],
  torso: ["leftShoulder", "rightShoulder", "rightHip", "leftHip", "leftShoulder"],
  leftArm: ["leftShoulder", "leftElbow", "leftWrist"],
  rightArm: ["rightShoulder", "rightElbow", "rightWrist"],
  head: []
};
var model4;
var lastTime3 = 0;
var cache2 = { id: 0, keypoints: [], box: [0, 0, 0, 0], boxRaw: [0, 0, 0, 0], score: 0, annotations: {} };
var skipped3 = Number.MAX_SAFE_INTEGER;
async function load2(config3) {
  if (env.initial)
    model4 = null;
  if (!model4)
    model4 = await loadModel(config3.body.modelPath);
  else if (config3.debug)
    log("cached model:", model4["modelUrl"]);
  return model4;
}
async function max2d(inputs, minScore) {
  const [width, height] = inputs.shape;
  const reshaped = z(inputs, [height * width]);
  const max = Us(reshaped, 0);
  const newScore = (await max.data())[0];
  if (newScore > minScore) {
    const coordinates = bv(reshaped, 0);
    const mod = wk(coordinates, width);
    const x = (await mod.data())[0];
    const div = Ge(coordinates, width);
    const y10 = (await div.data())[0];
    Dt([reshaped, max, coordinates, mod, div]);
    return [x, y10, newScore];
  }
  Dt([reshaped, max]);
  return [0, 0, newScore];
}
async function predict3(image, config3) {
  if (!(model4 == null ? void 0 : model4["executor"]) || !(model4 == null ? void 0 : model4.inputs[0].shape))
    return [];
  const skipTime = (config3.body.skipTime || 0) > now() - lastTime3;
  const skipFrame = skipped3 < (config3.body.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && Object.keys(cache2.keypoints).length > 0) {
    skipped3++;
    return [cache2];
  }
  skipped3 = 0;
  return new Promise(async (resolve) => {
    const tensor = Ee(() => {
      var _a2, _b2;
      const resize = uq.resizeBilinear(image, [((_a2 = model4 == null ? void 0 : model4.inputs[0].shape) == null ? void 0 : _a2[2]) || 0, ((_b2 = model4 == null ? void 0 : model4.inputs[0].shape) == null ? void 0 : _b2[1]) || 0], false);
      const enhance2 = ae(resize, constants.tf2);
      const norm = Ne(enhance2, constants.tf1);
      return norm;
    });
    let resT;
    if (config3.body.enabled)
      resT = model4 == null ? void 0 : model4.execute(tensor);
    lastTime3 = now();
    Dt(tensor);
    if (resT) {
      cache2.keypoints.length = 0;
      const squeeze = Up(resT);
      Dt(resT);
      const stack = so(squeeze, 2);
      Dt(squeeze);
      for (let id2 = 0; id2 < stack.length; id2++) {
        const [x10, y11, partScore] = await max2d(stack[id2], config3.body.minConfidence);
        if (partScore > (config3.body.minConfidence || 0)) {
          cache2.keypoints.push({
            score: Math.round(100 * partScore) / 100,
            part: kpt2[id2],
            positionRaw: [
              x10 / model4.inputs[0].shape[2],
              y11 / model4.inputs[0].shape[1]
            ],
            position: [
              Math.round(image.shape[2] * x10 / model4.inputs[0].shape[2]),
              Math.round(image.shape[1] * y11 / model4.inputs[0].shape[1])
            ]
          });
        }
      }
      stack.forEach((s) => Dt(s));
    }
    cache2.score = cache2.keypoints.reduce((prev, curr) => curr.score > prev ? curr.score : prev, 0);
    const x = cache2.keypoints.map((a) => a.position[0]);
    const y10 = cache2.keypoints.map((a) => a.position[1]);
    cache2.box = [
      Math.min(...x),
      Math.min(...y10),
      Math.max(...x) - Math.min(...x),
      Math.max(...y10) - Math.min(...y10)
    ];
    const xRaw = cache2.keypoints.map((a) => a.positionRaw[0]);
    const yRaw = cache2.keypoints.map((a) => a.positionRaw[1]);
    cache2.boxRaw = [
      Math.min(...xRaw),
      Math.min(...yRaw),
      Math.max(...xRaw) - Math.min(...xRaw),
      Math.max(...yRaw) - Math.min(...yRaw)
    ];
    for (const [name, indexes] of Object.entries(connected2)) {
      const pt = [];
      for (let i = 0; i < indexes.length - 1; i++) {
        const pt0 = cache2.keypoints.find((kpt4) => kpt4.part === indexes[i]);
        const pt1 = cache2.keypoints.find((kpt4) => kpt4.part === indexes[i + 1]);
        if (pt0 && pt1 && pt0.score > (config3.body.minConfidence || 0) && pt1.score > (config3.body.minConfidence || 0))
          pt.push([pt0.position, pt1.position]);
      }
      cache2.annotations[name] = pt;
    }
    resolve([cache2]);
  });
}
var getBoxSize = (box) => [Math.abs(box.endPoint[0] - box.startPoint[0]), Math.abs(box.endPoint[1] - box.startPoint[1])];
var getBoxCenter = (box) => [box.startPoint[0] + (box.endPoint[0] - box.startPoint[0]) / 2, box.startPoint[1] + (box.endPoint[1] - box.startPoint[1]) / 2, 1];
var clampBox = (box, input) => box ? [
  Math.trunc(Math.max(0, box.startPoint[0])),
  Math.trunc(Math.max(0, box.startPoint[1])),
  Math.trunc(Math.min(input.shape[2] || 0, box.endPoint[0]) - Math.max(0, box.startPoint[0])),
  Math.trunc(Math.min(input.shape[1] || 0, box.endPoint[1]) - Math.max(0, box.startPoint[1]))
] : [0, 0, 0, 0];
var getRawBox = (box, input) => box ? [
  box.startPoint[0] / (input.shape[2] || 0),
  box.startPoint[1] / (input.shape[1] || 0),
  (box.endPoint[0] - box.startPoint[0]) / (input.shape[2] || 0),
  (box.endPoint[1] - box.startPoint[1]) / (input.shape[1] || 0)
] : [0, 0, 0, 0];
var scaleBoxCoordinates = (box, factor) => {
  const startPoint = [box.startPoint[0] * factor[0], box.startPoint[1] * factor[1]];
  const endPoint = [box.endPoint[0] * factor[0], box.endPoint[1] * factor[1]];
  return { startPoint, endPoint, landmarks: box.landmarks, confidence: box.confidence };
};
var cutAndResize = (box, image, cropSize) => {
  const h = image.shape[1];
  const w = image.shape[2];
  const cutBox = [box.startPoint[1] / h, box.startPoint[0] / w, box.endPoint[1] / h, box.endPoint[0] / w];
  const crop = uq.cropAndResize(image, [cutBox], [0], cropSize);
  const norm = Ge(crop, constants.tf255);
  Dt(crop);
  return norm;
};
var enlargeBox = (box, factor) => {
  const center = getBoxCenter(box);
  const size2 = getBoxSize(box);
  const halfSize = [factor * size2[0] / 2, factor * size2[1] / 2];
  return { startPoint: [center[0] - halfSize[0], center[1] - halfSize[1]], endPoint: [center[0] + halfSize[0], center[1] + halfSize[1]], landmarks: box.landmarks, confidence: box.confidence };
};
var squarifyBox = (box) => {
  const centers = getBoxCenter(box);
  const size2 = getBoxSize(box);
  const halfSize = Math.max(...size2) / 2;
  return { startPoint: [Math.round(centers[0] - halfSize), Math.round(centers[1] - halfSize)], endPoint: [Math.round(centers[0] + halfSize), Math.round(centers[1] + halfSize)], landmarks: box.landmarks, confidence: box.confidence };
};
var calculateLandmarksBoundingBox = (landmarks) => {
  const x = landmarks.map((d) => d[0]);
  const y10 = landmarks.map((d) => d[1]);
  return { startPoint: [Math.min(...x), Math.min(...y10)], endPoint: [Math.max(...x), Math.max(...y10)], landmarks };
};
var fixedRotationMatrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
var normalizeRadians = (angle) => angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));
var computeRotation = (point1, point2) => normalizeRadians(Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]));
var buildTranslationMatrix = (x, y10) => [[1, 0, x], [0, 1, y10], [0, 0, 1]];
var dot = (v12, v22) => {
  let product = 0;
  for (let i = 0; i < v12.length; i++)
    product += v12[i] * v22[i];
  return product;
};
var getColumnFrom2DArr = (arr, columnIndex) => {
  const column = [];
  for (let i = 0; i < arr.length; i++)
    column.push(arr[i][columnIndex]);
  return column;
};
var multiplyTransformMatrices = (mat1, mat2) => {
  const product = [];
  const size2 = mat1.length;
  for (let row = 0; row < size2; row++) {
    product.push([]);
    for (let col = 0; col < size2; col++)
      product[row].push(dot(mat1[row], getColumnFrom2DArr(mat2, col)));
  }
  return product;
};
var buildRotationMatrix = (rotation, center) => {
  const cosA = Math.cos(rotation);
  const sinA = Math.sin(rotation);
  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];
  const translationMatrix = buildTranslationMatrix(center[0], center[1]);
  const translationTimesRotation = multiplyTransformMatrices(translationMatrix, rotationMatrix);
  const negativeTranslationMatrix = buildTranslationMatrix(-center[0], -center[1]);
  return multiplyTransformMatrices(translationTimesRotation, negativeTranslationMatrix);
};
var invertTransformMatrix = (matrix) => {
  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];
  const translationComponent = [matrix[0][2], matrix[1][2]];
  const invertedTranslation = [-dot(rotationComponent[0], translationComponent), -dot(rotationComponent[1], translationComponent)];
  return [rotationComponent[0].concat(invertedTranslation[0]), rotationComponent[1].concat(invertedTranslation[1]), [0, 0, 1]];
};
var rotatePoint = (homogeneousCoordinate, rotationMatrix) => [dot(homogeneousCoordinate, rotationMatrix[0]), dot(homogeneousCoordinate, rotationMatrix[1])];
function generateAnchors(inputSize10) {
  const spec = inputSize10 === 192 ? { strides: [4], anchors: [1] } : { strides: [inputSize10 / 16, inputSize10 / 8], anchors: [2, 6] };
  const anchors3 = [];
  for (let i = 0; i < spec.strides.length; i++) {
    const stride = spec.strides[i];
    const gridRows = Math.floor((inputSize10 + stride - 1) / stride);
    const gridCols = Math.floor((inputSize10 + stride - 1) / stride);
    const anchorsNum = spec.anchors[i];
    for (let gridY = 0; gridY < gridRows; gridY++) {
      const anchorY = stride * (gridY + 0.5);
      for (let gridX = 0; gridX < gridCols; gridX++) {
        const anchorX = stride * (gridX + 0.5);
        for (let n = 0; n < anchorsNum; n++)
          anchors3.push([anchorX, anchorY]);
      }
    }
  }
  return anchors3;
}
function transformRawCoords(coordsRaw, box, angle, rotationMatrix, inputSize10) {
  const boxSize = getBoxSize(box);
  const coordsScaled = coordsRaw.map((coord) => [
    boxSize[0] / inputSize10 * (coord[0] - inputSize10 / 2),
    boxSize[1] / inputSize10 * (coord[1] - inputSize10 / 2),
    coord[2] || 0
  ]);
  const largeAngle = angle && angle !== 0 && Math.abs(angle) > 0.2;
  const coordsRotationMatrix = largeAngle ? buildRotationMatrix(angle, [0, 0]) : fixedRotationMatrix;
  const coordsRotated = largeAngle ? coordsScaled.map((coord) => [...rotatePoint(coord, coordsRotationMatrix), coord[2]]) : coordsScaled;
  const inverseRotationMatrix = largeAngle ? invertTransformMatrix(rotationMatrix) : fixedRotationMatrix;
  const boxCenter = getBoxCenter(box);
  const offsets = [dot(boxCenter, inverseRotationMatrix[0]), dot(boxCenter, inverseRotationMatrix[1])];
  return coordsRotated.map((coord) => [
    Math.trunc(coord[0] + offsets[0]),
    Math.trunc(coord[1] + offsets[1]),
    Math.trunc(coord[2] || 0)
  ]);
}
function correctFaceRotation(rotate, box, input, inputSize10) {
  const symmetryLine = box.landmarks.length >= meshLandmarks.count ? meshLandmarks.symmetryLine : blazeFaceLandmarks.symmetryLine;
  let angle = 0;
  let rotationMatrix = fixedRotationMatrix;
  let face4;
  if (rotate && env.kernels.includes("rotatewithoffset")) {
    angle = computeRotation(box.landmarks[symmetryLine[0]], box.landmarks[symmetryLine[1]]);
    const largeAngle = angle && angle !== 0 && Math.abs(angle) > 0.2;
    if (largeAngle) {
      const center = getBoxCenter(box);
      const centerRaw = [center[0] / input.shape[2], center[1] / input.shape[1]];
      const rotated = uq.rotateWithOffset(input, angle, 0, [centerRaw[0], centerRaw[1]]);
      rotationMatrix = buildRotationMatrix(-angle, center);
      face4 = cutAndResize(box, rotated, [inputSize10, inputSize10]);
      Dt(rotated);
    } else {
      face4 = cutAndResize(box, input, [inputSize10, inputSize10]);
    }
  } else {
    face4 = cutAndResize(box, input, [inputSize10, inputSize10]);
  }
  return [angle, rotationMatrix, face4];
}
var findFaceCenter = (mesh) => {
  const x = mesh.map((m) => m[0]);
  const y10 = mesh.map((m) => m[1]);
  return [Math.min(...x) + (Math.max(...x) - Math.min(...x)) / 2, Math.min(...y10) + (Math.max(...y10) - Math.min(...y10)) / 2];
};
var calculateFaceBox = (mesh, previousBox) => {
  const center = findFaceCenter(mesh);
  const boxSize = getBoxSize(previousBox);
  const calculatedBox = {
    startPoint: [center[0] - boxSize[0] / 2, center[1] - boxSize[1] / 2],
    endPoint: [center[0] + boxSize[0] / 2, center[1] + boxSize[1] / 2]
  };
  return calculatedBox;
};
var keypointsCount = 6;
var faceBoxScaleFactor = 1.4;
var model5;
var anchors = null;
var inputSize4 = 0;
var inputSizeT = null;
var size = () => inputSize4;
async function load3(config3) {
  var _a2;
  if (env.initial)
    model5 = null;
  if (!model5)
    model5 = await loadModel((_a2 = config3.face.detector) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model5["modelUrl"]);
  inputSize4 = model5["executor"] && model5.inputs[0].shape ? model5.inputs[0].shape[2] : 256;
  inputSizeT = be(inputSize4, "int32");
  anchors = _i(generateAnchors(inputSize4));
  return model5;
}
function decodeBoxes2(boxOutputs) {
  if (!anchors || !inputSizeT)
    return Vr([0, 0]);
  const t6 = {};
  t6.boxStarts = He(boxOutputs, [0, 1], [-1, 2]);
  t6.centers = xe(t6.boxStarts, anchors);
  t6.boxSizes = He(boxOutputs, [0, 3], [-1, 2]);
  t6.boxSizesNormalized = Ge(t6.boxSizes, inputSizeT);
  t6.centersNormalized = Ge(t6.centers, inputSizeT);
  t6.halfBoxSize = Ge(t6.boxSizesNormalized, constants.tf2);
  t6.starts = Ne(t6.centersNormalized, t6.halfBoxSize);
  t6.ends = xe(t6.centersNormalized, t6.halfBoxSize);
  t6.startNormalized = ae(t6.starts, inputSizeT);
  t6.endNormalized = ae(t6.ends, inputSizeT);
  const boxes = Lv([t6.startNormalized, t6.endNormalized], 1);
  Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  return boxes;
}
async function getBoxes(inputImage, config3) {
  var _a2, _b2, _c2, _d2;
  if (!inputImage || inputImage["isDisposedInternal"] || inputImage.shape.length !== 4 || inputImage.shape[1] < 1 || inputImage.shape[2] < 1)
    return [];
  const t6 = {};
  t6.resized = uq.resizeBilinear(inputImage, [inputSize4, inputSize4]);
  t6.div = Ge(t6.resized, constants.tf127);
  t6.normalized = Ne(t6.div, constants.tf05);
  const res = model5 == null ? void 0 : model5.execute(t6.normalized);
  if (Array.isArray(res) && res.length > 2) {
    const sorted = res.sort((a, b) => a.size - b.size);
    t6.concat384 = gt([sorted[0], sorted[2]], 2);
    t6.concat512 = gt([sorted[1], sorted[3]], 2);
    t6.concat = gt([t6.concat512, t6.concat384], 1);
    t6.batch = Up(t6.concat, [0]);
  } else if (Array.isArray(res)) {
    t6.batch = Up(res[0]);
  } else {
    t6.batch = Up(res);
  }
  Dt(res);
  t6.boxes = decodeBoxes2(t6.batch);
  t6.logits = He(t6.batch, [0, 0], [-1, 1]);
  t6.sigmoid = zs(t6.logits);
  t6.scores = Up(t6.sigmoid);
  t6.nms = await uq.nonMaxSuppressionAsync(t6.boxes, t6.scores, ((_a2 = config3.face.detector) == null ? void 0 : _a2.maxDetected) || 0, ((_b2 = config3.face.detector) == null ? void 0 : _b2.iouThreshold) || 0, ((_c2 = config3.face.detector) == null ? void 0 : _c2.minConfidence) || 0);
  const nms = await t6.nms.array();
  const boxes = [];
  const scores = await t6.scores.data();
  for (let i = 0; i < nms.length; i++) {
    const confidence = scores[nms[i]];
    if (confidence > (((_d2 = config3.face.detector) == null ? void 0 : _d2.minConfidence) || 0)) {
      const b = {};
      b.bbox = He(t6.boxes, [nms[i], 0], [1, -1]);
      b.slice = He(t6.batch, [nms[i], keypointsCount - 1], [1, -1]);
      b.squeeze = Up(b.slice);
      b.landmarks = z(b.squeeze, [keypointsCount, -1]);
      const points = await b.bbox.data();
      const rawBox = {
        startPoint: [points[0], points[1]],
        endPoint: [points[2], points[3]],
        landmarks: await b.landmarks.array(),
        confidence
      };
      const scaledBox = scaleBoxCoordinates(rawBox, [(inputImage.shape[2] || 0) / inputSize4, (inputImage.shape[1] || 0) / inputSize4]);
      const enlargedBox = enlargeBox(scaledBox, config3.face["scale"] || faceBoxScaleFactor);
      const squaredBox = squarifyBox(enlargedBox);
      boxes.push(squaredBox);
      Object.keys(b).forEach((tensor) => Dt(b[tensor]));
    }
  }
  Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  return boxes;
}
var model6;
var inputSize5 = 0;
var irisEnlarge = 2.3;
var leftOutline = meshAnnotations.leftEyeLower0;
var rightOutline = meshAnnotations.rightEyeLower0;
var eyeLandmarks = {
  leftBounds: [leftOutline[0], leftOutline[leftOutline.length - 1]],
  rightBounds: [rightOutline[0], rightOutline[rightOutline.length - 1]]
};
var irisLandmarks = {
  upperCenter: 3,
  lowerCenter: 4,
  index: 71,
  numCoordinates: 76
};
async function load4(config3) {
  var _a2, _b2;
  if (env.initial)
    model6 = null;
  if (!model6)
    model6 = await loadModel((_a2 = config3.face.iris) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model6["modelUrl"]);
  inputSize5 = (model6 == null ? void 0 : model6["executor"]) && ((_b2 = model6.inputs) == null ? void 0 : _b2[0].shape) ? model6.inputs[0].shape[2] : 0;
  if (inputSize5 === -1)
    inputSize5 = 64;
  return model6;
}
function replaceIrisCoords(rawCoords, newCoords, prefix, keys) {
  for (let i = 0; i < irisIndices.length; i++) {
    const { key, indices } = irisIndices[i];
    const originalIndices = meshAnnotations[`${prefix}${key}`];
    if (!keys || keys.includes(key)) {
      for (let j = 0; j < indices.length; j++) {
        const index2 = indices[j];
        rawCoords[originalIndices[j]] = [
          newCoords[index2][0],
          newCoords[index2][1],
          (newCoords[index2][2] + rawCoords[originalIndices[j]][2]) / 2
        ];
      }
    }
  }
}
var getLeftToRightEyeDepthDifference = (rawCoords) => {
  const leftEyeZ = rawCoords[eyeLandmarks.leftBounds[0]][2];
  const rightEyeZ = rawCoords[eyeLandmarks.rightBounds[0]][2];
  return leftEyeZ - rightEyeZ;
};
var getEyeBox = (rawCoords, face4, eyeInnerCornerIndex, eyeOuterCornerIndex, meshSize, flip = false) => {
  const box = squarifyBox(enlargeBox(calculateLandmarksBoundingBox([rawCoords[eyeInnerCornerIndex], rawCoords[eyeOuterCornerIndex]]), irisEnlarge));
  const boxSize = getBoxSize(box);
  let crop = uq.cropAndResize(face4, [[
    box.startPoint[1] / meshSize,
    box.startPoint[0] / meshSize,
    box.endPoint[1] / meshSize,
    box.endPoint[0] / meshSize
  ]], [0], [inputSize5, inputSize5]);
  if (flip && env.kernels.includes("flipleftright")) {
    const flipped = uq.flipLeftRight(crop);
    Dt(crop);
    crop = flipped;
  }
  return { box, boxSize, crop };
};
var getEyeCoords = (eyeData, eyeBox, eyeBoxSize, flip = false) => {
  const eyeRawCoords = [];
  for (let i = 0; i < irisLandmarks.numCoordinates; i++) {
    const x = eyeData[i * 3];
    const y10 = eyeData[i * 3 + 1];
    const z8 = eyeData[i * 3 + 2];
    eyeRawCoords.push([
      (flip ? 1 - x / inputSize5 : x / inputSize5) * eyeBoxSize[0] + eyeBox.startPoint[0],
      y10 / inputSize5 * eyeBoxSize[1] + eyeBox.startPoint[1],
      z8
    ]);
  }
  return { rawCoords: eyeRawCoords, iris: eyeRawCoords.slice(irisLandmarks.index) };
};
var getAdjustedIrisCoords = (rawCoords, irisCoords, direction) => {
  const upperCenterZ = rawCoords[meshAnnotations[`${direction}EyeUpper0`][irisLandmarks.upperCenter]][2];
  const lowerCenterZ = rawCoords[meshAnnotations[`${direction}EyeLower0`][irisLandmarks.lowerCenter]][2];
  const averageZ = (upperCenterZ + lowerCenterZ) / 2;
  return irisCoords.map((coord, i) => {
    let z8 = averageZ;
    if (i === 2) {
      z8 = upperCenterZ;
    } else if (i === 4) {
      z8 = lowerCenterZ;
    }
    return [coord[0], coord[1], z8];
  });
};
async function augmentIris(rawCoords, face4, meshSize) {
  if (!(model6 == null ? void 0 : model6["executor"]))
    return rawCoords;
  const { box: leftEyeBox, boxSize: leftEyeBoxSize, crop: leftEyeCrop } = getEyeBox(rawCoords, face4, eyeLandmarks.leftBounds[0], eyeLandmarks.leftBounds[1], meshSize, true);
  const { box: rightEyeBox, boxSize: rightEyeBoxSize, crop: rightEyeCrop } = getEyeBox(rawCoords, face4, eyeLandmarks.rightBounds[0], eyeLandmarks.rightBounds[1], meshSize, true);
  const combined = gt([leftEyeCrop, rightEyeCrop]);
  Dt(leftEyeCrop);
  Dt(rightEyeCrop);
  const eyePredictions = model6.execute(combined);
  Dt(combined);
  const eyePredictionsData = await eyePredictions.data();
  Dt(eyePredictions);
  const leftEyeData = eyePredictionsData.slice(0, irisLandmarks.numCoordinates * 3);
  const { rawCoords: leftEyeRawCoords, iris: leftIrisRawCoords } = getEyeCoords(leftEyeData, leftEyeBox, leftEyeBoxSize, true);
  const rightEyeData = eyePredictionsData.slice(irisLandmarks.numCoordinates * 3);
  const { rawCoords: rightEyeRawCoords, iris: rightIrisRawCoords } = getEyeCoords(rightEyeData, rightEyeBox, rightEyeBoxSize, false);
  const leftToRightEyeDepthDifference = getLeftToRightEyeDepthDifference(rawCoords);
  if (Math.abs(leftToRightEyeDepthDifference) < 30) {
    replaceIrisCoords(rawCoords, leftEyeRawCoords, "left", null);
    replaceIrisCoords(rawCoords, rightEyeRawCoords, "right", null);
  } else if (leftToRightEyeDepthDifference < 1) {
    replaceIrisCoords(rawCoords, leftEyeRawCoords, "left", ["EyeUpper0", "EyeLower0"]);
  } else {
    replaceIrisCoords(rawCoords, rightEyeRawCoords, "right", ["EyeUpper0", "EyeLower0"]);
  }
  const adjustedLeftIrisCoords = getAdjustedIrisCoords(rawCoords, leftIrisRawCoords, "left");
  const adjustedRightIrisCoords = getAdjustedIrisCoords(rawCoords, rightIrisRawCoords, "right");
  const newCoords = rawCoords.concat(adjustedLeftIrisCoords).concat(adjustedRightIrisCoords);
  return newCoords;
}
async function augment(rawCoords, results) {
  var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2;
  const t6 = {
    lips: await ((_b2 = (_a2 = results.filter((r) => r.size === 160)) == null ? void 0 : _a2[0]) == null ? void 0 : _b2.data()),
    irisL: await ((_d2 = (_c2 = results.filter((r) => r.size === 10)) == null ? void 0 : _c2[0]) == null ? void 0 : _d2.data()),
    eyeL: await ((_f2 = (_e2 = results.filter((r) => r.size === 142)) == null ? void 0 : _e2[0]) == null ? void 0 : _f2.data()),
    irisR: await ((_h2 = (_g2 = results.filter((r) => r.size === 10)) == null ? void 0 : _g2[1]) == null ? void 0 : _h2.data()),
    eyeR: await ((_j2 = (_i2 = results.filter((r) => r.size === 142)) == null ? void 0 : _i2[1]) == null ? void 0 : _j2.data())
  };
  for (const val of Object.values(t6)) {
    if (!val)
      return rawCoords;
  }
  const irisLDepth = LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG.reduce((prev, curr) => prev += rawCoords[curr][2], 0) / LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG.length;
  for (let i = 0; i < t6.irisL.length / 2; i++)
    rawCoords.push([t6.irisL[2 * i + 0], t6.irisL[2 * i + 1], irisLDepth]);
  const irisRDepth = LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG.reduce((prev, curr) => prev += rawCoords[curr][2], 0) / LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG.length;
  for (let i = 0; i < t6.irisR.length / 2; i++)
    rawCoords.push([t6.irisR[2 * i + 0], t6.irisR[2 * i + 1], irisRDepth]);
  for (let i = 0; i < t6.eyeL.length / 2; i++)
    rawCoords[LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG[i]] = [t6.eyeL[2 * i + 0], t6.eyeL[2 * i + 1], rawCoords[LANDMARKS_REFINEMENT_LEFT_EYE_CONFIG[i]][2]];
  for (let i = 0; i < t6.eyeR.length / 2; i++)
    rawCoords[LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG[i]] = [t6.eyeR[2 * i + 0], t6.eyeR[2 * i + 1], rawCoords[LANDMARKS_REFINEMENT_RIGHT_EYE_CONFIG[i]][2]];
  for (let i = 0; i < t6.lips.length / 2; i++)
    rawCoords[LANDMARKS_REFINEMENT_LIPS_CONFIG[i]] = [t6.lips[2 * i + 0], t6.lips[2 * i + 1], rawCoords[LANDMARKS_REFINEMENT_LIPS_CONFIG[i]][2]];
  return rawCoords;
}
var cache3 = {
  boxes: [],
  skipped: Number.MAX_SAFE_INTEGER,
  timestamp: 0
};
var model7 = null;
var inputSize6 = 0;
async function predict4(input, config3) {
  var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2;
  if (!(model7 == null ? void 0 : model7["executor"]))
    return [];
  const skipTime = (((_a2 = config3.face.detector) == null ? void 0 : _a2.skipTime) || 0) > now() - cache3.timestamp;
  const skipFrame = cache3.skipped < (((_b2 = config3.face.detector) == null ? void 0 : _b2.skipFrames) || 0);
  if (!config3.skipAllowed || !skipTime || !skipFrame || cache3.boxes.length === 0) {
    cache3.boxes = await getBoxes(input, config3);
    cache3.timestamp = now();
    cache3.skipped = 0;
  } else {
    cache3.skipped++;
  }
  const faces = [];
  const newCache = [];
  let id2 = 0;
  const size2 = inputSize6;
  for (let i = 0; i < cache3.boxes.length; i++) {
    const box = cache3.boxes[i];
    let angle = 0;
    let rotationMatrix;
    const face4 = {
      id: id2++,
      mesh: [],
      meshRaw: [],
      box: [0, 0, 0, 0],
      boxRaw: [0, 0, 0, 0],
      score: 0,
      boxScore: 0,
      faceScore: 0,
      annotations: {}
    };
    [angle, rotationMatrix, face4.tensor] = correctFaceRotation((_c2 = config3.face.detector) == null ? void 0 : _c2.rotation, box, input, ((_d2 = config3.face.mesh) == null ? void 0 : _d2.enabled) ? inputSize6 : size());
    if (config3.filter.equalization) {
      const equilized = face4.tensor ? await histogramEqualization(face4.tensor) : void 0;
      Dt(face4.tensor);
      if (equilized)
        face4.tensor = equilized;
    }
    face4.boxScore = Math.round(100 * box.confidence) / 100;
    if (!((_e2 = config3.face.mesh) == null ? void 0 : _e2.enabled)) {
      face4.box = clampBox(box, input);
      face4.boxRaw = getRawBox(box, input);
      face4.score = face4.boxScore;
      face4.mesh = box.landmarks.map((pt) => [
        (box.startPoint[0] + box.endPoint[0]) / 2 + (box.endPoint[0] + box.startPoint[0]) * pt[0] / size(),
        (box.startPoint[1] + box.endPoint[1]) / 2 + (box.endPoint[1] + box.startPoint[1]) * pt[1] / size()
      ]);
      face4.meshRaw = face4.mesh.map((pt) => [pt[0] / (input.shape[2] || 0), pt[1] / (input.shape[1] || 0), (pt[2] || 0) / size2]);
      for (const key of Object.keys(blazeFaceLandmarks)) {
        face4.annotations[key] = [face4.mesh[blazeFaceLandmarks[key]]];
      }
    } else if (!model7) {
      if (config3.debug)
        log("face mesh detection requested, but model is not loaded");
    } else {
      if (((_f2 = config3.face.attention) == null ? void 0 : _f2.enabled) && !env.kernels.includes("atan2")) {
        config3.face.attention.enabled = false;
        Dt(face4.tensor);
        return faces;
      }
      const results = model7.execute(face4.tensor);
      const confidenceT = results.find((t6) => t6.shape[t6.shape.length - 1] === 1);
      const faceConfidence = await confidenceT.data();
      face4.faceScore = Math.round(100 * faceConfidence[0]) / 100;
      if (face4.faceScore < (((_g2 = config3.face.detector) == null ? void 0 : _g2.minConfidence) || 1)) {
        box.confidence = face4.faceScore;
        if (config3.face.mesh.keepInvalid) {
          face4.box = clampBox(box, input);
          face4.boxRaw = getRawBox(box, input);
          face4.score = face4.boxScore;
          face4.mesh = box.landmarks.map((pt) => [
            (box.startPoint[0] + box.endPoint[0]) / 2 + (box.endPoint[0] + box.startPoint[0]) * pt[0] / size(),
            (box.startPoint[1] + box.endPoint[1]) / 2 + (box.endPoint[1] + box.startPoint[1]) * pt[1] / size()
          ]);
          face4.meshRaw = face4.mesh.map((pt) => [pt[0] / (input.shape[2] || 1), pt[1] / (input.shape[1] || 1), (pt[2] || 0) / size2]);
          for (const key of Object.keys(blazeFaceLandmarks)) {
            face4.annotations[key] = [face4.mesh[blazeFaceLandmarks[key]]];
          }
        }
      } else {
        const meshT = results.find((t6) => t6.shape[t6.shape.length - 1] === 1404);
        const coordsReshaped = z(meshT, [-1, 3]);
        let rawCoords = await coordsReshaped.array();
        Dt(coordsReshaped);
        if ((_h2 = config3.face.attention) == null ? void 0 : _h2.enabled) {
          rawCoords = await augment(rawCoords, results);
        } else if ((_i2 = config3.face.iris) == null ? void 0 : _i2.enabled) {
          rawCoords = await augmentIris(rawCoords, face4.tensor, inputSize6);
        }
        face4.mesh = transformRawCoords(rawCoords, box, angle, rotationMatrix, inputSize6);
        face4.meshRaw = face4.mesh.map((pt) => [pt[0] / (input.shape[2] || 0), pt[1] / (input.shape[1] || 0), (pt[2] || 0) / size2]);
        for (const key of Object.keys(meshAnnotations))
          face4.annotations[key] = meshAnnotations[key].map((index2) => face4.mesh[index2]);
        face4.score = face4.faceScore;
        const calculatedBox = { ...calculateFaceBox(face4.mesh, box), confidence: box.confidence, landmarks: box.landmarks };
        face4.box = clampBox(calculatedBox, input);
        face4.boxRaw = getRawBox(calculatedBox, input);
        newCache.push(calculatedBox);
      }
      Dt(results);
    }
    if (face4.score > (((_j2 = config3.face.detector) == null ? void 0 : _j2.minConfidence) || 1))
      faces.push(face4);
    else
      Dt(face4.tensor);
  }
  cache3.boxes = newCache;
  return faces;
}
async function load5(config3) {
  var _a2, _b2, _c2, _d2, _e2, _f2;
  if (env.initial)
    model7 = null;
  if (((_a2 = config3.face.attention) == null ? void 0 : _a2.enabled) && (model7 == null ? void 0 : model7["signature"])) {
    if (Object.keys(((_b2 = model7 == null ? void 0 : model7["signature"]) == null ? void 0 : _b2.outputs) || {}).length < 6)
      model7 = null;
  }
  if (!model7) {
    if ((_c2 = config3.face.attention) == null ? void 0 : _c2.enabled)
      model7 = await loadModel(config3.face.attention.modelPath);
    else
      model7 = await loadModel((_d2 = config3.face.mesh) == null ? void 0 : _d2.modelPath);
  } else if (config3.debug) {
    log("cached model:", model7["modelUrl"]);
  }
  inputSize6 = model7["executor"] && ((_e2 = model7 == null ? void 0 : model7.inputs) == null ? void 0 : _e2[0].shape) ? (_f2 = model7 == null ? void 0 : model7.inputs) == null ? void 0 : _f2[0].shape[2] : 256;
  return model7;
}
var triangulation = TRI468;
var uvmap = UV468;
var annotations = ["angry", "disgust", "fear", "happy", "sad", "surprise", "neutral"];
var model8;
var last3 = [];
var lastCount = 0;
var lastTime4 = 0;
var skipped4 = Number.MAX_SAFE_INTEGER;
async function load6(config3) {
  var _a2;
  if (env.initial)
    model8 = null;
  if (!model8)
    model8 = await loadModel((_a2 = config3.face.emotion) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model8["modelUrl"]);
  return model8;
}
async function predict5(image, config3, idx, count2) {
  var _a2, _b2;
  if (!model8)
    return [];
  const skipFrame = skipped4 < (((_a2 = config3.face.emotion) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face.emotion) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime4;
  if (config3.skipAllowed && skipTime && skipFrame && lastCount === count2 && last3[idx] && last3[idx].length > 0) {
    skipped4++;
    return last3[idx];
  }
  skipped4 = 0;
  return new Promise(async (resolve) => {
    var _a3;
    const obj = [];
    if ((_a3 = config3.face.emotion) == null ? void 0 : _a3.enabled) {
      const t6 = {};
      const inputSize10 = (model8 == null ? void 0 : model8.inputs[0].shape) ? model8.inputs[0].shape[2] : 0;
      t6.resize = uq.resizeBilinear(image, [inputSize10, inputSize10], false);
      t6.channels = ae(t6.resize, constants.rgb);
      t6.grayscale = et(t6.channels, 3, true);
      t6.grayscaleSub = Ne(t6.grayscale, constants.tf05);
      t6.grayscaleMul = ae(t6.grayscaleSub, constants.tf2);
      t6.emotion = model8 == null ? void 0 : model8.execute(t6.grayscaleMul);
      lastTime4 = now();
      const data = await t6.emotion.data();
      for (let i = 0; i < data.length; i++) {
        if (data[i] > (config3.face.emotion.minConfidence || 0))
          obj.push({ score: Math.min(0.99, Math.trunc(100 * data[i]) / 100), emotion: annotations[i] });
      }
      obj.sort((a, b) => b.score - a.score);
      Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
    }
    last3[idx] = obj;
    lastCount = count2;
    resolve(obj);
  });
}
var model9;
var last4 = [];
var lastTime5 = 0;
var lastCount2 = 0;
var skipped5 = Number.MAX_SAFE_INTEGER;
async function load7(config3) {
  var _a2;
  if (env.initial)
    model9 = null;
  if (!model9)
    model9 = await loadModel((_a2 = config3.face.description) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model9["modelUrl"]);
  return model9;
}
function enhance(input) {
  const tensor = input.image || input.tensor || input;
  if (!(model9 == null ? void 0 : model9.inputs[0].shape))
    return tensor;
  const crop = uq.resizeBilinear(tensor, [model9.inputs[0].shape[2], model9.inputs[0].shape[1]], false);
  const norm = ae(crop, constants.tf255);
  Dt(crop);
  return norm;
}
async function predict6(image, config3, idx, count2) {
  var _a2, _b2, _c2, _d2;
  const obj = {
    age: 0,
    gender: "unknown",
    genderScore: 0,
    descriptor: []
  };
  if (!(model9 == null ? void 0 : model9["executor"]))
    return obj;
  const skipFrame = skipped5 < (((_a2 = config3.face.description) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face.description) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime5;
  if (config3.skipAllowed && skipFrame && skipTime && lastCount2 === count2 && ((_c2 = last4 == null ? void 0 : last4[idx]) == null ? void 0 : _c2.age) > 0 && ((_d2 = last4 == null ? void 0 : last4[idx]) == null ? void 0 : _d2.genderScore) > 0) {
    skipped5++;
    return last4[idx];
  }
  skipped5 = 0;
  return new Promise(async (resolve) => {
    var _a3;
    if ((_a3 = config3.face.description) == null ? void 0 : _a3.enabled) {
      const enhanced = enhance(image);
      const resT = model9 == null ? void 0 : model9.execute(enhanced);
      lastTime5 = now();
      Dt(enhanced);
      const genderT = resT.find((t6) => t6.shape[1] === 1);
      const gender2 = await genderT.data();
      const confidence = Math.trunc(200 * Math.abs(gender2[0] - 0.5)) / 100;
      if (confidence > (config3.face.description.minConfidence || 0)) {
        obj.gender = gender2[0] <= 0.5 ? "female" : "male";
        obj.genderScore = Math.min(0.99, confidence);
      }
      const argmax = bv(resT.find((t6) => t6.shape[1] === 100), 1);
      const ageIdx = (await argmax.data())[0];
      Dt(argmax);
      const ageT = resT.find((t6) => t6.shape[1] === 100);
      const all2 = await ageT.data();
      obj.age = Math.round(all2[ageIdx - 1] > all2[ageIdx + 1] ? 10 * ageIdx - 100 * all2[ageIdx - 1] : 10 * ageIdx + 100 * all2[ageIdx + 1]) / 10;
      if (Number.isNaN(gender2[0]) || Number.isNaN(all2[0]))
        log("faceres error:", { model: model9, result: resT });
      const desc = resT.find((t6) => t6.shape[1] === 1024);
      const descriptor = desc ? await desc.data() : [];
      obj.descriptor = Array.from(descriptor);
      resT.forEach((t6) => Dt(t6));
    }
    last4[idx] = obj;
    lastCount2 = count2;
    resolve(obj);
  });
}
var expandFact = 0.1;
var alpha = 0.5;
function insidePoly(x, y10, polygon) {
  let inside = false;
  let j = polygon.length - 1;
  for (let i = 0; i < polygon.length; j = i++) {
    if (polygon[i].y > y10 !== polygon[j].y > y10 && x < (polygon[j].x - polygon[i].x) * (y10 - polygon[i].y) / (polygon[j].y - polygon[i].y) + polygon[i].x)
      inside = !inside;
  }
  return inside;
}
async function mask(face4) {
  if (!face4.tensor)
    return face4.tensor;
  if (!face4.mesh || face4.mesh.length < 100)
    return face4.tensor;
  const width = face4.tensor.shape[2] || 0;
  const height = face4.tensor.shape[1] || 0;
  const buffer = await face4.tensor.buffer();
  let silhouette = [];
  for (const pt of meshAnnotations.silhouette)
    silhouette.push({ x: (face4.mesh[pt][0] - face4.box[0]) / face4.box[2], y: (face4.mesh[pt][1] - face4.box[1]) / face4.box[3] });
  if (expandFact && expandFact > 0)
    silhouette = silhouette.map((pt) => ({ x: pt.x > 0.5 ? pt.x + expandFact : pt.x - expandFact, y: pt.y > 0.5 ? pt.y + expandFact : pt.y - expandFact }));
  for (let x = 0; x < width; x++) {
    for (let y10 = 0; y10 < height; y10++) {
      const inside = insidePoly(x / width, y10 / width, silhouette);
      if (!inside) {
        buffer.set(alpha * buffer.get(0, y10, x, 0), 0, y10, x, 0);
        buffer.set(alpha * buffer.get(0, y10, x, 1), 0, y10, x, 1);
        buffer.set(alpha * buffer.get(0, y10, x, 2), 0, y10, x, 2);
      }
    }
  }
  const output = buffer.toTensor();
  return output;
}
var model10;
var cached = [];
var skipped6 = Number.MAX_SAFE_INTEGER;
var lastCount3 = 0;
var lastTime6 = 0;
async function load8(config3) {
  var _a2;
  if (env.initial)
    model10 = null;
  if (!model10)
    model10 = await loadModel((_a2 = config3.face.antispoof) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model10["modelUrl"]);
  return model10;
}
async function predict7(image, config3, idx, count2) {
  var _a2, _b2;
  if (!(model10 == null ? void 0 : model10["executor"]))
    return 0;
  const skipTime = (((_a2 = config3.face.antispoof) == null ? void 0 : _a2.skipTime) || 0) > now() - lastTime6;
  const skipFrame = skipped6 < (((_b2 = config3.face.antispoof) == null ? void 0 : _b2.skipFrames) || 0);
  if (config3.skipAllowed && skipTime && skipFrame && lastCount3 === count2 && cached[idx]) {
    skipped6++;
    return cached[idx];
  }
  skipped6 = 0;
  return new Promise(async (resolve) => {
    const resize = uq.resizeBilinear(image, [(model10 == null ? void 0 : model10.inputs[0].shape) ? model10.inputs[0].shape[2] : 0, (model10 == null ? void 0 : model10.inputs[0].shape) ? model10.inputs[0].shape[1] : 0], false);
    const res = model10 == null ? void 0 : model10.execute(resize);
    const num = (await res.data())[0];
    cached[idx] = Math.round(100 * num) / 100;
    lastCount3 = count2;
    lastTime6 = now();
    Dt([resize, res]);
    resolve(cached[idx]);
  });
}
var model11;
var cached2 = [];
var skipped7 = Number.MAX_SAFE_INTEGER;
var lastCount4 = 0;
var lastTime7 = 0;
async function load9(config3) {
  var _a2;
  if (env.initial)
    model11 = null;
  if (!model11)
    model11 = await loadModel((_a2 = config3.face.liveness) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model11["modelUrl"]);
  return model11;
}
async function predict8(image, config3, idx, count2) {
  var _a2, _b2;
  if (!(model11 == null ? void 0 : model11["executor"]))
    return 0;
  const skipTime = (((_a2 = config3.face.liveness) == null ? void 0 : _a2.skipTime) || 0) > now() - lastTime7;
  const skipFrame = skipped7 < (((_b2 = config3.face.liveness) == null ? void 0 : _b2.skipFrames) || 0);
  if (config3.skipAllowed && skipTime && skipFrame && lastCount4 === count2 && cached2[idx]) {
    skipped7++;
    return cached2[idx];
  }
  skipped7 = 0;
  return new Promise(async (resolve) => {
    const resize = uq.resizeBilinear(image, [(model11 == null ? void 0 : model11.inputs[0].shape) ? model11.inputs[0].shape[2] : 0, (model11 == null ? void 0 : model11.inputs[0].shape) ? model11.inputs[0].shape[1] : 0], false);
    const res = model11 == null ? void 0 : model11.execute(resize);
    const num = (await res.data())[0];
    cached2[idx] = Math.round(100 * num) / 100;
    lastCount4 = count2;
    lastTime7 = now();
    Dt([resize, res]);
    resolve(cached2[idx]);
  });
}
var model12;
var last5 = [];
var raceNames = ["white", "black", "asian", "indian", "other"];
var ageWeights = [15, 23, 28, 35.5, 45.5, 55.5, 65];
var lastCount5 = 0;
var lastTime8 = 0;
var skipped8 = Number.MAX_SAFE_INTEGER;
async function load10(config3) {
  var _a2;
  if (env.initial)
    model12 = null;
  if (!model12)
    model12 = await loadModel((_a2 = config3.face.gear) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model12["modelUrl"]);
  return model12;
}
async function predict9(image, config3, idx, count2) {
  var _a2, _b2;
  if (!model12)
    return { age: 0, gender: "unknown", genderScore: 0, race: [] };
  const skipFrame = skipped8 < (((_a2 = config3.face.gear) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face.gear) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime8;
  if (config3.skipAllowed && skipTime && skipFrame && lastCount5 === count2 && last5[idx]) {
    skipped8++;
    return last5[idx];
  }
  skipped8 = 0;
  return new Promise(async (resolve) => {
    var _a3, _b3;
    if (!(model12 == null ? void 0 : model12.inputs[0].shape))
      return;
    const t6 = {};
    const box = [[0, 0.1, 0.9, 0.9]];
    t6.resize = uq.cropAndResize(image, box, [0], [model12.inputs[0].shape[2], model12.inputs[0].shape[1]]);
    const obj = { age: 0, gender: "unknown", genderScore: 0, race: [] };
    if ((_a3 = config3.face.gear) == null ? void 0 : _a3.enabled)
      [t6.age, t6.gender, t6.race] = model12.execute(t6.resize, ["age_output", "gender_output", "race_output"]);
    const gender2 = await t6.gender.data();
    obj.gender = gender2[0] > gender2[1] ? "male" : "female";
    obj.genderScore = Math.round(100 * (gender2[0] > gender2[1] ? gender2[0] : gender2[1])) / 100;
    const race = await t6.race.data();
    for (let i = 0; i < race.length; i++) {
      if (race[i] > (((_b3 = config3.face.gear) == null ? void 0 : _b3.minConfidence) || 0.2))
        obj.race.push({ score: Math.round(100 * race[i]) / 100, race: raceNames[i] });
    }
    obj.race.sort((a, b) => b.score - a.score);
    const ageDistribution = Array.from(await t6.age.data());
    const ageSorted = ageDistribution.map((a, i) => [ageWeights[i], a]).sort((a, b) => b[1] - a[1]);
    let age2 = ageSorted[0][0];
    for (let i = 1; i < ageSorted.length; i++)
      age2 += ageSorted[i][1] * (ageSorted[i][0] - age2);
    obj.age = Math.round(10 * age2) / 10;
    Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
    last5[idx] = obj;
    lastCount5 = count2;
    lastTime8 = now();
    resolve(obj);
  });
}
var model13;
var last6 = [];
var lastCount6 = 0;
var lastTime9 = 0;
var skipped9 = Number.MAX_SAFE_INTEGER;
async function load11(config3) {
  if (env.initial)
    model13 = null;
  if (!model13)
    model13 = await loadModel(config3.face["ssrnet"].modelPathAge);
  else if (config3.debug)
    log("cached model:", model13["modelUrl"]);
  return model13;
}
async function predict10(image, config3, idx, count2) {
  var _a2, _b2, _c2, _d2;
  if (!model13)
    return { age: 0 };
  const skipFrame = skipped9 < (((_a2 = config3.face["ssrnet"]) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face["ssrnet"]) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime9;
  if (config3.skipAllowed && skipFrame && skipTime && lastCount6 === count2 && ((_c2 = last6[idx]) == null ? void 0 : _c2.age) && ((_d2 = last6[idx]) == null ? void 0 : _d2.age) > 0) {
    skipped9++;
    return last6[idx];
  }
  skipped9 = 0;
  return new Promise(async (resolve) => {
    var _a3;
    if (!(model13 == null ? void 0 : model13.inputs) || !model13.inputs[0] || !model13.inputs[0].shape)
      return;
    const t6 = {};
    t6.resize = uq.resizeBilinear(image, [model13.inputs[0].shape[2], model13.inputs[0].shape[1]], false);
    t6.enhance = ae(t6.resize, constants.tf255);
    const obj = { age: 0 };
    if ((_a3 = config3.face["ssrnet"]) == null ? void 0 : _a3.enabled)
      t6.age = model13.execute(t6.enhance);
    if (t6.age) {
      const data = await t6.age.data();
      obj.age = Math.trunc(10 * data[0]) / 10;
    }
    Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
    last6[idx] = obj;
    lastCount6 = count2;
    lastTime9 = now();
    resolve(obj);
  });
}
var model14;
var last7 = [];
var lastCount7 = 0;
var lastTime10 = 0;
var skipped10 = Number.MAX_SAFE_INTEGER;
var rgb = [0.2989, 0.587, 0.114];
async function load12(config3) {
  var _a2;
  if (env.initial)
    model14 = null;
  if (!model14)
    model14 = await loadModel((_a2 = config3.face["ssrnet"]) == null ? void 0 : _a2.modelPathGender);
  else if (config3.debug)
    log("cached model:", model14["modelUrl"]);
  return model14;
}
async function predict11(image, config3, idx, count2) {
  var _a2, _b2, _c2, _d2;
  if (!model14)
    return { gender: "unknown", genderScore: 0 };
  const skipFrame = skipped10 < (((_a2 = config3.face["ssrnet"]) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face["ssrnet"]) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime10;
  if (config3.skipAllowed && skipFrame && skipTime && lastCount7 === count2 && ((_c2 = last7[idx]) == null ? void 0 : _c2.gender) && ((_d2 = last7[idx]) == null ? void 0 : _d2.genderScore) > 0) {
    skipped10++;
    return last7[idx];
  }
  skipped10 = 0;
  return new Promise(async (resolve) => {
    var _a3;
    if (!(model14 == null ? void 0 : model14.inputs[0].shape))
      return;
    const t6 = {};
    t6.resize = uq.resizeBilinear(image, [model14.inputs[0].shape[2], model14.inputs[0].shape[1]], false);
    t6.enhance = Ee(() => {
      const [red, green, blue] = Oa(t6.resize, 3, 3);
      const redNorm = ae(red, rgb[0]);
      const greenNorm = ae(green, rgb[1]);
      const blueNorm = ae(blue, rgb[2]);
      const grayscale = gv([redNorm, greenNorm, blueNorm]);
      const normalize2 = ae(Ne(grayscale, constants.tf05), 2);
      return normalize2;
    });
    const obj = { gender: "unknown", genderScore: 0 };
    if ((_a3 = config3.face["ssrnet"]) == null ? void 0 : _a3.enabled)
      t6.gender = model14.execute(t6.enhance);
    const data = await t6.gender.data();
    obj.gender = data[0] > data[1] ? "female" : "male";
    obj.genderScore = data[0] > data[1] ? Math.trunc(100 * data[0]) / 100 : Math.trunc(100 * data[1]) / 100;
    Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
    last7[idx] = obj;
    lastCount7 = count2;
    lastTime10 = now();
    resolve(obj);
  });
}
var model15;
var last8 = [];
var lastCount8 = 0;
var lastTime11 = 0;
var skipped11 = Number.MAX_SAFE_INTEGER;
async function load13(config3) {
  var _a2;
  if (env.initial)
    model15 = null;
  if (!model15)
    model15 = await loadModel((_a2 = config3.face["mobilefacenet"]) == null ? void 0 : _a2.modelPath);
  else if (config3.debug)
    log("cached model:", model15["modelUrl"]);
  return model15;
}
async function predict12(input, config3, idx, count2) {
  var _a2, _b2;
  if (!(model15 == null ? void 0 : model15["executor"]))
    return [];
  const skipFrame = skipped11 < (((_a2 = config3.face["mobilefacenet"]) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face["mobilefacenet"]) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime11;
  if (config3.skipAllowed && skipTime && skipFrame && lastCount8 === count2 && last8[idx]) {
    skipped11++;
    return last8[idx];
  }
  return new Promise(async (resolve) => {
    var _a3;
    let data = [];
    if (((_a3 = config3.face["mobilefacenet"]) == null ? void 0 : _a3.enabled) && (model15 == null ? void 0 : model15.inputs[0].shape)) {
      const t6 = {};
      t6.crop = uq.resizeBilinear(input, [model15.inputs[0].shape[2], model15.inputs[0].shape[1]], false);
      t6.data = model15.execute(t6.crop);
      const output = await t6.data.data();
      data = Array.from(output);
      Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
    }
    last8[idx] = data;
    lastCount8 = count2;
    lastTime11 = now();
    resolve(data);
  });
}
var model16;
var last9 = [];
var lastCount9 = 0;
var lastTime12 = 0;
var skipped12 = Number.MAX_SAFE_INTEGER;
async function load14(config3) {
  if (env.initial)
    model16 = null;
  if (!model16)
    model16 = await loadModel(config3.face["insightface"].modelPath);
  else if (config3.debug)
    log("cached model:", model16["modelUrl"]);
  return model16;
}
async function predict13(input, config3, idx, count2) {
  var _a2, _b2;
  if (!(model16 == null ? void 0 : model16["executor"]))
    return [];
  const skipFrame = skipped12 < (((_a2 = config3.face["insightface"]) == null ? void 0 : _a2.skipFrames) || 0);
  const skipTime = (((_b2 = config3.face["insightface"]) == null ? void 0 : _b2.skipTime) || 0) > now() - lastTime12;
  if (config3.skipAllowed && skipTime && skipFrame && lastCount9 === count2 && last9[idx]) {
    skipped12++;
    return last9[idx];
  }
  return new Promise(async (resolve) => {
    var _a3;
    let data = [];
    if (((_a3 = config3.face["insightface"]) == null ? void 0 : _a3.enabled) && (model16 == null ? void 0 : model16.inputs[0].shape)) {
      const t6 = {};
      t6.crop = uq.resizeBilinear(input, [model16.inputs[0].shape[2], model16.inputs[0].shape[1]], false);
      t6.data = model16.execute(t6.crop);
      const output = await t6.data.data();
      data = Array.from(output);
      Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
    }
    last9[idx] = data;
    lastCount9 = count2;
    lastTime12 = now();
    resolve(data);
  });
}
var calculateGaze = (face4) => {
  const radians = (pt1, pt2) => Math.atan2(pt1[1] - pt2[1], pt1[0] - pt2[0]);
  if (!face4.annotations.rightEyeIris || !face4.annotations.leftEyeIris)
    return { bearing: 0, strength: 0 };
  const offsetIris = [0, -0.1];
  const eyeRatio = 1;
  const left = (face4.mesh[33][2] || 0) > (face4.mesh[263][2] || 0);
  const irisCenter = left ? face4.mesh[473] : face4.mesh[468];
  const eyeCenter = left ? [(face4.mesh[133][0] + face4.mesh[33][0]) / 2, (face4.mesh[133][1] + face4.mesh[33][1]) / 2] : [(face4.mesh[263][0] + face4.mesh[362][0]) / 2, (face4.mesh[263][1] + face4.mesh[362][1]) / 2];
  const eyeSize = left ? [face4.mesh[133][0] - face4.mesh[33][0], face4.mesh[23][1] - face4.mesh[27][1]] : [face4.mesh[263][0] - face4.mesh[362][0], face4.mesh[253][1] - face4.mesh[257][1]];
  const eyeDiff = [
    (eyeCenter[0] - irisCenter[0]) / eyeSize[0] - offsetIris[0],
    eyeRatio * (irisCenter[1] - eyeCenter[1]) / eyeSize[1] - offsetIris[1]
  ];
  let strength = Math.sqrt(eyeDiff[0] * eyeDiff[0] + eyeDiff[1] * eyeDiff[1]);
  strength = Math.min(strength, face4.boxRaw[2] / 2, face4.boxRaw[3] / 2);
  const bearing = (radians([0, 0], eyeDiff) + Math.PI / 2) % Math.PI;
  return { bearing, strength };
};
var calculateFaceAngle = (face4, imageSize) => {
  const normalize2 = (v10) => {
    const length = Math.sqrt(v10[0] * v10[0] + v10[1] * v10[1] + v10[2] * v10[2]);
    v10[0] /= length;
    v10[1] /= length;
    v10[2] /= length;
    return v10;
  };
  const subVectors = (a, b) => {
    const x = a[0] - b[0];
    const y10 = a[1] - b[1];
    const z8 = a[2] - b[2];
    return [x, y10, z8];
  };
  const crossVectors = (a, b) => {
    const x = a[1] * b[2] - a[2] * b[1];
    const y10 = a[2] * b[0] - a[0] * b[2];
    const z8 = a[0] * b[1] - a[1] * b[0];
    return [x, y10, z8];
  };
  const rotationMatrixToEulerAngle = (r) => {
    const [r00, _r01, _r02, r10, r11, r12, r20, r21, r22] = r;
    let thetaX;
    let thetaY;
    let thetaZ;
    if (r10 < 1) {
      if (r10 > -1) {
        thetaZ = Math.asin(r10);
        thetaY = Math.atan2(-r20, r00);
        thetaX = Math.atan2(-r12, r11);
      } else {
        thetaZ = -Math.PI / 2;
        thetaY = -Math.atan2(r21, r22);
        thetaX = 0;
      }
    } else {
      thetaZ = Math.PI / 2;
      thetaY = Math.atan2(r21, r22);
      thetaX = 0;
    }
    if (Number.isNaN(thetaX))
      thetaX = 0;
    if (Number.isNaN(thetaY))
      thetaY = 0;
    if (Number.isNaN(thetaZ))
      thetaZ = 0;
    return { pitch: 2 * -thetaX, yaw: 2 * -thetaY, roll: 2 * -thetaZ };
  };
  const mesh = face4.meshRaw;
  if (!mesh || mesh.length < 300)
    return { angle: { pitch: 0, yaw: 0, roll: 0 }, matrix: [1, 0, 0, 0, 1, 0, 0, 0, 1], gaze: { bearing: 0, strength: 0 } };
  const size2 = Math.max(face4.boxRaw[2] * imageSize[0], face4.boxRaw[3] * imageSize[1]) / 1.5;
  const pts = [mesh[10], mesh[152], mesh[234], mesh[454]].map((pt) => [pt[0] * imageSize[0] / size2, pt[1] * imageSize[1] / size2, pt[2]]);
  const yAxis = normalize2(subVectors(pts[1], pts[0]));
  let xAxis = normalize2(subVectors(pts[3], pts[2]));
  const zAxis = normalize2(crossVectors(xAxis, yAxis));
  xAxis = crossVectors(yAxis, zAxis);
  const matrix = [
    xAxis[0],
    xAxis[1],
    xAxis[2],
    yAxis[0],
    yAxis[1],
    yAxis[2],
    zAxis[0],
    zAxis[1],
    zAxis[2]
  ];
  const angle = rotationMatrixToEulerAngle(matrix);
  const gaze = mesh.length === 478 ? calculateGaze(face4) : { bearing: 0, strength: 0 };
  return { angle, matrix, gaze };
};
function calculateCameraDistance(face4, width) {
  const f = face4 == null ? void 0 : face4.annotations;
  if (!f)
    return 0;
  const irisSize = Math.max(Math.abs(f.leftEyeIris[3][0] - f.leftEyeIris[1][0]), Math.abs(f.rightEyeIris[3][0] - f.rightEyeIris[1][0])) / width;
  const cameraDistance = Math.round(1.17 / irisSize) / 100;
  return cameraDistance;
}
var detectFace = async (instance, input) => {
  var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2, _k2, _l2, _m2, _n2, _o2, _p, _q2, _r2, _s2, _t, _u2, _v2, _w2;
  let timeStamp = now();
  let ageRes;
  let gearRes;
  let genderRes;
  let emotionRes;
  let mobilefacenetRes;
  let insightfaceRes;
  let antispoofRes;
  let livenessRes;
  let descRes;
  const faceRes = [];
  instance.state = "run:face";
  const faces = await predict4(input, instance.config);
  instance.performance.face = env.perfadd ? (instance.performance.face || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
  if (!input.shape || input.shape.length !== 4)
    return [];
  if (!faces)
    return [];
  for (let i = 0; i < faces.length; i++) {
    instance.analyze("Get Face");
    if (!faces[i].tensor || faces[i].tensor.isDisposedInternal) {
      log("Face object is disposed:", faces[i].tensor);
      continue;
    }
    if ((_a2 = instance.config.face.detector) == null ? void 0 : _a2.mask) {
      const masked = await mask(faces[i]);
      Dt(faces[i].tensor);
      if (masked)
        faces[i].tensor = masked;
    }
    const rotation = faces[i].mesh && faces[i].mesh.length > 200 ? calculateFaceAngle(faces[i], [input.shape[2], input.shape[1]]) : null;
    instance.analyze("Start Emotion:");
    if (instance.config.async) {
      emotionRes = ((_b2 = instance.config.face.emotion) == null ? void 0 : _b2.enabled) ? predict5(faces[i].tensor || nr([]), instance.config, i, faces.length) : [];
    } else {
      instance.state = "run:emotion";
      timeStamp = now();
      emotionRes = ((_c2 = instance.config.face.emotion) == null ? void 0 : _c2.enabled) ? await predict5(faces[i].tensor || nr([]), instance.config, i, faces.length) : [];
      instance.performance.emotion = env.perfadd ? (instance.performance.emotion || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End Emotion:");
    instance.analyze("Start AntiSpoof:");
    if (instance.config.async) {
      antispoofRes = ((_d2 = instance.config.face.antispoof) == null ? void 0 : _d2.enabled) ? predict7(faces[i].tensor || nr([]), instance.config, i, faces.length) : 0;
    } else {
      instance.state = "run:antispoof";
      timeStamp = now();
      antispoofRes = ((_e2 = instance.config.face.antispoof) == null ? void 0 : _e2.enabled) ? await predict7(faces[i].tensor || nr([]), instance.config, i, faces.length) : 0;
      instance.performance.antispoof = env.perfadd ? (instance.performance.antispoof || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End AntiSpoof:");
    instance.analyze("Start Liveness:");
    if (instance.config.async) {
      livenessRes = ((_f2 = instance.config.face.liveness) == null ? void 0 : _f2.enabled) ? predict8(faces[i].tensor || nr([]), instance.config, i, faces.length) : 0;
    } else {
      instance.state = "run:liveness";
      timeStamp = now();
      livenessRes = ((_g2 = instance.config.face.liveness) == null ? void 0 : _g2.enabled) ? await predict8(faces[i].tensor || nr([]), instance.config, i, faces.length) : 0;
      instance.performance.liveness = env.perfadd ? (instance.performance.antispoof || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End Liveness:");
    instance.analyze("Start GEAR:");
    if (instance.config.async) {
      gearRes = ((_h2 = instance.config.face.gear) == null ? void 0 : _h2.enabled) ? predict9(faces[i].tensor || nr([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:gear";
      timeStamp = now();
      gearRes = ((_i2 = instance.config.face.gear) == null ? void 0 : _i2.enabled) ? await predict9(faces[i].tensor || nr([]), instance.config, i, faces.length) : null;
      instance.performance.gear = Math.trunc(now() - timeStamp);
    }
    instance.analyze("End GEAR:");
    instance.analyze("Start SSRNet:");
    if (instance.config.async) {
      ageRes = ((_j2 = instance.config.face["ssrnet"]) == null ? void 0 : _j2.enabled) ? predict10(faces[i].tensor || nr([]), instance.config, i, faces.length) : null;
      genderRes = ((_k2 = instance.config.face["ssrnet"]) == null ? void 0 : _k2.enabled) ? predict11(faces[i].tensor || nr([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:ssrnet";
      timeStamp = now();
      ageRes = ((_l2 = instance.config.face["ssrnet"]) == null ? void 0 : _l2.enabled) ? await predict10(faces[i].tensor || nr([]), instance.config, i, faces.length) : null;
      genderRes = ((_m2 = instance.config.face["ssrnet"]) == null ? void 0 : _m2.enabled) ? await predict11(faces[i].tensor || nr([]), instance.config, i, faces.length) : null;
      instance.performance.ssrnet = Math.trunc(now() - timeStamp);
    }
    instance.analyze("End SSRNet:");
    instance.analyze("Start MobileFaceNet:");
    if (instance.config.async) {
      mobilefacenetRes = ((_n2 = instance.config.face["mobilefacenet"]) == null ? void 0 : _n2.enabled) ? predict12(faces[i].tensor || nr([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:mobilefacenet";
      timeStamp = now();
      mobilefacenetRes = ((_o2 = instance.config.face["mobilefacenet"]) == null ? void 0 : _o2.enabled) ? await predict12(faces[i].tensor || nr([]), instance.config, i, faces.length) : null;
      instance.performance.mobilefacenet = Math.trunc(now() - timeStamp);
    }
    instance.analyze("End MobileFaceNet:");
    instance.analyze("Start InsightFace:");
    if (instance.config.async) {
      insightfaceRes = ((_p = instance.config.face["insightface"]) == null ? void 0 : _p.enabled) ? predict13(faces[i].tensor || nr([]), instance.config, i, faces.length) : null;
    } else {
      instance.state = "run:mobilefacenet";
      timeStamp = now();
      insightfaceRes = ((_q2 = instance.config.face["insightface"]) == null ? void 0 : _q2.enabled) ? await predict13(faces[i].tensor || nr([]), instance.config, i, faces.length) : null;
      instance.performance.mobilefacenet = Math.trunc(now() - timeStamp);
    }
    instance.analyze("End InsightFace:");
    instance.analyze("Start Description:");
    if (instance.config.async) {
      descRes = predict6(faces[i].tensor || nr([]), instance.config, i, faces.length);
    } else {
      instance.state = "run:description";
      timeStamp = now();
      descRes = await predict6(faces[i].tensor || nr([]), instance.config, i, faces.length);
      instance.performance.description = env.perfadd ? (instance.performance.description || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
    }
    instance.analyze("End Description:");
    if (instance.config.async) {
      [ageRes, genderRes, emotionRes, mobilefacenetRes, insightfaceRes, descRes, gearRes, antispoofRes, livenessRes] = await Promise.all([ageRes, genderRes, emotionRes, mobilefacenetRes, insightfaceRes, descRes, gearRes, antispoofRes, livenessRes]);
    }
    instance.analyze("Finish Face:");
    if (((_r2 = instance.config.face["ssrnet"]) == null ? void 0 : _r2.enabled) && ageRes && genderRes) {
      descRes = {
        ...descRes,
        age: ageRes.age,
        gender: genderRes.gender,
        genderScore: genderRes.genderScore
      };
    }
    if (((_s2 = instance.config.face.gear) == null ? void 0 : _s2.enabled) && gearRes) {
      descRes = {
        ...descRes,
        age: gearRes.age,
        gender: gearRes.gender,
        genderScore: gearRes.genderScore,
        race: gearRes.race
      };
    }
    if (((_t = instance.config.face["mobilefacenet"]) == null ? void 0 : _t.enabled) && mobilefacenetRes) {
      descRes.descriptor = mobilefacenetRes;
    }
    if (((_u2 = instance.config.face["insightface"]) == null ? void 0 : _u2.enabled) && insightfaceRes) {
      descRes.descriptor = insightfaceRes;
    }
    const irisSize = ((_v2 = instance.config.face.iris) == null ? void 0 : _v2.enabled) ? calculateCameraDistance(faces[i], input.shape[2]) : 0;
    const tensor = ((_w2 = instance.config.face.detector) == null ? void 0 : _w2.return) ? Up(faces[i].tensor) : null;
    Dt(faces[i].tensor);
    if (faces[i].tensor)
      delete faces[i].tensor;
    const res = {
      ...faces[i],
      id: i
    };
    if (descRes.age)
      res.age = descRes.age;
    if (descRes.gender)
      res.gender = descRes.gender;
    if (descRes.genderScore)
      res.genderScore = descRes.genderScore;
    if (descRes.descriptor)
      res.embedding = descRes.descriptor;
    if (descRes.race)
      res.race = descRes.race;
    if (emotionRes)
      res.emotion = emotionRes;
    if (antispoofRes)
      res.real = antispoofRes;
    if (livenessRes)
      res.live = livenessRes;
    if (irisSize > 0)
      res.distance = irisSize;
    if (rotation)
      res.rotation = rotation;
    if (tensor)
      res.tensor = tensor;
    faceRes.push(res);
    instance.analyze("End Face");
  }
  instance.analyze("End FaceMesh:");
  if (instance.config.async) {
    if (instance.performance.face)
      delete instance.performance.face;
    if (instance.performance.age)
      delete instance.performance.age;
    if (instance.performance.gender)
      delete instance.performance.gender;
    if (instance.performance.emotion)
      delete instance.performance.emotion;
  }
  return faceRes;
};
var Finger = {
  thumb: 0,
  index: 1,
  middle: 2,
  ring: 3,
  pinky: 4,
  all: [0, 1, 2, 3, 4],
  nameMapping: { 0: "thumb", 1: "index", 2: "middle", 3: "ring", 4: "pinky" },
  pointsMapping: {
    0: [[0, 1], [1, 2], [2, 3], [3, 4]],
    1: [[0, 5], [5, 6], [6, 7], [7, 8]],
    2: [[0, 9], [9, 10], [10, 11], [11, 12]],
    3: [[0, 13], [13, 14], [14, 15], [15, 16]],
    4: [[0, 17], [17, 18], [18, 19], [19, 20]]
  },
  getName: (value) => Finger.nameMapping[value],
  getPoints: (value) => Finger.pointsMapping[value]
};
var FingerCurl = {
  none: 0,
  half: 1,
  full: 2,
  nameMapping: { 0: "none", 1: "half", 2: "full" },
  getName: (value) => FingerCurl.nameMapping[value]
};
var FingerDirection = {
  verticalUp: 0,
  verticalDown: 1,
  horizontalLeft: 2,
  horizontalRight: 3,
  diagonalUpRight: 4,
  diagonalUpLeft: 5,
  diagonalDownRight: 6,
  diagonalDownLeft: 7,
  nameMapping: { 0: "verticalUp", 1: "verticalDown", 2: "horizontalLeft", 3: "horizontalRight", 4: "diagonalUpRight", 5: "diagonalUpLeft", 6: "diagonalDownRight", 7: "diagonalDownLeft" },
  getName: (value) => FingerDirection.nameMapping[value]
};
var FingerGesture = class {
  constructor(name) {
    __publicField(this, "name");
    __publicField(this, "curls");
    __publicField(this, "directions");
    __publicField(this, "weights");
    __publicField(this, "weightsRelative");
    this.name = name;
    this.curls = {};
    this.directions = {};
    this.weights = [1, 1, 1, 1, 1];
    this.weightsRelative = [1, 1, 1, 1, 1];
  }
  curl(finger, curl, confidence) {
    if (typeof this.curls[finger] === "undefined")
      this.curls[finger] = [];
    this.curls[finger].push([curl, confidence]);
  }
  direction(finger, position, confidence) {
    if (!this.directions[finger])
      this.directions[finger] = [];
    this.directions[finger].push([position, confidence]);
  }
  weight(finger, weight) {
    this.weights[finger] = weight;
    const total = this.weights.reduce((a, b) => a + b, 0);
    this.weightsRelative = this.weights.map((el2) => el2 * 5 / total);
  }
  matchAgainst(detectedCurls, detectedDirections) {
    let confidence = 0;
    for (const fingerIdx in detectedCurls) {
      const detectedCurl = detectedCurls[fingerIdx];
      const expectedCurls = this.curls[fingerIdx];
      if (typeof expectedCurls === "undefined") {
        confidence += this.weightsRelative[fingerIdx];
        continue;
      }
      for (const [expectedCurl, score] of expectedCurls) {
        if (detectedCurl === expectedCurl) {
          confidence += score * this.weightsRelative[fingerIdx];
          break;
        }
      }
    }
    for (const fingerIdx in detectedDirections) {
      const detectedDirection = detectedDirections[fingerIdx];
      const expectedDirections = this.directions[fingerIdx];
      if (typeof expectedDirections === "undefined") {
        confidence += this.weightsRelative[fingerIdx];
        continue;
      }
      for (const [expectedDirection, score] of expectedDirections) {
        if (detectedDirection === expectedDirection) {
          confidence += score * this.weightsRelative[fingerIdx];
          break;
        }
      }
    }
    return confidence / 10;
  }
};
var { thumb, index, middle, ring, pinky } = Finger;
var { none, half, full } = FingerCurl;
var { verticalUp, verticalDown, horizontalLeft, horizontalRight, diagonalUpRight, diagonalUpLeft, diagonalDownRight, diagonalDownLeft } = FingerDirection;
var ThumbsUp = new FingerGesture("thumbs up");
ThumbsUp.curl(thumb, none, 1);
ThumbsUp.direction(thumb, verticalUp, 1);
ThumbsUp.direction(thumb, diagonalUpLeft, 0.25);
ThumbsUp.direction(thumb, diagonalUpRight, 0.25);
for (const finger of [Finger.index, Finger.middle, Finger.ring, Finger.pinky]) {
  ThumbsUp.curl(finger, full, 1);
  ThumbsUp.direction(finger, horizontalLeft, 1);
  ThumbsUp.direction(finger, horizontalRight, 1);
}
var Victory = new FingerGesture("victory");
Victory.curl(thumb, half, 0.5);
Victory.curl(thumb, none, 0.5);
Victory.direction(thumb, verticalUp, 1);
Victory.direction(thumb, diagonalUpLeft, 1);
Victory.curl(index, none, 1);
Victory.direction(index, verticalUp, 0.75);
Victory.direction(index, diagonalUpLeft, 1);
Victory.curl(middle, none, 1);
Victory.direction(middle, verticalUp, 1);
Victory.direction(middle, diagonalUpLeft, 0.75);
Victory.curl(ring, full, 1);
Victory.direction(ring, verticalUp, 0.2);
Victory.direction(ring, diagonalUpLeft, 1);
Victory.direction(ring, horizontalLeft, 0.2);
Victory.curl(pinky, full, 1);
Victory.direction(pinky, verticalUp, 0.2);
Victory.direction(pinky, diagonalUpLeft, 1);
Victory.direction(pinky, horizontalLeft, 0.2);
Victory.weight(index, 2);
Victory.weight(middle, 2);
var Point = new FingerGesture("point");
Point.curl(thumb, full, 1);
Point.curl(index, none, 0.5);
Point.curl(middle, full, 0.5);
Point.curl(ring, full, 0.5);
Point.curl(pinky, full, 0.5);
Point.weight(index, 2);
Point.weight(middle, 2);
var MiddleFinger = new FingerGesture("middle finger");
MiddleFinger.curl(thumb, none, 1);
MiddleFinger.curl(index, full, 0.5);
MiddleFinger.curl(middle, full, 0.5);
MiddleFinger.curl(ring, full, 0.5);
MiddleFinger.curl(pinky, full, 0.5);
MiddleFinger.weight(index, 2);
MiddleFinger.weight(middle, 2);
var OpenPalm = new FingerGesture("open palm");
OpenPalm.curl(thumb, none, 0.75);
OpenPalm.curl(index, none, 0.75);
OpenPalm.curl(middle, none, 0.75);
OpenPalm.curl(ring, none, 0.75);
OpenPalm.curl(pinky, none, 0.75);
var fingergesture_default = [ThumbsUp, Victory, Point, MiddleFinger, OpenPalm];
var minConfidence = 0.7;
var options3 = {
  HALF_CURL_START_LIMIT: 60,
  NO_CURL_START_LIMIT: 130,
  DISTANCE_VOTE_POWER: 1.1,
  SINGLE_ANGLE_VOTE_POWER: 0.9,
  TOTAL_ANGLE_VOTE_POWER: 1.6
};
function calculateSlope(point1x, point1y, point2x, point2y) {
  const value = (point1y - point2y) / (point1x - point2x);
  let slope = Math.atan(value) * 180 / Math.PI;
  if (slope <= 0)
    slope = -slope;
  else if (slope > 0)
    slope = 180 - slope;
  return slope;
}
function getSlopes(point1, point2) {
  if (!point1 || !point2)
    return [0, 0];
  const slopeXY = calculateSlope(point1[0], point1[1], point2[0], point2[1]);
  if (point1.length === 2)
    return slopeXY;
  const slopeYZ = calculateSlope(point1[1], point1[2], point2[1], point2[2]);
  return [slopeXY, slopeYZ];
}
function angleOrientationAt(angle, weightageAt = 1) {
  let isVertical = 0;
  let isDiagonal = 0;
  let isHorizontal = 0;
  if (angle >= 75 && angle <= 105)
    isVertical = 1 * weightageAt;
  else if (angle >= 25 && angle <= 155)
    isDiagonal = 1 * weightageAt;
  else
    isHorizontal = 1 * weightageAt;
  return [isVertical, isDiagonal, isHorizontal];
}
function estimateFingerCurl(startPoint, midPoint, endPoint) {
  const start_mid_x_dist = startPoint[0] - midPoint[0];
  const start_end_x_dist = startPoint[0] - endPoint[0];
  const mid_end_x_dist = midPoint[0] - endPoint[0];
  const start_mid_y_dist = startPoint[1] - midPoint[1];
  const start_end_y_dist = startPoint[1] - endPoint[1];
  const mid_end_y_dist = midPoint[1] - endPoint[1];
  const start_mid_z_dist = startPoint[2] - midPoint[2];
  const start_end_z_dist = startPoint[2] - endPoint[2];
  const mid_end_z_dist = midPoint[2] - endPoint[2];
  const start_mid_dist = Math.sqrt(start_mid_x_dist * start_mid_x_dist + start_mid_y_dist * start_mid_y_dist + start_mid_z_dist * start_mid_z_dist);
  const start_end_dist = Math.sqrt(start_end_x_dist * start_end_x_dist + start_end_y_dist * start_end_y_dist + start_end_z_dist * start_end_z_dist);
  const mid_end_dist = Math.sqrt(mid_end_x_dist * mid_end_x_dist + mid_end_y_dist * mid_end_y_dist + mid_end_z_dist * mid_end_z_dist);
  let cos_in = (mid_end_dist * mid_end_dist + start_mid_dist * start_mid_dist - start_end_dist * start_end_dist) / (2 * mid_end_dist * start_mid_dist);
  if (cos_in > 1)
    cos_in = 1;
  else if (cos_in < -1)
    cos_in = -1;
  let angleOfCurve = Math.acos(cos_in);
  angleOfCurve = 57.2958 * angleOfCurve % 180;
  let fingerCurl;
  if (angleOfCurve > options3.NO_CURL_START_LIMIT)
    fingerCurl = FingerCurl.none;
  else if (angleOfCurve > options3.HALF_CURL_START_LIMIT)
    fingerCurl = FingerCurl.half;
  else
    fingerCurl = FingerCurl.full;
  return fingerCurl;
}
function estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x) {
  let estimatedDirection;
  if (max_dist_x === Math.abs(start_end_x_dist)) {
    if (start_end_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  } else if (max_dist_x === Math.abs(start_mid_x_dist)) {
    if (start_mid_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  } else {
    if (mid_end_x_dist > 0)
      estimatedDirection = FingerDirection.horizontalLeft;
    else
      estimatedDirection = FingerDirection.horizontalRight;
  }
  return estimatedDirection;
}
function estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y) {
  let estimatedDirection;
  if (max_dist_y === Math.abs(start_end_y_dist)) {
    if (start_end_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  } else if (max_dist_y === Math.abs(start_mid_y_dist)) {
    if (start_mid_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  } else {
    if (mid_end_y_dist < 0)
      estimatedDirection = FingerDirection.verticalDown;
    else
      estimatedDirection = FingerDirection.verticalUp;
  }
  return estimatedDirection;
}
function estimateDiagonalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y, start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x) {
  let estimatedDirection;
  const reqd_vertical_direction = estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y);
  const reqd_horizontal_direction = estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  if (reqd_vertical_direction === FingerDirection.verticalUp) {
    if (reqd_horizontal_direction === FingerDirection.horizontalLeft)
      estimatedDirection = FingerDirection.diagonalUpLeft;
    else
      estimatedDirection = FingerDirection.diagonalUpRight;
  } else {
    if (reqd_horizontal_direction === FingerDirection.horizontalLeft)
      estimatedDirection = FingerDirection.diagonalDownLeft;
    else
      estimatedDirection = FingerDirection.diagonalDownRight;
  }
  return estimatedDirection;
}
function calculateFingerDirection(startPoint, midPoint, endPoint, fingerSlopes) {
  const start_mid_x_dist = startPoint[0] - midPoint[0];
  const start_end_x_dist = startPoint[0] - endPoint[0];
  const mid_end_x_dist = midPoint[0] - endPoint[0];
  const start_mid_y_dist = startPoint[1] - midPoint[1];
  const start_end_y_dist = startPoint[1] - endPoint[1];
  const mid_end_y_dist = midPoint[1] - endPoint[1];
  const max_dist_x = Math.max(Math.abs(start_mid_x_dist), Math.abs(start_end_x_dist), Math.abs(mid_end_x_dist));
  const max_dist_y = Math.max(Math.abs(start_mid_y_dist), Math.abs(start_end_y_dist), Math.abs(mid_end_y_dist));
  let voteVertical = 0;
  let voteDiagonal = 0;
  let voteHorizontal = 0;
  const start_end_x_y_dist_ratio = max_dist_y / (max_dist_x + 1e-5);
  if (start_end_x_y_dist_ratio > 1.5)
    voteVertical += options3.DISTANCE_VOTE_POWER;
  else if (start_end_x_y_dist_ratio > 0.66)
    voteDiagonal += options3.DISTANCE_VOTE_POWER;
  else
    voteHorizontal += options3.DISTANCE_VOTE_POWER;
  const start_mid_dist = Math.sqrt(start_mid_x_dist * start_mid_x_dist + start_mid_y_dist * start_mid_y_dist);
  const start_end_dist = Math.sqrt(start_end_x_dist * start_end_x_dist + start_end_y_dist * start_end_y_dist);
  const mid_end_dist = Math.sqrt(mid_end_x_dist * mid_end_x_dist + mid_end_y_dist * mid_end_y_dist);
  const max_dist = Math.max(start_mid_dist, start_end_dist, mid_end_dist);
  let calc_start_point_x = startPoint[0];
  let calc_start_point_y = startPoint[1];
  let calc_end_point_x = endPoint[0];
  let calc_end_point_y = endPoint[1];
  if (max_dist === start_mid_dist) {
    calc_end_point_x = endPoint[0];
    calc_end_point_y = endPoint[1];
  } else if (max_dist === mid_end_dist) {
    calc_start_point_x = midPoint[0];
    calc_start_point_y = midPoint[1];
  }
  const calcStartPoint = [calc_start_point_x, calc_start_point_y];
  const calcEndPoint = [calc_end_point_x, calc_end_point_y];
  const totalAngle = getSlopes(calcStartPoint, calcEndPoint);
  const votes = angleOrientationAt(totalAngle, options3.TOTAL_ANGLE_VOTE_POWER);
  voteVertical += votes[0];
  voteDiagonal += votes[1];
  voteHorizontal += votes[2];
  for (const fingerSlope of fingerSlopes) {
    const fingerVotes = angleOrientationAt(fingerSlope, options3.SINGLE_ANGLE_VOTE_POWER);
    voteVertical += fingerVotes[0];
    voteDiagonal += fingerVotes[1];
    voteHorizontal += fingerVotes[2];
  }
  let estimatedDirection;
  if (voteVertical === Math.max(voteVertical, voteDiagonal, voteHorizontal)) {
    estimatedDirection = estimateVerticalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y);
  } else if (voteHorizontal === Math.max(voteDiagonal, voteHorizontal)) {
    estimatedDirection = estimateHorizontalDirection(start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  } else {
    estimatedDirection = estimateDiagonalDirection(start_end_y_dist, start_mid_y_dist, mid_end_y_dist, max_dist_y, start_end_x_dist, start_mid_x_dist, mid_end_x_dist, max_dist_x);
  }
  return estimatedDirection;
}
function estimate(landmarks) {
  const slopesXY = [];
  const slopesYZ = [];
  const fingerCurls = [];
  const fingerDirections = [];
  if (!landmarks)
    return { curls: fingerCurls, directions: fingerDirections };
  for (const finger of Finger.all) {
    const points = Finger.getPoints(finger);
    const slopeAtXY = [];
    const slopeAtYZ = [];
    for (const point2 of points) {
      const point1 = landmarks[point2[0]];
      const point22 = landmarks[point2[1]];
      const slopes = getSlopes(point1, point22);
      const slopeXY = slopes[0];
      const slopeYZ = slopes[1];
      slopeAtXY.push(slopeXY);
      slopeAtYZ.push(slopeYZ);
    }
    slopesXY.push(slopeAtXY);
    slopesYZ.push(slopeAtYZ);
  }
  for (const finger of Finger.all) {
    const pointIndexAt = finger === Finger.thumb ? 1 : 0;
    const fingerPointsAt = Finger.getPoints(finger);
    const startPoint = landmarks[fingerPointsAt[pointIndexAt][0]];
    const midPoint = landmarks[fingerPointsAt[pointIndexAt + 1][1]];
    const endPoint = landmarks[fingerPointsAt[3][1]];
    const fingerCurled = estimateFingerCurl(startPoint, midPoint, endPoint);
    const fingerPosition = calculateFingerDirection(startPoint, midPoint, endPoint, slopesXY[finger].slice(pointIndexAt));
    fingerCurls[finger] = fingerCurled;
    fingerDirections[finger] = fingerPosition;
  }
  return { curls: fingerCurls, directions: fingerDirections };
}
function analyze(keypoints) {
  if (!keypoints || keypoints.length === 0)
    return null;
  const estimatorRes = estimate(keypoints);
  const landmarks = {};
  for (const fingerIdx of Finger.all) {
    landmarks[Finger.getName(fingerIdx)] = {
      curl: FingerCurl.getName(estimatorRes.curls[fingerIdx]),
      direction: FingerDirection.getName(estimatorRes.directions[fingerIdx])
    };
  }
  return landmarks;
}
function match(keypoints) {
  const poses = [];
  if (!keypoints || keypoints.length === 0)
    return poses;
  const estimatorRes = estimate(keypoints);
  for (const gesture2 of fingergesture_default) {
    const confidence = gesture2.matchAgainst(estimatorRes.curls, estimatorRes.directions);
    if (confidence >= minConfidence)
      poses.push({ name: gesture2.name, confidence });
  }
  return poses;
}
var body2 = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    const leftWrist = res[i].keypoints.find((a) => a.part === "leftWrist");
    const rightWrist = res[i].keypoints.find((a) => a.part === "rightWrist");
    const nose = res[i].keypoints.find((a) => a.part === "nose");
    if (nose && leftWrist && rightWrist && leftWrist.position[1] < nose.position[1] && rightWrist.position[1] < nose.position[1])
      gestures.push({ body: i, gesture: "i give up" });
    else if (nose && leftWrist && leftWrist.position[1] < nose.position[1])
      gestures.push({ body: i, gesture: "raise left hand" });
    else if (nose && rightWrist && rightWrist.position[1] < nose.position[1])
      gestures.push({ body: i, gesture: "raise right hand" });
    const leftShoulder = res[i].keypoints.find((a) => a.part === "leftShoulder");
    const rightShoulder = res[i].keypoints.find((a) => a.part === "rightShoulder");
    if (leftShoulder && rightShoulder && Math.abs(leftShoulder.positionRaw[1] - rightShoulder.positionRaw[1]) > 0.1) {
      gestures.push({ body: i, gesture: `leaning ${leftShoulder.position[1] > rightShoulder.position[1] ? "left" : "right"}` });
    }
  }
  return gestures;
};
var face2 = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    if (res[i].mesh && res[i].mesh.length > 450) {
      const zDiff = (res[i].mesh[33][2] || 0) - (res[i].mesh[263][2] || 0);
      const xDiff = res[i].mesh[33][0] - res[i].mesh[263][0];
      if (Math.abs(zDiff / xDiff) <= 0.15)
        gestures.push({ face: i, gesture: "facing center" });
      else
        gestures.push({ face: i, gesture: `facing ${zDiff < 0 ? "left" : "right"}` });
      const openLeft = Math.abs(res[i].mesh[374][1] - res[i].mesh[386][1]) / Math.abs(res[i].mesh[443][1] - res[i].mesh[450][1]);
      if (openLeft < 0.2)
        gestures.push({ face: i, gesture: "blink left eye" });
      const openRight = Math.abs(res[i].mesh[145][1] - res[i].mesh[159][1]) / Math.abs(res[i].mesh[223][1] - res[i].mesh[230][1]);
      if (openRight < 0.2)
        gestures.push({ face: i, gesture: "blink right eye" });
      const mouthOpen = Math.min(100, 500 * Math.abs(res[i].mesh[13][1] - res[i].mesh[14][1]) / Math.abs(res[i].mesh[10][1] - res[i].mesh[152][1]));
      if (mouthOpen > 10)
        gestures.push({ face: i, gesture: `mouth ${Math.trunc(mouthOpen)}% open` });
      const chinDepth = res[i].mesh[152][2] || 0;
      if (Math.abs(chinDepth) > 10)
        gestures.push({ face: i, gesture: `head ${chinDepth < 0 ? "up" : "down"}` });
    }
  }
  return gestures;
};
var iris2 = (res) => {
  var _a2, _b2, _c2, _d2;
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    if (!((_b2 = (_a2 = res[i].annotations) == null ? void 0 : _a2.leftEyeIris) == null ? void 0 : _b2[0]) || !((_d2 = (_c2 = res[i].annotations) == null ? void 0 : _c2.rightEyeIris) == null ? void 0 : _d2[0]))
      continue;
    const sizeXLeft = res[i].annotations.leftEyeIris[3][0] - res[i].annotations.leftEyeIris[1][0];
    const sizeYLeft = res[i].annotations.leftEyeIris[4][1] - res[i].annotations.leftEyeIris[2][1];
    const areaLeft = Math.abs(sizeXLeft * sizeYLeft);
    const sizeXRight = res[i].annotations.rightEyeIris[3][0] - res[i].annotations.rightEyeIris[1][0];
    const sizeYRight = res[i].annotations.rightEyeIris[4][1] - res[i].annotations.rightEyeIris[2][1];
    const areaRight = Math.abs(sizeXRight * sizeYRight);
    let center = false;
    const difference = Math.abs(areaLeft - areaRight) / Math.max(areaLeft, areaRight);
    if (difference < 0.25) {
      center = true;
      gestures.push({ iris: i, gesture: "facing center" });
    }
    const leftIrisCenterX = Math.abs(res[i].mesh[263][0] - res[i].annotations.leftEyeIris[0][0]) / res[i].box[2];
    const rightIrisCenterX = Math.abs(res[i].mesh[33][0] - res[i].annotations.rightEyeIris[0][0]) / res[i].box[2];
    if (leftIrisCenterX > 0.06 || rightIrisCenterX > 0.06)
      center = false;
    if (leftIrisCenterX > rightIrisCenterX) {
      if (leftIrisCenterX > 0.05)
        gestures.push({ iris: i, gesture: "looking right" });
    } else {
      if (rightIrisCenterX > 0.05)
        gestures.push({ iris: i, gesture: "looking left" });
    }
    const rightIrisCenterY = Math.abs(res[i].mesh[145][1] - res[i].annotations.rightEyeIris[0][1]) / res[i].box[3];
    const leftIrisCenterY = Math.abs(res[i].mesh[374][1] - res[i].annotations.leftEyeIris[0][1]) / res[i].box[3];
    if (leftIrisCenterY < 0.01 || rightIrisCenterY < 0.01 || leftIrisCenterY > 0.022 || rightIrisCenterY > 0.022)
      center = false;
    if (leftIrisCenterY < 0.01 || rightIrisCenterY < 0.01)
      gestures.push({ iris: i, gesture: "looking down" });
    if (leftIrisCenterY > 0.022 || rightIrisCenterY > 0.022)
      gestures.push({ iris: i, gesture: "looking up" });
    if (center)
      gestures.push({ iris: i, gesture: "looking center" });
  }
  return gestures;
};
var hand2 = (res) => {
  if (!res)
    return [];
  const gestures = [];
  for (let i = 0; i < res.length; i++) {
    const fingers = [];
    if (res[i].annotations) {
      for (const [finger, pos] of Object.entries(res[i].annotations)) {
        if (finger !== "palmBase" && Array.isArray(pos) && pos[0])
          fingers.push({ name: finger.toLowerCase(), position: pos[0] });
      }
    }
    if (fingers && fingers.length > 0) {
      const closest = fingers.reduce((best, a) => (best.position[2] || 0) < (a.position[2] || 0) ? best : a);
      gestures.push({ hand: i, gesture: `${closest.name} forward` });
      const highest = fingers.reduce((best, a) => best.position[1] < a.position[1] ? best : a);
      gestures.push({ hand: i, gesture: `${highest.name} up` });
    }
    if (res[i].keypoints) {
      const poses = match(res[i].keypoints);
      for (const pose of poses)
        gestures.push({ hand: i, gesture: pose.name });
    }
  }
  return gestures;
};
function getBoxSize2(box) {
  return [
    Math.abs(box.endPoint[0] - box.startPoint[0]),
    Math.abs(box.endPoint[1] - box.startPoint[1])
  ];
}
function getBoxCenter2(box) {
  return [
    box.startPoint[0] + (box.endPoint[0] - box.startPoint[0]) / 2,
    box.startPoint[1] + (box.endPoint[1] - box.startPoint[1]) / 2
  ];
}
function cutBoxFromImageAndResize(box, image, cropSize) {
  const h = image.shape[1];
  const w = image.shape[2];
  const boxes = [[
    box.startPoint[1] / h,
    box.startPoint[0] / w,
    box.endPoint[1] / h,
    box.endPoint[0] / w
  ]];
  return uq.cropAndResize(image, boxes, [0], cropSize);
}
function scaleBoxCoordinates2(box, factor) {
  const startPoint = [box.startPoint[0] * factor[0], box.startPoint[1] * factor[1]];
  const endPoint = [box.endPoint[0] * factor[0], box.endPoint[1] * factor[1]];
  const palmLandmarks = box.palmLandmarks.map((coord) => {
    const scaledCoord = [coord[0] * factor[0], coord[1] * factor[1]];
    return scaledCoord;
  });
  return { startPoint, endPoint, palmLandmarks, confidence: box.confidence };
}
function enlargeBox2(box, factor = 1.5) {
  const center = getBoxCenter2(box);
  const size2 = getBoxSize2(box);
  const newHalfSize = [factor * size2[0] / 2, factor * size2[1] / 2];
  const startPoint = [center[0] - newHalfSize[0], center[1] - newHalfSize[1]];
  const endPoint = [center[0] + newHalfSize[0], center[1] + newHalfSize[1]];
  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };
}
function squarifyBox2(box) {
  const centers = getBoxCenter2(box);
  const size2 = getBoxSize2(box);
  const maxEdge = Math.max(...size2);
  const halfSize = maxEdge / 2;
  const startPoint = [centers[0] - halfSize, centers[1] - halfSize];
  const endPoint = [centers[0] + halfSize, centers[1] + halfSize];
  return { startPoint, endPoint, palmLandmarks: box.palmLandmarks };
}
function normalizeRadians2(angle) {
  return angle - 2 * Math.PI * Math.floor((angle + Math.PI) / (2 * Math.PI));
}
function computeRotation2(point1, point2) {
  const radians = Math.PI / 2 - Math.atan2(-(point2[1] - point1[1]), point2[0] - point1[0]);
  return normalizeRadians2(radians);
}
var buildTranslationMatrix2 = (x, y10) => [[1, 0, x], [0, 1, y10], [0, 0, 1]];
function dot2(v12, v22) {
  let product = 0;
  for (let i = 0; i < v12.length; i++) {
    product += v12[i] * v22[i];
  }
  return product;
}
function getColumnFrom2DArr2(arr, columnIndex) {
  const column = [];
  for (let i = 0; i < arr.length; i++) {
    column.push(arr[i][columnIndex]);
  }
  return column;
}
function multiplyTransformMatrices2(mat1, mat2) {
  const product = [];
  const size2 = mat1.length;
  for (let row = 0; row < size2; row++) {
    product.push([]);
    for (let col = 0; col < size2; col++) {
      product[row].push(dot2(mat1[row], getColumnFrom2DArr2(mat2, col)));
    }
  }
  return product;
}
function buildRotationMatrix2(rotation, center) {
  const cosA = Math.cos(rotation);
  const sinA = Math.sin(rotation);
  const rotationMatrix = [[cosA, -sinA, 0], [sinA, cosA, 0], [0, 0, 1]];
  const translationMatrix = buildTranslationMatrix2(center[0], center[1]);
  const translationTimesRotation = multiplyTransformMatrices2(translationMatrix, rotationMatrix);
  const negativeTranslationMatrix = buildTranslationMatrix2(-center[0], -center[1]);
  return multiplyTransformMatrices2(translationTimesRotation, negativeTranslationMatrix);
}
function invertTransformMatrix2(matrix) {
  const rotationComponent = [[matrix[0][0], matrix[1][0]], [matrix[0][1], matrix[1][1]]];
  const translationComponent = [matrix[0][2], matrix[1][2]];
  const invertedTranslation = [
    -dot2(rotationComponent[0], translationComponent),
    -dot2(rotationComponent[1], translationComponent)
  ];
  return [
    rotationComponent[0].concat(invertedTranslation[0]),
    rotationComponent[1].concat(invertedTranslation[1]),
    [0, 0, 1]
  ];
}
function rotatePoint2(homogeneousCoordinate, rotationMatrix) {
  return [
    dot2(homogeneousCoordinate, rotationMatrix[0]),
    dot2(homogeneousCoordinate, rotationMatrix[1])
  ];
}
var anchors2 = [
  { x: 0.015625, y: 0.015625 },
  { x: 0.015625, y: 0.015625 },
  { x: 0.046875, y: 0.015625 },
  { x: 0.046875, y: 0.015625 },
  { x: 0.078125, y: 0.015625 },
  { x: 0.078125, y: 0.015625 },
  { x: 0.109375, y: 0.015625 },
  { x: 0.109375, y: 0.015625 },
  { x: 0.140625, y: 0.015625 },
  { x: 0.140625, y: 0.015625 },
  { x: 0.171875, y: 0.015625 },
  { x: 0.171875, y: 0.015625 },
  { x: 0.203125, y: 0.015625 },
  { x: 0.203125, y: 0.015625 },
  { x: 0.234375, y: 0.015625 },
  { x: 0.234375, y: 0.015625 },
  { x: 0.265625, y: 0.015625 },
  { x: 0.265625, y: 0.015625 },
  { x: 0.296875, y: 0.015625 },
  { x: 0.296875, y: 0.015625 },
  { x: 0.328125, y: 0.015625 },
  { x: 0.328125, y: 0.015625 },
  { x: 0.359375, y: 0.015625 },
  { x: 0.359375, y: 0.015625 },
  { x: 0.390625, y: 0.015625 },
  { x: 0.390625, y: 0.015625 },
  { x: 0.421875, y: 0.015625 },
  { x: 0.421875, y: 0.015625 },
  { x: 0.453125, y: 0.015625 },
  { x: 0.453125, y: 0.015625 },
  { x: 0.484375, y: 0.015625 },
  { x: 0.484375, y: 0.015625 },
  { x: 0.515625, y: 0.015625 },
  { x: 0.515625, y: 0.015625 },
  { x: 0.546875, y: 0.015625 },
  { x: 0.546875, y: 0.015625 },
  { x: 0.578125, y: 0.015625 },
  { x: 0.578125, y: 0.015625 },
  { x: 0.609375, y: 0.015625 },
  { x: 0.609375, y: 0.015625 },
  { x: 0.640625, y: 0.015625 },
  { x: 0.640625, y: 0.015625 },
  { x: 0.671875, y: 0.015625 },
  { x: 0.671875, y: 0.015625 },
  { x: 0.703125, y: 0.015625 },
  { x: 0.703125, y: 0.015625 },
  { x: 0.734375, y: 0.015625 },
  { x: 0.734375, y: 0.015625 },
  { x: 0.765625, y: 0.015625 },
  { x: 0.765625, y: 0.015625 },
  { x: 0.796875, y: 0.015625 },
  { x: 0.796875, y: 0.015625 },
  { x: 0.828125, y: 0.015625 },
  { x: 0.828125, y: 0.015625 },
  { x: 0.859375, y: 0.015625 },
  { x: 0.859375, y: 0.015625 },
  { x: 0.890625, y: 0.015625 },
  { x: 0.890625, y: 0.015625 },
  { x: 0.921875, y: 0.015625 },
  { x: 0.921875, y: 0.015625 },
  { x: 0.953125, y: 0.015625 },
  { x: 0.953125, y: 0.015625 },
  { x: 0.984375, y: 0.015625 },
  { x: 0.984375, y: 0.015625 },
  { x: 0.015625, y: 0.046875 },
  { x: 0.015625, y: 0.046875 },
  { x: 0.046875, y: 0.046875 },
  { x: 0.046875, y: 0.046875 },
  { x: 0.078125, y: 0.046875 },
  { x: 0.078125, y: 0.046875 },
  { x: 0.109375, y: 0.046875 },
  { x: 0.109375, y: 0.046875 },
  { x: 0.140625, y: 0.046875 },
  { x: 0.140625, y: 0.046875 },
  { x: 0.171875, y: 0.046875 },
  { x: 0.171875, y: 0.046875 },
  { x: 0.203125, y: 0.046875 },
  { x: 0.203125, y: 0.046875 },
  { x: 0.234375, y: 0.046875 },
  { x: 0.234375, y: 0.046875 },
  { x: 0.265625, y: 0.046875 },
  { x: 0.265625, y: 0.046875 },
  { x: 0.296875, y: 0.046875 },
  { x: 0.296875, y: 0.046875 },
  { x: 0.328125, y: 0.046875 },
  { x: 0.328125, y: 0.046875 },
  { x: 0.359375, y: 0.046875 },
  { x: 0.359375, y: 0.046875 },
  { x: 0.390625, y: 0.046875 },
  { x: 0.390625, y: 0.046875 },
  { x: 0.421875, y: 0.046875 },
  { x: 0.421875, y: 0.046875 },
  { x: 0.453125, y: 0.046875 },
  { x: 0.453125, y: 0.046875 },
  { x: 0.484375, y: 0.046875 },
  { x: 0.484375, y: 0.046875 },
  { x: 0.515625, y: 0.046875 },
  { x: 0.515625, y: 0.046875 },
  { x: 0.546875, y: 0.046875 },
  { x: 0.546875, y: 0.046875 },
  { x: 0.578125, y: 0.046875 },
  { x: 0.578125, y: 0.046875 },
  { x: 0.609375, y: 0.046875 },
  { x: 0.609375, y: 0.046875 },
  { x: 0.640625, y: 0.046875 },
  { x: 0.640625, y: 0.046875 },
  { x: 0.671875, y: 0.046875 },
  { x: 0.671875, y: 0.046875 },
  { x: 0.703125, y: 0.046875 },
  { x: 0.703125, y: 0.046875 },
  { x: 0.734375, y: 0.046875 },
  { x: 0.734375, y: 0.046875 },
  { x: 0.765625, y: 0.046875 },
  { x: 0.765625, y: 0.046875 },
  { x: 0.796875, y: 0.046875 },
  { x: 0.796875, y: 0.046875 },
  { x: 0.828125, y: 0.046875 },
  { x: 0.828125, y: 0.046875 },
  { x: 0.859375, y: 0.046875 },
  { x: 0.859375, y: 0.046875 },
  { x: 0.890625, y: 0.046875 },
  { x: 0.890625, y: 0.046875 },
  { x: 0.921875, y: 0.046875 },
  { x: 0.921875, y: 0.046875 },
  { x: 0.953125, y: 0.046875 },
  { x: 0.953125, y: 0.046875 },
  { x: 0.984375, y: 0.046875 },
  { x: 0.984375, y: 0.046875 },
  { x: 0.015625, y: 0.078125 },
  { x: 0.015625, y: 0.078125 },
  { x: 0.046875, y: 0.078125 },
  { x: 0.046875, y: 0.078125 },
  { x: 0.078125, y: 0.078125 },
  { x: 0.078125, y: 0.078125 },
  { x: 0.109375, y: 0.078125 },
  { x: 0.109375, y: 0.078125 },
  { x: 0.140625, y: 0.078125 },
  { x: 0.140625, y: 0.078125 },
  { x: 0.171875, y: 0.078125 },
  { x: 0.171875, y: 0.078125 },
  { x: 0.203125, y: 0.078125 },
  { x: 0.203125, y: 0.078125 },
  { x: 0.234375, y: 0.078125 },
  { x: 0.234375, y: 0.078125 },
  { x: 0.265625, y: 0.078125 },
  { x: 0.265625, y: 0.078125 },
  { x: 0.296875, y: 0.078125 },
  { x: 0.296875, y: 0.078125 },
  { x: 0.328125, y: 0.078125 },
  { x: 0.328125, y: 0.078125 },
  { x: 0.359375, y: 0.078125 },
  { x: 0.359375, y: 0.078125 },
  { x: 0.390625, y: 0.078125 },
  { x: 0.390625, y: 0.078125 },
  { x: 0.421875, y: 0.078125 },
  { x: 0.421875, y: 0.078125 },
  { x: 0.453125, y: 0.078125 },
  { x: 0.453125, y: 0.078125 },
  { x: 0.484375, y: 0.078125 },
  { x: 0.484375, y: 0.078125 },
  { x: 0.515625, y: 0.078125 },
  { x: 0.515625, y: 0.078125 },
  { x: 0.546875, y: 0.078125 },
  { x: 0.546875, y: 0.078125 },
  { x: 0.578125, y: 0.078125 },
  { x: 0.578125, y: 0.078125 },
  { x: 0.609375, y: 0.078125 },
  { x: 0.609375, y: 0.078125 },
  { x: 0.640625, y: 0.078125 },
  { x: 0.640625, y: 0.078125 },
  { x: 0.671875, y: 0.078125 },
  { x: 0.671875, y: 0.078125 },
  { x: 0.703125, y: 0.078125 },
  { x: 0.703125, y: 0.078125 },
  { x: 0.734375, y: 0.078125 },
  { x: 0.734375, y: 0.078125 },
  { x: 0.765625, y: 0.078125 },
  { x: 0.765625, y: 0.078125 },
  { x: 0.796875, y: 0.078125 },
  { x: 0.796875, y: 0.078125 },
  { x: 0.828125, y: 0.078125 },
  { x: 0.828125, y: 0.078125 },
  { x: 0.859375, y: 0.078125 },
  { x: 0.859375, y: 0.078125 },
  { x: 0.890625, y: 0.078125 },
  { x: 0.890625, y: 0.078125 },
  { x: 0.921875, y: 0.078125 },
  { x: 0.921875, y: 0.078125 },
  { x: 0.953125, y: 0.078125 },
  { x: 0.953125, y: 0.078125 },
  { x: 0.984375, y: 0.078125 },
  { x: 0.984375, y: 0.078125 },
  { x: 0.015625, y: 0.109375 },
  { x: 0.015625, y: 0.109375 },
  { x: 0.046875, y: 0.109375 },
  { x: 0.046875, y: 0.109375 },
  { x: 0.078125, y: 0.109375 },
  { x: 0.078125, y: 0.109375 },
  { x: 0.109375, y: 0.109375 },
  { x: 0.109375, y: 0.109375 },
  { x: 0.140625, y: 0.109375 },
  { x: 0.140625, y: 0.109375 },
  { x: 0.171875, y: 0.109375 },
  { x: 0.171875, y: 0.109375 },
  { x: 0.203125, y: 0.109375 },
  { x: 0.203125, y: 0.109375 },
  { x: 0.234375, y: 0.109375 },
  { x: 0.234375, y: 0.109375 },
  { x: 0.265625, y: 0.109375 },
  { x: 0.265625, y: 0.109375 },
  { x: 0.296875, y: 0.109375 },
  { x: 0.296875, y: 0.109375 },
  { x: 0.328125, y: 0.109375 },
  { x: 0.328125, y: 0.109375 },
  { x: 0.359375, y: 0.109375 },
  { x: 0.359375, y: 0.109375 },
  { x: 0.390625, y: 0.109375 },
  { x: 0.390625, y: 0.109375 },
  { x: 0.421875, y: 0.109375 },
  { x: 0.421875, y: 0.109375 },
  { x: 0.453125, y: 0.109375 },
  { x: 0.453125, y: 0.109375 },
  { x: 0.484375, y: 0.109375 },
  { x: 0.484375, y: 0.109375 },
  { x: 0.515625, y: 0.109375 },
  { x: 0.515625, y: 0.109375 },
  { x: 0.546875, y: 0.109375 },
  { x: 0.546875, y: 0.109375 },
  { x: 0.578125, y: 0.109375 },
  { x: 0.578125, y: 0.109375 },
  { x: 0.609375, y: 0.109375 },
  { x: 0.609375, y: 0.109375 },
  { x: 0.640625, y: 0.109375 },
  { x: 0.640625, y: 0.109375 },
  { x: 0.671875, y: 0.109375 },
  { x: 0.671875, y: 0.109375 },
  { x: 0.703125, y: 0.109375 },
  { x: 0.703125, y: 0.109375 },
  { x: 0.734375, y: 0.109375 },
  { x: 0.734375, y: 0.109375 },
  { x: 0.765625, y: 0.109375 },
  { x: 0.765625, y: 0.109375 },
  { x: 0.796875, y: 0.109375 },
  { x: 0.796875, y: 0.109375 },
  { x: 0.828125, y: 0.109375 },
  { x: 0.828125, y: 0.109375 },
  { x: 0.859375, y: 0.109375 },
  { x: 0.859375, y: 0.109375 },
  { x: 0.890625, y: 0.109375 },
  { x: 0.890625, y: 0.109375 },
  { x: 0.921875, y: 0.109375 },
  { x: 0.921875, y: 0.109375 },
  { x: 0.953125, y: 0.109375 },
  { x: 0.953125, y: 0.109375 },
  { x: 0.984375, y: 0.109375 },
  { x: 0.984375, y: 0.109375 },
  { x: 0.015625, y: 0.140625 },
  { x: 0.015625, y: 0.140625 },
  { x: 0.046875, y: 0.140625 },
  { x: 0.046875, y: 0.140625 },
  { x: 0.078125, y: 0.140625 },
  { x: 0.078125, y: 0.140625 },
  { x: 0.109375, y: 0.140625 },
  { x: 0.109375, y: 0.140625 },
  { x: 0.140625, y: 0.140625 },
  { x: 0.140625, y: 0.140625 },
  { x: 0.171875, y: 0.140625 },
  { x: 0.171875, y: 0.140625 },
  { x: 0.203125, y: 0.140625 },
  { x: 0.203125, y: 0.140625 },
  { x: 0.234375, y: 0.140625 },
  { x: 0.234375, y: 0.140625 },
  { x: 0.265625, y: 0.140625 },
  { x: 0.265625, y: 0.140625 },
  { x: 0.296875, y: 0.140625 },
  { x: 0.296875, y: 0.140625 },
  { x: 0.328125, y: 0.140625 },
  { x: 0.328125, y: 0.140625 },
  { x: 0.359375, y: 0.140625 },
  { x: 0.359375, y: 0.140625 },
  { x: 0.390625, y: 0.140625 },
  { x: 0.390625, y: 0.140625 },
  { x: 0.421875, y: 0.140625 },
  { x: 0.421875, y: 0.140625 },
  { x: 0.453125, y: 0.140625 },
  { x: 0.453125, y: 0.140625 },
  { x: 0.484375, y: 0.140625 },
  { x: 0.484375, y: 0.140625 },
  { x: 0.515625, y: 0.140625 },
  { x: 0.515625, y: 0.140625 },
  { x: 0.546875, y: 0.140625 },
  { x: 0.546875, y: 0.140625 },
  { x: 0.578125, y: 0.140625 },
  { x: 0.578125, y: 0.140625 },
  { x: 0.609375, y: 0.140625 },
  { x: 0.609375, y: 0.140625 },
  { x: 0.640625, y: 0.140625 },
  { x: 0.640625, y: 0.140625 },
  { x: 0.671875, y: 0.140625 },
  { x: 0.671875, y: 0.140625 },
  { x: 0.703125, y: 0.140625 },
  { x: 0.703125, y: 0.140625 },
  { x: 0.734375, y: 0.140625 },
  { x: 0.734375, y: 0.140625 },
  { x: 0.765625, y: 0.140625 },
  { x: 0.765625, y: 0.140625 },
  { x: 0.796875, y: 0.140625 },
  { x: 0.796875, y: 0.140625 },
  { x: 0.828125, y: 0.140625 },
  { x: 0.828125, y: 0.140625 },
  { x: 0.859375, y: 0.140625 },
  { x: 0.859375, y: 0.140625 },
  { x: 0.890625, y: 0.140625 },
  { x: 0.890625, y: 0.140625 },
  { x: 0.921875, y: 0.140625 },
  { x: 0.921875, y: 0.140625 },
  { x: 0.953125, y: 0.140625 },
  { x: 0.953125, y: 0.140625 },
  { x: 0.984375, y: 0.140625 },
  { x: 0.984375, y: 0.140625 },
  { x: 0.015625, y: 0.171875 },
  { x: 0.015625, y: 0.171875 },
  { x: 0.046875, y: 0.171875 },
  { x: 0.046875, y: 0.171875 },
  { x: 0.078125, y: 0.171875 },
  { x: 0.078125, y: 0.171875 },
  { x: 0.109375, y: 0.171875 },
  { x: 0.109375, y: 0.171875 },
  { x: 0.140625, y: 0.171875 },
  { x: 0.140625, y: 0.171875 },
  { x: 0.171875, y: 0.171875 },
  { x: 0.171875, y: 0.171875 },
  { x: 0.203125, y: 0.171875 },
  { x: 0.203125, y: 0.171875 },
  { x: 0.234375, y: 0.171875 },
  { x: 0.234375, y: 0.171875 },
  { x: 0.265625, y: 0.171875 },
  { x: 0.265625, y: 0.171875 },
  { x: 0.296875, y: 0.171875 },
  { x: 0.296875, y: 0.171875 },
  { x: 0.328125, y: 0.171875 },
  { x: 0.328125, y: 0.171875 },
  { x: 0.359375, y: 0.171875 },
  { x: 0.359375, y: 0.171875 },
  { x: 0.390625, y: 0.171875 },
  { x: 0.390625, y: 0.171875 },
  { x: 0.421875, y: 0.171875 },
  { x: 0.421875, y: 0.171875 },
  { x: 0.453125, y: 0.171875 },
  { x: 0.453125, y: 0.171875 },
  { x: 0.484375, y: 0.171875 },
  { x: 0.484375, y: 0.171875 },
  { x: 0.515625, y: 0.171875 },
  { x: 0.515625, y: 0.171875 },
  { x: 0.546875, y: 0.171875 },
  { x: 0.546875, y: 0.171875 },
  { x: 0.578125, y: 0.171875 },
  { x: 0.578125, y: 0.171875 },
  { x: 0.609375, y: 0.171875 },
  { x: 0.609375, y: 0.171875 },
  { x: 0.640625, y: 0.171875 },
  { x: 0.640625, y: 0.171875 },
  { x: 0.671875, y: 0.171875 },
  { x: 0.671875, y: 0.171875 },
  { x: 0.703125, y: 0.171875 },
  { x: 0.703125, y: 0.171875 },
  { x: 0.734375, y: 0.171875 },
  { x: 0.734375, y: 0.171875 },
  { x: 0.765625, y: 0.171875 },
  { x: 0.765625, y: 0.171875 },
  { x: 0.796875, y: 0.171875 },
  { x: 0.796875, y: 0.171875 },
  { x: 0.828125, y: 0.171875 },
  { x: 0.828125, y: 0.171875 },
  { x: 0.859375, y: 0.171875 },
  { x: 0.859375, y: 0.171875 },
  { x: 0.890625, y: 0.171875 },
  { x: 0.890625, y: 0.171875 },
  { x: 0.921875, y: 0.171875 },
  { x: 0.921875, y: 0.171875 },
  { x: 0.953125, y: 0.171875 },
  { x: 0.953125, y: 0.171875 },
  { x: 0.984375, y: 0.171875 },
  { x: 0.984375, y: 0.171875 },
  { x: 0.015625, y: 0.203125 },
  { x: 0.015625, y: 0.203125 },
  { x: 0.046875, y: 0.203125 },
  { x: 0.046875, y: 0.203125 },
  { x: 0.078125, y: 0.203125 },
  { x: 0.078125, y: 0.203125 },
  { x: 0.109375, y: 0.203125 },
  { x: 0.109375, y: 0.203125 },
  { x: 0.140625, y: 0.203125 },
  { x: 0.140625, y: 0.203125 },
  { x: 0.171875, y: 0.203125 },
  { x: 0.171875, y: 0.203125 },
  { x: 0.203125, y: 0.203125 },
  { x: 0.203125, y: 0.203125 },
  { x: 0.234375, y: 0.203125 },
  { x: 0.234375, y: 0.203125 },
  { x: 0.265625, y: 0.203125 },
  { x: 0.265625, y: 0.203125 },
  { x: 0.296875, y: 0.203125 },
  { x: 0.296875, y: 0.203125 },
  { x: 0.328125, y: 0.203125 },
  { x: 0.328125, y: 0.203125 },
  { x: 0.359375, y: 0.203125 },
  { x: 0.359375, y: 0.203125 },
  { x: 0.390625, y: 0.203125 },
  { x: 0.390625, y: 0.203125 },
  { x: 0.421875, y: 0.203125 },
  { x: 0.421875, y: 0.203125 },
  { x: 0.453125, y: 0.203125 },
  { x: 0.453125, y: 0.203125 },
  { x: 0.484375, y: 0.203125 },
  { x: 0.484375, y: 0.203125 },
  { x: 0.515625, y: 0.203125 },
  { x: 0.515625, y: 0.203125 },
  { x: 0.546875, y: 0.203125 },
  { x: 0.546875, y: 0.203125 },
  { x: 0.578125, y: 0.203125 },
  { x: 0.578125, y: 0.203125 },
  { x: 0.609375, y: 0.203125 },
  { x: 0.609375, y: 0.203125 },
  { x: 0.640625, y: 0.203125 },
  { x: 0.640625, y: 0.203125 },
  { x: 0.671875, y: 0.203125 },
  { x: 0.671875, y: 0.203125 },
  { x: 0.703125, y: 0.203125 },
  { x: 0.703125, y: 0.203125 },
  { x: 0.734375, y: 0.203125 },
  { x: 0.734375, y: 0.203125 },
  { x: 0.765625, y: 0.203125 },
  { x: 0.765625, y: 0.203125 },
  { x: 0.796875, y: 0.203125 },
  { x: 0.796875, y: 0.203125 },
  { x: 0.828125, y: 0.203125 },
  { x: 0.828125, y: 0.203125 },
  { x: 0.859375, y: 0.203125 },
  { x: 0.859375, y: 0.203125 },
  { x: 0.890625, y: 0.203125 },
  { x: 0.890625, y: 0.203125 },
  { x: 0.921875, y: 0.203125 },
  { x: 0.921875, y: 0.203125 },
  { x: 0.953125, y: 0.203125 },
  { x: 0.953125, y: 0.203125 },
  { x: 0.984375, y: 0.203125 },
  { x: 0.984375, y: 0.203125 },
  { x: 0.015625, y: 0.234375 },
  { x: 0.015625, y: 0.234375 },
  { x: 0.046875, y: 0.234375 },
  { x: 0.046875, y: 0.234375 },
  { x: 0.078125, y: 0.234375 },
  { x: 0.078125, y: 0.234375 },
  { x: 0.109375, y: 0.234375 },
  { x: 0.109375, y: 0.234375 },
  { x: 0.140625, y: 0.234375 },
  { x: 0.140625, y: 0.234375 },
  { x: 0.171875, y: 0.234375 },
  { x: 0.171875, y: 0.234375 },
  { x: 0.203125, y: 0.234375 },
  { x: 0.203125, y: 0.234375 },
  { x: 0.234375, y: 0.234375 },
  { x: 0.234375, y: 0.234375 },
  { x: 0.265625, y: 0.234375 },
  { x: 0.265625, y: 0.234375 },
  { x: 0.296875, y: 0.234375 },
  { x: 0.296875, y: 0.234375 },
  { x: 0.328125, y: 0.234375 },
  { x: 0.328125, y: 0.234375 },
  { x: 0.359375, y: 0.234375 },
  { x: 0.359375, y: 0.234375 },
  { x: 0.390625, y: 0.234375 },
  { x: 0.390625, y: 0.234375 },
  { x: 0.421875, y: 0.234375 },
  { x: 0.421875, y: 0.234375 },
  { x: 0.453125, y: 0.234375 },
  { x: 0.453125, y: 0.234375 },
  { x: 0.484375, y: 0.234375 },
  { x: 0.484375, y: 0.234375 },
  { x: 0.515625, y: 0.234375 },
  { x: 0.515625, y: 0.234375 },
  { x: 0.546875, y: 0.234375 },
  { x: 0.546875, y: 0.234375 },
  { x: 0.578125, y: 0.234375 },
  { x: 0.578125, y: 0.234375 },
  { x: 0.609375, y: 0.234375 },
  { x: 0.609375, y: 0.234375 },
  { x: 0.640625, y: 0.234375 },
  { x: 0.640625, y: 0.234375 },
  { x: 0.671875, y: 0.234375 },
  { x: 0.671875, y: 0.234375 },
  { x: 0.703125, y: 0.234375 },
  { x: 0.703125, y: 0.234375 },
  { x: 0.734375, y: 0.234375 },
  { x: 0.734375, y: 0.234375 },
  { x: 0.765625, y: 0.234375 },
  { x: 0.765625, y: 0.234375 },
  { x: 0.796875, y: 0.234375 },
  { x: 0.796875, y: 0.234375 },
  { x: 0.828125, y: 0.234375 },
  { x: 0.828125, y: 0.234375 },
  { x: 0.859375, y: 0.234375 },
  { x: 0.859375, y: 0.234375 },
  { x: 0.890625, y: 0.234375 },
  { x: 0.890625, y: 0.234375 },
  { x: 0.921875, y: 0.234375 },
  { x: 0.921875, y: 0.234375 },
  { x: 0.953125, y: 0.234375 },
  { x: 0.953125, y: 0.234375 },
  { x: 0.984375, y: 0.234375 },
  { x: 0.984375, y: 0.234375 },
  { x: 0.015625, y: 0.265625 },
  { x: 0.015625, y: 0.265625 },
  { x: 0.046875, y: 0.265625 },
  { x: 0.046875, y: 0.265625 },
  { x: 0.078125, y: 0.265625 },
  { x: 0.078125, y: 0.265625 },
  { x: 0.109375, y: 0.265625 },
  { x: 0.109375, y: 0.265625 },
  { x: 0.140625, y: 0.265625 },
  { x: 0.140625, y: 0.265625 },
  { x: 0.171875, y: 0.265625 },
  { x: 0.171875, y: 0.265625 },
  { x: 0.203125, y: 0.265625 },
  { x: 0.203125, y: 0.265625 },
  { x: 0.234375, y: 0.265625 },
  { x: 0.234375, y: 0.265625 },
  { x: 0.265625, y: 0.265625 },
  { x: 0.265625, y: 0.265625 },
  { x: 0.296875, y: 0.265625 },
  { x: 0.296875, y: 0.265625 },
  { x: 0.328125, y: 0.265625 },
  { x: 0.328125, y: 0.265625 },
  { x: 0.359375, y: 0.265625 },
  { x: 0.359375, y: 0.265625 },
  { x: 0.390625, y: 0.265625 },
  { x: 0.390625, y: 0.265625 },
  { x: 0.421875, y: 0.265625 },
  { x: 0.421875, y: 0.265625 },
  { x: 0.453125, y: 0.265625 },
  { x: 0.453125, y: 0.265625 },
  { x: 0.484375, y: 0.265625 },
  { x: 0.484375, y: 0.265625 },
  { x: 0.515625, y: 0.265625 },
  { x: 0.515625, y: 0.265625 },
  { x: 0.546875, y: 0.265625 },
  { x: 0.546875, y: 0.265625 },
  { x: 0.578125, y: 0.265625 },
  { x: 0.578125, y: 0.265625 },
  { x: 0.609375, y: 0.265625 },
  { x: 0.609375, y: 0.265625 },
  { x: 0.640625, y: 0.265625 },
  { x: 0.640625, y: 0.265625 },
  { x: 0.671875, y: 0.265625 },
  { x: 0.671875, y: 0.265625 },
  { x: 0.703125, y: 0.265625 },
  { x: 0.703125, y: 0.265625 },
  { x: 0.734375, y: 0.265625 },
  { x: 0.734375, y: 0.265625 },
  { x: 0.765625, y: 0.265625 },
  { x: 0.765625, y: 0.265625 },
  { x: 0.796875, y: 0.265625 },
  { x: 0.796875, y: 0.265625 },
  { x: 0.828125, y: 0.265625 },
  { x: 0.828125, y: 0.265625 },
  { x: 0.859375, y: 0.265625 },
  { x: 0.859375, y: 0.265625 },
  { x: 0.890625, y: 0.265625 },
  { x: 0.890625, y: 0.265625 },
  { x: 0.921875, y: 0.265625 },
  { x: 0.921875, y: 0.265625 },
  { x: 0.953125, y: 0.265625 },
  { x: 0.953125, y: 0.265625 },
  { x: 0.984375, y: 0.265625 },
  { x: 0.984375, y: 0.265625 },
  { x: 0.015625, y: 0.296875 },
  { x: 0.015625, y: 0.296875 },
  { x: 0.046875, y: 0.296875 },
  { x: 0.046875, y: 0.296875 },
  { x: 0.078125, y: 0.296875 },
  { x: 0.078125, y: 0.296875 },
  { x: 0.109375, y: 0.296875 },
  { x: 0.109375, y: 0.296875 },
  { x: 0.140625, y: 0.296875 },
  { x: 0.140625, y: 0.296875 },
  { x: 0.171875, y: 0.296875 },
  { x: 0.171875, y: 0.296875 },
  { x: 0.203125, y: 0.296875 },
  { x: 0.203125, y: 0.296875 },
  { x: 0.234375, y: 0.296875 },
  { x: 0.234375, y: 0.296875 },
  { x: 0.265625, y: 0.296875 },
  { x: 0.265625, y: 0.296875 },
  { x: 0.296875, y: 0.296875 },
  { x: 0.296875, y: 0.296875 },
  { x: 0.328125, y: 0.296875 },
  { x: 0.328125, y: 0.296875 },
  { x: 0.359375, y: 0.296875 },
  { x: 0.359375, y: 0.296875 },
  { x: 0.390625, y: 0.296875 },
  { x: 0.390625, y: 0.296875 },
  { x: 0.421875, y: 0.296875 },
  { x: 0.421875, y: 0.296875 },
  { x: 0.453125, y: 0.296875 },
  { x: 0.453125, y: 0.296875 },
  { x: 0.484375, y: 0.296875 },
  { x: 0.484375, y: 0.296875 },
  { x: 0.515625, y: 0.296875 },
  { x: 0.515625, y: 0.296875 },
  { x: 0.546875, y: 0.296875 },
  { x: 0.546875, y: 0.296875 },
  { x: 0.578125, y: 0.296875 },
  { x: 0.578125, y: 0.296875 },
  { x: 0.609375, y: 0.296875 },
  { x: 0.609375, y: 0.296875 },
  { x: 0.640625, y: 0.296875 },
  { x: 0.640625, y: 0.296875 },
  { x: 0.671875, y: 0.296875 },
  { x: 0.671875, y: 0.296875 },
  { x: 0.703125, y: 0.296875 },
  { x: 0.703125, y: 0.296875 },
  { x: 0.734375, y: 0.296875 },
  { x: 0.734375, y: 0.296875 },
  { x: 0.765625, y: 0.296875 },
  { x: 0.765625, y: 0.296875 },
  { x: 0.796875, y: 0.296875 },
  { x: 0.796875, y: 0.296875 },
  { x: 0.828125, y: 0.296875 },
  { x: 0.828125, y: 0.296875 },
  { x: 0.859375, y: 0.296875 },
  { x: 0.859375, y: 0.296875 },
  { x: 0.890625, y: 0.296875 },
  { x: 0.890625, y: 0.296875 },
  { x: 0.921875, y: 0.296875 },
  { x: 0.921875, y: 0.296875 },
  { x: 0.953125, y: 0.296875 },
  { x: 0.953125, y: 0.296875 },
  { x: 0.984375, y: 0.296875 },
  { x: 0.984375, y: 0.296875 },
  { x: 0.015625, y: 0.328125 },
  { x: 0.015625, y: 0.328125 },
  { x: 0.046875, y: 0.328125 },
  { x: 0.046875, y: 0.328125 },
  { x: 0.078125, y: 0.328125 },
  { x: 0.078125, y: 0.328125 },
  { x: 0.109375, y: 0.328125 },
  { x: 0.109375, y: 0.328125 },
  { x: 0.140625, y: 0.328125 },
  { x: 0.140625, y: 0.328125 },
  { x: 0.171875, y: 0.328125 },
  { x: 0.171875, y: 0.328125 },
  { x: 0.203125, y: 0.328125 },
  { x: 0.203125, y: 0.328125 },
  { x: 0.234375, y: 0.328125 },
  { x: 0.234375, y: 0.328125 },
  { x: 0.265625, y: 0.328125 },
  { x: 0.265625, y: 0.328125 },
  { x: 0.296875, y: 0.328125 },
  { x: 0.296875, y: 0.328125 },
  { x: 0.328125, y: 0.328125 },
  { x: 0.328125, y: 0.328125 },
  { x: 0.359375, y: 0.328125 },
  { x: 0.359375, y: 0.328125 },
  { x: 0.390625, y: 0.328125 },
  { x: 0.390625, y: 0.328125 },
  { x: 0.421875, y: 0.328125 },
  { x: 0.421875, y: 0.328125 },
  { x: 0.453125, y: 0.328125 },
  { x: 0.453125, y: 0.328125 },
  { x: 0.484375, y: 0.328125 },
  { x: 0.484375, y: 0.328125 },
  { x: 0.515625, y: 0.328125 },
  { x: 0.515625, y: 0.328125 },
  { x: 0.546875, y: 0.328125 },
  { x: 0.546875, y: 0.328125 },
  { x: 0.578125, y: 0.328125 },
  { x: 0.578125, y: 0.328125 },
  { x: 0.609375, y: 0.328125 },
  { x: 0.609375, y: 0.328125 },
  { x: 0.640625, y: 0.328125 },
  { x: 0.640625, y: 0.328125 },
  { x: 0.671875, y: 0.328125 },
  { x: 0.671875, y: 0.328125 },
  { x: 0.703125, y: 0.328125 },
  { x: 0.703125, y: 0.328125 },
  { x: 0.734375, y: 0.328125 },
  { x: 0.734375, y: 0.328125 },
  { x: 0.765625, y: 0.328125 },
  { x: 0.765625, y: 0.328125 },
  { x: 0.796875, y: 0.328125 },
  { x: 0.796875, y: 0.328125 },
  { x: 0.828125, y: 0.328125 },
  { x: 0.828125, y: 0.328125 },
  { x: 0.859375, y: 0.328125 },
  { x: 0.859375, y: 0.328125 },
  { x: 0.890625, y: 0.328125 },
  { x: 0.890625, y: 0.328125 },
  { x: 0.921875, y: 0.328125 },
  { x: 0.921875, y: 0.328125 },
  { x: 0.953125, y: 0.328125 },
  { x: 0.953125, y: 0.328125 },
  { x: 0.984375, y: 0.328125 },
  { x: 0.984375, y: 0.328125 },
  { x: 0.015625, y: 0.359375 },
  { x: 0.015625, y: 0.359375 },
  { x: 0.046875, y: 0.359375 },
  { x: 0.046875, y: 0.359375 },
  { x: 0.078125, y: 0.359375 },
  { x: 0.078125, y: 0.359375 },
  { x: 0.109375, y: 0.359375 },
  { x: 0.109375, y: 0.359375 },
  { x: 0.140625, y: 0.359375 },
  { x: 0.140625, y: 0.359375 },
  { x: 0.171875, y: 0.359375 },
  { x: 0.171875, y: 0.359375 },
  { x: 0.203125, y: 0.359375 },
  { x: 0.203125, y: 0.359375 },
  { x: 0.234375, y: 0.359375 },
  { x: 0.234375, y: 0.359375 },
  { x: 0.265625, y: 0.359375 },
  { x: 0.265625, y: 0.359375 },
  { x: 0.296875, y: 0.359375 },
  { x: 0.296875, y: 0.359375 },
  { x: 0.328125, y: 0.359375 },
  { x: 0.328125, y: 0.359375 },
  { x: 0.359375, y: 0.359375 },
  { x: 0.359375, y: 0.359375 },
  { x: 0.390625, y: 0.359375 },
  { x: 0.390625, y: 0.359375 },
  { x: 0.421875, y: 0.359375 },
  { x: 0.421875, y: 0.359375 },
  { x: 0.453125, y: 0.359375 },
  { x: 0.453125, y: 0.359375 },
  { x: 0.484375, y: 0.359375 },
  { x: 0.484375, y: 0.359375 },
  { x: 0.515625, y: 0.359375 },
  { x: 0.515625, y: 0.359375 },
  { x: 0.546875, y: 0.359375 },
  { x: 0.546875, y: 0.359375 },
  { x: 0.578125, y: 0.359375 },
  { x: 0.578125, y: 0.359375 },
  { x: 0.609375, y: 0.359375 },
  { x: 0.609375, y: 0.359375 },
  { x: 0.640625, y: 0.359375 },
  { x: 0.640625, y: 0.359375 },
  { x: 0.671875, y: 0.359375 },
  { x: 0.671875, y: 0.359375 },
  { x: 0.703125, y: 0.359375 },
  { x: 0.703125, y: 0.359375 },
  { x: 0.734375, y: 0.359375 },
  { x: 0.734375, y: 0.359375 },
  { x: 0.765625, y: 0.359375 },
  { x: 0.765625, y: 0.359375 },
  { x: 0.796875, y: 0.359375 },
  { x: 0.796875, y: 0.359375 },
  { x: 0.828125, y: 0.359375 },
  { x: 0.828125, y: 0.359375 },
  { x: 0.859375, y: 0.359375 },
  { x: 0.859375, y: 0.359375 },
  { x: 0.890625, y: 0.359375 },
  { x: 0.890625, y: 0.359375 },
  { x: 0.921875, y: 0.359375 },
  { x: 0.921875, y: 0.359375 },
  { x: 0.953125, y: 0.359375 },
  { x: 0.953125, y: 0.359375 },
  { x: 0.984375, y: 0.359375 },
  { x: 0.984375, y: 0.359375 },
  { x: 0.015625, y: 0.390625 },
  { x: 0.015625, y: 0.390625 },
  { x: 0.046875, y: 0.390625 },
  { x: 0.046875, y: 0.390625 },
  { x: 0.078125, y: 0.390625 },
  { x: 0.078125, y: 0.390625 },
  { x: 0.109375, y: 0.390625 },
  { x: 0.109375, y: 0.390625 },
  { x: 0.140625, y: 0.390625 },
  { x: 0.140625, y: 0.390625 },
  { x: 0.171875, y: 0.390625 },
  { x: 0.171875, y: 0.390625 },
  { x: 0.203125, y: 0.390625 },
  { x: 0.203125, y: 0.390625 },
  { x: 0.234375, y: 0.390625 },
  { x: 0.234375, y: 0.390625 },
  { x: 0.265625, y: 0.390625 },
  { x: 0.265625, y: 0.390625 },
  { x: 0.296875, y: 0.390625 },
  { x: 0.296875, y: 0.390625 },
  { x: 0.328125, y: 0.390625 },
  { x: 0.328125, y: 0.390625 },
  { x: 0.359375, y: 0.390625 },
  { x: 0.359375, y: 0.390625 },
  { x: 0.390625, y: 0.390625 },
  { x: 0.390625, y: 0.390625 },
  { x: 0.421875, y: 0.390625 },
  { x: 0.421875, y: 0.390625 },
  { x: 0.453125, y: 0.390625 },
  { x: 0.453125, y: 0.390625 },
  { x: 0.484375, y: 0.390625 },
  { x: 0.484375, y: 0.390625 },
  { x: 0.515625, y: 0.390625 },
  { x: 0.515625, y: 0.390625 },
  { x: 0.546875, y: 0.390625 },
  { x: 0.546875, y: 0.390625 },
  { x: 0.578125, y: 0.390625 },
  { x: 0.578125, y: 0.390625 },
  { x: 0.609375, y: 0.390625 },
  { x: 0.609375, y: 0.390625 },
  { x: 0.640625, y: 0.390625 },
  { x: 0.640625, y: 0.390625 },
  { x: 0.671875, y: 0.390625 },
  { x: 0.671875, y: 0.390625 },
  { x: 0.703125, y: 0.390625 },
  { x: 0.703125, y: 0.390625 },
  { x: 0.734375, y: 0.390625 },
  { x: 0.734375, y: 0.390625 },
  { x: 0.765625, y: 0.390625 },
  { x: 0.765625, y: 0.390625 },
  { x: 0.796875, y: 0.390625 },
  { x: 0.796875, y: 0.390625 },
  { x: 0.828125, y: 0.390625 },
  { x: 0.828125, y: 0.390625 },
  { x: 0.859375, y: 0.390625 },
  { x: 0.859375, y: 0.390625 },
  { x: 0.890625, y: 0.390625 },
  { x: 0.890625, y: 0.390625 },
  { x: 0.921875, y: 0.390625 },
  { x: 0.921875, y: 0.390625 },
  { x: 0.953125, y: 0.390625 },
  { x: 0.953125, y: 0.390625 },
  { x: 0.984375, y: 0.390625 },
  { x: 0.984375, y: 0.390625 },
  { x: 0.015625, y: 0.421875 },
  { x: 0.015625, y: 0.421875 },
  { x: 0.046875, y: 0.421875 },
  { x: 0.046875, y: 0.421875 },
  { x: 0.078125, y: 0.421875 },
  { x: 0.078125, y: 0.421875 },
  { x: 0.109375, y: 0.421875 },
  { x: 0.109375, y: 0.421875 },
  { x: 0.140625, y: 0.421875 },
  { x: 0.140625, y: 0.421875 },
  { x: 0.171875, y: 0.421875 },
  { x: 0.171875, y: 0.421875 },
  { x: 0.203125, y: 0.421875 },
  { x: 0.203125, y: 0.421875 },
  { x: 0.234375, y: 0.421875 },
  { x: 0.234375, y: 0.421875 },
  { x: 0.265625, y: 0.421875 },
  { x: 0.265625, y: 0.421875 },
  { x: 0.296875, y: 0.421875 },
  { x: 0.296875, y: 0.421875 },
  { x: 0.328125, y: 0.421875 },
  { x: 0.328125, y: 0.421875 },
  { x: 0.359375, y: 0.421875 },
  { x: 0.359375, y: 0.421875 },
  { x: 0.390625, y: 0.421875 },
  { x: 0.390625, y: 0.421875 },
  { x: 0.421875, y: 0.421875 },
  { x: 0.421875, y: 0.421875 },
  { x: 0.453125, y: 0.421875 },
  { x: 0.453125, y: 0.421875 },
  { x: 0.484375, y: 0.421875 },
  { x: 0.484375, y: 0.421875 },
  { x: 0.515625, y: 0.421875 },
  { x: 0.515625, y: 0.421875 },
  { x: 0.546875, y: 0.421875 },
  { x: 0.546875, y: 0.421875 },
  { x: 0.578125, y: 0.421875 },
  { x: 0.578125, y: 0.421875 },
  { x: 0.609375, y: 0.421875 },
  { x: 0.609375, y: 0.421875 },
  { x: 0.640625, y: 0.421875 },
  { x: 0.640625, y: 0.421875 },
  { x: 0.671875, y: 0.421875 },
  { x: 0.671875, y: 0.421875 },
  { x: 0.703125, y: 0.421875 },
  { x: 0.703125, y: 0.421875 },
  { x: 0.734375, y: 0.421875 },
  { x: 0.734375, y: 0.421875 },
  { x: 0.765625, y: 0.421875 },
  { x: 0.765625, y: 0.421875 },
  { x: 0.796875, y: 0.421875 },
  { x: 0.796875, y: 0.421875 },
  { x: 0.828125, y: 0.421875 },
  { x: 0.828125, y: 0.421875 },
  { x: 0.859375, y: 0.421875 },
  { x: 0.859375, y: 0.421875 },
  { x: 0.890625, y: 0.421875 },
  { x: 0.890625, y: 0.421875 },
  { x: 0.921875, y: 0.421875 },
  { x: 0.921875, y: 0.421875 },
  { x: 0.953125, y: 0.421875 },
  { x: 0.953125, y: 0.421875 },
  { x: 0.984375, y: 0.421875 },
  { x: 0.984375, y: 0.421875 },
  { x: 0.015625, y: 0.453125 },
  { x: 0.015625, y: 0.453125 },
  { x: 0.046875, y: 0.453125 },
  { x: 0.046875, y: 0.453125 },
  { x: 0.078125, y: 0.453125 },
  { x: 0.078125, y: 0.453125 },
  { x: 0.109375, y: 0.453125 },
  { x: 0.109375, y: 0.453125 },
  { x: 0.140625, y: 0.453125 },
  { x: 0.140625, y: 0.453125 },
  { x: 0.171875, y: 0.453125 },
  { x: 0.171875, y: 0.453125 },
  { x: 0.203125, y: 0.453125 },
  { x: 0.203125, y: 0.453125 },
  { x: 0.234375, y: 0.453125 },
  { x: 0.234375, y: 0.453125 },
  { x: 0.265625, y: 0.453125 },
  { x: 0.265625, y: 0.453125 },
  { x: 0.296875, y: 0.453125 },
  { x: 0.296875, y: 0.453125 },
  { x: 0.328125, y: 0.453125 },
  { x: 0.328125, y: 0.453125 },
  { x: 0.359375, y: 0.453125 },
  { x: 0.359375, y: 0.453125 },
  { x: 0.390625, y: 0.453125 },
  { x: 0.390625, y: 0.453125 },
  { x: 0.421875, y: 0.453125 },
  { x: 0.421875, y: 0.453125 },
  { x: 0.453125, y: 0.453125 },
  { x: 0.453125, y: 0.453125 },
  { x: 0.484375, y: 0.453125 },
  { x: 0.484375, y: 0.453125 },
  { x: 0.515625, y: 0.453125 },
  { x: 0.515625, y: 0.453125 },
  { x: 0.546875, y: 0.453125 },
  { x: 0.546875, y: 0.453125 },
  { x: 0.578125, y: 0.453125 },
  { x: 0.578125, y: 0.453125 },
  { x: 0.609375, y: 0.453125 },
  { x: 0.609375, y: 0.453125 },
  { x: 0.640625, y: 0.453125 },
  { x: 0.640625, y: 0.453125 },
  { x: 0.671875, y: 0.453125 },
  { x: 0.671875, y: 0.453125 },
  { x: 0.703125, y: 0.453125 },
  { x: 0.703125, y: 0.453125 },
  { x: 0.734375, y: 0.453125 },
  { x: 0.734375, y: 0.453125 },
  { x: 0.765625, y: 0.453125 },
  { x: 0.765625, y: 0.453125 },
  { x: 0.796875, y: 0.453125 },
  { x: 0.796875, y: 0.453125 },
  { x: 0.828125, y: 0.453125 },
  { x: 0.828125, y: 0.453125 },
  { x: 0.859375, y: 0.453125 },
  { x: 0.859375, y: 0.453125 },
  { x: 0.890625, y: 0.453125 },
  { x: 0.890625, y: 0.453125 },
  { x: 0.921875, y: 0.453125 },
  { x: 0.921875, y: 0.453125 },
  { x: 0.953125, y: 0.453125 },
  { x: 0.953125, y: 0.453125 },
  { x: 0.984375, y: 0.453125 },
  { x: 0.984375, y: 0.453125 },
  { x: 0.015625, y: 0.484375 },
  { x: 0.015625, y: 0.484375 },
  { x: 0.046875, y: 0.484375 },
  { x: 0.046875, y: 0.484375 },
  { x: 0.078125, y: 0.484375 },
  { x: 0.078125, y: 0.484375 },
  { x: 0.109375, y: 0.484375 },
  { x: 0.109375, y: 0.484375 },
  { x: 0.140625, y: 0.484375 },
  { x: 0.140625, y: 0.484375 },
  { x: 0.171875, y: 0.484375 },
  { x: 0.171875, y: 0.484375 },
  { x: 0.203125, y: 0.484375 },
  { x: 0.203125, y: 0.484375 },
  { x: 0.234375, y: 0.484375 },
  { x: 0.234375, y: 0.484375 },
  { x: 0.265625, y: 0.484375 },
  { x: 0.265625, y: 0.484375 },
  { x: 0.296875, y: 0.484375 },
  { x: 0.296875, y: 0.484375 },
  { x: 0.328125, y: 0.484375 },
  { x: 0.328125, y: 0.484375 },
  { x: 0.359375, y: 0.484375 },
  { x: 0.359375, y: 0.484375 },
  { x: 0.390625, y: 0.484375 },
  { x: 0.390625, y: 0.484375 },
  { x: 0.421875, y: 0.484375 },
  { x: 0.421875, y: 0.484375 },
  { x: 0.453125, y: 0.484375 },
  { x: 0.453125, y: 0.484375 },
  { x: 0.484375, y: 0.484375 },
  { x: 0.484375, y: 0.484375 },
  { x: 0.515625, y: 0.484375 },
  { x: 0.515625, y: 0.484375 },
  { x: 0.546875, y: 0.484375 },
  { x: 0.546875, y: 0.484375 },
  { x: 0.578125, y: 0.484375 },
  { x: 0.578125, y: 0.484375 },
  { x: 0.609375, y: 0.484375 },
  { x: 0.609375, y: 0.484375 },
  { x: 0.640625, y: 0.484375 },
  { x: 0.640625, y: 0.484375 },
  { x: 0.671875, y: 0.484375 },
  { x: 0.671875, y: 0.484375 },
  { x: 0.703125, y: 0.484375 },
  { x: 0.703125, y: 0.484375 },
  { x: 0.734375, y: 0.484375 },
  { x: 0.734375, y: 0.484375 },
  { x: 0.765625, y: 0.484375 },
  { x: 0.765625, y: 0.484375 },
  { x: 0.796875, y: 0.484375 },
  { x: 0.796875, y: 0.484375 },
  { x: 0.828125, y: 0.484375 },
  { x: 0.828125, y: 0.484375 },
  { x: 0.859375, y: 0.484375 },
  { x: 0.859375, y: 0.484375 },
  { x: 0.890625, y: 0.484375 },
  { x: 0.890625, y: 0.484375 },
  { x: 0.921875, y: 0.484375 },
  { x: 0.921875, y: 0.484375 },
  { x: 0.953125, y: 0.484375 },
  { x: 0.953125, y: 0.484375 },
  { x: 0.984375, y: 0.484375 },
  { x: 0.984375, y: 0.484375 },
  { x: 0.015625, y: 0.515625 },
  { x: 0.015625, y: 0.515625 },
  { x: 0.046875, y: 0.515625 },
  { x: 0.046875, y: 0.515625 },
  { x: 0.078125, y: 0.515625 },
  { x: 0.078125, y: 0.515625 },
  { x: 0.109375, y: 0.515625 },
  { x: 0.109375, y: 0.515625 },
  { x: 0.140625, y: 0.515625 },
  { x: 0.140625, y: 0.515625 },
  { x: 0.171875, y: 0.515625 },
  { x: 0.171875, y: 0.515625 },
  { x: 0.203125, y: 0.515625 },
  { x: 0.203125, y: 0.515625 },
  { x: 0.234375, y: 0.515625 },
  { x: 0.234375, y: 0.515625 },
  { x: 0.265625, y: 0.515625 },
  { x: 0.265625, y: 0.515625 },
  { x: 0.296875, y: 0.515625 },
  { x: 0.296875, y: 0.515625 },
  { x: 0.328125, y: 0.515625 },
  { x: 0.328125, y: 0.515625 },
  { x: 0.359375, y: 0.515625 },
  { x: 0.359375, y: 0.515625 },
  { x: 0.390625, y: 0.515625 },
  { x: 0.390625, y: 0.515625 },
  { x: 0.421875, y: 0.515625 },
  { x: 0.421875, y: 0.515625 },
  { x: 0.453125, y: 0.515625 },
  { x: 0.453125, y: 0.515625 },
  { x: 0.484375, y: 0.515625 },
  { x: 0.484375, y: 0.515625 },
  { x: 0.515625, y: 0.515625 },
  { x: 0.515625, y: 0.515625 },
  { x: 0.546875, y: 0.515625 },
  { x: 0.546875, y: 0.515625 },
  { x: 0.578125, y: 0.515625 },
  { x: 0.578125, y: 0.515625 },
  { x: 0.609375, y: 0.515625 },
  { x: 0.609375, y: 0.515625 },
  { x: 0.640625, y: 0.515625 },
  { x: 0.640625, y: 0.515625 },
  { x: 0.671875, y: 0.515625 },
  { x: 0.671875, y: 0.515625 },
  { x: 0.703125, y: 0.515625 },
  { x: 0.703125, y: 0.515625 },
  { x: 0.734375, y: 0.515625 },
  { x: 0.734375, y: 0.515625 },
  { x: 0.765625, y: 0.515625 },
  { x: 0.765625, y: 0.515625 },
  { x: 0.796875, y: 0.515625 },
  { x: 0.796875, y: 0.515625 },
  { x: 0.828125, y: 0.515625 },
  { x: 0.828125, y: 0.515625 },
  { x: 0.859375, y: 0.515625 },
  { x: 0.859375, y: 0.515625 },
  { x: 0.890625, y: 0.515625 },
  { x: 0.890625, y: 0.515625 },
  { x: 0.921875, y: 0.515625 },
  { x: 0.921875, y: 0.515625 },
  { x: 0.953125, y: 0.515625 },
  { x: 0.953125, y: 0.515625 },
  { x: 0.984375, y: 0.515625 },
  { x: 0.984375, y: 0.515625 },
  { x: 0.015625, y: 0.546875 },
  { x: 0.015625, y: 0.546875 },
  { x: 0.046875, y: 0.546875 },
  { x: 0.046875, y: 0.546875 },
  { x: 0.078125, y: 0.546875 },
  { x: 0.078125, y: 0.546875 },
  { x: 0.109375, y: 0.546875 },
  { x: 0.109375, y: 0.546875 },
  { x: 0.140625, y: 0.546875 },
  { x: 0.140625, y: 0.546875 },
  { x: 0.171875, y: 0.546875 },
  { x: 0.171875, y: 0.546875 },
  { x: 0.203125, y: 0.546875 },
  { x: 0.203125, y: 0.546875 },
  { x: 0.234375, y: 0.546875 },
  { x: 0.234375, y: 0.546875 },
  { x: 0.265625, y: 0.546875 },
  { x: 0.265625, y: 0.546875 },
  { x: 0.296875, y: 0.546875 },
  { x: 0.296875, y: 0.546875 },
  { x: 0.328125, y: 0.546875 },
  { x: 0.328125, y: 0.546875 },
  { x: 0.359375, y: 0.546875 },
  { x: 0.359375, y: 0.546875 },
  { x: 0.390625, y: 0.546875 },
  { x: 0.390625, y: 0.546875 },
  { x: 0.421875, y: 0.546875 },
  { x: 0.421875, y: 0.546875 },
  { x: 0.453125, y: 0.546875 },
  { x: 0.453125, y: 0.546875 },
  { x: 0.484375, y: 0.546875 },
  { x: 0.484375, y: 0.546875 },
  { x: 0.515625, y: 0.546875 },
  { x: 0.515625, y: 0.546875 },
  { x: 0.546875, y: 0.546875 },
  { x: 0.546875, y: 0.546875 },
  { x: 0.578125, y: 0.546875 },
  { x: 0.578125, y: 0.546875 },
  { x: 0.609375, y: 0.546875 },
  { x: 0.609375, y: 0.546875 },
  { x: 0.640625, y: 0.546875 },
  { x: 0.640625, y: 0.546875 },
  { x: 0.671875, y: 0.546875 },
  { x: 0.671875, y: 0.546875 },
  { x: 0.703125, y: 0.546875 },
  { x: 0.703125, y: 0.546875 },
  { x: 0.734375, y: 0.546875 },
  { x: 0.734375, y: 0.546875 },
  { x: 0.765625, y: 0.546875 },
  { x: 0.765625, y: 0.546875 },
  { x: 0.796875, y: 0.546875 },
  { x: 0.796875, y: 0.546875 },
  { x: 0.828125, y: 0.546875 },
  { x: 0.828125, y: 0.546875 },
  { x: 0.859375, y: 0.546875 },
  { x: 0.859375, y: 0.546875 },
  { x: 0.890625, y: 0.546875 },
  { x: 0.890625, y: 0.546875 },
  { x: 0.921875, y: 0.546875 },
  { x: 0.921875, y: 0.546875 },
  { x: 0.953125, y: 0.546875 },
  { x: 0.953125, y: 0.546875 },
  { x: 0.984375, y: 0.546875 },
  { x: 0.984375, y: 0.546875 },
  { x: 0.015625, y: 0.578125 },
  { x: 0.015625, y: 0.578125 },
  { x: 0.046875, y: 0.578125 },
  { x: 0.046875, y: 0.578125 },
  { x: 0.078125, y: 0.578125 },
  { x: 0.078125, y: 0.578125 },
  { x: 0.109375, y: 0.578125 },
  { x: 0.109375, y: 0.578125 },
  { x: 0.140625, y: 0.578125 },
  { x: 0.140625, y: 0.578125 },
  { x: 0.171875, y: 0.578125 },
  { x: 0.171875, y: 0.578125 },
  { x: 0.203125, y: 0.578125 },
  { x: 0.203125, y: 0.578125 },
  { x: 0.234375, y: 0.578125 },
  { x: 0.234375, y: 0.578125 },
  { x: 0.265625, y: 0.578125 },
  { x: 0.265625, y: 0.578125 },
  { x: 0.296875, y: 0.578125 },
  { x: 0.296875, y: 0.578125 },
  { x: 0.328125, y: 0.578125 },
  { x: 0.328125, y: 0.578125 },
  { x: 0.359375, y: 0.578125 },
  { x: 0.359375, y: 0.578125 },
  { x: 0.390625, y: 0.578125 },
  { x: 0.390625, y: 0.578125 },
  { x: 0.421875, y: 0.578125 },
  { x: 0.421875, y: 0.578125 },
  { x: 0.453125, y: 0.578125 },
  { x: 0.453125, y: 0.578125 },
  { x: 0.484375, y: 0.578125 },
  { x: 0.484375, y: 0.578125 },
  { x: 0.515625, y: 0.578125 },
  { x: 0.515625, y: 0.578125 },
  { x: 0.546875, y: 0.578125 },
  { x: 0.546875, y: 0.578125 },
  { x: 0.578125, y: 0.578125 },
  { x: 0.578125, y: 0.578125 },
  { x: 0.609375, y: 0.578125 },
  { x: 0.609375, y: 0.578125 },
  { x: 0.640625, y: 0.578125 },
  { x: 0.640625, y: 0.578125 },
  { x: 0.671875, y: 0.578125 },
  { x: 0.671875, y: 0.578125 },
  { x: 0.703125, y: 0.578125 },
  { x: 0.703125, y: 0.578125 },
  { x: 0.734375, y: 0.578125 },
  { x: 0.734375, y: 0.578125 },
  { x: 0.765625, y: 0.578125 },
  { x: 0.765625, y: 0.578125 },
  { x: 0.796875, y: 0.578125 },
  { x: 0.796875, y: 0.578125 },
  { x: 0.828125, y: 0.578125 },
  { x: 0.828125, y: 0.578125 },
  { x: 0.859375, y: 0.578125 },
  { x: 0.859375, y: 0.578125 },
  { x: 0.890625, y: 0.578125 },
  { x: 0.890625, y: 0.578125 },
  { x: 0.921875, y: 0.578125 },
  { x: 0.921875, y: 0.578125 },
  { x: 0.953125, y: 0.578125 },
  { x: 0.953125, y: 0.578125 },
  { x: 0.984375, y: 0.578125 },
  { x: 0.984375, y: 0.578125 },
  { x: 0.015625, y: 0.609375 },
  { x: 0.015625, y: 0.609375 },
  { x: 0.046875, y: 0.609375 },
  { x: 0.046875, y: 0.609375 },
  { x: 0.078125, y: 0.609375 },
  { x: 0.078125, y: 0.609375 },
  { x: 0.109375, y: 0.609375 },
  { x: 0.109375, y: 0.609375 },
  { x: 0.140625, y: 0.609375 },
  { x: 0.140625, y: 0.609375 },
  { x: 0.171875, y: 0.609375 },
  { x: 0.171875, y: 0.609375 },
  { x: 0.203125, y: 0.609375 },
  { x: 0.203125, y: 0.609375 },
  { x: 0.234375, y: 0.609375 },
  { x: 0.234375, y: 0.609375 },
  { x: 0.265625, y: 0.609375 },
  { x: 0.265625, y: 0.609375 },
  { x: 0.296875, y: 0.609375 },
  { x: 0.296875, y: 0.609375 },
  { x: 0.328125, y: 0.609375 },
  { x: 0.328125, y: 0.609375 },
  { x: 0.359375, y: 0.609375 },
  { x: 0.359375, y: 0.609375 },
  { x: 0.390625, y: 0.609375 },
  { x: 0.390625, y: 0.609375 },
  { x: 0.421875, y: 0.609375 },
  { x: 0.421875, y: 0.609375 },
  { x: 0.453125, y: 0.609375 },
  { x: 0.453125, y: 0.609375 },
  { x: 0.484375, y: 0.609375 },
  { x: 0.484375, y: 0.609375 },
  { x: 0.515625, y: 0.609375 },
  { x: 0.515625, y: 0.609375 },
  { x: 0.546875, y: 0.609375 },
  { x: 0.546875, y: 0.609375 },
  { x: 0.578125, y: 0.609375 },
  { x: 0.578125, y: 0.609375 },
  { x: 0.609375, y: 0.609375 },
  { x: 0.609375, y: 0.609375 },
  { x: 0.640625, y: 0.609375 },
  { x: 0.640625, y: 0.609375 },
  { x: 0.671875, y: 0.609375 },
  { x: 0.671875, y: 0.609375 },
  { x: 0.703125, y: 0.609375 },
  { x: 0.703125, y: 0.609375 },
  { x: 0.734375, y: 0.609375 },
  { x: 0.734375, y: 0.609375 },
  { x: 0.765625, y: 0.609375 },
  { x: 0.765625, y: 0.609375 },
  { x: 0.796875, y: 0.609375 },
  { x: 0.796875, y: 0.609375 },
  { x: 0.828125, y: 0.609375 },
  { x: 0.828125, y: 0.609375 },
  { x: 0.859375, y: 0.609375 },
  { x: 0.859375, y: 0.609375 },
  { x: 0.890625, y: 0.609375 },
  { x: 0.890625, y: 0.609375 },
  { x: 0.921875, y: 0.609375 },
  { x: 0.921875, y: 0.609375 },
  { x: 0.953125, y: 0.609375 },
  { x: 0.953125, y: 0.609375 },
  { x: 0.984375, y: 0.609375 },
  { x: 0.984375, y: 0.609375 },
  { x: 0.015625, y: 0.640625 },
  { x: 0.015625, y: 0.640625 },
  { x: 0.046875, y: 0.640625 },
  { x: 0.046875, y: 0.640625 },
  { x: 0.078125, y: 0.640625 },
  { x: 0.078125, y: 0.640625 },
  { x: 0.109375, y: 0.640625 },
  { x: 0.109375, y: 0.640625 },
  { x: 0.140625, y: 0.640625 },
  { x: 0.140625, y: 0.640625 },
  { x: 0.171875, y: 0.640625 },
  { x: 0.171875, y: 0.640625 },
  { x: 0.203125, y: 0.640625 },
  { x: 0.203125, y: 0.640625 },
  { x: 0.234375, y: 0.640625 },
  { x: 0.234375, y: 0.640625 },
  { x: 0.265625, y: 0.640625 },
  { x: 0.265625, y: 0.640625 },
  { x: 0.296875, y: 0.640625 },
  { x: 0.296875, y: 0.640625 },
  { x: 0.328125, y: 0.640625 },
  { x: 0.328125, y: 0.640625 },
  { x: 0.359375, y: 0.640625 },
  { x: 0.359375, y: 0.640625 },
  { x: 0.390625, y: 0.640625 },
  { x: 0.390625, y: 0.640625 },
  { x: 0.421875, y: 0.640625 },
  { x: 0.421875, y: 0.640625 },
  { x: 0.453125, y: 0.640625 },
  { x: 0.453125, y: 0.640625 },
  { x: 0.484375, y: 0.640625 },
  { x: 0.484375, y: 0.640625 },
  { x: 0.515625, y: 0.640625 },
  { x: 0.515625, y: 0.640625 },
  { x: 0.546875, y: 0.640625 },
  { x: 0.546875, y: 0.640625 },
  { x: 0.578125, y: 0.640625 },
  { x: 0.578125, y: 0.640625 },
  { x: 0.609375, y: 0.640625 },
  { x: 0.609375, y: 0.640625 },
  { x: 0.640625, y: 0.640625 },
  { x: 0.640625, y: 0.640625 },
  { x: 0.671875, y: 0.640625 },
  { x: 0.671875, y: 0.640625 },
  { x: 0.703125, y: 0.640625 },
  { x: 0.703125, y: 0.640625 },
  { x: 0.734375, y: 0.640625 },
  { x: 0.734375, y: 0.640625 },
  { x: 0.765625, y: 0.640625 },
  { x: 0.765625, y: 0.640625 },
  { x: 0.796875, y: 0.640625 },
  { x: 0.796875, y: 0.640625 },
  { x: 0.828125, y: 0.640625 },
  { x: 0.828125, y: 0.640625 },
  { x: 0.859375, y: 0.640625 },
  { x: 0.859375, y: 0.640625 },
  { x: 0.890625, y: 0.640625 },
  { x: 0.890625, y: 0.640625 },
  { x: 0.921875, y: 0.640625 },
  { x: 0.921875, y: 0.640625 },
  { x: 0.953125, y: 0.640625 },
  { x: 0.953125, y: 0.640625 },
  { x: 0.984375, y: 0.640625 },
  { x: 0.984375, y: 0.640625 },
  { x: 0.015625, y: 0.671875 },
  { x: 0.015625, y: 0.671875 },
  { x: 0.046875, y: 0.671875 },
  { x: 0.046875, y: 0.671875 },
  { x: 0.078125, y: 0.671875 },
  { x: 0.078125, y: 0.671875 },
  { x: 0.109375, y: 0.671875 },
  { x: 0.109375, y: 0.671875 },
  { x: 0.140625, y: 0.671875 },
  { x: 0.140625, y: 0.671875 },
  { x: 0.171875, y: 0.671875 },
  { x: 0.171875, y: 0.671875 },
  { x: 0.203125, y: 0.671875 },
  { x: 0.203125, y: 0.671875 },
  { x: 0.234375, y: 0.671875 },
  { x: 0.234375, y: 0.671875 },
  { x: 0.265625, y: 0.671875 },
  { x: 0.265625, y: 0.671875 },
  { x: 0.296875, y: 0.671875 },
  { x: 0.296875, y: 0.671875 },
  { x: 0.328125, y: 0.671875 },
  { x: 0.328125, y: 0.671875 },
  { x: 0.359375, y: 0.671875 },
  { x: 0.359375, y: 0.671875 },
  { x: 0.390625, y: 0.671875 },
  { x: 0.390625, y: 0.671875 },
  { x: 0.421875, y: 0.671875 },
  { x: 0.421875, y: 0.671875 },
  { x: 0.453125, y: 0.671875 },
  { x: 0.453125, y: 0.671875 },
  { x: 0.484375, y: 0.671875 },
  { x: 0.484375, y: 0.671875 },
  { x: 0.515625, y: 0.671875 },
  { x: 0.515625, y: 0.671875 },
  { x: 0.546875, y: 0.671875 },
  { x: 0.546875, y: 0.671875 },
  { x: 0.578125, y: 0.671875 },
  { x: 0.578125, y: 0.671875 },
  { x: 0.609375, y: 0.671875 },
  { x: 0.609375, y: 0.671875 },
  { x: 0.640625, y: 0.671875 },
  { x: 0.640625, y: 0.671875 },
  { x: 0.671875, y: 0.671875 },
  { x: 0.671875, y: 0.671875 },
  { x: 0.703125, y: 0.671875 },
  { x: 0.703125, y: 0.671875 },
  { x: 0.734375, y: 0.671875 },
  { x: 0.734375, y: 0.671875 },
  { x: 0.765625, y: 0.671875 },
  { x: 0.765625, y: 0.671875 },
  { x: 0.796875, y: 0.671875 },
  { x: 0.796875, y: 0.671875 },
  { x: 0.828125, y: 0.671875 },
  { x: 0.828125, y: 0.671875 },
  { x: 0.859375, y: 0.671875 },
  { x: 0.859375, y: 0.671875 },
  { x: 0.890625, y: 0.671875 },
  { x: 0.890625, y: 0.671875 },
  { x: 0.921875, y: 0.671875 },
  { x: 0.921875, y: 0.671875 },
  { x: 0.953125, y: 0.671875 },
  { x: 0.953125, y: 0.671875 },
  { x: 0.984375, y: 0.671875 },
  { x: 0.984375, y: 0.671875 },
  { x: 0.015625, y: 0.703125 },
  { x: 0.015625, y: 0.703125 },
  { x: 0.046875, y: 0.703125 },
  { x: 0.046875, y: 0.703125 },
  { x: 0.078125, y: 0.703125 },
  { x: 0.078125, y: 0.703125 },
  { x: 0.109375, y: 0.703125 },
  { x: 0.109375, y: 0.703125 },
  { x: 0.140625, y: 0.703125 },
  { x: 0.140625, y: 0.703125 },
  { x: 0.171875, y: 0.703125 },
  { x: 0.171875, y: 0.703125 },
  { x: 0.203125, y: 0.703125 },
  { x: 0.203125, y: 0.703125 },
  { x: 0.234375, y: 0.703125 },
  { x: 0.234375, y: 0.703125 },
  { x: 0.265625, y: 0.703125 },
  { x: 0.265625, y: 0.703125 },
  { x: 0.296875, y: 0.703125 },
  { x: 0.296875, y: 0.703125 },
  { x: 0.328125, y: 0.703125 },
  { x: 0.328125, y: 0.703125 },
  { x: 0.359375, y: 0.703125 },
  { x: 0.359375, y: 0.703125 },
  { x: 0.390625, y: 0.703125 },
  { x: 0.390625, y: 0.703125 },
  { x: 0.421875, y: 0.703125 },
  { x: 0.421875, y: 0.703125 },
  { x: 0.453125, y: 0.703125 },
  { x: 0.453125, y: 0.703125 },
  { x: 0.484375, y: 0.703125 },
  { x: 0.484375, y: 0.703125 },
  { x: 0.515625, y: 0.703125 },
  { x: 0.515625, y: 0.703125 },
  { x: 0.546875, y: 0.703125 },
  { x: 0.546875, y: 0.703125 },
  { x: 0.578125, y: 0.703125 },
  { x: 0.578125, y: 0.703125 },
  { x: 0.609375, y: 0.703125 },
  { x: 0.609375, y: 0.703125 },
  { x: 0.640625, y: 0.703125 },
  { x: 0.640625, y: 0.703125 },
  { x: 0.671875, y: 0.703125 },
  { x: 0.671875, y: 0.703125 },
  { x: 0.703125, y: 0.703125 },
  { x: 0.703125, y: 0.703125 },
  { x: 0.734375, y: 0.703125 },
  { x: 0.734375, y: 0.703125 },
  { x: 0.765625, y: 0.703125 },
  { x: 0.765625, y: 0.703125 },
  { x: 0.796875, y: 0.703125 },
  { x: 0.796875, y: 0.703125 },
  { x: 0.828125, y: 0.703125 },
  { x: 0.828125, y: 0.703125 },
  { x: 0.859375, y: 0.703125 },
  { x: 0.859375, y: 0.703125 },
  { x: 0.890625, y: 0.703125 },
  { x: 0.890625, y: 0.703125 },
  { x: 0.921875, y: 0.703125 },
  { x: 0.921875, y: 0.703125 },
  { x: 0.953125, y: 0.703125 },
  { x: 0.953125, y: 0.703125 },
  { x: 0.984375, y: 0.703125 },
  { x: 0.984375, y: 0.703125 },
  { x: 0.015625, y: 0.734375 },
  { x: 0.015625, y: 0.734375 },
  { x: 0.046875, y: 0.734375 },
  { x: 0.046875, y: 0.734375 },
  { x: 0.078125, y: 0.734375 },
  { x: 0.078125, y: 0.734375 },
  { x: 0.109375, y: 0.734375 },
  { x: 0.109375, y: 0.734375 },
  { x: 0.140625, y: 0.734375 },
  { x: 0.140625, y: 0.734375 },
  { x: 0.171875, y: 0.734375 },
  { x: 0.171875, y: 0.734375 },
  { x: 0.203125, y: 0.734375 },
  { x: 0.203125, y: 0.734375 },
  { x: 0.234375, y: 0.734375 },
  { x: 0.234375, y: 0.734375 },
  { x: 0.265625, y: 0.734375 },
  { x: 0.265625, y: 0.734375 },
  { x: 0.296875, y: 0.734375 },
  { x: 0.296875, y: 0.734375 },
  { x: 0.328125, y: 0.734375 },
  { x: 0.328125, y: 0.734375 },
  { x: 0.359375, y: 0.734375 },
  { x: 0.359375, y: 0.734375 },
  { x: 0.390625, y: 0.734375 },
  { x: 0.390625, y: 0.734375 },
  { x: 0.421875, y: 0.734375 },
  { x: 0.421875, y: 0.734375 },
  { x: 0.453125, y: 0.734375 },
  { x: 0.453125, y: 0.734375 },
  { x: 0.484375, y: 0.734375 },
  { x: 0.484375, y: 0.734375 },
  { x: 0.515625, y: 0.734375 },
  { x: 0.515625, y: 0.734375 },
  { x: 0.546875, y: 0.734375 },
  { x: 0.546875, y: 0.734375 },
  { x: 0.578125, y: 0.734375 },
  { x: 0.578125, y: 0.734375 },
  { x: 0.609375, y: 0.734375 },
  { x: 0.609375, y: 0.734375 },
  { x: 0.640625, y: 0.734375 },
  { x: 0.640625, y: 0.734375 },
  { x: 0.671875, y: 0.734375 },
  { x: 0.671875, y: 0.734375 },
  { x: 0.703125, y: 0.734375 },
  { x: 0.703125, y: 0.734375 },
  { x: 0.734375, y: 0.734375 },
  { x: 0.734375, y: 0.734375 },
  { x: 0.765625, y: 0.734375 },
  { x: 0.765625, y: 0.734375 },
  { x: 0.796875, y: 0.734375 },
  { x: 0.796875, y: 0.734375 },
  { x: 0.828125, y: 0.734375 },
  { x: 0.828125, y: 0.734375 },
  { x: 0.859375, y: 0.734375 },
  { x: 0.859375, y: 0.734375 },
  { x: 0.890625, y: 0.734375 },
  { x: 0.890625, y: 0.734375 },
  { x: 0.921875, y: 0.734375 },
  { x: 0.921875, y: 0.734375 },
  { x: 0.953125, y: 0.734375 },
  { x: 0.953125, y: 0.734375 },
  { x: 0.984375, y: 0.734375 },
  { x: 0.984375, y: 0.734375 },
  { x: 0.015625, y: 0.765625 },
  { x: 0.015625, y: 0.765625 },
  { x: 0.046875, y: 0.765625 },
  { x: 0.046875, y: 0.765625 },
  { x: 0.078125, y: 0.765625 },
  { x: 0.078125, y: 0.765625 },
  { x: 0.109375, y: 0.765625 },
  { x: 0.109375, y: 0.765625 },
  { x: 0.140625, y: 0.765625 },
  { x: 0.140625, y: 0.765625 },
  { x: 0.171875, y: 0.765625 },
  { x: 0.171875, y: 0.765625 },
  { x: 0.203125, y: 0.765625 },
  { x: 0.203125, y: 0.765625 },
  { x: 0.234375, y: 0.765625 },
  { x: 0.234375, y: 0.765625 },
  { x: 0.265625, y: 0.765625 },
  { x: 0.265625, y: 0.765625 },
  { x: 0.296875, y: 0.765625 },
  { x: 0.296875, y: 0.765625 },
  { x: 0.328125, y: 0.765625 },
  { x: 0.328125, y: 0.765625 },
  { x: 0.359375, y: 0.765625 },
  { x: 0.359375, y: 0.765625 },
  { x: 0.390625, y: 0.765625 },
  { x: 0.390625, y: 0.765625 },
  { x: 0.421875, y: 0.765625 },
  { x: 0.421875, y: 0.765625 },
  { x: 0.453125, y: 0.765625 },
  { x: 0.453125, y: 0.765625 },
  { x: 0.484375, y: 0.765625 },
  { x: 0.484375, y: 0.765625 },
  { x: 0.515625, y: 0.765625 },
  { x: 0.515625, y: 0.765625 },
  { x: 0.546875, y: 0.765625 },
  { x: 0.546875, y: 0.765625 },
  { x: 0.578125, y: 0.765625 },
  { x: 0.578125, y: 0.765625 },
  { x: 0.609375, y: 0.765625 },
  { x: 0.609375, y: 0.765625 },
  { x: 0.640625, y: 0.765625 },
  { x: 0.640625, y: 0.765625 },
  { x: 0.671875, y: 0.765625 },
  { x: 0.671875, y: 0.765625 },
  { x: 0.703125, y: 0.765625 },
  { x: 0.703125, y: 0.765625 },
  { x: 0.734375, y: 0.765625 },
  { x: 0.734375, y: 0.765625 },
  { x: 0.765625, y: 0.765625 },
  { x: 0.765625, y: 0.765625 },
  { x: 0.796875, y: 0.765625 },
  { x: 0.796875, y: 0.765625 },
  { x: 0.828125, y: 0.765625 },
  { x: 0.828125, y: 0.765625 },
  { x: 0.859375, y: 0.765625 },
  { x: 0.859375, y: 0.765625 },
  { x: 0.890625, y: 0.765625 },
  { x: 0.890625, y: 0.765625 },
  { x: 0.921875, y: 0.765625 },
  { x: 0.921875, y: 0.765625 },
  { x: 0.953125, y: 0.765625 },
  { x: 0.953125, y: 0.765625 },
  { x: 0.984375, y: 0.765625 },
  { x: 0.984375, y: 0.765625 },
  { x: 0.015625, y: 0.796875 },
  { x: 0.015625, y: 0.796875 },
  { x: 0.046875, y: 0.796875 },
  { x: 0.046875, y: 0.796875 },
  { x: 0.078125, y: 0.796875 },
  { x: 0.078125, y: 0.796875 },
  { x: 0.109375, y: 0.796875 },
  { x: 0.109375, y: 0.796875 },
  { x: 0.140625, y: 0.796875 },
  { x: 0.140625, y: 0.796875 },
  { x: 0.171875, y: 0.796875 },
  { x: 0.171875, y: 0.796875 },
  { x: 0.203125, y: 0.796875 },
  { x: 0.203125, y: 0.796875 },
  { x: 0.234375, y: 0.796875 },
  { x: 0.234375, y: 0.796875 },
  { x: 0.265625, y: 0.796875 },
  { x: 0.265625, y: 0.796875 },
  { x: 0.296875, y: 0.796875 },
  { x: 0.296875, y: 0.796875 },
  { x: 0.328125, y: 0.796875 },
  { x: 0.328125, y: 0.796875 },
  { x: 0.359375, y: 0.796875 },
  { x: 0.359375, y: 0.796875 },
  { x: 0.390625, y: 0.796875 },
  { x: 0.390625, y: 0.796875 },
  { x: 0.421875, y: 0.796875 },
  { x: 0.421875, y: 0.796875 },
  { x: 0.453125, y: 0.796875 },
  { x: 0.453125, y: 0.796875 },
  { x: 0.484375, y: 0.796875 },
  { x: 0.484375, y: 0.796875 },
  { x: 0.515625, y: 0.796875 },
  { x: 0.515625, y: 0.796875 },
  { x: 0.546875, y: 0.796875 },
  { x: 0.546875, y: 0.796875 },
  { x: 0.578125, y: 0.796875 },
  { x: 0.578125, y: 0.796875 },
  { x: 0.609375, y: 0.796875 },
  { x: 0.609375, y: 0.796875 },
  { x: 0.640625, y: 0.796875 },
  { x: 0.640625, y: 0.796875 },
  { x: 0.671875, y: 0.796875 },
  { x: 0.671875, y: 0.796875 },
  { x: 0.703125, y: 0.796875 },
  { x: 0.703125, y: 0.796875 },
  { x: 0.734375, y: 0.796875 },
  { x: 0.734375, y: 0.796875 },
  { x: 0.765625, y: 0.796875 },
  { x: 0.765625, y: 0.796875 },
  { x: 0.796875, y: 0.796875 },
  { x: 0.796875, y: 0.796875 },
  { x: 0.828125, y: 0.796875 },
  { x: 0.828125, y: 0.796875 },
  { x: 0.859375, y: 0.796875 },
  { x: 0.859375, y: 0.796875 },
  { x: 0.890625, y: 0.796875 },
  { x: 0.890625, y: 0.796875 },
  { x: 0.921875, y: 0.796875 },
  { x: 0.921875, y: 0.796875 },
  { x: 0.953125, y: 0.796875 },
  { x: 0.953125, y: 0.796875 },
  { x: 0.984375, y: 0.796875 },
  { x: 0.984375, y: 0.796875 },
  { x: 0.015625, y: 0.828125 },
  { x: 0.015625, y: 0.828125 },
  { x: 0.046875, y: 0.828125 },
  { x: 0.046875, y: 0.828125 },
  { x: 0.078125, y: 0.828125 },
  { x: 0.078125, y: 0.828125 },
  { x: 0.109375, y: 0.828125 },
  { x: 0.109375, y: 0.828125 },
  { x: 0.140625, y: 0.828125 },
  { x: 0.140625, y: 0.828125 },
  { x: 0.171875, y: 0.828125 },
  { x: 0.171875, y: 0.828125 },
  { x: 0.203125, y: 0.828125 },
  { x: 0.203125, y: 0.828125 },
  { x: 0.234375, y: 0.828125 },
  { x: 0.234375, y: 0.828125 },
  { x: 0.265625, y: 0.828125 },
  { x: 0.265625, y: 0.828125 },
  { x: 0.296875, y: 0.828125 },
  { x: 0.296875, y: 0.828125 },
  { x: 0.328125, y: 0.828125 },
  { x: 0.328125, y: 0.828125 },
  { x: 0.359375, y: 0.828125 },
  { x: 0.359375, y: 0.828125 },
  { x: 0.390625, y: 0.828125 },
  { x: 0.390625, y: 0.828125 },
  { x: 0.421875, y: 0.828125 },
  { x: 0.421875, y: 0.828125 },
  { x: 0.453125, y: 0.828125 },
  { x: 0.453125, y: 0.828125 },
  { x: 0.484375, y: 0.828125 },
  { x: 0.484375, y: 0.828125 },
  { x: 0.515625, y: 0.828125 },
  { x: 0.515625, y: 0.828125 },
  { x: 0.546875, y: 0.828125 },
  { x: 0.546875, y: 0.828125 },
  { x: 0.578125, y: 0.828125 },
  { x: 0.578125, y: 0.828125 },
  { x: 0.609375, y: 0.828125 },
  { x: 0.609375, y: 0.828125 },
  { x: 0.640625, y: 0.828125 },
  { x: 0.640625, y: 0.828125 },
  { x: 0.671875, y: 0.828125 },
  { x: 0.671875, y: 0.828125 },
  { x: 0.703125, y: 0.828125 },
  { x: 0.703125, y: 0.828125 },
  { x: 0.734375, y: 0.828125 },
  { x: 0.734375, y: 0.828125 },
  { x: 0.765625, y: 0.828125 },
  { x: 0.765625, y: 0.828125 },
  { x: 0.796875, y: 0.828125 },
  { x: 0.796875, y: 0.828125 },
  { x: 0.828125, y: 0.828125 },
  { x: 0.828125, y: 0.828125 },
  { x: 0.859375, y: 0.828125 },
  { x: 0.859375, y: 0.828125 },
  { x: 0.890625, y: 0.828125 },
  { x: 0.890625, y: 0.828125 },
  { x: 0.921875, y: 0.828125 },
  { x: 0.921875, y: 0.828125 },
  { x: 0.953125, y: 0.828125 },
  { x: 0.953125, y: 0.828125 },
  { x: 0.984375, y: 0.828125 },
  { x: 0.984375, y: 0.828125 },
  { x: 0.015625, y: 0.859375 },
  { x: 0.015625, y: 0.859375 },
  { x: 0.046875, y: 0.859375 },
  { x: 0.046875, y: 0.859375 },
  { x: 0.078125, y: 0.859375 },
  { x: 0.078125, y: 0.859375 },
  { x: 0.109375, y: 0.859375 },
  { x: 0.109375, y: 0.859375 },
  { x: 0.140625, y: 0.859375 },
  { x: 0.140625, y: 0.859375 },
  { x: 0.171875, y: 0.859375 },
  { x: 0.171875, y: 0.859375 },
  { x: 0.203125, y: 0.859375 },
  { x: 0.203125, y: 0.859375 },
  { x: 0.234375, y: 0.859375 },
  { x: 0.234375, y: 0.859375 },
  { x: 0.265625, y: 0.859375 },
  { x: 0.265625, y: 0.859375 },
  { x: 0.296875, y: 0.859375 },
  { x: 0.296875, y: 0.859375 },
  { x: 0.328125, y: 0.859375 },
  { x: 0.328125, y: 0.859375 },
  { x: 0.359375, y: 0.859375 },
  { x: 0.359375, y: 0.859375 },
  { x: 0.390625, y: 0.859375 },
  { x: 0.390625, y: 0.859375 },
  { x: 0.421875, y: 0.859375 },
  { x: 0.421875, y: 0.859375 },
  { x: 0.453125, y: 0.859375 },
  { x: 0.453125, y: 0.859375 },
  { x: 0.484375, y: 0.859375 },
  { x: 0.484375, y: 0.859375 },
  { x: 0.515625, y: 0.859375 },
  { x: 0.515625, y: 0.859375 },
  { x: 0.546875, y: 0.859375 },
  { x: 0.546875, y: 0.859375 },
  { x: 0.578125, y: 0.859375 },
  { x: 0.578125, y: 0.859375 },
  { x: 0.609375, y: 0.859375 },
  { x: 0.609375, y: 0.859375 },
  { x: 0.640625, y: 0.859375 },
  { x: 0.640625, y: 0.859375 },
  { x: 0.671875, y: 0.859375 },
  { x: 0.671875, y: 0.859375 },
  { x: 0.703125, y: 0.859375 },
  { x: 0.703125, y: 0.859375 },
  { x: 0.734375, y: 0.859375 },
  { x: 0.734375, y: 0.859375 },
  { x: 0.765625, y: 0.859375 },
  { x: 0.765625, y: 0.859375 },
  { x: 0.796875, y: 0.859375 },
  { x: 0.796875, y: 0.859375 },
  { x: 0.828125, y: 0.859375 },
  { x: 0.828125, y: 0.859375 },
  { x: 0.859375, y: 0.859375 },
  { x: 0.859375, y: 0.859375 },
  { x: 0.890625, y: 0.859375 },
  { x: 0.890625, y: 0.859375 },
  { x: 0.921875, y: 0.859375 },
  { x: 0.921875, y: 0.859375 },
  { x: 0.953125, y: 0.859375 },
  { x: 0.953125, y: 0.859375 },
  { x: 0.984375, y: 0.859375 },
  { x: 0.984375, y: 0.859375 },
  { x: 0.015625, y: 0.890625 },
  { x: 0.015625, y: 0.890625 },
  { x: 0.046875, y: 0.890625 },
  { x: 0.046875, y: 0.890625 },
  { x: 0.078125, y: 0.890625 },
  { x: 0.078125, y: 0.890625 },
  { x: 0.109375, y: 0.890625 },
  { x: 0.109375, y: 0.890625 },
  { x: 0.140625, y: 0.890625 },
  { x: 0.140625, y: 0.890625 },
  { x: 0.171875, y: 0.890625 },
  { x: 0.171875, y: 0.890625 },
  { x: 0.203125, y: 0.890625 },
  { x: 0.203125, y: 0.890625 },
  { x: 0.234375, y: 0.890625 },
  { x: 0.234375, y: 0.890625 },
  { x: 0.265625, y: 0.890625 },
  { x: 0.265625, y: 0.890625 },
  { x: 0.296875, y: 0.890625 },
  { x: 0.296875, y: 0.890625 },
  { x: 0.328125, y: 0.890625 },
  { x: 0.328125, y: 0.890625 },
  { x: 0.359375, y: 0.890625 },
  { x: 0.359375, y: 0.890625 },
  { x: 0.390625, y: 0.890625 },
  { x: 0.390625, y: 0.890625 },
  { x: 0.421875, y: 0.890625 },
  { x: 0.421875, y: 0.890625 },
  { x: 0.453125, y: 0.890625 },
  { x: 0.453125, y: 0.890625 },
  { x: 0.484375, y: 0.890625 },
  { x: 0.484375, y: 0.890625 },
  { x: 0.515625, y: 0.890625 },
  { x: 0.515625, y: 0.890625 },
  { x: 0.546875, y: 0.890625 },
  { x: 0.546875, y: 0.890625 },
  { x: 0.578125, y: 0.890625 },
  { x: 0.578125, y: 0.890625 },
  { x: 0.609375, y: 0.890625 },
  { x: 0.609375, y: 0.890625 },
  { x: 0.640625, y: 0.890625 },
  { x: 0.640625, y: 0.890625 },
  { x: 0.671875, y: 0.890625 },
  { x: 0.671875, y: 0.890625 },
  { x: 0.703125, y: 0.890625 },
  { x: 0.703125, y: 0.890625 },
  { x: 0.734375, y: 0.890625 },
  { x: 0.734375, y: 0.890625 },
  { x: 0.765625, y: 0.890625 },
  { x: 0.765625, y: 0.890625 },
  { x: 0.796875, y: 0.890625 },
  { x: 0.796875, y: 0.890625 },
  { x: 0.828125, y: 0.890625 },
  { x: 0.828125, y: 0.890625 },
  { x: 0.859375, y: 0.890625 },
  { x: 0.859375, y: 0.890625 },
  { x: 0.890625, y: 0.890625 },
  { x: 0.890625, y: 0.890625 },
  { x: 0.921875, y: 0.890625 },
  { x: 0.921875, y: 0.890625 },
  { x: 0.953125, y: 0.890625 },
  { x: 0.953125, y: 0.890625 },
  { x: 0.984375, y: 0.890625 },
  { x: 0.984375, y: 0.890625 },
  { x: 0.015625, y: 0.921875 },
  { x: 0.015625, y: 0.921875 },
  { x: 0.046875, y: 0.921875 },
  { x: 0.046875, y: 0.921875 },
  { x: 0.078125, y: 0.921875 },
  { x: 0.078125, y: 0.921875 },
  { x: 0.109375, y: 0.921875 },
  { x: 0.109375, y: 0.921875 },
  { x: 0.140625, y: 0.921875 },
  { x: 0.140625, y: 0.921875 },
  { x: 0.171875, y: 0.921875 },
  { x: 0.171875, y: 0.921875 },
  { x: 0.203125, y: 0.921875 },
  { x: 0.203125, y: 0.921875 },
  { x: 0.234375, y: 0.921875 },
  { x: 0.234375, y: 0.921875 },
  { x: 0.265625, y: 0.921875 },
  { x: 0.265625, y: 0.921875 },
  { x: 0.296875, y: 0.921875 },
  { x: 0.296875, y: 0.921875 },
  { x: 0.328125, y: 0.921875 },
  { x: 0.328125, y: 0.921875 },
  { x: 0.359375, y: 0.921875 },
  { x: 0.359375, y: 0.921875 },
  { x: 0.390625, y: 0.921875 },
  { x: 0.390625, y: 0.921875 },
  { x: 0.421875, y: 0.921875 },
  { x: 0.421875, y: 0.921875 },
  { x: 0.453125, y: 0.921875 },
  { x: 0.453125, y: 0.921875 },
  { x: 0.484375, y: 0.921875 },
  { x: 0.484375, y: 0.921875 },
  { x: 0.515625, y: 0.921875 },
  { x: 0.515625, y: 0.921875 },
  { x: 0.546875, y: 0.921875 },
  { x: 0.546875, y: 0.921875 },
  { x: 0.578125, y: 0.921875 },
  { x: 0.578125, y: 0.921875 },
  { x: 0.609375, y: 0.921875 },
  { x: 0.609375, y: 0.921875 },
  { x: 0.640625, y: 0.921875 },
  { x: 0.640625, y: 0.921875 },
  { x: 0.671875, y: 0.921875 },
  { x: 0.671875, y: 0.921875 },
  { x: 0.703125, y: 0.921875 },
  { x: 0.703125, y: 0.921875 },
  { x: 0.734375, y: 0.921875 },
  { x: 0.734375, y: 0.921875 },
  { x: 0.765625, y: 0.921875 },
  { x: 0.765625, y: 0.921875 },
  { x: 0.796875, y: 0.921875 },
  { x: 0.796875, y: 0.921875 },
  { x: 0.828125, y: 0.921875 },
  { x: 0.828125, y: 0.921875 },
  { x: 0.859375, y: 0.921875 },
  { x: 0.859375, y: 0.921875 },
  { x: 0.890625, y: 0.921875 },
  { x: 0.890625, y: 0.921875 },
  { x: 0.921875, y: 0.921875 },
  { x: 0.921875, y: 0.921875 },
  { x: 0.953125, y: 0.921875 },
  { x: 0.953125, y: 0.921875 },
  { x: 0.984375, y: 0.921875 },
  { x: 0.984375, y: 0.921875 },
  { x: 0.015625, y: 0.953125 },
  { x: 0.015625, y: 0.953125 },
  { x: 0.046875, y: 0.953125 },
  { x: 0.046875, y: 0.953125 },
  { x: 0.078125, y: 0.953125 },
  { x: 0.078125, y: 0.953125 },
  { x: 0.109375, y: 0.953125 },
  { x: 0.109375, y: 0.953125 },
  { x: 0.140625, y: 0.953125 },
  { x: 0.140625, y: 0.953125 },
  { x: 0.171875, y: 0.953125 },
  { x: 0.171875, y: 0.953125 },
  { x: 0.203125, y: 0.953125 },
  { x: 0.203125, y: 0.953125 },
  { x: 0.234375, y: 0.953125 },
  { x: 0.234375, y: 0.953125 },
  { x: 0.265625, y: 0.953125 },
  { x: 0.265625, y: 0.953125 },
  { x: 0.296875, y: 0.953125 },
  { x: 0.296875, y: 0.953125 },
  { x: 0.328125, y: 0.953125 },
  { x: 0.328125, y: 0.953125 },
  { x: 0.359375, y: 0.953125 },
  { x: 0.359375, y: 0.953125 },
  { x: 0.390625, y: 0.953125 },
  { x: 0.390625, y: 0.953125 },
  { x: 0.421875, y: 0.953125 },
  { x: 0.421875, y: 0.953125 },
  { x: 0.453125, y: 0.953125 },
  { x: 0.453125, y: 0.953125 },
  { x: 0.484375, y: 0.953125 },
  { x: 0.484375, y: 0.953125 },
  { x: 0.515625, y: 0.953125 },
  { x: 0.515625, y: 0.953125 },
  { x: 0.546875, y: 0.953125 },
  { x: 0.546875, y: 0.953125 },
  { x: 0.578125, y: 0.953125 },
  { x: 0.578125, y: 0.953125 },
  { x: 0.609375, y: 0.953125 },
  { x: 0.609375, y: 0.953125 },
  { x: 0.640625, y: 0.953125 },
  { x: 0.640625, y: 0.953125 },
  { x: 0.671875, y: 0.953125 },
  { x: 0.671875, y: 0.953125 },
  { x: 0.703125, y: 0.953125 },
  { x: 0.703125, y: 0.953125 },
  { x: 0.734375, y: 0.953125 },
  { x: 0.734375, y: 0.953125 },
  { x: 0.765625, y: 0.953125 },
  { x: 0.765625, y: 0.953125 },
  { x: 0.796875, y: 0.953125 },
  { x: 0.796875, y: 0.953125 },
  { x: 0.828125, y: 0.953125 },
  { x: 0.828125, y: 0.953125 },
  { x: 0.859375, y: 0.953125 },
  { x: 0.859375, y: 0.953125 },
  { x: 0.890625, y: 0.953125 },
  { x: 0.890625, y: 0.953125 },
  { x: 0.921875, y: 0.953125 },
  { x: 0.921875, y: 0.953125 },
  { x: 0.953125, y: 0.953125 },
  { x: 0.953125, y: 0.953125 },
  { x: 0.984375, y: 0.953125 },
  { x: 0.984375, y: 0.953125 },
  { x: 0.015625, y: 0.984375 },
  { x: 0.015625, y: 0.984375 },
  { x: 0.046875, y: 0.984375 },
  { x: 0.046875, y: 0.984375 },
  { x: 0.078125, y: 0.984375 },
  { x: 0.078125, y: 0.984375 },
  { x: 0.109375, y: 0.984375 },
  { x: 0.109375, y: 0.984375 },
  { x: 0.140625, y: 0.984375 },
  { x: 0.140625, y: 0.984375 },
  { x: 0.171875, y: 0.984375 },
  { x: 0.171875, y: 0.984375 },
  { x: 0.203125, y: 0.984375 },
  { x: 0.203125, y: 0.984375 },
  { x: 0.234375, y: 0.984375 },
  { x: 0.234375, y: 0.984375 },
  { x: 0.265625, y: 0.984375 },
  { x: 0.265625, y: 0.984375 },
  { x: 0.296875, y: 0.984375 },
  { x: 0.296875, y: 0.984375 },
  { x: 0.328125, y: 0.984375 },
  { x: 0.328125, y: 0.984375 },
  { x: 0.359375, y: 0.984375 },
  { x: 0.359375, y: 0.984375 },
  { x: 0.390625, y: 0.984375 },
  { x: 0.390625, y: 0.984375 },
  { x: 0.421875, y: 0.984375 },
  { x: 0.421875, y: 0.984375 },
  { x: 0.453125, y: 0.984375 },
  { x: 0.453125, y: 0.984375 },
  { x: 0.484375, y: 0.984375 },
  { x: 0.484375, y: 0.984375 },
  { x: 0.515625, y: 0.984375 },
  { x: 0.515625, y: 0.984375 },
  { x: 0.546875, y: 0.984375 },
  { x: 0.546875, y: 0.984375 },
  { x: 0.578125, y: 0.984375 },
  { x: 0.578125, y: 0.984375 },
  { x: 0.609375, y: 0.984375 },
  { x: 0.609375, y: 0.984375 },
  { x: 0.640625, y: 0.984375 },
  { x: 0.640625, y: 0.984375 },
  { x: 0.671875, y: 0.984375 },
  { x: 0.671875, y: 0.984375 },
  { x: 0.703125, y: 0.984375 },
  { x: 0.703125, y: 0.984375 },
  { x: 0.734375, y: 0.984375 },
  { x: 0.734375, y: 0.984375 },
  { x: 0.765625, y: 0.984375 },
  { x: 0.765625, y: 0.984375 },
  { x: 0.796875, y: 0.984375 },
  { x: 0.796875, y: 0.984375 },
  { x: 0.828125, y: 0.984375 },
  { x: 0.828125, y: 0.984375 },
  { x: 0.859375, y: 0.984375 },
  { x: 0.859375, y: 0.984375 },
  { x: 0.890625, y: 0.984375 },
  { x: 0.890625, y: 0.984375 },
  { x: 0.921875, y: 0.984375 },
  { x: 0.921875, y: 0.984375 },
  { x: 0.953125, y: 0.984375 },
  { x: 0.953125, y: 0.984375 },
  { x: 0.984375, y: 0.984375 },
  { x: 0.984375, y: 0.984375 },
  { x: 0.03125, y: 0.03125 },
  { x: 0.03125, y: 0.03125 },
  { x: 0.09375, y: 0.03125 },
  { x: 0.09375, y: 0.03125 },
  { x: 0.15625, y: 0.03125 },
  { x: 0.15625, y: 0.03125 },
  { x: 0.21875, y: 0.03125 },
  { x: 0.21875, y: 0.03125 },
  { x: 0.28125, y: 0.03125 },
  { x: 0.28125, y: 0.03125 },
  { x: 0.34375, y: 0.03125 },
  { x: 0.34375, y: 0.03125 },
  { x: 0.40625, y: 0.03125 },
  { x: 0.40625, y: 0.03125 },
  { x: 0.46875, y: 0.03125 },
  { x: 0.46875, y: 0.03125 },
  { x: 0.53125, y: 0.03125 },
  { x: 0.53125, y: 0.03125 },
  { x: 0.59375, y: 0.03125 },
  { x: 0.59375, y: 0.03125 },
  { x: 0.65625, y: 0.03125 },
  { x: 0.65625, y: 0.03125 },
  { x: 0.71875, y: 0.03125 },
  { x: 0.71875, y: 0.03125 },
  { x: 0.78125, y: 0.03125 },
  { x: 0.78125, y: 0.03125 },
  { x: 0.84375, y: 0.03125 },
  { x: 0.84375, y: 0.03125 },
  { x: 0.90625, y: 0.03125 },
  { x: 0.90625, y: 0.03125 },
  { x: 0.96875, y: 0.03125 },
  { x: 0.96875, y: 0.03125 },
  { x: 0.03125, y: 0.09375 },
  { x: 0.03125, y: 0.09375 },
  { x: 0.09375, y: 0.09375 },
  { x: 0.09375, y: 0.09375 },
  { x: 0.15625, y: 0.09375 },
  { x: 0.15625, y: 0.09375 },
  { x: 0.21875, y: 0.09375 },
  { x: 0.21875, y: 0.09375 },
  { x: 0.28125, y: 0.09375 },
  { x: 0.28125, y: 0.09375 },
  { x: 0.34375, y: 0.09375 },
  { x: 0.34375, y: 0.09375 },
  { x: 0.40625, y: 0.09375 },
  { x: 0.40625, y: 0.09375 },
  { x: 0.46875, y: 0.09375 },
  { x: 0.46875, y: 0.09375 },
  { x: 0.53125, y: 0.09375 },
  { x: 0.53125, y: 0.09375 },
  { x: 0.59375, y: 0.09375 },
  { x: 0.59375, y: 0.09375 },
  { x: 0.65625, y: 0.09375 },
  { x: 0.65625, y: 0.09375 },
  { x: 0.71875, y: 0.09375 },
  { x: 0.71875, y: 0.09375 },
  { x: 0.78125, y: 0.09375 },
  { x: 0.78125, y: 0.09375 },
  { x: 0.84375, y: 0.09375 },
  { x: 0.84375, y: 0.09375 },
  { x: 0.90625, y: 0.09375 },
  { x: 0.90625, y: 0.09375 },
  { x: 0.96875, y: 0.09375 },
  { x: 0.96875, y: 0.09375 },
  { x: 0.03125, y: 0.15625 },
  { x: 0.03125, y: 0.15625 },
  { x: 0.09375, y: 0.15625 },
  { x: 0.09375, y: 0.15625 },
  { x: 0.15625, y: 0.15625 },
  { x: 0.15625, y: 0.15625 },
  { x: 0.21875, y: 0.15625 },
  { x: 0.21875, y: 0.15625 },
  { x: 0.28125, y: 0.15625 },
  { x: 0.28125, y: 0.15625 },
  { x: 0.34375, y: 0.15625 },
  { x: 0.34375, y: 0.15625 },
  { x: 0.40625, y: 0.15625 },
  { x: 0.40625, y: 0.15625 },
  { x: 0.46875, y: 0.15625 },
  { x: 0.46875, y: 0.15625 },
  { x: 0.53125, y: 0.15625 },
  { x: 0.53125, y: 0.15625 },
  { x: 0.59375, y: 0.15625 },
  { x: 0.59375, y: 0.15625 },
  { x: 0.65625, y: 0.15625 },
  { x: 0.65625, y: 0.15625 },
  { x: 0.71875, y: 0.15625 },
  { x: 0.71875, y: 0.15625 },
  { x: 0.78125, y: 0.15625 },
  { x: 0.78125, y: 0.15625 },
  { x: 0.84375, y: 0.15625 },
  { x: 0.84375, y: 0.15625 },
  { x: 0.90625, y: 0.15625 },
  { x: 0.90625, y: 0.15625 },
  { x: 0.96875, y: 0.15625 },
  { x: 0.96875, y: 0.15625 },
  { x: 0.03125, y: 0.21875 },
  { x: 0.03125, y: 0.21875 },
  { x: 0.09375, y: 0.21875 },
  { x: 0.09375, y: 0.21875 },
  { x: 0.15625, y: 0.21875 },
  { x: 0.15625, y: 0.21875 },
  { x: 0.21875, y: 0.21875 },
  { x: 0.21875, y: 0.21875 },
  { x: 0.28125, y: 0.21875 },
  { x: 0.28125, y: 0.21875 },
  { x: 0.34375, y: 0.21875 },
  { x: 0.34375, y: 0.21875 },
  { x: 0.40625, y: 0.21875 },
  { x: 0.40625, y: 0.21875 },
  { x: 0.46875, y: 0.21875 },
  { x: 0.46875, y: 0.21875 },
  { x: 0.53125, y: 0.21875 },
  { x: 0.53125, y: 0.21875 },
  { x: 0.59375, y: 0.21875 },
  { x: 0.59375, y: 0.21875 },
  { x: 0.65625, y: 0.21875 },
  { x: 0.65625, y: 0.21875 },
  { x: 0.71875, y: 0.21875 },
  { x: 0.71875, y: 0.21875 },
  { x: 0.78125, y: 0.21875 },
  { x: 0.78125, y: 0.21875 },
  { x: 0.84375, y: 0.21875 },
  { x: 0.84375, y: 0.21875 },
  { x: 0.90625, y: 0.21875 },
  { x: 0.90625, y: 0.21875 },
  { x: 0.96875, y: 0.21875 },
  { x: 0.96875, y: 0.21875 },
  { x: 0.03125, y: 0.28125 },
  { x: 0.03125, y: 0.28125 },
  { x: 0.09375, y: 0.28125 },
  { x: 0.09375, y: 0.28125 },
  { x: 0.15625, y: 0.28125 },
  { x: 0.15625, y: 0.28125 },
  { x: 0.21875, y: 0.28125 },
  { x: 0.21875, y: 0.28125 },
  { x: 0.28125, y: 0.28125 },
  { x: 0.28125, y: 0.28125 },
  { x: 0.34375, y: 0.28125 },
  { x: 0.34375, y: 0.28125 },
  { x: 0.40625, y: 0.28125 },
  { x: 0.40625, y: 0.28125 },
  { x: 0.46875, y: 0.28125 },
  { x: 0.46875, y: 0.28125 },
  { x: 0.53125, y: 0.28125 },
  { x: 0.53125, y: 0.28125 },
  { x: 0.59375, y: 0.28125 },
  { x: 0.59375, y: 0.28125 },
  { x: 0.65625, y: 0.28125 },
  { x: 0.65625, y: 0.28125 },
  { x: 0.71875, y: 0.28125 },
  { x: 0.71875, y: 0.28125 },
  { x: 0.78125, y: 0.28125 },
  { x: 0.78125, y: 0.28125 },
  { x: 0.84375, y: 0.28125 },
  { x: 0.84375, y: 0.28125 },
  { x: 0.90625, y: 0.28125 },
  { x: 0.90625, y: 0.28125 },
  { x: 0.96875, y: 0.28125 },
  { x: 0.96875, y: 0.28125 },
  { x: 0.03125, y: 0.34375 },
  { x: 0.03125, y: 0.34375 },
  { x: 0.09375, y: 0.34375 },
  { x: 0.09375, y: 0.34375 },
  { x: 0.15625, y: 0.34375 },
  { x: 0.15625, y: 0.34375 },
  { x: 0.21875, y: 0.34375 },
  { x: 0.21875, y: 0.34375 },
  { x: 0.28125, y: 0.34375 },
  { x: 0.28125, y: 0.34375 },
  { x: 0.34375, y: 0.34375 },
  { x: 0.34375, y: 0.34375 },
  { x: 0.40625, y: 0.34375 },
  { x: 0.40625, y: 0.34375 },
  { x: 0.46875, y: 0.34375 },
  { x: 0.46875, y: 0.34375 },
  { x: 0.53125, y: 0.34375 },
  { x: 0.53125, y: 0.34375 },
  { x: 0.59375, y: 0.34375 },
  { x: 0.59375, y: 0.34375 },
  { x: 0.65625, y: 0.34375 },
  { x: 0.65625, y: 0.34375 },
  { x: 0.71875, y: 0.34375 },
  { x: 0.71875, y: 0.34375 },
  { x: 0.78125, y: 0.34375 },
  { x: 0.78125, y: 0.34375 },
  { x: 0.84375, y: 0.34375 },
  { x: 0.84375, y: 0.34375 },
  { x: 0.90625, y: 0.34375 },
  { x: 0.90625, y: 0.34375 },
  { x: 0.96875, y: 0.34375 },
  { x: 0.96875, y: 0.34375 },
  { x: 0.03125, y: 0.40625 },
  { x: 0.03125, y: 0.40625 },
  { x: 0.09375, y: 0.40625 },
  { x: 0.09375, y: 0.40625 },
  { x: 0.15625, y: 0.40625 },
  { x: 0.15625, y: 0.40625 },
  { x: 0.21875, y: 0.40625 },
  { x: 0.21875, y: 0.40625 },
  { x: 0.28125, y: 0.40625 },
  { x: 0.28125, y: 0.40625 },
  { x: 0.34375, y: 0.40625 },
  { x: 0.34375, y: 0.40625 },
  { x: 0.40625, y: 0.40625 },
  { x: 0.40625, y: 0.40625 },
  { x: 0.46875, y: 0.40625 },
  { x: 0.46875, y: 0.40625 },
  { x: 0.53125, y: 0.40625 },
  { x: 0.53125, y: 0.40625 },
  { x: 0.59375, y: 0.40625 },
  { x: 0.59375, y: 0.40625 },
  { x: 0.65625, y: 0.40625 },
  { x: 0.65625, y: 0.40625 },
  { x: 0.71875, y: 0.40625 },
  { x: 0.71875, y: 0.40625 },
  { x: 0.78125, y: 0.40625 },
  { x: 0.78125, y: 0.40625 },
  { x: 0.84375, y: 0.40625 },
  { x: 0.84375, y: 0.40625 },
  { x: 0.90625, y: 0.40625 },
  { x: 0.90625, y: 0.40625 },
  { x: 0.96875, y: 0.40625 },
  { x: 0.96875, y: 0.40625 },
  { x: 0.03125, y: 0.46875 },
  { x: 0.03125, y: 0.46875 },
  { x: 0.09375, y: 0.46875 },
  { x: 0.09375, y: 0.46875 },
  { x: 0.15625, y: 0.46875 },
  { x: 0.15625, y: 0.46875 },
  { x: 0.21875, y: 0.46875 },
  { x: 0.21875, y: 0.46875 },
  { x: 0.28125, y: 0.46875 },
  { x: 0.28125, y: 0.46875 },
  { x: 0.34375, y: 0.46875 },
  { x: 0.34375, y: 0.46875 },
  { x: 0.40625, y: 0.46875 },
  { x: 0.40625, y: 0.46875 },
  { x: 0.46875, y: 0.46875 },
  { x: 0.46875, y: 0.46875 },
  { x: 0.53125, y: 0.46875 },
  { x: 0.53125, y: 0.46875 },
  { x: 0.59375, y: 0.46875 },
  { x: 0.59375, y: 0.46875 },
  { x: 0.65625, y: 0.46875 },
  { x: 0.65625, y: 0.46875 },
  { x: 0.71875, y: 0.46875 },
  { x: 0.71875, y: 0.46875 },
  { x: 0.78125, y: 0.46875 },
  { x: 0.78125, y: 0.46875 },
  { x: 0.84375, y: 0.46875 },
  { x: 0.84375, y: 0.46875 },
  { x: 0.90625, y: 0.46875 },
  { x: 0.90625, y: 0.46875 },
  { x: 0.96875, y: 0.46875 },
  { x: 0.96875, y: 0.46875 },
  { x: 0.03125, y: 0.53125 },
  { x: 0.03125, y: 0.53125 },
  { x: 0.09375, y: 0.53125 },
  { x: 0.09375, y: 0.53125 },
  { x: 0.15625, y: 0.53125 },
  { x: 0.15625, y: 0.53125 },
  { x: 0.21875, y: 0.53125 },
  { x: 0.21875, y: 0.53125 },
  { x: 0.28125, y: 0.53125 },
  { x: 0.28125, y: 0.53125 },
  { x: 0.34375, y: 0.53125 },
  { x: 0.34375, y: 0.53125 },
  { x: 0.40625, y: 0.53125 },
  { x: 0.40625, y: 0.53125 },
  { x: 0.46875, y: 0.53125 },
  { x: 0.46875, y: 0.53125 },
  { x: 0.53125, y: 0.53125 },
  { x: 0.53125, y: 0.53125 },
  { x: 0.59375, y: 0.53125 },
  { x: 0.59375, y: 0.53125 },
  { x: 0.65625, y: 0.53125 },
  { x: 0.65625, y: 0.53125 },
  { x: 0.71875, y: 0.53125 },
  { x: 0.71875, y: 0.53125 },
  { x: 0.78125, y: 0.53125 },
  { x: 0.78125, y: 0.53125 },
  { x: 0.84375, y: 0.53125 },
  { x: 0.84375, y: 0.53125 },
  { x: 0.90625, y: 0.53125 },
  { x: 0.90625, y: 0.53125 },
  { x: 0.96875, y: 0.53125 },
  { x: 0.96875, y: 0.53125 },
  { x: 0.03125, y: 0.59375 },
  { x: 0.03125, y: 0.59375 },
  { x: 0.09375, y: 0.59375 },
  { x: 0.09375, y: 0.59375 },
  { x: 0.15625, y: 0.59375 },
  { x: 0.15625, y: 0.59375 },
  { x: 0.21875, y: 0.59375 },
  { x: 0.21875, y: 0.59375 },
  { x: 0.28125, y: 0.59375 },
  { x: 0.28125, y: 0.59375 },
  { x: 0.34375, y: 0.59375 },
  { x: 0.34375, y: 0.59375 },
  { x: 0.40625, y: 0.59375 },
  { x: 0.40625, y: 0.59375 },
  { x: 0.46875, y: 0.59375 },
  { x: 0.46875, y: 0.59375 },
  { x: 0.53125, y: 0.59375 },
  { x: 0.53125, y: 0.59375 },
  { x: 0.59375, y: 0.59375 },
  { x: 0.59375, y: 0.59375 },
  { x: 0.65625, y: 0.59375 },
  { x: 0.65625, y: 0.59375 },
  { x: 0.71875, y: 0.59375 },
  { x: 0.71875, y: 0.59375 },
  { x: 0.78125, y: 0.59375 },
  { x: 0.78125, y: 0.59375 },
  { x: 0.84375, y: 0.59375 },
  { x: 0.84375, y: 0.59375 },
  { x: 0.90625, y: 0.59375 },
  { x: 0.90625, y: 0.59375 },
  { x: 0.96875, y: 0.59375 },
  { x: 0.96875, y: 0.59375 },
  { x: 0.03125, y: 0.65625 },
  { x: 0.03125, y: 0.65625 },
  { x: 0.09375, y: 0.65625 },
  { x: 0.09375, y: 0.65625 },
  { x: 0.15625, y: 0.65625 },
  { x: 0.15625, y: 0.65625 },
  { x: 0.21875, y: 0.65625 },
  { x: 0.21875, y: 0.65625 },
  { x: 0.28125, y: 0.65625 },
  { x: 0.28125, y: 0.65625 },
  { x: 0.34375, y: 0.65625 },
  { x: 0.34375, y: 0.65625 },
  { x: 0.40625, y: 0.65625 },
  { x: 0.40625, y: 0.65625 },
  { x: 0.46875, y: 0.65625 },
  { x: 0.46875, y: 0.65625 },
  { x: 0.53125, y: 0.65625 },
  { x: 0.53125, y: 0.65625 },
  { x: 0.59375, y: 0.65625 },
  { x: 0.59375, y: 0.65625 },
  { x: 0.65625, y: 0.65625 },
  { x: 0.65625, y: 0.65625 },
  { x: 0.71875, y: 0.65625 },
  { x: 0.71875, y: 0.65625 },
  { x: 0.78125, y: 0.65625 },
  { x: 0.78125, y: 0.65625 },
  { x: 0.84375, y: 0.65625 },
  { x: 0.84375, y: 0.65625 },
  { x: 0.90625, y: 0.65625 },
  { x: 0.90625, y: 0.65625 },
  { x: 0.96875, y: 0.65625 },
  { x: 0.96875, y: 0.65625 },
  { x: 0.03125, y: 0.71875 },
  { x: 0.03125, y: 0.71875 },
  { x: 0.09375, y: 0.71875 },
  { x: 0.09375, y: 0.71875 },
  { x: 0.15625, y: 0.71875 },
  { x: 0.15625, y: 0.71875 },
  { x: 0.21875, y: 0.71875 },
  { x: 0.21875, y: 0.71875 },
  { x: 0.28125, y: 0.71875 },
  { x: 0.28125, y: 0.71875 },
  { x: 0.34375, y: 0.71875 },
  { x: 0.34375, y: 0.71875 },
  { x: 0.40625, y: 0.71875 },
  { x: 0.40625, y: 0.71875 },
  { x: 0.46875, y: 0.71875 },
  { x: 0.46875, y: 0.71875 },
  { x: 0.53125, y: 0.71875 },
  { x: 0.53125, y: 0.71875 },
  { x: 0.59375, y: 0.71875 },
  { x: 0.59375, y: 0.71875 },
  { x: 0.65625, y: 0.71875 },
  { x: 0.65625, y: 0.71875 },
  { x: 0.71875, y: 0.71875 },
  { x: 0.71875, y: 0.71875 },
  { x: 0.78125, y: 0.71875 },
  { x: 0.78125, y: 0.71875 },
  { x: 0.84375, y: 0.71875 },
  { x: 0.84375, y: 0.71875 },
  { x: 0.90625, y: 0.71875 },
  { x: 0.90625, y: 0.71875 },
  { x: 0.96875, y: 0.71875 },
  { x: 0.96875, y: 0.71875 },
  { x: 0.03125, y: 0.78125 },
  { x: 0.03125, y: 0.78125 },
  { x: 0.09375, y: 0.78125 },
  { x: 0.09375, y: 0.78125 },
  { x: 0.15625, y: 0.78125 },
  { x: 0.15625, y: 0.78125 },
  { x: 0.21875, y: 0.78125 },
  { x: 0.21875, y: 0.78125 },
  { x: 0.28125, y: 0.78125 },
  { x: 0.28125, y: 0.78125 },
  { x: 0.34375, y: 0.78125 },
  { x: 0.34375, y: 0.78125 },
  { x: 0.40625, y: 0.78125 },
  { x: 0.40625, y: 0.78125 },
  { x: 0.46875, y: 0.78125 },
  { x: 0.46875, y: 0.78125 },
  { x: 0.53125, y: 0.78125 },
  { x: 0.53125, y: 0.78125 },
  { x: 0.59375, y: 0.78125 },
  { x: 0.59375, y: 0.78125 },
  { x: 0.65625, y: 0.78125 },
  { x: 0.65625, y: 0.78125 },
  { x: 0.71875, y: 0.78125 },
  { x: 0.71875, y: 0.78125 },
  { x: 0.78125, y: 0.78125 },
  { x: 0.78125, y: 0.78125 },
  { x: 0.84375, y: 0.78125 },
  { x: 0.84375, y: 0.78125 },
  { x: 0.90625, y: 0.78125 },
  { x: 0.90625, y: 0.78125 },
  { x: 0.96875, y: 0.78125 },
  { x: 0.96875, y: 0.78125 },
  { x: 0.03125, y: 0.84375 },
  { x: 0.03125, y: 0.84375 },
  { x: 0.09375, y: 0.84375 },
  { x: 0.09375, y: 0.84375 },
  { x: 0.15625, y: 0.84375 },
  { x: 0.15625, y: 0.84375 },
  { x: 0.21875, y: 0.84375 },
  { x: 0.21875, y: 0.84375 },
  { x: 0.28125, y: 0.84375 },
  { x: 0.28125, y: 0.84375 },
  { x: 0.34375, y: 0.84375 },
  { x: 0.34375, y: 0.84375 },
  { x: 0.40625, y: 0.84375 },
  { x: 0.40625, y: 0.84375 },
  { x: 0.46875, y: 0.84375 },
  { x: 0.46875, y: 0.84375 },
  { x: 0.53125, y: 0.84375 },
  { x: 0.53125, y: 0.84375 },
  { x: 0.59375, y: 0.84375 },
  { x: 0.59375, y: 0.84375 },
  { x: 0.65625, y: 0.84375 },
  { x: 0.65625, y: 0.84375 },
  { x: 0.71875, y: 0.84375 },
  { x: 0.71875, y: 0.84375 },
  { x: 0.78125, y: 0.84375 },
  { x: 0.78125, y: 0.84375 },
  { x: 0.84375, y: 0.84375 },
  { x: 0.84375, y: 0.84375 },
  { x: 0.90625, y: 0.84375 },
  { x: 0.90625, y: 0.84375 },
  { x: 0.96875, y: 0.84375 },
  { x: 0.96875, y: 0.84375 },
  { x: 0.03125, y: 0.90625 },
  { x: 0.03125, y: 0.90625 },
  { x: 0.09375, y: 0.90625 },
  { x: 0.09375, y: 0.90625 },
  { x: 0.15625, y: 0.90625 },
  { x: 0.15625, y: 0.90625 },
  { x: 0.21875, y: 0.90625 },
  { x: 0.21875, y: 0.90625 },
  { x: 0.28125, y: 0.90625 },
  { x: 0.28125, y: 0.90625 },
  { x: 0.34375, y: 0.90625 },
  { x: 0.34375, y: 0.90625 },
  { x: 0.40625, y: 0.90625 },
  { x: 0.40625, y: 0.90625 },
  { x: 0.46875, y: 0.90625 },
  { x: 0.46875, y: 0.90625 },
  { x: 0.53125, y: 0.90625 },
  { x: 0.53125, y: 0.90625 },
  { x: 0.59375, y: 0.90625 },
  { x: 0.59375, y: 0.90625 },
  { x: 0.65625, y: 0.90625 },
  { x: 0.65625, y: 0.90625 },
  { x: 0.71875, y: 0.90625 },
  { x: 0.71875, y: 0.90625 },
  { x: 0.78125, y: 0.90625 },
  { x: 0.78125, y: 0.90625 },
  { x: 0.84375, y: 0.90625 },
  { x: 0.84375, y: 0.90625 },
  { x: 0.90625, y: 0.90625 },
  { x: 0.90625, y: 0.90625 },
  { x: 0.96875, y: 0.90625 },
  { x: 0.96875, y: 0.90625 },
  { x: 0.03125, y: 0.96875 },
  { x: 0.03125, y: 0.96875 },
  { x: 0.09375, y: 0.96875 },
  { x: 0.09375, y: 0.96875 },
  { x: 0.15625, y: 0.96875 },
  { x: 0.15625, y: 0.96875 },
  { x: 0.21875, y: 0.96875 },
  { x: 0.21875, y: 0.96875 },
  { x: 0.28125, y: 0.96875 },
  { x: 0.28125, y: 0.96875 },
  { x: 0.34375, y: 0.96875 },
  { x: 0.34375, y: 0.96875 },
  { x: 0.40625, y: 0.96875 },
  { x: 0.40625, y: 0.96875 },
  { x: 0.46875, y: 0.96875 },
  { x: 0.46875, y: 0.96875 },
  { x: 0.53125, y: 0.96875 },
  { x: 0.53125, y: 0.96875 },
  { x: 0.59375, y: 0.96875 },
  { x: 0.59375, y: 0.96875 },
  { x: 0.65625, y: 0.96875 },
  { x: 0.65625, y: 0.96875 },
  { x: 0.71875, y: 0.96875 },
  { x: 0.71875, y: 0.96875 },
  { x: 0.78125, y: 0.96875 },
  { x: 0.78125, y: 0.96875 },
  { x: 0.84375, y: 0.96875 },
  { x: 0.84375, y: 0.96875 },
  { x: 0.90625, y: 0.96875 },
  { x: 0.90625, y: 0.96875 },
  { x: 0.96875, y: 0.96875 },
  { x: 0.96875, y: 0.96875 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.0625, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.1875, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.3125, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.4375, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.5625, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.6875, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.8125, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.9375, y: 0.0625 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.0625, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.1875, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.3125, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.4375, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.5625, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.6875, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.8125, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.9375, y: 0.1875 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.0625, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.1875, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.3125, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.4375, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.5625, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.6875, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.8125, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.9375, y: 0.3125 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.0625, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.1875, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.3125, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.4375, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.5625, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.6875, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.8125, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.9375, y: 0.4375 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.0625, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.1875, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.3125, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.4375, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.5625, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.6875, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.8125, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.9375, y: 0.5625 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.0625, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.1875, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.3125, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.4375, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.5625, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.6875, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.8125, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.9375, y: 0.6875 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.0625, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.1875, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.3125, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.4375, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.5625, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.6875, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.8125, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.9375, y: 0.8125 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.0625, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.1875, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.3125, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.4375, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.5625, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.6875, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.8125, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 },
  { x: 0.9375, y: 0.9375 }
];
var HandDetector = class {
  constructor(model23) {
    __publicField(this, "model");
    __publicField(this, "anchors");
    __publicField(this, "anchorsTensor");
    __publicField(this, "inputSize");
    __publicField(this, "inputSizeTensor");
    __publicField(this, "doubleInputSizeTensor");
    var _a2, _b2, _c2, _d2;
    this.model = model23;
    this.anchors = anchors2.map((anchor) => [anchor.x, anchor.y]);
    this.anchorsTensor = _i(this.anchors);
    this.inputSize = ((_d2 = (_c2 = (_b2 = (_a2 = this == null ? void 0 : this.model) == null ? void 0 : _a2.inputs) == null ? void 0 : _b2[0]) == null ? void 0 : _c2.shape) == null ? void 0 : _d2[2]) || 0;
    this.inputSizeTensor = mr([this.inputSize, this.inputSize]);
    this.doubleInputSizeTensor = mr([this.inputSize * 2, this.inputSize * 2]);
  }
  normalizeBoxes(boxes) {
    const t6 = {};
    t6.boxOffsets = He(boxes, [0, 0], [-1, 2]);
    t6.boxSizes = He(boxes, [0, 2], [-1, 2]);
    t6.div = Ge(t6.boxOffsets, this.inputSizeTensor);
    t6.boxCenterPoints = xe(t6.div, this.anchorsTensor);
    t6.halfBoxSizes = Ge(t6.boxSizes, this.doubleInputSizeTensor);
    t6.sub = Ne(t6.boxCenterPoints, t6.halfBoxSizes);
    t6.startPoints = ae(t6.sub, this.inputSizeTensor);
    t6.add = xe(t6.boxCenterPoints, t6.halfBoxSizes);
    t6.endPoints = ae(t6.add, this.inputSizeTensor);
    const res = Lv([t6.startPoints, t6.endPoints], 1);
    Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
    return res;
  }
  normalizeLandmarks(rawPalmLandmarks, index2) {
    const t6 = {};
    t6.reshape = z(rawPalmLandmarks, [-1, 7, 2]);
    t6.div = Ge(t6.reshape, this.inputSizeTensor);
    t6.landmarks = xe(t6.div, this.anchors[index2] ? this.anchors[index2] : 0);
    const res = ae(t6.landmarks, this.inputSizeTensor);
    Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
    return res;
  }
  async predict(input, config3) {
    var _a2;
    const t6 = {};
    t6.resize = uq.resizeBilinear(input, [this.inputSize, this.inputSize]);
    t6.div = Ge(t6.resize, constants.tf127);
    t6.image = Ne(t6.div, constants.tf1);
    t6.batched = this.model.execute(t6.image);
    t6.predictions = Up(t6.batched);
    t6.slice = He(t6.predictions, [0, 0], [-1, 1]);
    t6.sigmoid = zs(t6.slice);
    t6.scores = Up(t6.sigmoid);
    const scores = await t6.scores.data();
    t6.boxes = He(t6.predictions, [0, 1], [-1, 4]);
    t6.norm = this.normalizeBoxes(t6.boxes);
    t6.nms = await uq.nonMaxSuppressionAsync(t6.norm, t6.scores, 3 * (((_a2 = config3.hand) == null ? void 0 : _a2.maxDetected) || 1), config3.hand.iouThreshold, config3.hand.minConfidence);
    const nms = await t6.nms.array();
    const hands = [];
    for (const index2 of nms) {
      const p = {};
      p.box = He(t6.norm, [index2, 0], [1, -1]);
      p.slice = He(t6.predictions, [index2, 5], [1, 14]);
      p.norm = this.normalizeLandmarks(p.slice, index2);
      p.palmLandmarks = z(p.norm, [-1, 2]);
      const box = await p.box.data();
      const startPoint = box.slice(0, 2);
      const endPoint = box.slice(2, 4);
      const palmLandmarks = await p.palmLandmarks.array();
      const hand3 = { startPoint, endPoint, palmLandmarks, confidence: scores[index2] };
      const scaled = scaleBoxCoordinates2(hand3, [(input.shape[2] || 1) / this.inputSize, (input.shape[1] || 0) / this.inputSize]);
      hands.push(scaled);
      Object.keys(p).forEach((tensor) => Dt(p[tensor]));
    }
    Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
    return hands;
  }
};
var palmBoxEnlargeFactor = 5;
var handBoxEnlargeFactor = 1.65;
var palmLandmarkIds = [0, 5, 9, 13, 17, 1, 2];
var palmLandmarksPalmBase = 0;
var palmLandmarksMiddleFingerBase = 2;
var lastTime13 = 0;
var HandPipeline = class {
  constructor(handDetector, handPoseModel2) {
    __publicField(this, "handDetector");
    __publicField(this, "handPoseModel");
    __publicField(this, "inputSize");
    __publicField(this, "storedBoxes");
    __publicField(this, "skipped");
    __publicField(this, "detectedHands");
    var _a2, _b2, _c2;
    this.handDetector = handDetector;
    this.handPoseModel = handPoseModel2;
    this.inputSize = ((_c2 = (_b2 = (_a2 = this.handPoseModel) == null ? void 0 : _a2.inputs) == null ? void 0 : _b2[0].shape) == null ? void 0 : _c2[2]) || 0;
    this.storedBoxes = [];
    this.skipped = Number.MAX_SAFE_INTEGER;
    this.detectedHands = 0;
  }
  calculateLandmarksBoundingBox(landmarks) {
    const xs2 = landmarks.map((d) => d[0]);
    const ys2 = landmarks.map((d) => d[1]);
    const startPoint = [Math.min(...xs2), Math.min(...ys2)];
    const endPoint = [Math.max(...xs2), Math.max(...ys2)];
    return { startPoint, endPoint };
  }
  getBoxForPalmLandmarks(palmLandmarks, rotationMatrix) {
    const rotatedPalmLandmarks = palmLandmarks.map((coord) => rotatePoint2([...coord, 1], rotationMatrix));
    const boxAroundPalm = this.calculateLandmarksBoundingBox(rotatedPalmLandmarks);
    return enlargeBox2(squarifyBox2(boxAroundPalm), palmBoxEnlargeFactor);
  }
  getBoxForHandLandmarks(landmarks) {
    const boundingBox = this.calculateLandmarksBoundingBox(landmarks);
    const boxAroundHand = enlargeBox2(squarifyBox2(boundingBox), handBoxEnlargeFactor);
    boxAroundHand.palmLandmarks = [];
    for (let i = 0; i < palmLandmarkIds.length; i++) {
      boxAroundHand.palmLandmarks.push(landmarks[palmLandmarkIds[i]].slice(0, 2));
    }
    return boxAroundHand;
  }
  transformRawCoords(rawCoords, box2, angle, rotationMatrix) {
    const boxSize = getBoxSize2(box2);
    const scaleFactor = [boxSize[0] / this.inputSize, boxSize[1] / this.inputSize, (boxSize[0] + boxSize[1]) / this.inputSize / 2];
    const coordsScaled = rawCoords.map((coord) => [
      scaleFactor[0] * (coord[0] - this.inputSize / 2),
      scaleFactor[1] * (coord[1] - this.inputSize / 2),
      scaleFactor[2] * coord[2]
    ]);
    const coordsRotationMatrix = buildRotationMatrix2(angle, [0, 0]);
    const coordsRotated = coordsScaled.map((coord) => {
      const rotated = rotatePoint2(coord, coordsRotationMatrix);
      return [...rotated, coord[2]];
    });
    const inverseRotationMatrix = invertTransformMatrix2(rotationMatrix);
    const boxCenter = [...getBoxCenter2(box2), 1];
    const originalBoxCenter = [
      dot2(boxCenter, inverseRotationMatrix[0]),
      dot2(boxCenter, inverseRotationMatrix[1])
    ];
    return coordsRotated.map((coord) => [
      Math.trunc(coord[0] + originalBoxCenter[0]),
      Math.trunc(coord[1] + originalBoxCenter[1]),
      Math.trunc(coord[2])
    ]);
  }
  async estimateHands(image, config3) {
    let useFreshBox = false;
    let boxes;
    const skipTime = (config3.hand.skipTime || 0) > now() - lastTime13;
    const skipFrame = this.skipped < (config3.hand.skipFrames || 0);
    if (config3.skipAllowed && skipTime && skipFrame) {
      boxes = await this.handDetector.predict(image, config3);
      this.skipped = 0;
    }
    if (config3.skipAllowed)
      this.skipped++;
    if (boxes && boxes.length > 0 && (boxes.length !== this.detectedHands && this.detectedHands !== config3.hand.maxDetected || !config3.hand.landmarks)) {
      this.detectedHands = 0;
      this.storedBoxes = [...boxes];
      if (this.storedBoxes.length > 0)
        useFreshBox = true;
    }
    const hands = [];
    for (let i = 0; i < this.storedBoxes.length; i++) {
      const currentBox = this.storedBoxes[i];
      if (!currentBox)
        continue;
      if (config3.hand.landmarks) {
        const angle = config3.hand.rotation ? computeRotation2(currentBox.palmLandmarks[palmLandmarksPalmBase], currentBox.palmLandmarks[palmLandmarksMiddleFingerBase]) : 0;
        const palmCenter = getBoxCenter2(currentBox);
        const palmCenterNormalized = [palmCenter[0] / image.shape[2], palmCenter[1] / image.shape[1]];
        const rotatedImage = config3.hand.rotation && env.kernels.includes("rotatewithoffset") ? uq.rotateWithOffset(image, angle, 0, palmCenterNormalized) : image.clone();
        const rotationMatrix = buildRotationMatrix2(-angle, palmCenter);
        const newBox = useFreshBox ? this.getBoxForPalmLandmarks(currentBox.palmLandmarks, rotationMatrix) : currentBox;
        const croppedInput = cutBoxFromImageAndResize(newBox, rotatedImage, [this.inputSize, this.inputSize]);
        const handImage = Ge(croppedInput, constants.tf255);
        Dt(croppedInput);
        Dt(rotatedImage);
        const [confidenceT, keypoints] = this.handPoseModel.execute(handImage);
        lastTime13 = now();
        Dt(handImage);
        const confidence = (await confidenceT.data())[0];
        Dt(confidenceT);
        if (confidence >= config3.hand.minConfidence / 4) {
          const keypointsReshaped = z(keypoints, [-1, 3]);
          const rawCoords = await keypointsReshaped.array();
          Dt(keypoints);
          Dt(keypointsReshaped);
          const coords = this.transformRawCoords(rawCoords, newBox, angle, rotationMatrix);
          const nextBoundingBox = this.getBoxForHandLandmarks(coords);
          this.storedBoxes[i] = { ...nextBoundingBox, confidence };
          const result = {
            landmarks: coords,
            confidence,
            boxConfidence: currentBox.confidence,
            fingerConfidence: confidence,
            box: { topLeft: nextBoundingBox.startPoint, bottomRight: nextBoundingBox.endPoint }
          };
          hands.push(result);
        } else {
          this.storedBoxes[i] = null;
        }
        Dt(keypoints);
      } else {
        const enlarged = enlargeBox2(squarifyBox2(currentBox), handBoxEnlargeFactor);
        const result = {
          confidence: currentBox.confidence,
          boxConfidence: currentBox.confidence,
          fingerConfidence: 0,
          box: { topLeft: enlarged.startPoint, bottomRight: enlarged.endPoint },
          landmarks: []
        };
        hands.push(result);
      }
    }
    this.storedBoxes = this.storedBoxes.filter((a) => a !== null);
    this.detectedHands = hands.length;
    if (hands.length > config3.hand.maxDetected)
      hands.length = config3.hand.maxDetected;
    return hands;
  }
};
var meshAnnotations2 = {
  thumb: [1, 2, 3, 4],
  index: [5, 6, 7, 8],
  middle: [9, 10, 11, 12],
  ring: [13, 14, 15, 16],
  pinky: [17, 18, 19, 20],
  palm: [0]
};
var handDetectorModel;
var handPoseModel;
var handPipeline;
async function predict14(input, config3) {
  const predictions = await handPipeline.estimateHands(input, config3);
  if (!predictions)
    return [];
  const hands = [];
  for (let i = 0; i < predictions.length; i++) {
    const annotations2 = {};
    if (predictions[i].landmarks) {
      for (const key of Object.keys(meshAnnotations2)) {
        annotations2[key] = meshAnnotations2[key].map((index2) => predictions[i].landmarks[index2]);
      }
    }
    const keypoints = predictions[i].landmarks;
    let box = [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER, 0, 0];
    let boxRaw = [0, 0, 0, 0];
    if (keypoints && keypoints.length > 0) {
      for (const pt of keypoints) {
        if (pt[0] < box[0])
          box[0] = pt[0];
        if (pt[1] < box[1])
          box[1] = pt[1];
        if (pt[0] > box[2])
          box[2] = pt[0];
        if (pt[1] > box[3])
          box[3] = pt[1];
      }
      box[2] -= box[0];
      box[3] -= box[1];
      boxRaw = [box[0] / (input.shape[2] || 0), box[1] / (input.shape[1] || 0), box[2] / (input.shape[2] || 0), box[3] / (input.shape[1] || 0)];
    } else {
      box = predictions[i].box ? [
        Math.trunc(Math.max(0, predictions[i].box.topLeft[0])),
        Math.trunc(Math.max(0, predictions[i].box.topLeft[1])),
        Math.trunc(Math.min(input.shape[2] || 0, predictions[i].box.bottomRight[0]) - Math.max(0, predictions[i].box.topLeft[0])),
        Math.trunc(Math.min(input.shape[1] || 0, predictions[i].box.bottomRight[1]) - Math.max(0, predictions[i].box.topLeft[1]))
      ] : [0, 0, 0, 0];
      boxRaw = [
        predictions[i].box.topLeft[0] / (input.shape[2] || 0),
        predictions[i].box.topLeft[1] / (input.shape[1] || 0),
        (predictions[i].box.bottomRight[0] - predictions[i].box.topLeft[0]) / (input.shape[2] || 0),
        (predictions[i].box.bottomRight[1] - predictions[i].box.topLeft[1]) / (input.shape[1] || 0)
      ];
    }
    const landmarks = analyze(keypoints);
    hands.push({
      id: i,
      score: Math.round(100 * predictions[i].confidence) / 100,
      boxScore: Math.round(100 * predictions[i].boxConfidence) / 100,
      fingerScore: Math.round(100 * predictions[i].fingerConfidence) / 100,
      label: "hand",
      box,
      boxRaw,
      keypoints,
      annotations: annotations2,
      landmarks
    });
  }
  return hands;
}
async function load15(config3) {
  var _a2, _b2;
  if (env.initial) {
    handDetectorModel = null;
    handPoseModel = null;
  }
  if (!handDetectorModel || !handPoseModel) {
    [handDetectorModel, handPoseModel] = await Promise.all([
      config3.hand.enabled ? loadModel((_a2 = config3.hand.detector) == null ? void 0 : _a2.modelPath) : null,
      config3.hand.landmarks ? loadModel((_b2 = config3.hand.skeleton) == null ? void 0 : _b2.modelPath) : null
    ]);
  } else {
    if (config3.debug)
      log("cached model:", handDetectorModel["modelUrl"]);
    if (config3.debug)
      log("cached model:", handPoseModel["modelUrl"]);
  }
  const handDetector = handDetectorModel ? new HandDetector(handDetectorModel) : void 0;
  if (handDetector && handPoseModel)
    handPipeline = new HandPipeline(handDetector, handPoseModel);
  return [handDetectorModel, handPoseModel];
}
var models2 = [null, null];
var modelOutputNodes = ["StatefulPartitionedCall/Postprocessor/Slice", "StatefulPartitionedCall/Postprocessor/ExpandDims_1"];
var inputSize7 = [[0, 0], [0, 0]];
var classes = ["hand", "fist", "pinch", "point", "face", "tip", "pinchtip"];
var faceIndex = 4;
var boxExpandFact = 1.6;
var maxDetectorResolution = 512;
var detectorExpandFact = 1.4;
var skipped13 = Number.MAX_SAFE_INTEGER;
var lastTime14 = 0;
var outputSize = [0, 0];
var cache4 = {
  boxes: [],
  hands: []
};
var fingerMap = {
  thumb: [1, 2, 3, 4],
  index: [5, 6, 7, 8],
  middle: [9, 10, 11, 12],
  ring: [13, 14, 15, 16],
  pinky: [17, 18, 19, 20],
  base: [0],
  palm: [0, 17, 13, 9, 5, 1, 0]
};
async function loadDetect2(config3) {
  var _a2;
  if (env.initial)
    models2[0] = null;
  if (!models2[0]) {
    fakeOps(["tensorlistreserve", "enter", "tensorlistfromtensor", "merge", "loopcond", "switch", "exit", "tensorliststack", "nextiteration", "tensorlistsetitem", "tensorlistgetitem", "reciprocal", "shape", "split", "where"], config3);
    models2[0] = await loadModel((_a2 = config3.hand.detector) == null ? void 0 : _a2.modelPath);
    const inputs = models2[0]["executor"] ? Object.values(models2[0].modelSignature["inputs"]) : void 0;
    inputSize7[0][0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
    inputSize7[0][1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug)
    log("cached model:", models2[0]["modelUrl"]);
  return models2[0];
}
async function loadSkeleton(config3) {
  var _a2;
  if (env.initial)
    models2[1] = null;
  if (!models2[1]) {
    models2[1] = await loadModel((_a2 = config3.hand.skeleton) == null ? void 0 : _a2.modelPath);
    const inputs = models2[1]["executor"] ? Object.values(models2[1].modelSignature["inputs"]) : void 0;
    inputSize7[1][0] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[1].size) : 0;
    inputSize7[1][1] = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 0;
  } else if (config3.debug)
    log("cached model:", models2[1]["modelUrl"]);
  return models2[1];
}
async function detectHands(input, config3) {
  const hands = [];
  if (!input || !models2[0])
    return hands;
  const t6 = {};
  const ratio2 = (input.shape[2] || 1) / (input.shape[1] || 1);
  const height = Math.min(Math.round((input.shape[1] || 0) / 8) * 8, maxDetectorResolution);
  const width = Math.round(height * ratio2 / 8) * 8;
  t6.resize = uq.resizeBilinear(input, [height, width]);
  t6.cast = Ke(t6.resize, "int32");
  [t6.rawScores, t6.rawBoxes] = await models2[0].executeAsync(t6.cast, modelOutputNodes);
  t6.boxes = Up(t6.rawBoxes, [0, 2]);
  t6.scores = Up(t6.rawScores, [0]);
  const classScores = so(t6.scores, 1);
  Dt(classScores[faceIndex]);
  classScores.splice(faceIndex, 1);
  t6.filtered = Sr(classScores, 1);
  Dt(classScores);
  t6.max = Us(t6.filtered, 1);
  t6.argmax = bv(t6.filtered, 1);
  let id2 = 0;
  t6.nms = await uq.nonMaxSuppressionAsync(t6.boxes, t6.max, (config3.hand.maxDetected || 0) + 1, config3.hand.iouThreshold || 0, config3.hand.minConfidence || 1);
  const nms = await t6.nms.data();
  const scores = await t6.max.data();
  const classNum = await t6.argmax.data();
  for (const nmsIndex of Array.from(nms)) {
    const boxSlice = He(t6.boxes, nmsIndex, 1);
    const boxYX = await boxSlice.data();
    Dt(boxSlice);
    const boxData = [boxYX[1], boxYX[0], boxYX[3] - boxYX[1], boxYX[2] - boxYX[0]];
    const boxRaw = scale(boxData, detectorExpandFact);
    const boxFull = [Math.trunc(boxData[0] * outputSize[0]), Math.trunc(boxData[1] * outputSize[1]), Math.trunc(boxData[2] * outputSize[0]), Math.trunc(boxData[3] * outputSize[1])];
    const score = scores[nmsIndex];
    const label = classes[classNum[nmsIndex]];
    const hand3 = { id: id2++, score, box: boxFull, boxRaw, label };
    hands.push(hand3);
  }
  Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  hands.sort((a, b) => b.score - a.score);
  if (hands.length > (config3.hand.maxDetected || 1))
    hands.length = config3.hand.maxDetected || 1;
  return hands;
}
async function detectFingers(input, h, config3) {
  const hand3 = {
    id: h.id,
    score: Math.round(100 * h.score) / 100,
    boxScore: Math.round(100 * h.score) / 100,
    fingerScore: 0,
    box: h.box,
    boxRaw: h.boxRaw,
    label: h.label,
    keypoints: [],
    landmarks: {},
    annotations: {}
  };
  if (input && models2[1] && config3.hand.landmarks && h.score > (config3.hand.minConfidence || 0)) {
    const t6 = {};
    const boxCrop = [h.boxRaw[1], h.boxRaw[0], h.boxRaw[3] + h.boxRaw[1], h.boxRaw[2] + h.boxRaw[0]];
    t6.crop = uq.cropAndResize(input, [boxCrop], [0], [inputSize7[1][0], inputSize7[1][1]], "bilinear");
    t6.div = Ge(t6.crop, constants.tf255);
    [t6.score, t6.keypoints] = models2[1].execute(t6.div, ["Identity_1", "Identity"]);
    const rawScore = (await t6.score.data())[0];
    const score = (100 - Math.trunc(100 / (1 + Math.exp(rawScore)))) / 100;
    if (score >= (config3.hand.minConfidence || 0)) {
      hand3.fingerScore = score;
      t6.reshaped = z(t6.keypoints, [-1, 3]);
      const coordsData = await t6.reshaped.array();
      const coordsRaw = coordsData.map((kpt4) => [kpt4[0] / inputSize7[1][1], kpt4[1] / inputSize7[1][0], kpt4[2] || 0]);
      const coordsNorm = coordsRaw.map((kpt4) => [kpt4[0] * h.boxRaw[2], kpt4[1] * h.boxRaw[3], kpt4[2] || 0]);
      hand3.keypoints = coordsNorm.map((kpt4) => [outputSize[0] * (kpt4[0] + h.boxRaw[0]), outputSize[1] * (kpt4[1] + h.boxRaw[1]), kpt4[2] || 0]);
      hand3.landmarks = analyze(hand3.keypoints);
      for (const key of Object.keys(fingerMap)) {
        hand3.annotations[key] = fingerMap[key].map((index2) => hand3.landmarks && hand3.keypoints[index2] ? hand3.keypoints[index2] : null);
      }
    }
    Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  }
  return hand3;
}
async function predict15(input, config3) {
  var _a2, _b2;
  if (!((_a2 = models2[0]) == null ? void 0 : _a2["executor"]) || !((_b2 = models2[1]) == null ? void 0 : _b2["executor"]) || !models2[0].inputs[0].shape || !models2[1].inputs[0].shape)
    return [];
  outputSize = [input.shape[2] || 0, input.shape[1] || 0];
  skipped13++;
  const skipTime = (config3.hand.skipTime || 0) > now() - lastTime14;
  const skipFrame = skipped13 < (config3.hand.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame) {
    return cache4.hands;
  }
  return new Promise(async (resolve) => {
    const skipTimeExtended = 3 * (config3.hand.skipTime || 0) > now() - lastTime14;
    const skipFrameExtended = skipped13 < 3 * (config3.hand.skipFrames || 0);
    if (config3.skipAllowed && cache4.hands.length === config3.hand.maxDetected) {
      cache4.hands = await Promise.all(cache4.boxes.map((handBox) => detectFingers(input, handBox, config3)));
    } else if (config3.skipAllowed && skipTimeExtended && skipFrameExtended && cache4.hands.length > 0) {
      cache4.hands = await Promise.all(cache4.boxes.map((handBox) => detectFingers(input, handBox, config3)));
    } else {
      cache4.boxes = await detectHands(input, config3);
      lastTime14 = now();
      cache4.hands = await Promise.all(cache4.boxes.map((handBox) => detectFingers(input, handBox, config3)));
      skipped13 = 0;
    }
    const oldCache = [...cache4.boxes];
    cache4.boxes.length = 0;
    if (config3.cacheSensitivity > 0) {
      for (let i = 0; i < cache4.hands.length; i++) {
        const boxKpt = square(cache4.hands[i].keypoints, outputSize);
        if (boxKpt.box[2] / (input.shape[2] || 1) > 0.05 && boxKpt.box[3] / (input.shape[1] || 1) > 0.05 && cache4.hands[i].fingerScore && cache4.hands[i].fingerScore > (config3.hand.minConfidence || 0)) {
          const boxScale = scale(boxKpt.box, boxExpandFact);
          const boxScaleRaw = scale(boxKpt.boxRaw, boxExpandFact);
          cache4.boxes.push({ ...oldCache[i], box: boxScale, boxRaw: boxScaleRaw });
        }
      }
    }
    for (let i = 0; i < cache4.hands.length; i++) {
      const bbox = calc(cache4.hands[i].keypoints, outputSize);
      cache4.hands[i].box = bbox.box;
      cache4.hands[i].boxRaw = bbox.boxRaw;
    }
    resolve(cache4.hands);
  });
}
var empty = (error = null) => ({ face: [], body: [], hand: [], gesture: [], object: [], persons: [], performance: {}, timestamp: 0, width: 0, height: 0, error });
var movenetcoords_exports = {};
__export(movenetcoords_exports, {
  connected: () => connected3,
  horizontal: () => horizontal,
  kpt: () => kpt3,
  relative: () => relative,
  vertical: () => vertical
});
var kpt3 = [
  "nose",
  "leftEye",
  "rightEye",
  "leftEar",
  "rightEar",
  "leftShoulder",
  "rightShoulder",
  "leftElbow",
  "rightElbow",
  "leftWrist",
  "rightWrist",
  "leftHip",
  "rightHip",
  "leftKnee",
  "rightKnee",
  "leftAnkle",
  "rightAnkle"
];
var horizontal = [
  ["leftEye", "rightEye"],
  ["leftEar", "rightEar"],
  ["leftShoulder", "rightShoulder"],
  ["leftElbow", "rightElbow"],
  ["leftWrist", "rightWrist"],
  ["leftHip", "rightHip"],
  ["leftKnee", "rightKnee"],
  ["leftAnkle", "rightAnkle"]
];
var vertical = [
  ["leftKnee", "leftShoulder"],
  ["rightKnee", "rightShoulder"],
  ["leftAnkle", "leftKnee"],
  ["rightAnkle", "rightKnee"]
];
var relative = [
  [["leftHip", "rightHip"], ["leftShoulder", "rightShoulder"]],
  [["leftElbow", "rightElbow"], ["leftShoulder", "rightShoulder"]]
];
var connected3 = {
  leftLeg: ["leftHip", "leftKnee", "leftAnkle"],
  rightLeg: ["rightHip", "rightKnee", "rightAnkle"],
  torso: ["leftShoulder", "rightShoulder", "rightHip", "leftHip", "leftShoulder"],
  leftArm: ["leftShoulder", "leftElbow", "leftWrist"],
  rightArm: ["rightShoulder", "rightElbow", "rightWrist"],
  head: []
};
var bufferedResult = empty();
var interpolateTime = 0;
function calc2(newResult, config3) {
  var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2, _k2, _l2, _m2, _n2, _o2, _p, _q2, _r2, _s2, _t, _u2, _v2, _w2;
  const t0 = now();
  if (!newResult)
    return empty();
  const elapsed = Date.now() - newResult.timestamp;
  const bufferedFactor = elapsed < 1e3 ? 8 - Math.log(elapsed + 1) : 1;
  if (newResult.canvas)
    bufferedResult.canvas = newResult.canvas;
  if (newResult.error)
    bufferedResult.error = newResult.error;
  if (!bufferedResult.body || newResult.body.length !== bufferedResult.body.length) {
    bufferedResult.body = JSON.parse(JSON.stringify(newResult.body));
  } else {
    for (let i = 0; i < newResult.body.length; i++) {
      const box = newResult.body[i].box.map((newBoxCoord, j) => ((bufferedFactor - 1) * bufferedResult.body[i].box[j] + newBoxCoord) / bufferedFactor);
      const boxRaw = newResult.body[i].boxRaw.map((newBoxCoord, j) => ((bufferedFactor - 1) * bufferedResult.body[i].boxRaw[j] + newBoxCoord) / bufferedFactor);
      const keypoints = newResult.body[i].keypoints.map((newKpt, j) => {
        var _a3, _b3, _c3, _d3, _e3, _f3, _g3, _h3, _i3;
        return {
          score: newKpt.score,
          part: newKpt.part,
          position: [
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].position[0] || 0) + (newKpt.position[0] || 0)) / bufferedFactor : newKpt.position[0],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].position[1] || 0) + (newKpt.position[1] || 0)) / bufferedFactor : newKpt.position[1],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].position[2] || 0) + (newKpt.position[2] || 0)) / bufferedFactor : newKpt.position[2]
          ],
          positionRaw: [
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].positionRaw[0] || 0) + (newKpt.positionRaw[0] || 0)) / bufferedFactor : newKpt.positionRaw[0],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].positionRaw[1] || 0) + (newKpt.positionRaw[1] || 0)) / bufferedFactor : newKpt.positionRaw[1],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (bufferedResult.body[i].keypoints[j].positionRaw[2] || 0) + (newKpt.positionRaw[2] || 0)) / bufferedFactor : newKpt.positionRaw[2]
          ],
          distance: [
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (((_a3 = bufferedResult.body[i].keypoints[j].distance) == null ? void 0 : _a3[0]) || 0) + (((_b3 = newKpt.distance) == null ? void 0 : _b3[0]) || 0)) / bufferedFactor : (_c3 = newKpt.distance) == null ? void 0 : _c3[0],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (((_d3 = bufferedResult.body[i].keypoints[j].distance) == null ? void 0 : _d3[1]) || 0) + (((_e3 = newKpt.distance) == null ? void 0 : _e3[1]) || 0)) / bufferedFactor : (_f3 = newKpt.distance) == null ? void 0 : _f3[1],
            bufferedResult.body[i].keypoints[j] ? ((bufferedFactor - 1) * (((_g3 = bufferedResult.body[i].keypoints[j].distance) == null ? void 0 : _g3[2]) || 0) + (((_h3 = newKpt.distance) == null ? void 0 : _h3[2]) || 0)) / bufferedFactor : (_i3 = newKpt.distance) == null ? void 0 : _i3[2]
          ]
        };
      });
      const annotations2 = {};
      let coords = { connected: {} };
      if ((_a2 = config3.body.modelPath) == null ? void 0 : _a2.includes("efficientpose"))
        coords = efficientposecoords_exports;
      else if ((_b2 = config3.body.modelPath) == null ? void 0 : _b2.includes("blazepose"))
        coords = blazeposecoords_exports;
      else if ((_c2 = config3.body.modelPath) == null ? void 0 : _c2.includes("movenet"))
        coords = movenetcoords_exports;
      for (const [name, indexes] of Object.entries(coords.connected)) {
        const pt = [];
        for (let j = 0; j < indexes.length - 1; j++) {
          const pt0 = keypoints.find((kp2) => kp2.part === indexes[j]);
          const pt1 = keypoints.find((kp2) => kp2.part === indexes[j + 1]);
          if (pt0 && pt1)
            pt.push([pt0.position, pt1.position]);
        }
        annotations2[name] = pt;
      }
      bufferedResult.body[i] = { ...newResult.body[i], box, boxRaw, keypoints, annotations: annotations2 };
    }
  }
  if (!bufferedResult.hand || newResult.hand.length !== bufferedResult.hand.length) {
    bufferedResult.hand = JSON.parse(JSON.stringify(newResult.hand));
  } else {
    for (let i = 0; i < newResult.hand.length; i++) {
      const box = newResult.hand[i].box.map((b, j) => ((bufferedFactor - 1) * bufferedResult.hand[i].box[j] + b) / bufferedFactor);
      const boxRaw = newResult.hand[i].boxRaw.map((b, j) => ((bufferedFactor - 1) * bufferedResult.hand[i].boxRaw[j] + b) / bufferedFactor);
      if (bufferedResult.hand[i].keypoints.length !== newResult.hand[i].keypoints.length)
        bufferedResult.hand[i].keypoints = newResult.hand[i].keypoints;
      const keypoints = newResult.hand[i].keypoints && newResult.hand[i].keypoints.length > 0 ? newResult.hand[i].keypoints.map((landmark, j) => landmark.map((coord, k) => ((bufferedFactor - 1) * (bufferedResult.hand[i].keypoints[j][k] || 1) + (coord || 0)) / bufferedFactor)) : [];
      let annotations2 = {};
      if (Object.keys(bufferedResult.hand[i].annotations).length !== Object.keys(newResult.hand[i].annotations).length) {
        bufferedResult.hand[i].annotations = newResult.hand[i].annotations;
        annotations2 = bufferedResult.hand[i].annotations;
      } else if (newResult.hand[i].annotations) {
        for (const key of Object.keys(newResult.hand[i].annotations)) {
          annotations2[key] = ((_f2 = (_e2 = (_d2 = newResult.hand[i]) == null ? void 0 : _d2.annotations) == null ? void 0 : _e2[key]) == null ? void 0 : _f2[0]) ? newResult.hand[i].annotations[key].map((val, j) => val.map((coord, k) => ((bufferedFactor - 1) * bufferedResult.hand[i].annotations[key][j][k] + coord) / bufferedFactor)) : null;
        }
      }
      bufferedResult.hand[i] = { ...newResult.hand[i], box, boxRaw, keypoints, annotations: annotations2 };
    }
  }
  if (!bufferedResult.face || newResult.face.length !== bufferedResult.face.length) {
    bufferedResult.face = JSON.parse(JSON.stringify(newResult.face));
  } else {
    for (let i = 0; i < newResult.face.length; i++) {
      const box = newResult.face[i].box.map((b, j) => ((bufferedFactor - 1) * bufferedResult.face[i].box[j] + b) / bufferedFactor);
      const boxRaw = newResult.face[i].boxRaw.map((b, j) => ((bufferedFactor - 1) * bufferedResult.face[i].boxRaw[j] + b) / bufferedFactor);
      if (newResult.face[i].rotation) {
        const rotation = { matrix: [0, 0, 0, 0, 0, 0, 0, 0, 0], angle: { roll: 0, yaw: 0, pitch: 0 }, gaze: { bearing: 0, strength: 0 } };
        rotation.matrix = (_g2 = newResult.face[i].rotation) == null ? void 0 : _g2.matrix;
        rotation.angle = {
          roll: ((bufferedFactor - 1) * (((_i2 = (_h2 = bufferedResult.face[i].rotation) == null ? void 0 : _h2.angle) == null ? void 0 : _i2.roll) || 0) + (((_k2 = (_j2 = newResult.face[i].rotation) == null ? void 0 : _j2.angle) == null ? void 0 : _k2.roll) || 0)) / bufferedFactor,
          yaw: ((bufferedFactor - 1) * (((_m2 = (_l2 = bufferedResult.face[i].rotation) == null ? void 0 : _l2.angle) == null ? void 0 : _m2.yaw) || 0) + (((_o2 = (_n2 = newResult.face[i].rotation) == null ? void 0 : _n2.angle) == null ? void 0 : _o2.yaw) || 0)) / bufferedFactor,
          pitch: ((bufferedFactor - 1) * (((_q2 = (_p = bufferedResult.face[i].rotation) == null ? void 0 : _p.angle) == null ? void 0 : _q2.pitch) || 0) + (((_s2 = (_r2 = newResult.face[i].rotation) == null ? void 0 : _r2.angle) == null ? void 0 : _s2.pitch) || 0)) / bufferedFactor
        };
        rotation.gaze = {
          bearing: ((bufferedFactor - 1) * (((_t = bufferedResult.face[i].rotation) == null ? void 0 : _t.gaze.bearing) || 0) + (((_u2 = newResult.face[i].rotation) == null ? void 0 : _u2.gaze.bearing) || 0)) / bufferedFactor,
          strength: ((bufferedFactor - 1) * (((_v2 = bufferedResult.face[i].rotation) == null ? void 0 : _v2.gaze.strength) || 0) + (((_w2 = newResult.face[i].rotation) == null ? void 0 : _w2.gaze.strength) || 0)) / bufferedFactor
        };
        bufferedResult.face[i] = { ...newResult.face[i], rotation, box, boxRaw };
      } else {
        bufferedResult.face[i] = { ...newResult.face[i], box, boxRaw };
      }
    }
  }
  if (!bufferedResult.object || newResult.object.length !== bufferedResult.object.length) {
    bufferedResult.object = JSON.parse(JSON.stringify(newResult.object));
  } else {
    for (let i = 0; i < newResult.object.length; i++) {
      const box = newResult.object[i].box.map((b, j) => ((bufferedFactor - 1) * bufferedResult.object[i].box[j] + b) / bufferedFactor);
      const boxRaw = newResult.object[i].boxRaw.map((b, j) => ((bufferedFactor - 1) * bufferedResult.object[i].boxRaw[j] + b) / bufferedFactor);
      bufferedResult.object[i] = { ...newResult.object[i], box, boxRaw };
    }
  }
  if (newResult.persons) {
    const newPersons = newResult.persons;
    if (!bufferedResult.persons || newPersons.length !== bufferedResult.persons.length) {
      bufferedResult.persons = JSON.parse(JSON.stringify(newPersons));
    } else {
      for (let i = 0; i < newPersons.length; i++) {
        bufferedResult.persons[i].box = newPersons[i].box.map((box, j) => ((bufferedFactor - 1) * bufferedResult.persons[i].box[j] + box) / bufferedFactor);
      }
    }
  }
  if (newResult.gesture)
    bufferedResult.gesture = newResult.gesture;
  bufferedResult.width = newResult.width;
  bufferedResult.height = newResult.height;
  const t12 = now();
  interpolateTime = env.perfadd ? interpolateTime + Math.round(t12 - t0) : Math.round(t12 - t0);
  if (newResult.performance)
    bufferedResult.performance = { ...newResult.performance, interpolate: interpolateTime };
  return bufferedResult;
}
var model17;
async function load16(config3) {
  if (!model17 || env.initial)
    model17 = await loadModel(config3.segmentation.modelPath);
  else if (config3.debug)
    log("cached model:", model17["modelUrl"]);
  return model17;
}
async function predict16(input, config3) {
  var _a2;
  if (!model17)
    model17 = await load16(config3);
  if (!(model17 == null ? void 0 : model17["executor"]) || !((_a2 = model17 == null ? void 0 : model17.inputs) == null ? void 0 : _a2[0].shape))
    return null;
  const t6 = {};
  t6.resize = uq.resizeBilinear(input, [model17.inputs[0].shape ? model17.inputs[0].shape[1] : 0, model17.inputs[0].shape ? model17.inputs[0].shape[2] : 0], false);
  t6.norm = Ge(t6.resize, constants.tf255);
  t6.res = model17.execute(t6.norm);
  t6.squeeze = Up(t6.res, [0]);
  [t6.bgRaw, t6.fgRaw] = so(t6.squeeze, 2);
  t6.fg = y1(t6.fgRaw);
  t6.mul = ae(t6.fg, constants.tf255);
  t6.expand = Fa(t6.mul, 2);
  t6.output = uq.resizeBilinear(t6.expand, [input.shape[1] || 0, input.shape[2] || 0]);
  let rgba;
  switch (config3.segmentation.mode || "default") {
    case "default":
      t6.input = Up(input);
      t6.concat = gt([t6.input, t6.output], -1);
      rgba = Ke(t6.concat, "int32");
      break;
    case "alpha":
      rgba = Ke(t6.output, "int32");
      break;
    default:
      rgba = nr(0);
  }
  Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  return rgba;
}
var match_exports = {};
__export(match_exports, {
  distance: () => distance,
  find: () => find,
  similarity: () => similarity
});
function distance(descriptor1, descriptor2, options4 = { order: 2, multiplier: 25 }) {
  if (!descriptor1 || !descriptor1)
    return Number.MAX_SAFE_INTEGER;
  let sum = 0;
  for (let i = 0; i < descriptor1.length; i++) {
    const diff = !options4.order || options4.order === 2 ? descriptor1[i] - descriptor2[i] : Math.abs(descriptor1[i] - descriptor2[i]);
    sum += !options4.order || options4.order === 2 ? diff * diff : diff ** options4.order;
  }
  return (options4.multiplier || 20) * sum;
}
var normalizeDistance = (dist, order, min, max) => {
  if (dist === 0)
    return 1;
  const root = order === 2 ? Math.sqrt(dist) : dist ** (1 / order);
  const norm = (1 - root / 100 - min) / (max - min);
  const clamp2 = Math.max(Math.min(norm, 1), 0);
  return clamp2;
};
function similarity(descriptor1, descriptor2, options4 = { order: 2, multiplier: 25, min: 0.2, max: 0.8 }) {
  const dist = distance(descriptor1, descriptor2, options4);
  return normalizeDistance(dist, options4.order || 2, options4.min || 0, options4.max || 1);
}
function find(descriptor, descriptors, options4 = { order: 2, multiplier: 25, threshold: 0, min: 0.2, max: 0.8 }) {
  if (!Array.isArray(descriptor) || !Array.isArray(descriptors) || descriptor.length < 64 || descriptors.length === 0) {
    return { index: -1, distance: Number.POSITIVE_INFINITY, similarity: 0 };
  }
  let lowestDistance = Number.MAX_SAFE_INTEGER;
  let index2 = -1;
  for (let i = 0; i < descriptors.length; i++) {
    const res = descriptors[i].length === descriptor.length ? distance(descriptor, descriptors[i], options4) : Number.MAX_SAFE_INTEGER;
    if (res < lowestDistance) {
      lowestDistance = res;
      index2 = i;
    }
    if (lowestDistance < (options4.threshold || 0))
      break;
  }
  const normalizedSimilarity = normalizeDistance(lowestDistance, options4.order || 2, options4.min || 0, options4.max || 1);
  return { index: index2, distance: lowestDistance, similarity: normalizedSimilarity };
}
var models_exports2 = {};
__export(models_exports2, {
  Models: () => Models,
  validateModel: () => validateModel
});
var maxJitter = 5e-3;
var cache5 = {
  keypoints: [],
  padding: [[0, 0], [0, 0], [0, 0], [0, 0]]
};
function bodyParts(body4) {
  for (const pair of horizontal) {
    const left = body4.keypoints.findIndex((kp2) => kp2.part === pair[0]);
    const right = body4.keypoints.findIndex((kp2) => kp2.part === pair[1]);
    if (body4.keypoints[left] && body4.keypoints[right]) {
      if (body4.keypoints[left].position[0] < body4.keypoints[right].position[0]) {
        const tmp = body4.keypoints[left];
        body4.keypoints[left] = body4.keypoints[right];
        body4.keypoints[right] = tmp;
      }
    }
  }
  for (const pair of vertical) {
    const lower = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[0]);
    const higher = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[1]);
    if (body4.keypoints[lower] && body4.keypoints[higher]) {
      if (body4.keypoints[lower].position[1] < body4.keypoints[higher].position[1]) {
        body4.keypoints.splice(lower, 1);
      }
    }
  }
  for (const [pair, compare2] of relative) {
    const left = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[0]);
    const right = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === pair[1]);
    const leftTo = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === compare2[0]);
    const rightTo = body4.keypoints.findIndex((kp2) => kp2 && kp2.part === compare2[1]);
    if (!body4.keypoints[leftTo] || !body4.keypoints[rightTo])
      continue;
    const distanceLeft = body4.keypoints[left] ? [
      Math.abs(body4.keypoints[leftTo].position[0] - body4.keypoints[left].position[0]),
      Math.abs(body4.keypoints[rightTo].position[0] - body4.keypoints[left].position[0])
    ] : [0, 0];
    const distanceRight = body4.keypoints[right] ? [
      Math.abs(body4.keypoints[rightTo].position[0] - body4.keypoints[right].position[0]),
      Math.abs(body4.keypoints[leftTo].position[0] - body4.keypoints[right].position[0])
    ] : [0, 0];
    if (distanceLeft[0] > distanceLeft[1] || distanceRight[0] > distanceRight[1]) {
      const tmp = body4.keypoints[left];
      body4.keypoints[left] = body4.keypoints[right];
      body4.keypoints[right] = tmp;
    }
  }
}
function jitter(keypoints) {
  for (let i = 0; i < keypoints.length; i++) {
    if (keypoints[i] && cache5.keypoints[i]) {
      const diff = [Math.abs(keypoints[i].positionRaw[0] - cache5.keypoints[i].positionRaw[0]), Math.abs(keypoints[i].positionRaw[1] - cache5.keypoints[i].positionRaw[1])];
      if (diff[0] < maxJitter && diff[1] < maxJitter) {
        keypoints[i] = cache5.keypoints[i];
      } else {
        cache5.keypoints[i] = keypoints[i];
      }
    } else {
      cache5.keypoints[i] = keypoints[i];
    }
  }
  return keypoints;
}
function padInput(input, inputSize10) {
  var _a2, _b2;
  const t6 = {};
  if (!((_a2 = input == null ? void 0 : input.shape) == null ? void 0 : _a2[1]) || !((_b2 = input == null ? void 0 : input.shape) == null ? void 0 : _b2[2]))
    return input;
  cache5.padding = [
    [0, 0],
    [input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0, input.shape[2] > input.shape[1] ? Math.trunc((input.shape[2] - input.shape[1]) / 2) : 0],
    [input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0, input.shape[1] > input.shape[2] ? Math.trunc((input.shape[1] - input.shape[2]) / 2) : 0],
    [0, 0]
  ];
  t6.pad = Hs(input, cache5.padding);
  t6.resize = uq.resizeBilinear(t6.pad, [inputSize10, inputSize10]);
  const final = Ke(t6.resize, "int32");
  Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  return final;
}
function rescaleBody(body4, outputSize2) {
  body4.keypoints = body4.keypoints.filter((kpt4) => kpt4 == null ? void 0 : kpt4.position);
  for (const kpt4 of body4.keypoints) {
    kpt4.position = [
      kpt4.position[0] * (outputSize2[0] + cache5.padding[2][0] + cache5.padding[2][1]) / outputSize2[0] - cache5.padding[2][0],
      kpt4.position[1] * (outputSize2[1] + cache5.padding[1][0] + cache5.padding[1][1]) / outputSize2[1] - cache5.padding[1][0]
    ];
    kpt4.positionRaw = [
      kpt4.position[0] / outputSize2[0],
      kpt4.position[1] / outputSize2[1]
    ];
  }
  const rescaledBoxes = calc(body4.keypoints.map((pt) => pt.position), outputSize2);
  body4.box = rescaledBoxes.box;
  body4.boxRaw = rescaledBoxes.boxRaw;
  return body4;
}
var model18;
var inputSize8 = 0;
var skipped14 = Number.MAX_SAFE_INTEGER;
var cache6 = {
  boxes: [],
  bodies: [],
  last: 0
};
async function load17(config3) {
  var _a2;
  if (env.initial)
    model18 = null;
  if (!model18) {
    fakeOps(["size"], config3);
    model18 = await loadModel(config3.body.modelPath);
  } else if (config3.debug)
    log("cached model:", model18["modelUrl"]);
  inputSize8 = (model18 == null ? void 0 : model18["executor"]) && ((_a2 = model18 == null ? void 0 : model18.inputs) == null ? void 0 : _a2[0].shape) ? model18.inputs[0].shape[2] : 0;
  if (inputSize8 < 64)
    inputSize8 = 256;
  return model18;
}
function parseSinglePose(res, config3, image) {
  const kpt4 = res[0][0];
  const keypoints = [];
  let score = 0;
  for (let id2 = 0; id2 < kpt4.length; id2++) {
    score = kpt4[id2][2];
    if (score > config3.body.minConfidence) {
      const positionRaw = [kpt4[id2][1], kpt4[id2][0]];
      keypoints.push({
        score: Math.round(100 * score) / 100,
        part: kpt3[id2],
        positionRaw,
        position: [
          Math.round((image.shape[2] || 0) * positionRaw[0]),
          Math.round((image.shape[1] || 0) * positionRaw[1])
        ]
      });
    }
  }
  score = keypoints.reduce((prev, curr) => curr.score > prev ? curr.score : prev, 0);
  const bodies = [];
  const newBox = calc(keypoints.map((pt) => pt.position), [image.shape[2], image.shape[1]]);
  const annotations2 = {};
  for (const [name, indexes] of Object.entries(connected3)) {
    const pt = [];
    for (let i = 0; i < indexes.length - 1; i++) {
      const pt0 = keypoints.find((kp2) => kp2.part === indexes[i]);
      const pt1 = keypoints.find((kp2) => kp2.part === indexes[i + 1]);
      if (pt0 && pt1 && pt0.score > (config3.body.minConfidence || 0) && pt1.score > (config3.body.minConfidence || 0))
        pt.push([pt0.position, pt1.position]);
    }
    annotations2[name] = pt;
  }
  const body4 = { id: 0, score, box: newBox.box, boxRaw: newBox.boxRaw, keypoints, annotations: annotations2 };
  bodyParts(body4);
  bodies.push(body4);
  return bodies;
}
function parseMultiPose(res, config3, image) {
  const bodies = [];
  for (let id2 = 0; id2 < res[0].length; id2++) {
    const kpt4 = res[0][id2];
    const totalScore = Math.round(100 * kpt4[51 + 4]) / 100;
    if (totalScore > config3.body.minConfidence) {
      const keypoints = [];
      for (let i = 0; i < 17; i++) {
        const score = kpt4[3 * i + 2];
        if (score > config3.body.minConfidence) {
          const positionRaw = [kpt4[3 * i + 1], kpt4[3 * i + 0]];
          keypoints.push({
            part: kpt3[i],
            score: Math.round(100 * score) / 100,
            positionRaw,
            position: [Math.round((image.shape[2] || 0) * positionRaw[0]), Math.round((image.shape[1] || 0) * positionRaw[1])]
          });
        }
      }
      const newBox = calc(keypoints.map((pt) => pt.position), [image.shape[2], image.shape[1]]);
      const annotations2 = {};
      for (const [name, indexes] of Object.entries(connected3)) {
        const pt = [];
        for (let i = 0; i < indexes.length - 1; i++) {
          const pt0 = keypoints.find((kp2) => kp2.part === indexes[i]);
          const pt1 = keypoints.find((kp2) => kp2.part === indexes[i + 1]);
          if (pt0 && pt1 && pt0.score > (config3.body.minConfidence || 0) && pt1.score > (config3.body.minConfidence || 0))
            pt.push([pt0.position, pt1.position]);
        }
        annotations2[name] = pt;
      }
      const body4 = { id: id2, score: totalScore, box: newBox.box, boxRaw: newBox.boxRaw, keypoints: [...keypoints], annotations: annotations2 };
      bodyParts(body4);
      bodies.push(body4);
    }
  }
  bodies.sort((a, b) => b.score - a.score);
  if (bodies.length > config3.body.maxDetected)
    bodies.length = config3.body.maxDetected;
  return bodies;
}
async function predict17(input, config3) {
  var _a2;
  if (!(model18 == null ? void 0 : model18["executor"]) || !((_a2 = model18 == null ? void 0 : model18.inputs) == null ? void 0 : _a2[0].shape))
    return [];
  if (!config3.skipAllowed)
    cache6.boxes.length = 0;
  skipped14++;
  const skipTime = (config3.body.skipTime || 0) > now() - cache6.last;
  const skipFrame = skipped14 < (config3.body.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame) {
    return cache6.bodies;
  }
  return new Promise(async (resolve) => {
    const t6 = {};
    skipped14 = 0;
    t6.input = padInput(input, inputSize8);
    t6.res = model18 == null ? void 0 : model18.execute(t6.input);
    cache6.last = now();
    const res = await t6.res.array();
    cache6.bodies = t6.res.shape[2] === 17 ? parseSinglePose(res, config3, input) : parseMultiPose(res, config3, input);
    for (const body4 of cache6.bodies) {
      rescaleBody(body4, [input.shape[2] || 1, input.shape[1] || 1]);
      jitter(body4.keypoints);
    }
    Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
    resolve(cache6.bodies);
  });
}
var model19;
var last10 = [];
var lastTime15 = 0;
var skipped15 = Number.MAX_SAFE_INTEGER;
var inputSize9 = 0;
var scaleBox = 2.5;
async function load18(config3) {
  if (!model19 || env.initial) {
    model19 = await loadModel(config3.object.modelPath);
    const inputs = (model19 == null ? void 0 : model19["executor"]) ? Object.values(model19.modelSignature["inputs"]) : void 0;
    inputSize9 = Array.isArray(inputs) ? parseInt(inputs[0].tensorShape.dim[2].size) : 416;
  } else if (config3.debug)
    log("cached model:", model19["modelUrl"]);
  return model19;
}
async function process4(res, outputShape, config3) {
  var _a2, _b2;
  let id2 = 0;
  let results = [];
  const size2 = inputSize9;
  for (const strideSize of [1, 2, 4]) {
    const baseSize = strideSize * 13;
    const scoresT = Up(res.find((a) => a.shape[1] === baseSize ** 2 && (a.shape[2] || 0) === labels2.length));
    const scores = await scoresT.array();
    const featuresT = Up(res.find((a) => a.shape[1] === baseSize ** 2 && (a.shape[2] || 0) < labels2.length));
    const boxesMaxT = z(featuresT, [-1, 4, (((_a2 = featuresT.shape) == null ? void 0 : _a2[1]) || 0) / 4]);
    const boxIdxT = bv(boxesMaxT, 2);
    const boxIdx = await boxIdxT.array();
    for (let i = 0; i < scoresT.shape[0]; i++) {
      for (let j = 0; j < (((_b2 = scoresT.shape) == null ? void 0 : _b2[1]) || 0); j++) {
        const score = scores[i][j];
        if (score > (config3.object.minConfidence || 0) && j !== 61) {
          const cx2 = (0.5 + Math.trunc(i % baseSize)) / baseSize;
          const cy = (0.5 + Math.trunc(i / baseSize)) / baseSize;
          const boxOffset = boxIdx[i].map((a) => a * (baseSize / strideSize / size2));
          const [x, y10] = [
            cx2 - scaleBox / strideSize * boxOffset[0],
            cy - scaleBox / strideSize * boxOffset[1]
          ];
          const [w, h] = [
            cx2 + scaleBox / strideSize * boxOffset[2] - x,
            cy + scaleBox / strideSize * boxOffset[3] - y10
          ];
          let boxRaw = [x, y10, w, h];
          boxRaw = boxRaw.map((a) => Math.max(0, Math.min(a, 1)));
          const box = [
            boxRaw[0] * outputShape[0],
            boxRaw[1] * outputShape[1],
            boxRaw[2] * outputShape[0],
            boxRaw[3] * outputShape[1]
          ];
          const result = {
            id: id2++,
            score: Math.round(100 * score) / 100,
            class: j + 1,
            label: labels2[j].label,
            box: box.map((a) => Math.trunc(a)),
            boxRaw
          };
          results.push(result);
        }
      }
    }
    Dt([scoresT, featuresT, boxesMaxT, boxIdxT]);
  }
  const nmsBoxes = results.map((a) => [a.boxRaw[1], a.boxRaw[0], a.boxRaw[3], a.boxRaw[2]]);
  const nmsScores = results.map((a) => a.score);
  let nmsIdx = [];
  if (nmsBoxes && nmsBoxes.length > 0) {
    const nms = await uq.nonMaxSuppressionAsync(nmsBoxes, nmsScores, config3.object.maxDetected || 0, config3.object.iouThreshold, config3.object.minConfidence);
    nmsIdx = Array.from(await nms.data());
    Dt(nms);
  }
  results = results.filter((_val, idx) => nmsIdx.includes(idx)).sort((a, b) => b.score - a.score);
  return results;
}
async function predict18(image, config3) {
  if (!(model19 == null ? void 0 : model19["executor"]))
    return [];
  const skipTime = (config3.object.skipTime || 0) > now() - lastTime15;
  const skipFrame = skipped15 < (config3.object.skipFrames || 0);
  if (config3.skipAllowed && skipTime && skipFrame && last10.length > 0) {
    skipped15++;
    return last10;
  }
  skipped15 = 0;
  if (!env.kernels.includes("mod") || !env.kernels.includes("sparsetodense"))
    return last10;
  return new Promise(async (resolve) => {
    const outputSize2 = [image.shape[2] || 0, image.shape[1] || 0];
    const resizeT = uq.resizeBilinear(image, [inputSize9, inputSize9], false);
    const normT = Ge(resizeT, constants.tf255);
    const transposeT = Mp(normT, [0, 3, 1, 2]);
    let objectT;
    if (config3.object.enabled)
      objectT = model19.execute(transposeT);
    lastTime15 = now();
    const obj = await process4(objectT, outputSize2, config3);
    last10 = obj;
    Dt([resizeT, normT, transposeT, ...objectT]);
    resolve(obj);
  });
}
var partNames = [
  "nose",
  "leftEye",
  "rightEye",
  "leftEar",
  "rightEar",
  "leftShoulder",
  "rightShoulder",
  "leftElbow",
  "rightElbow",
  "leftWrist",
  "rightWrist",
  "leftHip",
  "rightHip",
  "leftKnee",
  "rightKnee",
  "leftAnkle",
  "rightAnkle"
];
var count = partNames.length;
var partIds = partNames.reduce((result, jointName, i) => {
  result[jointName] = i;
  return result;
}, {});
var connectedPartNames = [
  ["leftHip", "leftShoulder"],
  ["leftElbow", "leftShoulder"],
  ["leftElbow", "leftWrist"],
  ["leftHip", "leftKnee"],
  ["leftKnee", "leftAnkle"],
  ["rightHip", "rightShoulder"],
  ["rightElbow", "rightShoulder"],
  ["rightElbow", "rightWrist"],
  ["rightHip", "rightKnee"],
  ["rightKnee", "rightAnkle"],
  ["leftShoulder", "rightShoulder"],
  ["leftHip", "rightHip"]
];
var connectedPartIndices = connectedPartNames.map(([jointNameA, jointNameB]) => [partIds[jointNameA], partIds[jointNameB]]);
var poseChain = [
  ["nose", "leftEye"],
  ["leftEye", "leftEar"],
  ["nose", "rightEye"],
  ["rightEye", "rightEar"],
  ["nose", "leftShoulder"],
  ["leftShoulder", "leftElbow"],
  ["leftElbow", "leftWrist"],
  ["leftShoulder", "leftHip"],
  ["leftHip", "leftKnee"],
  ["leftKnee", "leftAnkle"],
  ["nose", "rightShoulder"],
  ["rightShoulder", "rightElbow"],
  ["rightElbow", "rightWrist"],
  ["rightShoulder", "rightHip"],
  ["rightHip", "rightKnee"],
  ["rightKnee", "rightAnkle"]
];
function getBoundingBox(keypoints) {
  const coord = keypoints.reduce(({ maxX, maxY, minX, minY }, { position: { x, y: y10 } }) => ({
    maxX: Math.max(maxX, x),
    maxY: Math.max(maxY, y10),
    minX: Math.min(minX, x),
    minY: Math.min(minY, y10)
  }), {
    maxX: Number.NEGATIVE_INFINITY,
    maxY: Number.NEGATIVE_INFINITY,
    minX: Number.POSITIVE_INFINITY,
    minY: Number.POSITIVE_INFINITY
  });
  return [coord.minX, coord.minY, coord.maxX - coord.minX, coord.maxY - coord.minY];
}
function scalePoses(poses, [height, width], [inputResolutionHeight, inputResolutionWidth]) {
  const scaleY = height / inputResolutionHeight;
  const scaleX = width / inputResolutionWidth;
  const scalePose = (pose, i) => ({
    id: i,
    score: pose.score,
    boxRaw: [pose.box[0] / inputResolutionWidth, pose.box[1] / inputResolutionHeight, pose.box[2] / inputResolutionWidth, pose.box[3] / inputResolutionHeight],
    box: [Math.trunc(pose.box[0] * scaleX), Math.trunc(pose.box[1] * scaleY), Math.trunc(pose.box[2] * scaleX), Math.trunc(pose.box[3] * scaleY)],
    keypoints: pose.keypoints.map(({ score, part, position }) => ({
      score,
      part,
      position: [Math.trunc(position.x * scaleX), Math.trunc(position.y * scaleY)],
      positionRaw: [position.x / inputResolutionHeight, position.y / inputResolutionHeight]
    })),
    annotations: {}
  });
  const scaledPoses = poses.map((pose, i) => scalePose(pose, i));
  return scaledPoses;
}
var MaxHeap = class {
  constructor(maxSize2, getElementValue) {
    __publicField(this, "priorityQueue");
    __publicField(this, "numberOfElements");
    __publicField(this, "getElementValue");
    this.priorityQueue = new Array(maxSize2);
    this.numberOfElements = -1;
    this.getElementValue = getElementValue;
  }
  enqueue(x) {
    this.priorityQueue[++this.numberOfElements] = x;
    this.swim(this.numberOfElements);
  }
  dequeue() {
    const max = this.priorityQueue[0];
    this.exchange(0, this.numberOfElements--);
    this.sink(0);
    this.priorityQueue[this.numberOfElements + 1] = null;
    return max;
  }
  empty() {
    return this.numberOfElements === -1;
  }
  size() {
    return this.numberOfElements + 1;
  }
  all() {
    return this.priorityQueue.slice(0, this.numberOfElements + 1);
  }
  max() {
    return this.priorityQueue[0];
  }
  swim(k) {
    while (k > 0 && this.less(Math.floor(k / 2), k)) {
      this.exchange(k, Math.floor(k / 2));
      k = Math.floor(k / 2);
    }
  }
  sink(k) {
    while (2 * k <= this.numberOfElements) {
      let j = 2 * k;
      if (j < this.numberOfElements && this.less(j, j + 1))
        j++;
      if (!this.less(k, j))
        break;
      this.exchange(k, j);
      k = j;
    }
  }
  getValueAt(i) {
    return this.getElementValue(this.priorityQueue[i]);
  }
  less(i, j) {
    return this.getValueAt(i) < this.getValueAt(j);
  }
  exchange(i, j) {
    const t6 = this.priorityQueue[i];
    this.priorityQueue[i] = this.priorityQueue[j];
    this.priorityQueue[j] = t6;
  }
};
function getOffsetPoint(y10, x, keypoint, offsets) {
  return {
    y: offsets.get(y10, x, keypoint),
    x: offsets.get(y10, x, keypoint + count)
  };
}
function getImageCoords(part, outputStride2, offsets) {
  const { heatmapY, heatmapX, id: keypoint } = part;
  const { y: y10, x } = getOffsetPoint(heatmapY, heatmapX, keypoint, offsets);
  return {
    x: part.heatmapX * outputStride2 + x,
    y: part.heatmapY * outputStride2 + y10
  };
}
function clamp(a, min, max) {
  if (a < min)
    return min;
  if (a > max)
    return max;
  return a;
}
function squaredDistance(y12, x12, y22, x22) {
  const dy = y22 - y12;
  const dx2 = x22 - x12;
  return dy * dy + dx2 * dx2;
}
function addVectors(a, b) {
  return { x: a.x + b.x, y: a.y + b.y };
}
var model20;
var poseNetOutputs = ["MobilenetV1/offset_2/BiasAdd", "MobilenetV1/heatmap_2/BiasAdd", "MobilenetV1/displacement_fwd_2/BiasAdd", "MobilenetV1/displacement_bwd_2/BiasAdd"];
var localMaximumRadius = 1;
var outputStride = 16;
var squaredNmsRadius = 50 ** 2;
function traverse(edgeId, sourceKeypoint, targetId, scores, offsets, displacements, offsetRefineStep = 2) {
  const getDisplacement = (point2) => ({
    y: displacements.get(point2.y, point2.x, edgeId),
    x: displacements.get(point2.y, point2.x, displacements.shape[2] / 2 + edgeId)
  });
  const getStridedIndexNearPoint = (point2, height2, width2) => ({
    y: clamp(Math.round(point2.y / outputStride), 0, height2 - 1),
    x: clamp(Math.round(point2.x / outputStride), 0, width2 - 1)
  });
  const [height, width] = scores.shape;
  const sourceKeypointIndices = getStridedIndexNearPoint(sourceKeypoint.position, height, width);
  const displacement = getDisplacement(sourceKeypointIndices);
  const displacedPoint = addVectors(sourceKeypoint.position, displacement);
  let targetKeypoint = displacedPoint;
  for (let i = 0; i < offsetRefineStep; i++) {
    const targetKeypointIndices = getStridedIndexNearPoint(targetKeypoint, height, width);
    const offsetPoint = getOffsetPoint(targetKeypointIndices.y, targetKeypointIndices.x, targetId, offsets);
    targetKeypoint = addVectors(
      { x: targetKeypointIndices.x * outputStride, y: targetKeypointIndices.y * outputStride },
      { x: offsetPoint.x, y: offsetPoint.y }
    );
  }
  const targetKeyPointIndices = getStridedIndexNearPoint(targetKeypoint, height, width);
  const score = scores.get(targetKeyPointIndices.y, targetKeyPointIndices.x, targetId);
  return { position: targetKeypoint, part: partNames[targetId], score };
}
function decodePose(root, scores, offsets, displacementsFwd, displacementsBwd) {
  const tuples = poseChain.map(([parentJoinName, childJoinName]) => [partIds[parentJoinName], partIds[childJoinName]]);
  const edgesFwd = tuples.map(([, childJointId]) => childJointId);
  const edgesBwd = tuples.map(([parentJointId]) => parentJointId);
  const numParts = scores.shape[2];
  const numEdges = edgesFwd.length;
  const keypoints = new Array(numParts);
  const rootPoint = getImageCoords(root.part, outputStride, offsets);
  keypoints[root.part.id] = {
    score: root.score,
    part: partNames[root.part.id],
    position: rootPoint
  };
  for (let edge = numEdges - 1; edge >= 0; --edge) {
    const sourceId = edgesFwd[edge];
    const targetId = edgesBwd[edge];
    if (keypoints[sourceId] && !keypoints[targetId]) {
      keypoints[targetId] = traverse(edge, keypoints[sourceId], targetId, scores, offsets, displacementsBwd);
    }
  }
  for (let edge = 0; edge < numEdges; ++edge) {
    const sourceId = edgesBwd[edge];
    const targetId = edgesFwd[edge];
    if (keypoints[sourceId] && !keypoints[targetId]) {
      keypoints[targetId] = traverse(edge, keypoints[sourceId], targetId, scores, offsets, displacementsFwd);
    }
  }
  return keypoints;
}
function scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, scores) {
  const [height, width] = scores.shape;
  let localMaximum = true;
  const yStart = Math.max(heatmapY - localMaximumRadius, 0);
  const yEnd = Math.min(heatmapY + localMaximumRadius + 1, height);
  for (let yCurrent = yStart; yCurrent < yEnd; ++yCurrent) {
    const xStart = Math.max(heatmapX - localMaximumRadius, 0);
    const xEnd = Math.min(heatmapX + localMaximumRadius + 1, width);
    for (let xCurrent = xStart; xCurrent < xEnd; ++xCurrent) {
      if (scores.get(yCurrent, xCurrent, keypointId) > score) {
        localMaximum = false;
        break;
      }
    }
    if (!localMaximum)
      break;
  }
  return localMaximum;
}
function buildPartWithScoreQueue(minConfidence2, scores) {
  const [height, width, numKeypoints] = scores.shape;
  const queue = new MaxHeap(height * width * numKeypoints, ({ score }) => score);
  for (let heatmapY = 0; heatmapY < height; ++heatmapY) {
    for (let heatmapX = 0; heatmapX < width; ++heatmapX) {
      for (let keypointId = 0; keypointId < numKeypoints; ++keypointId) {
        const score = scores.get(heatmapY, heatmapX, keypointId);
        if (score < minConfidence2)
          continue;
        if (scoreIsMaximumInLocalWindow(keypointId, score, heatmapY, heatmapX, scores))
          queue.enqueue({ score, part: { heatmapY, heatmapX, id: keypointId } });
      }
    }
  }
  return queue;
}
function withinRadius(poses, { x, y: y10 }, keypointId) {
  return poses.some(({ keypoints }) => {
    var _a2;
    const correspondingKeypoint = (_a2 = keypoints[keypointId]) == null ? void 0 : _a2.position;
    if (!correspondingKeypoint)
      return false;
    return squaredDistance(y10, x, correspondingKeypoint.y, correspondingKeypoint.x) <= squaredNmsRadius;
  });
}
function getInstanceScore(existingPoses, keypoints) {
  const notOverlappedKeypointScores = keypoints.reduce((result, { position, score }, keypointId) => {
    if (!withinRadius(existingPoses, position, keypointId))
      result += score;
    return result;
  }, 0);
  return notOverlappedKeypointScores / keypoints.length;
}
function decode(offsets, scores, displacementsFwd, displacementsBwd, maxDetected, minConfidence2) {
  const poses = [];
  const queue = buildPartWithScoreQueue(minConfidence2, scores);
  while (poses.length < maxDetected && !queue.empty()) {
    const root = queue.dequeue();
    const rootImageCoords = getImageCoords(root.part, outputStride, offsets);
    if (withinRadius(poses, rootImageCoords, root.part.id))
      continue;
    let keypoints = decodePose(root, scores, offsets, displacementsFwd, displacementsBwd);
    keypoints = keypoints.filter((a) => a.score > minConfidence2);
    const score = getInstanceScore(poses, keypoints);
    const box = getBoundingBox(keypoints);
    if (score > minConfidence2)
      poses.push({ keypoints, box, score: Math.round(100 * score) / 100 });
  }
  return poses;
}
async function predict19(input, config3) {
  if (!(model20 == null ? void 0 : model20["executor"]))
    return [];
  const res = Ee(() => {
    if (!model20.inputs[0].shape)
      return [];
    const resized = uq.resizeBilinear(input, [model20.inputs[0].shape[2], model20.inputs[0].shape[1]]);
    const normalized = Ne(Ge(Ke(resized, "float32"), 127.5), 1);
    const results = model20.execute(normalized, poseNetOutputs);
    const results3d = results.map((y10) => Up(y10, [0]));
    results3d[1] = zs(results3d[1]);
    return results3d;
  });
  const buffers = await Promise.all(res.map((tensor) => tensor.buffer()));
  for (const t6 of res)
    Dt(t6);
  const decoded = decode(buffers[0], buffers[1], buffers[2], buffers[3], config3.body.maxDetected, config3.body.minConfidence);
  if (!model20.inputs[0].shape)
    return [];
  const scaled = scalePoses(decoded, [input.shape[1], input.shape[2]], [model20.inputs[0].shape[2], model20.inputs[0].shape[1]]);
  return scaled;
}
async function load19(config3) {
  if (!model20 || env.initial)
    model20 = await loadModel(config3.body.modelPath);
  else if (config3.debug)
    log("cached model:", model20["modelUrl"]);
  return model20;
}
var model21;
var outputNodes2 = ["fgr", "pha", "r1o", "r2o", "r3o", "r4o"];
var t = {};
var ratio = 0;
function init3(config3) {
  Dt([t.r1i, t.r2i, t.r3i, t.r4i, t.downsample_ratio]);
  t.r1i = nr(0);
  t.r2i = nr(0);
  t.r3i = nr(0);
  t.r4i = nr(0);
  ratio = config3.segmentation.ratio || 0.5;
  t.downsample_ratio = nr(ratio);
}
async function load20(config3) {
  if (!model21 || env.initial)
    model21 = await loadModel(config3.segmentation.modelPath);
  else if (config3.debug)
    log("cached model:", model21["modelUrl"]);
  init3(config3);
  return model21;
}
var normalize = (r) => Ee(() => {
  const squeeze = Up(r, [0]);
  const mul = ae(squeeze, constants.tf255);
  const cast = Ke(mul, "int32");
  return cast;
});
function getRGBA(fgr, pha) {
  const rgb2 = fgr ? normalize(fgr) : Ws([pha.shape[1] || 0, pha.shape[2] || 0, 3], 255, "int32");
  const a = pha ? normalize(pha) : Ws([fgr.shape[1] || 0, fgr.shape[2] || 0, 1], 255, "int32");
  const rgba = gt([rgb2, a], -1);
  Dt([rgb2, a]);
  return rgba;
}
function getState(state) {
  return Ee(() => {
    const r = {};
    r.unstack = so(state, -1);
    r.concat = gt(r.unstack, 1);
    r.split = Oa(r.concat, 4, 1);
    r.stack = gt(r.split, 2);
    r.squeeze = Up(r.stack, [0]);
    r.expand = Fa(r.squeeze, -1);
    r.add = xe(r.expand, 1);
    r.mul = ae(r.add, 127.5);
    r.cast = Ke(r.mul, "int32");
    r.tile = ki(r.cast, [1, 1, 3]);
    r.alpha = Ws([r.tile.shape[0] || 0, r.tile.shape[1] || 0, 1], 255, "int32");
    return gt([r.tile, r.alpha], -1);
  });
}
async function predict20(input, config3) {
  if (!model21)
    model21 = await load20(config3);
  if (!(model21 == null ? void 0 : model21["executor"]))
    return null;
  t.src = Ge(input, 255);
  if (ratio !== config3.segmentation.ratio)
    init3(config3);
  const [fgr, pha, r1o, r2o, r3o, r4o] = await model21.executeAsync(t, outputNodes2);
  let rgba;
  switch (config3.segmentation.mode || "default") {
    case "default":
      rgba = getRGBA(fgr, pha);
      break;
    case "alpha":
      rgba = getRGBA(null, pha);
      break;
    case "foreground":
      rgba = getRGBA(fgr, null);
      break;
    case "state":
      rgba = getState(r1o);
      break;
    default:
      rgba = nr(0);
  }
  Dt([t.src, fgr, pha, t.r1i, t.r2i, t.r3i, t.r4i]);
  [t.r1i, t.r2i, t.r3i, t.r4i] = [r1o, r2o, r3o, r4o];
  return rgba;
}
var model22;
async function load21(config3) {
  if (!model22 || env.initial)
    model22 = await loadModel(config3.segmentation.modelPath);
  else if (config3.debug)
    log("cached model:", model22["modelUrl"]);
  return model22;
}
async function predict21(input, config3) {
  var _a2;
  if (!model22)
    model22 = await load21(config3);
  if (!(model22 == null ? void 0 : model22["executor"]) || !((_a2 = model22 == null ? void 0 : model22.inputs) == null ? void 0 : _a2[0].shape))
    return null;
  const t6 = {};
  t6.resize = uq.resizeBilinear(input, [model22.inputs[0].shape ? model22.inputs[0].shape[1] : 0, model22.inputs[0].shape ? model22.inputs[0].shape[2] : 0], false);
  t6.norm = Ge(t6.resize, constants.tf255);
  t6.res = model22.execute(t6.norm);
  t6.squeeze = Up(t6.res, [0]);
  t6.alpha = uq.resizeBilinear(t6.squeeze, [input.shape[1] || 0, input.shape[2] || 0]);
  t6.mul = ae(t6.alpha, constants.tf255);
  let rgba;
  switch (config3.segmentation.mode || "default") {
    case "default":
      t6.input = Up(input);
      t6.concat = gt([t6.input, t6.mul], -1);
      rgba = Ke(t6.concat, "int32");
      break;
    case "alpha":
      rgba = Ke(t6.mul, "int32");
      break;
    default:
      rgba = nr(0);
  }
  Object.keys(t6).forEach((tensor) => Dt(t6[tensor]));
  return rgba;
}
function validateModel(instance, model23, name) {
  var _a2, _b2;
  if (!model23)
    return null;
  if (!((_a2 = instance == null ? void 0 : instance.config) == null ? void 0 : _a2.validateModels))
    return null;
  const simpleOps = ["const", "placeholder", "noop", "pad", "squeeze", "add", "sub", "mul", "div"];
  const ignoreOps = ["biasadd", "fusedbatchnormv3", "matmul", "switch", "shape", "merge", "split", "broadcastto"];
  const ops = [];
  const missing = [];
  const url = model23["modelUrl"];
  const executor = model23["executor"];
  if ((_b2 = executor == null ? void 0 : executor.graph) == null ? void 0 : _b2.nodes) {
    for (const kernel of Object.values(executor.graph.nodes)) {
      const op2 = kernel.op.toLowerCase();
      if (!ops.includes(op2))
        ops.push(op2);
    }
  } else {
    if (!executor && instance.config.debug) {
      log("model not loaded", name);
    }
  }
  for (const op2 of ops) {
    if (!simpleOps.includes(op2) && !ignoreOps.includes(op2) && !instance.env.kernels.includes(op2) && !instance.env.kernels.includes(op2.replace("_", "")) && !instance.env.kernels.includes(op2.replace("native", "")) && !instance.env.kernels.includes(op2.replace("v2", ""))) {
      missing.push(op2);
    }
  }
  if (instance.config.debug && missing.length > 0)
    log("model validation failed:", name, missing);
  return missing.length > 0 ? { name, missing, ops, url } : null;
}
var Models = class {
  constructor(currentInstance) {
    __publicField(this, "instance");
    __publicField(this, "models", {});
    this.models = {};
    this.instance = currentInstance;
  }
  stats() {
    let totalSizeFromManifest = 0;
    let totalSizeWeights = 0;
    let totalSizeLoading = 0;
    for (const m of Object.values(modelStats)) {
      totalSizeFromManifest += m.sizeFromManifest;
      totalSizeWeights += m.sizeLoadedWeights;
      totalSizeLoading += m.sizeDesired;
    }
    const percentageLoaded = totalSizeLoading > 0 ? totalSizeWeights / totalSizeLoading : 0;
    return {
      numLoadedModels: Object.values(modelStats).length,
      numDefinedModels: Object.keys(this.models).length,
      percentageLoaded,
      totalSizeFromManifest,
      totalSizeWeights,
      totalSizeLoading,
      modelStats: Object.values(modelStats)
    };
  }
  reset() {
    for (const model23 of Object.keys(this.models))
      this.models[model23] = null;
  }
  async load(instance) {
    var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2, _k2, _l2, _m2, _n2, _o2, _p, _q2, _r2, _s2, _t, _u2, _v2, _w2, _x, _y, _z2, _A2;
    if (env.initial)
      this.reset();
    if (instance)
      this.instance = instance;
    const m = {};
    m.blazeface = this.instance.config.face.enabled && !this.models.blazeface ? load3(this.instance.config) : null;
    m.antispoof = this.instance.config.face.enabled && ((_a2 = this.instance.config.face.antispoof) == null ? void 0 : _a2.enabled) && !this.models.antispoof ? load8(this.instance.config) : null;
    m.liveness = this.instance.config.face.enabled && ((_b2 = this.instance.config.face.liveness) == null ? void 0 : _b2.enabled) && !this.models.liveness ? load9(this.instance.config) : null;
    m.faceres = this.instance.config.face.enabled && ((_c2 = this.instance.config.face.description) == null ? void 0 : _c2.enabled) && !this.models.faceres ? load7(this.instance.config) : null;
    m.emotion = this.instance.config.face.enabled && ((_d2 = this.instance.config.face.emotion) == null ? void 0 : _d2.enabled) && !this.models.emotion ? load6(this.instance.config) : null;
    m.iris = this.instance.config.face.enabled && ((_e2 = this.instance.config.face.iris) == null ? void 0 : _e2.enabled) && !((_f2 = this.instance.config.face.attention) == null ? void 0 : _f2.enabled) && !this.models.iris ? load4(this.instance.config) : null;
    m.facemesh = this.instance.config.face.enabled && ((_g2 = this.instance.config.face.mesh) == null ? void 0 : _g2.enabled) && !this.models.facemesh ? load5(this.instance.config) : null;
    m.gear = this.instance.config.face.enabled && ((_h2 = this.instance.config.face["gear"]) == null ? void 0 : _h2.enabled) && !this.models.gear ? load10(this.instance.config) : null;
    m.ssrnetage = this.instance.config.face.enabled && ((_i2 = this.instance.config.face["ssrnet"]) == null ? void 0 : _i2.enabled) && !this.models.ssrnetage ? load11(this.instance.config) : null;
    m.ssrnetgender = this.instance.config.face.enabled && ((_j2 = this.instance.config.face["ssrnet"]) == null ? void 0 : _j2.enabled) && !this.models.ssrnetgender ? load12(this.instance.config) : null;
    m.mobilefacenet = this.instance.config.face.enabled && ((_k2 = this.instance.config.face["mobilefacenet"]) == null ? void 0 : _k2.enabled) && !this.models.mobilefacenet ? load13(this.instance.config) : null;
    m.insightface = this.instance.config.face.enabled && ((_l2 = this.instance.config.face["insightface"]) == null ? void 0 : _l2.enabled) && !this.models.insightface ? load14(this.instance.config) : null;
    m.blazepose = this.instance.config.body.enabled && !this.models.blazepose && ((_m2 = this.instance.config.body.modelPath) == null ? void 0 : _m2.includes("blazepose")) ? loadPose(this.instance.config) : null;
    m.blazeposedetect = this.instance.config.body.enabled && !this.models.blazeposedetect && this.instance.config.body["detector"] && this.instance.config.body["detector"].modelPath ? loadDetect(this.instance.config) : null;
    m.efficientpose = this.instance.config.body.enabled && !this.models.efficientpose && ((_n2 = this.instance.config.body.modelPath) == null ? void 0 : _n2.includes("efficientpose")) ? load2(this.instance.config) : null;
    m.movenet = this.instance.config.body.enabled && !this.models.movenet && ((_o2 = this.instance.config.body.modelPath) == null ? void 0 : _o2.includes("movenet")) ? load17(this.instance.config) : null;
    m.posenet = this.instance.config.body.enabled && !this.models.posenet && ((_p = this.instance.config.body.modelPath) == null ? void 0 : _p.includes("posenet")) ? load19(this.instance.config) : null;
    m.handtrack = this.instance.config.hand.enabled && !this.models.handtrack && ((_r2 = (_q2 = this.instance.config.hand.detector) == null ? void 0 : _q2.modelPath) == null ? void 0 : _r2.includes("handtrack")) ? loadDetect2(this.instance.config) : null;
    m.handskeleton = this.instance.config.hand.enabled && this.instance.config.hand.landmarks && !this.models.handskeleton && ((_t = (_s2 = this.instance.config.hand.detector) == null ? void 0 : _s2.modelPath) == null ? void 0 : _t.includes("handtrack")) ? loadSkeleton(this.instance.config) : null;
    if ((_v2 = (_u2 = this.instance.config.hand.detector) == null ? void 0 : _u2.modelPath) == null ? void 0 : _v2.includes("handdetect"))
      [m.handpose, m.handskeleton] = !this.models.handpose ? await load15(this.instance.config) : [null, null];
    m.centernet = this.instance.config.object.enabled && !this.models.centernet && ((_w2 = this.instance.config.object.modelPath) == null ? void 0 : _w2.includes("centernet")) ? load(this.instance.config) : null;
    m.nanodet = this.instance.config.object.enabled && !this.models.nanodet && ((_x = this.instance.config.object.modelPath) == null ? void 0 : _x.includes("nanodet")) ? load18(this.instance.config) : null;
    m.selfie = this.instance.config.segmentation.enabled && !this.models.selfie && ((_y = this.instance.config.segmentation.modelPath) == null ? void 0 : _y.includes("selfie")) ? load21(this.instance.config) : null;
    m.meet = this.instance.config.segmentation.enabled && !this.models.meet && ((_z2 = this.instance.config.segmentation.modelPath) == null ? void 0 : _z2.includes("meet")) ? load16(this.instance.config) : null;
    m.rvm = this.instance.config.segmentation.enabled && !this.models.rvm && ((_A2 = this.instance.config.segmentation.modelPath) == null ? void 0 : _A2.includes("rvm")) ? load20(this.instance.config) : null;
    for (const [model23, promise] of Object.entries(m)) {
      if (promise == null ? void 0 : promise["then"])
        promise["then"]((val) => this.models[model23] = val);
    }
    await Promise.all(Object.values(m));
  }
  list() {
    const models3 = Object.keys(this.models).map((model23) => {
      var _a2;
      return { name: model23, loaded: this.models[model23] !== null, size: 0, url: this.models[model23] ? (_a2 = this.models[model23]) == null ? void 0 : _a2["modelUrl"] : null };
    });
    for (const m of models3) {
      const stats = Object.keys(modelStats).find((s) => s.startsWith(m.name));
      if (!stats)
        continue;
      m.size = modelStats[stats].sizeLoadedWeights;
      m.url = modelStats[stats].url;
    }
    return models3;
  }
  loaded() {
    const list = this.list();
    const loaded = list.filter((model23) => model23.loaded).map((model23) => model23.name);
    return loaded;
  }
  validate() {
    const missing = [];
    for (const defined of Object.keys(this.models)) {
      const model23 = this.models[defined];
      if (!model23)
        continue;
      const res = validateModel(this.instance, model23, defined);
      if (res)
        missing.push(res);
    }
    return missing;
  }
};
function join2(faces, bodies, hands, gestures, shape) {
  var _a2, _b2, _c2, _d2, _e2, _f2;
  let id2 = 0;
  const persons = [];
  for (const face4 of faces) {
    const person2 = { id: id2++, face: face4, body: null, hands: { left: null, right: null }, gestures: [], box: [0, 0, 0, 0] };
    for (const body4 of bodies) {
      if (face4.box[0] > body4.box[0] && face4.box[0] < body4.box[0] + body4.box[2] && face4.box[1] + face4.box[3] > body4.box[1] && face4.box[1] + face4.box[3] < body4.box[1] + body4.box[3]) {
        person2.body = body4;
      }
    }
    if (person2.body) {
      for (const hand3 of hands) {
        if (hand3.box[0] + hand3.box[2] > person2.body.box[0] && hand3.box[0] + hand3.box[2] < person2.body.box[0] + person2.body.box[2] && hand3.box[1] + hand3.box[3] > person2.body.box[1] && hand3.box[1] + hand3.box[3] < person2.body.box[1] + person2.body.box[3]) {
          if (person2.hands)
            person2.hands.left = hand3;
        }
        if (hand3.box[0] < person2.body.box[0] + person2.body.box[2] && hand3.box[0] > person2.body.box[0] && hand3.box[1] + hand3.box[3] > person2.body.box[1] && hand3.box[1] + hand3.box[3] < person2.body.box[1] + person2.body.box[3]) {
          if (person2.hands)
            person2.hands.right = hand3;
        }
      }
    }
    for (const gesture2 of gestures) {
      if (gesture2["face"] !== void 0 && gesture2["face"] === face4.id)
        person2.gestures.push(gesture2);
      else if (gesture2["iris"] !== void 0 && gesture2["iris"] === face4.id)
        person2.gestures.push(gesture2);
      else if (gesture2["body"] !== void 0 && gesture2["body"] === ((_a2 = person2.body) == null ? void 0 : _a2.id))
        person2.gestures.push(gesture2);
      else if (gesture2["hand"] !== void 0 && gesture2["hand"] === ((_b2 = person2.hands.left) == null ? void 0 : _b2.id))
        person2.gestures.push(gesture2);
      else if (gesture2["hand"] !== void 0 && gesture2["hand"] === ((_c2 = person2.hands.right) == null ? void 0 : _c2.id))
        person2.gestures.push(gesture2);
    }
    const x = [];
    const y10 = [];
    const extractXY = (box) => {
      if (box && box.length === 4) {
        x.push(box[0], box[0] + box[2]);
        y10.push(box[1], box[1] + box[3]);
      }
    };
    extractXY(person2.face.box);
    extractXY((_d2 = person2.body) == null ? void 0 : _d2.box);
    extractXY((_e2 = person2.hands.left) == null ? void 0 : _e2.box);
    extractXY((_f2 = person2.hands.right) == null ? void 0 : _f2.box);
    const minX = Math.min(...x);
    const minY = Math.min(...y10);
    person2.box = [minX, minY, Math.max(...x) - minX, Math.max(...y10) - minY];
    if ((shape == null ? void 0 : shape[1]) && (shape == null ? void 0 : shape[2]))
      person2.boxRaw = [person2.box[0] / shape[2], person2.box[1] / shape[1], person2.box[2] / shape[2], person2.box[3] / shape[1]];
    persons.push(person2);
  }
  return persons;
}
var face3 = `
/9j/4AAQSkZJRgABAQEAYABgAAD/4QBoRXhpZgAATU0AKgAAAAgABAEaAAUAAAABAAAAPgEbAAUA
AAABAAAARgEoAAMAAAABAAIAAAExAAIAAAARAAAATgAAAAAAAABgAAAAAQAAAGAAAAABcGFpbnQu
bmV0IDQuMi4xMwAA/9sAQwAGBAUGBQQGBgUGBwcGCAoQCgoJCQoUDg8MEBcUGBgXFBYWGh0lHxob
IxwWFiAsICMmJykqKRkfLTAtKDAlKCko/9sAQwEHBwcKCAoTCgoTKBoWGigoKCgoKCgoKCgoKCgo
KCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo/8AAEQgBAAEAAwEhAAIRAQMRAf/E
AB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAE
EQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZH
SElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1
tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEB
AQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXET
IjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFla
Y2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXG
x8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A+qaKACigApGOKAML
Xp8xlF5A7V4X8RtYs7PzfNImnx8sa8Kp9z3q2tEgp6angWs62ZZ5CTGoJ6DArGNz5p+UrID6EUrF
PUlW1EuN0XNW7PQ2L5j3JnoKXN0KijqNP0eYoqXBdgPuuo+ZPeupisWn2Jd4+0r924XgsQOCff3/
AJ1FzRKxDqGii6m3siiQ8F1XGfXI6YNWLfRbiRQMkcZI9fpTDluT2/h6Qy8gDPbtmtG38JeY480Z
5zSLUTZg8M28YwYxjAArXtdPt402qgHbpSaLWhma3o0Uqk7Nx9DWLaaVblgPs6qRyds2M/gRSQp9
zZOni2iWS2hlQ+kjYz9OMGrdjq89vIPPVhj+8M/lQyDq9P1WOYBlMZz1AOD+VdDaTiReOKulK0jO
tHmi0WDTlr0TyxRVhT8tJjIX+9SUxHXUV553BRQAVBcPhSBTSuxPY86+IGti0s5I7dsORy9fM3i6
8e8mfDO5P90ZrWWiJicNPpZZtxV/xrW0jQt4DOv6Vk2dEEdTY6BHuB25rpbPSo0QARjP0qTRI17W
wA/hFaMWmoQMgflQXYsDS142rU9tpqqenfNA7GgtihxkdKuRW6qMY/GkDZY8sY4Ap4hXbyB+VArk
EtuH4wPyrk/EGkOm+a3jw3suRQLc5i38SX9hJ9nnY+XnBUdPyNdFY6pa3KkkAE9l6f8AfJ/pSJT6
GhDmI+Zb4ZRycdv6ium0nUhKFydrelTsNnS2829RnrVgV6NKXNG55lWPLIM81Op+WrZkRMfmNNzT
A7GivPO4KKAEY4XNYWt3vkwPg4OK0giJdjw/xrqhm87Zs8tc7pX5A+leSajf6aHYJ50kn4AZpTep
rBWRm2Vobm4BXfyehPFdnpmnBFUY5rI2SN63tlToK0YI+KZpFF+3QdavwoKTLtoW0Toaswpk5pCb
LCxipAhoIuP2dKevHXoaYDylRyxhlwRQI4nxVoCXWZI1GfpXGtbSWjYPGP73+NIGupt6TqMsLruZ
ih4xnP5V09mQ+JLd8gn0xSYJnVaVdkook69K34zuUGunDS3Rx4qOzHVIp4rrOMY3NJQI7GivPO8K
KAILt9kZrz3xlebYiu8KCCWb0XvW0NFch6ysfO3jLVjfXLIn+pQkKorl7WxNxIPl71g2dUUdpo+l
pBGvHPet23iC8ihFosrxirkHQUFo0IF4FXI1O726CpKLacCrMJoJLYHAPpTwucHpSRJJ5e4AZI9x
UqpxzVpCuOC8cUpQUMRnXttuB4rjNdsYyeVwfXpmpGmcvcQyafMCFJjPY10eg34BUg4DcZP8jUO4
HaRq3lLNF+IHet7R7jz7c56rwa2wz9+xhiVeFy/T1PFegeaNPWigDsc0ZrzzvDNIaAM7VpNqdegr
xL4l6kywyRhseZ19lrdfAZL4jxYg3Fw20d63tJsdrDI5rm3Z3R0R0Mce1eKnQYAplIkWrMJ45oZS
NO3PHbNXIyfpSGWowSOasxLUiZdjFSqtNEMkUemKlAGKsRJjAppFAiORMjmsTVrNZEO4cfSoZSOD
1eJ7WXBUzQZ+7nkfSo7e2Ei+ZaMzxntjBX2NSU1Y6/wxqojiEFzkA8KTXYaUoWRyv3W5rSjpNHPX
+BmpSg8V6J5gUUAdhRXnneFFAGHrTfu5PpXzj8S70/aZtxzztXFbv4DKHxHI+H4GZiz9zxXXW8G3
GBXMjvLRXAx0oPGPSmMVeOnWrMTYpFI0bcg1fh54xmgovRcD3qxETSIZcRvzp+/BpEkqsBUqsM9K
q4Em4Gkxk0yRGXrVW6i8yFhkg+tJjRxGsWrxllkUMh9eK5uMz6bcebbnfG33kPcVkay2OntPKuo0
nhXI67c8qa7Lw3c+adjcEDGK1paSRhVV4s6A0or0jyRRQ1AHX0V553hRQBz+vNtt5z3xXzX8Qbdm
uic5YnOMdK3l8JnTXvlbwpYl+WySOgrp5YfLOOB9O1c62O7qQkc+9RsKChFPWp4DluOlSykaNruH
ArUgHShFNF2NT1qxGO3NBmyxGcE1N2560CFzjrUysO9JAPDDjFOVuKoQuSRTWouBkazbCa3cd8cV
wF7IISQccHBzUSWpV9C3o1x5b5GAjdQD1rs9DjC3kckbEhqKfxIzn8LOupRXqnkPccBSkUAzraK8
87wooA5rxMSI3HqK8B8bQl9Q8sffY5b/AAraXwkUviNrw9pH2W1ViMMRTdRjw4HpWNtDti9TPc4P
FQs2M5qdyyMHLcfjV63HTAoBGtap0wK0YxigpsuRDtVhVYd6GQydVwwIqdRnqKCR23I5pCMUW6gD
YNKuetAEise9KTxQBWuFyhrznxNZkXjFeN3I+tTIZg2OqmzmxNF0PO3vXp/g2+hukVl4zyPanTXv
JmVR+60dpThXpnlPceopWFAbnV0V553hSGgRynjC5FujOey14Ssp1HxNmTnc+a3kvcIpv37HoEYQ
QmMdVHSsnVbYJF5jVk0dsNzlruVIsl2wKxbjWrVHILjg1CRbZJb+ILHPzyhfStODWLQgFJFYd+el
UJM27HUIXxhga1Y5lLVLKLkMnoauxnPPrSEx7ShF+Y/n2qrc6xBbhizDAqkK1zJuvG9nbg8ZA681
ly/Ei052RO3uKAsZlx8QGd8xxvt9Aa1NH8dK7AXMcip64zigdkdrZX8F7EJLdwwNXMkrz1qRMRly
CK4TxmpidWI49felPYSOMmi80NIoOV6qRzXYeA5SskYPfirpfEjGr8LPWVHyD6U4CvQPL3ZItOYc
UDOoNFeed4Uhpks4H4iE/Z5MeleMeGULeLgjds10S+BGdL+Jc9OSBU2Huc5Nc74yvUtrcDBrJnZF
63PJdXvLy/lKWw46bvQVz82jXhkLO5Y+9ZlsYthcRnbIjY9R3q3awTRkEM3WmJI6C0ea3dGRsr1x
XY6TqW9FLHnjrUs0izpLK5DDjofSta3ckH09KRUkZuuTvFGdvPauE1Y3U6Mqbssf/rUxHPTaJPK2
ZmJPbBqzY6DCZh5xJC9s9aBJHU6dpemJjfEmfetJtI0+VPkUr/unFOxdiextHs33W07YHQHk11mk
Xb3KbZ1xIvcd6LEyWho4Nct41sTPYb16ipexCPPZN+wYGCvH1rrPAEJmvkPoc1VL4kZVvgZ6yFwK
cBXoHkkqinFaVyzo80GuE7WJRQSziPiGdthK5HQV4x4J/wBI8WPIewNdEvgRNL42emO/yj1UHNef
eNpRczbC+I17DvWT2OqJxc0sMK4TCisy41q0hfEkqj8aixdwTXNOlwvmqD9anS9tXH7uVG+hosO4
/wC0oOhrR0+6G4YNIEzsNEuCxAPNdjZruA4xxUmjINSjURksOlcbqFykbnjFA1sYGoassaknCqO5
rl7rxhGm7yBnBxuJq0rkSlYpw+NLlsfd5P8AerVsvHEqSBHwPVgcgVpyMyVXU3rXxcHYETAk+hru
/DWti6ZSTyOKzZqndHaxvvUGq2rQ+dYyqR24qWI8dvbr7LqDxyDAzXpvw6FvIxePGSM06Xxoyr/A
zviKFHNegeX1J41zUhXioGbuaSuM6wpCaBHG/EcA6HN/exxXjXw2jL67cv8A3Qa6H8CFR+NnoWpO
I4XI44rxLxrqjQzSEsQM1gdSPM9U1uR1YbmWIdXHf2rmpIb67YS28UrRlsLI3c/jW0VZGUpO5pW1
jfLNOjahawzwReYI5cjzMkDavHJ5/SrVv9uhtPtVxCPLBwzxnlT9KGghLU3tKvvPjHzbl7EGuisJ
GRxWLOg7nRXJEbDjmvSNK+aFSfSoZr0KutRkphc4NcRrdkVjL9aVio7Hk3iqS8ubhrWzUlsZY9kG
cZNc5D4aee5MclzJIFTzHAO0MfatqSOWu7bFS1srDUZEis0vIZoUxPvfcC+4/dx2xjr712XiTwXb
WmlQ6hol3cRhoFd4rlg3zY5wR0GelavQwjq7GD4etdVvSnk2wAB+9v8A8mvcfA2kXiRo0/UdcDis
ZnTTulqeoWqbUAJqWUb42X1FZlnjfjSwlGrr5S/eNdD4RkvLAAQ4yRyaUZcruVKl7TQ9I0G+mnzH
ckFwM8VuIK7ac3KF2eXiKapz5UWYxipNtMyNejNch0jSar3cjR27uoyQCRVRWom9DxTx54gu5fMi
lbKdMVjfCZPNlv5v9rFbVHpYqjGzbOn8SzFI9o715L4u0r7arYzk+lYdTqSujy7U/C0u4vHk+WwO
xuh9q3J9dgvbdVukMV1EwbDDgn04rZMwlHoZ+orZ6hfQ3RWVnQYCgZAq+8U0ln5NtBsV2yxYcfgK
JtW0CnB31LlroVwJ1nQLGDjeP7w+lb0dsFxjrWB0tHS6NuWPJ6A16ToUm63T3Gallr4S7cxiTjrX
PaxaF7dlVeSMUhxZ5jd+H7qCa4eF3DSE5x3zXN3Wk6jbyeaiFWUY6ZyPStYS5SalPmVipFbX0E4c
W0alvmPHJrag0rVvEE6LdljGpG2NRtQD+tW5XMI0uU9M8NeFo9PiQhecDIIrtrOMIoG3H4VlJm9t
C6CB06VPGM1IHLeItGS6uw+ORT7e3jsbQvj7gzUNam0JaWE+HN7NqOqX80n3FO1RXo8YzXdS+BHk
4z+KyzGPapcU2YIv7qQtiuaxvcaWqG4O6FwfSrS1JbPnrxoxkv7qIfejcitj4V2f2exumI+8+aKn
xHTT+G5d8Txlm4rjLxMsQwzWT3OiK0Mm6sEkVsAcjFc1d+FEmlGwEDPQVopaEuOpr6f4ZWNAu3tW
vHpAj5ZQcUFIWaDjGMVUMQ3cVDBmvbhY7QAV2nh+T/R1yeKhlrY31+b61FcQK6nIoJMi401WblRi
qr6PCw5UYq9y+YgOgWzNkRrx3xWjp+nx2v3FQcelAbmko9anQ4GBUNisPHWr1qMrQhS2K11HvmYV
hamcxSRZ5xRIqluS/DKAQQXZxyXrvo2FdlL4EeZjH+/ZbjNSZpswLNBrE1Gt7VE4ODVIlnh/j61F
j4lmeTGyUbq6LwdEqWbeX0YbhSqfEddP4Bddj4JIrhL5d8h7VjI6oLQqKNzelWre3yc4/ClFjaL6
wqBxxUUxwCKu5BmXRA6c+9ZjP83FSBoQuPs4BrsNBlUW659KmRrDY6G1lyQtW3Hy0lqQ1qVJnAbm
oy3b9KYJCqRj3o4zRctIlhjLHmpSuOBRbQOpLGpPFaES7UqkZzKN1KsEc87/AHUUmvPLTVGv72aQ
k7WJwKmRrQ3ud74Ltilgz4++2a6iNDXdS0gjyMU71my7GpqTbxSbMki3SViajTTHqkSeR/GeyZmg
nQHkEE1S+F+oPPavBL96I4/Cia1udVF+4dVrkW+Fq8+v4tjMDWUkdVJ6WM0cNV+F+MVmjUcZgqnP
1qpNNnkcVRLiZtxIS1UzzIF7mghlxUZpVQdq6nTVdAoAOKzkbQWhvwM6gMM1twOJYx3NOJE11Kt1
H1/pVVlwBkk+9NocXoOQ45FPj+fkUJFF2NSB700v/hTEty5ZpkjvVyUgcCq6GM9zC14/8Se6GcZQ
1574Xs5WkI2HBPHFQ1dm1KSSZ7Rotn9l0+KPHIHNacae1dy0Vjxaj5ptlhVp+2s2CJ9ppCKzuWNx
zSFc1SYrHNeNdIGpaYw25ZeRXmvheyk0jVpEdcLJ0q3ZxNKTa0O3vQHg/DNcHrsJDmsmjspnNzNt
fFIJ24GazOhC+azDmgZIOOKBsp3J2qSaZodubq58yQ4QAnmhGT3NO18pb7BORmu205LfYpyKVkWp
Oxr5gKYWoIZWgfGfloFq1qTPLubnGO1RPtxg4P0oBAkY/hBz6VNDDkZ6AU0W2WSdqkdKr9ZOaGSj
VtcLHmnOcgmmYvcz7mBLy3MbdD1q9ouiRK6bUAVeelOC1InPlidSsWMDFOCEdq3uefykqrinYqGy
rFvApMVka2DAowKAsMkRXQqwyDXn/iWyitNQ3qPl6itIvRoF8RXinW4tQ6HI6GuW8SIVBPalc6qe
5x9x97r3qruwTjrWZ0ksZ9TUmcDNAmZ9/wAoao63rR0+w22MLPtAzt6mghmfofiB76LdJBJBIp5D
d/oa7bSdWLIPnpDi9TM8TeKdas51XTbIyxd3J/pXS+E/EFxqNoFu7do5OmD60maHWrnZyDRkn/69
MlEyOR0xntVoNx+FUgYjPxg4FLCuWDZyKQr2RoRnP0qO+nEFpJITgAUzLqZnhu6+0rknOTXpOmwJ
Fbrt5yMmnHYyr6Oxb2ijaKLnPYMClwKQWK3n0hn+lachHOJ9pNNN0apQFzsY10a4v4hXQh0xpieQ
MA1XLZNjhK80cT8OdV+3Wl3A7ZZJCw+hrR1qLcjZ/CsbnfHRnFXseHJArOYYbrUs1uPhYbuatqFP
ByfSkMq3UIINYkto+87Tx6GkSxfsDbflGD7CtTw/pk4nzITtPIFMFudsukh4Rxz71paTpKwP5jcn
0qTRy0NORMDgVCqewoJTJgAoxjntTiTu7fWmFxAcnn1q3EPl+X8KZMi4gKqB1Peob/Tv7Us5bfeU
yOoq4R5nYxqT5I8xieH9J1DTbvyJELRg8ODwa9Ms5mSFV9BWiptbnNVrKdmif7Q1KLg96XIZc5Is
pNL5pqeUrmMtZs0jzV08phchaY00zH1p2ZNxjS1g+LdJOt6U9ssmxjyGp2urDjLlaZzng/wUPDqz
TSTmWeTrjpVjVk3Rvjr2rnqQ5dDvo1XUd2cTqSNk9OKxXGCeKxZ1DAxHTr2q5C/y8GokUhsz54qu
uCxzSQjQ0+FZblR2ro4bZYiMVQ0dBb7Qi5x0qzuG5QOh71LYErDufpSeWrHnimIXbjkUjLkH1Hem
gGxryc+tXI19KYmWegq9YLiLJ7mtqS945cS7QsWehqxA9dEjz4krPSxyZqbFFhGxUm6smjRM55Lk
HvSvNxXTY57kLT+9MNwKdhXGm5FIbkU7Bca1wMEVhaiuQcVhXWiZ14R6tHGanGBI2OtYkqEHjgVy
s9ErEeo6UBsHipKEZs5qpPdRxcbhx70NCSuybTNWihc5brW9Fq6vjMnFSdEIdDRi8RRKygZbHFbu
m6nb3RA3gMegNJhOm0jbXGOoxTuCc1Rz3FyoGKawz9KaAVcZqeMgCmIkB4FaUTbYwB6V00Fuzixb
0SFMuDU8Mlbs4UPeXHeiOXkUrDuXYnyKk3cVk0ap6HMxxketSMhrcwRC0dMMZFMQ3yzSeVQAeUaz
9Vj8uPd271nVV4m+GdpnHX67pCeKyLtBtNcR6xlk9RVeWTb3qRnO6trgttyIfm71z7ai8j7/AJmN
DNqUVa5Yi1AnjynHuBV+11YJhWWXcP8AZNSzqgmaEerSsf3NtIQP4mGKtRavdRgMIpVI9KjU0a7n
R6T43uYQI7qN2Tpkqciu503VVuQGAYZHQjFVc4alPlZrpKGAznpTwxOc9+lWjIlUACnM4XApiLNk
nmvnsK0NvpXZRVonmYqV52GsmanhXitTmFkSiJTSAvwrxUxXIrJ7miOfjf1pzNWxkRlqYWpgJupu
6gQbuahvIxPA6eo4pNXVioS5WmefakGhndH4INZs5DJXA10PaTurmLO21uKpSZqGMoXGnRzBiyjd
9Kx5rcQS428fSkjanLoaOliHGZFB56VswW+mtPufcBsGOAfmxz+tFkd8HpoaUx09FAtFY8DO71qb
Sms/Nb7RbecG6AEjFLS5c78t+p0djpVs9wsyQiJAdyr1rW+zqjErzSe559Sbk9S3C+MA1bjbgE1S
MSXzMVG0vNUI2tPKrAuCMnrVzNd0PhR49W/O2xrHmp4TxVMzQshpIzzQBehqesnuaI5VGzT2bitz
FEbNTC1ADS1JupgG6l3UAc14s04yR/aYRll+8BXCtLncDXFWjys9TCz5oW7GddH5qqNzWDOgQnC8
VSuo1kHzAGkPYopEY2+RWxV23Vzj5G/Kg3jWaNazhZuqNXS6TaKhB2c0jR1nJWOlhOxRxU4YkCgx
Y0OQatQyDbyaaFYe8uF4NY3iC9ltbVGj43NTIL3h7WzMihjzXVQXYYDdW9Cf2WcOJpfaRZ3g9KsQ
mupnCLIabGeaAL0LcVY3cVmzRHIxtUhetzEjZqjLUAIWpN1ArhupwagAfDKQ3Q1594v0c2bm6tx+
5Y8j+6ayrR5onThp8s7dzkZjuqAAmuBnqC7c0iwgtzSA0rWzjfGRW3ZadDu4AoNYo2rfS4v7orSh
05UA2r0pDbsTm29KRottBNyJ0wpJ9KhD7f6U0ikNWffIFBz60zVUW52ow4UcUN6EPcx44WsbgOmd
ua7TT5Bd24KHnFKnLlZFSN4koluLdueRWvp14swweG9DXoxldHlTjYtzGoo25qzEvwtUxas2jRPQ
5CNqkLVsYoYzUzdQA3dSFqBBmnqaBhuqhriCXTpVIzxUz+Fl03aSPI9QTypW2/dz0qKNw3SvOPZR
Mqin8VLKRcs3O4Cuk0w/MDjt1NBtHY6O2IIHY1pxgFaETIRwMkjtVSUEk4570MlFW5bap6dKzWm8
1tqH8aY+hp2FvGoGayNevVt7/ap4xzUvYjqTLtvLPcvJxSaVcyWsxTnFZlnT2t15xHmCtOBYwQy4
B9q7cPO+jPPxFO2qLEj5HWo42+aus4HpoX4W4FTF+KlotbHII9SFuK0MUNZqiLUDE3UbqBBupwag
Bc1DefPbyD/ZND2KjujyPWlKzuPesRZjHJXms9lMuw3StjnmphKDSLTJ7OfE3JrpbO4GQc9qlnRA
3LO82k5NbFvdADkjBoCSHyXIIIzgVQvdRigT7wzjgUzO1jHknlvG7qnp61etYFQDIpCZoqVijzXn
3iC8EmsOuaCGb/heR/s0ijkVv6fbxy3QMg5xmsnuX0Ldzut3+UYTPWk+2GJSe+M1pFtamcldalmx
1eO4XaThhWnC+TXqR2PHqL3maUJ4qRjxSEjj42qXdxVmaGs1MJoATfSbqBAG5p6mgAzTJTmNvpQU
tzzHXY83D/U1zF5FhjgV5r3Pa6FMsV5HWnLe7RhqBRdmTwagN2d2K2rPU1C5LAnPrUs6Iysbdrq6
f3gK0BrUKj/WClY05iM6xLOcQAj3NT29uznfKSzHuadzNu7NSBFjHNSm5VO9IRnajqoWMhTzXFtA
bvUfMduSeg702Qz0rS7FbTToQFwzjJqaGTFyfK5PQViyzUuFmuIdgGABya5u/vTaN5cnUHFUmLoZ
zyskwlgJweSK6zQdUEwVJeGr0aUrxPLxEfe0OrhPAqVjxWhznGRtUwatDK4jNxURbmkAm6jNABup
6tQAFqhupNtu59qUnZFwV5JHnWsHdIx96w5lz15rzT2uhRmt85xWbcxMnUGmZlB0bdxmrNvFIcfM
350mWjbs7YkDJY/jW5ZWW4jikWkdNp9mqYJFaJdEHHakUULu/VB1rLn1Ld/FgetMGYd/qWSQmSa0
/AemS32pfa7piLeLkg9z6UmQtz0W7uQ2cZx0A9BVzR7cAea6j2rPqX0L99KRat5A6Dk1wOoKZ52a
YfMORTYRLujiGWEq6/NWza2yKQVHNdOHerRy4laJo6TTnbbtb8KuM3Fdh5z3OJjbmpt3FaMxAtUZ
agBN1GaQBzTwaAAms3VbjERUGsa07RsdeFpuUuY4jUjljWTKK4j02RE4IpJYFk6imQkVl0xWarsO
mAEcUi0bNnZBR0rWtoguMCkUi21wI161mXuocEKaYXMS4u+pY/hVCSWSY4HT0pEmlouiSahdpEBl
mOceleiwWcNjClvHgJH97Hc1EmVFFi3Czy7mwIl/WtJbjP7uLgd/apQ2VNVvtsBhiPzdK5S4nAuR
nqOCaTGi9pcytPlU+XpmumtWII44rah8ZjiNIXRuWeNvvViQ/LXpJWPJbu7nCRvVkNxVsxBmqJmo
EPiXca0YLMuOlJsuKuPlsSi5IrNuG8s4HWs5VEkbwoOTKsk+FJY4rC1K53k1xTk5O7PSpwVNWRzt
4cms+WpKICtSLTETQj5q0YeBSGiys23pUguGxQMq3E59ayrm4x3yaAKiRtO2WPHcmhruKFxFajzZ
ScA44qRHoXhuMaLpxaUg6hcDLMf4F9KlhuDeXGASIl+8azZslYma68y48m1+7nFW5rtbRNhb5z1p
iMKbUg0zuW4A4rPgb7VdKXOMmpA7HRbMS7nUYiUda0lkQOBngVrS+JGdbWLRt2bAx5BqeQ/LXpnj
PQ4GJ+ashuK0MhWaoWcA0AaOmASMK7jRNPWYBmHyiuepO2x10qfcv6vYxCzYqoGK4HVYVTJrmb5l
c6oaM5TUJ8EgGsG4kLNUHT0M64OaqMMikSRsuKbnFMRLG3zVehOaGNE445NNlnVFpDMu6uie9Vo1
8z5mOAOST2pDK91cNN+5tsrH3PrW54a06KxT7fdrlh/q1Pc+tJ6IUdZGvHPLezMcnBOWbsPap5r3
ylFtbdT1xUWNWzU0/Zbwlgfmx8zGsHWtRHmMqE59aAMyNifvHPc1f0gtPdqkY5JosJHeNci2tktY
euPnNY+oXWZEVJNrZ9aun8SIq/CzodHuriIokhDIR1ronbKZr0o6o8ipoz//2Q==`;
var body3 = `
/9j/4AAQSkZJRgABAQAAAQABAAD/2wBDAAsICAoIBwsKCQoNDAsNERwSEQ8PESIZGhQcKSQrKigk
JyctMkA3LTA9MCcnOEw5PUNFSElIKzZPVU5GVEBHSEX/2wBDAQwNDREPESESEiFFLicuRUVFRUVF
RUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUX/wAARCASwBLADASIA
AhEBAxEB/8QAGwABAAIDAQEAAAAAAAAAAAAAAAEDAgQFBgf/xABDEAEAAgECBAMECQIDBgUFAQAA
AQIDBBEFEiExE0FRBiJhcRQjMkJSgZGhsWLBJDNyFSVTY3OSNEPR4fAHFjWCokT/xAAYAQEAAwEA
AAAAAAAAAAAAAAAAAQIDBP/EACARAQEBAQADAQEBAQEBAAAAAAABAhEDITFBEjJRIhP/2gAMAwEA
AhEDEQA/APqYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAKNTq8OkxzfNkisQC8eb1XtRNbzXT4q7eU2nu0MntRq/D8StMccvW29ZmdvgjsTyvZjxOLj
+s8WLxn8TFPXs6Oj9oct7c14rkxz22nrB2I49KOdTjelmszfmpMeUxv/AA28OqwZ4icWWtt/SUi4
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmdo3nsPNe0Pt
Fh09Z0+DNWL7+9O/7A3eJcZppsV5raI27esvH6jX5ddM25p79Ilo59VbUZOe2Tm/PeGvfPfT2iKR
PLv1+DO678XmW/a97U6TtOyzTbTF538/T9WjTNecm9a7126tqk3rSYxY5ta1plRZqZNXGjyZcPXl
mZmsx+qjBrsuO16xM7eXRt04JrdTltk5OWJnfaWf0a2lty5MdZnfzSn+WOHiOutFpjHa9e8bQ2fp
+alYy462pk7zXbuxjPesbRS0f6ZZV1ET1tErzXFLHo+A+1ddZf6NrI8PJHa1vN6iJi0bxMTHwfOa
zhzd61v1846utwniM6DUdb3nBaNrVmd9vjC/ZVePYirBqMWppz4rxaPgtEAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAItaK1m09ojcHnvarjM8P0vh49+a/eY8ng9D
h1fGM1rxjtGPfvbzdbjuTJxHX48cTPNltM/KsS9Dw7S49Jp6UpHaGe2vjz1y9J7LYK13vHWe7bj2
ex1tvM80ekuxW3RnW3Vm6P5jRx8H0+OYmMcb+bapo8GKPdpC6bQwtdHU8JpWkdJ/JweL6e23iU67
d4dubSqyVi9Zi0bwIs68XGp36TtEq7ZJmZmevzdbifCKWtbJinkt6eTgZPFw32t+sRurbWVzxs1y
Rv6T8V1NZNPtfq0seTm+Kevr+SZuxXjvaPiV8N4viycto9HseG6+uu08W6Rkj7UPmFck1tE1nlmP
Ld3eA8V8HVVi1pjq6Ma/pnqce/ERMTETHaUrKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAADW19+TQ5p/p2bLS4v04Zmt5VjeQeJ4bjnLqsupv+Ka1+ERLv4reTmcNxcuC
vy3l0qdI2hlr66sT02ot0ZV7qqrInruzrVZLGSZ37JjqgYTG0K5lbaFVhDT1Ub456RPweY4hixWi
eSdpjvD1eWejz3FNHWYtkpvFo9EIseb3tS3SerOms22rfpPqZKzvvHSYUz70TExG6Gdbs2rljeJ/
Mx5L0vEzPaelnOi98c9J2bFNTFpit47+a+PVUvx9T9nOIfT+GV5p3yY/ds67wvsXqpxau+G09Lx+
r3TqrEAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADV4ljnLw3U0jvO
O0fs2lWqyUw6XLkyfYrWZkHldBEV09eveG3Fq1mI3jd4vPrOIaid8G9MP3Y38k6fNrt/rMk9Ou8s
tfXXn49rGWInuy8SO/k5Gl1E3rG/fzbOe94wTy99mbRvTrMOOvNfJWsesywniukrG/jU6fF43WYN
TmtEeJtEQ06aSmK2+bNtEd+qfSO17unF9Hmvy1y13XWyVmN4tExLxVK8PmNq5NrT58zawam+m/yc
0Xj8NpRYSvQZ7xEOdqI3rPozxayNRXe0ct/ON03jmrKB5nV4q1yTO20Obmv4c+cx8HoeI6WZpNoj
q83niYmYscU0r8aJ6T1n49zeJ+Meqm1drb9J+Kd5p136StGVem9l9TbHxLDFp7W7+sS+q1nesT6w
+PcAzVjiGHftzQ+v4f8AJpv6On8jH9ZgIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAABp8VrW/C9TW0ztOO3b5Nxp8VmI4bn37TWYB8f1HFtTfUfR9FWJmsdZ9I7MtJxDX5s
d8ta1y0xzteaR2277rcuhycP12SceLxMeWNpjttHwlu8I0mfQ1y+D7k5YmJmY36T36Ka43z/AF1t
cI1ds+qxVj7/AEej19PCw9HJ4NoK4OIU5Y35YmZdzVTGebVZabx5jJS+Tmns81rNLm1Wrzc9rVw4
Yibbem72mXTTS0w0M3BvEta1bWrM95ie5EanY87wXgNOL6XPfxraXLhra/W28bR/dzYzarBqJxRe
bzE7Rt5vWU9n8mPHOGmS0Ypnea1naJb+k9ncNLR7u2y/WcxXO4TOoyUrN6zD0FaW5Y3hu49FiwUi
KxCvLMR0hlW0jn6ukWw3iXjOJzbDlneOj3GaN6zDzfFOH+LE7SRGo83XNSZ2lbG2/WfdlvaT2cy6
rNFInlrv1mfJ37cK4PwTTxOoidRm2+/2/KFuyMp47XB4LivXiunrH2b2iH2qn2K/J8x4fGDNxTSZ
9Nh8OviRvTyfT6xtWI+DeXs9MNZubypASqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAOZx6/LoOWPvWiHTcf2hiZ0e8fc2mf1E5+vP/AEeuSd7RC2uKtI6QjHfeINTfwtPf
Jvty9WPfbt/lucP03gxfJf7d/wBoReYpm97zaNeLb4Ims9Nt94auDjem1Wo5PFi1onylS+1o7l8V
bxvtupjDMdNkYtXS1+Stt+m63xImEJ4xjHER2ZxMUjeUTO3VRmydBbjLJqPi08mbeVOXJPq1sl5Q
Vbkz9+rRy35rxHqzmZlVEe/Ez5LRlW5iyfR6zffaIjq1OSNZps2a21rZInafSPJhxGMl9LStLRWM
lorM/A4dkrWbYfLZC2W/7K6eubX6b4RzT+W76K8b7G6X62cu3Sten59nsm3j+OXz3/0ANGIAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0OIYfpOHPijvNNo+fdvtXJO18k/
/OwPFYbz2ls3jx8VqW6xMdWPEdP9D4lkx/dt79flLLHbkxTPwY6nt2512ORTRzE2x4/dpE7cvkme
E4IrW3hRMxO8THRtU1FKWtvtvK2upx22rzRCtXkqzh2jtF7ZbT122b01ndnpuWuP3Z3+Ky20qDVv
fauzVy3mejZzNK8dVjqi87KLRLYtXruqvXzkQp7Qoid88R6rcl+WGlW0/Sa22mfhCZOq2x082ix6
jkm822pO8VrPdr4dNObVeDo8XW3uzMbzK+mvxT7szE27cvnu9j7PcNjSaXx8mOIzZevbrEeic5tN
+SZnpt8J4fHD9HXHO3PPW0x/DeBtJxx29vaAJQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAKNRim9Z5e89Nl4DzXtVh5babURHrSf7f3ec1+qnDorWrvvt5Pccb0n0zhmWk
Rvevv1+cPE2rGTFNZU26PFfxwa5dVkjelI2772nZnX6bbrEUq3o0d678u8wmuDL2ittvVjXdneeK
cGv4jpJ6U56+kS7+j118+GLXpakzHaWlp9NNY3tv+bbiYiNoQy1y30uyZJlrWmZnuym6q1iIJnop
yW2Te8bdWnnypQqzZOadokiIpSZntWN5lrxki19vNRxrUeBwnNNd+fJEY6/OejXLn3Xe/wDp9wyn
E8uo4lqqxblv7lJ26T6vpD5X7G8QycKzeBMbzMRM1/FH/wA/h9QwZ6ajDXLitvWzRgsAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeL45w+dDrZvWv1OWd4+E+j2jX
12jx67TWw5Y6T2nzifU+rZ1y9eHwzDYxxEy18+DJodXfT5o96vafWPVbjyxDn1OOzHudbM0rt2UW
iI69mVtRXZq5tREb9VUoy2iIlRbJ0UX1VZ6btTLrI7V6yk62M2oisT1c7JmtkttVMUyZp6x0beDS
RWOvdKijDimvWd3G9pNRMfRcNfvZOb9Hpb0itJeP47k/3hgjaZnbaP1XxWW3T0movbNS0W645nbf
0nrMPpXs3xamoxdJiLbe/X1n8Uf3fKsOTw4jbaXo+EarJhtGTHMxeJ6xH7Sti9Zaj6x3HM4NxXFx
DS1mtoi8dJrv2l011QAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AGjxLhODieOIye7kr9m8d4eM4to9RwjPXFa0ZIvG9bR0fQXmPbDFvTTZPOJmEWS/V8bs9R43NxLL
G8eFbePg1bajU5/s0l1ceKLx1hbjwRE9mOpx0y2uRTSZsm3PMw2aaKtIjo6kYo9EXpET0hVLXxYK
xC6MZvyx1lFs0RHfaPiCnU12pLyHGNDbUajBekWma2npWN3p8+opa20e9LSyZLxExTlpM+vdOdcZ
a9tPS8MyUvFrzWlI6727u1pYxYrbVmb7x+TQx6au3Nqcl7/0rcmW9axGnwZJj1novmxnZXV0fFp4
ZxLBPgTGK8xzXr5fOH0bFlpmxVyY7Rato3iYfNuG2x56Wrqa8s2jz+7Lu8O12bS6jkwzN6THNNI6
tvrN68Y4rxlx1vHa0bskAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAA4XtTTm0OKfTJ/aXdcL2pyRGjwU362yb7fkJz9eTxxyZJjyltRXzUZK7TFtl9Lbwy06YzrHwa+
fJFd/wCVt8m0bQ0eS2qzcm+1K/an+zNZFL5M1pjFXeI72ky48eGnPkvNp27+TPU6nHpMfLXaIjpE
erk5dRMxOfN1mPeisfshW1ne1a1577Y6x5R3U0zze31FOWI6ze0byU098kRlzbxM9qrMlPDpyRMR
Md5Vt/Ihp5898mWZm1pjftE91uCt7fCI7dWeHDEW3t723l6rslqxWZnasR+SYhFbzhnfxJ2jyeq9
lcGXWZcmW0zWKxHLaI7794eJx5fpfEKabT8t8l5isddo3l9S4VjrwrRUwzSJt3tav3pdOL6Y6dXD
j8HFWm+/KsU4NRXPvtWazHquWVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAa+fXYNP9u8b+kdZBsDkZOO135cWOZn4y5Wu4xqctbe9y19Kp4njt6vi+PDm8DFMWybbzPlV
5PiGtz67UxbNbeKTtWIjaIXYpnwuaftT5tXJT3vmi1pMsrU5qIrG1V1a+5DCa7b9GFbRr5J6Wnbt
Cu+Wmk0m8956z8ZWZNorbfzcbX5rZslazPux3hUt41NTntktObJ13+zX1bek01r4/HzVm0bxPXy/
+bNfDgjVa2uOY92kdfg6ufJOKvLXtttVVSqbcta2vM7zXtHpLQy5ZtMd+vWd+7Zy3mdJHXra3f0c
vUarw7zFY5rT2hH1Lavnrgx81p3U49Pk4nE5L35MO/StfNRXR5tXnrS8W67WvfyiPSPi7uLHFK1p
jrtSsbR5Lc4RzsXBaYreP4l45esRD2HD9fnw6evvWvO3Tfr0aGk0U55ra0TFInv6uzgrXFXlx0i0
77RPlC83Yj+JW7oddqr6vHzTTw9/f6dod+L1t9m0T8pcbFSmPHER3892W0zPuz+jSbVvidkcqmfP
Sel7bekrI4n4dZnPWIrHeYnZee2Wpy8dEaml4npNZblw5qzb8M9JbYgAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAABEzFYmZnaI7yCXL1XGa0jJXT0571nbee27DiXEprp8nhbxG20W8
5cbD0ikfnKO+urTPvjoZdXqctdsmTaPSvRpWmsdZ6yztfaGplvv3lWW1tyRlz1x0vkn7Vo5atTNe
Y0+1o79V2KsZsvX7Ne5mwxnyTNvsx2iGneM/rCdRSuOsTasTt5kRFtpjqmOH4t4nk7estiMNa97R
Hwhna0iuKTEdmGWa4672nZtRele1N59Zlq6vLOSsYorEc07qcW65euzRvtXvPZy52naZ7ujr6fXV
rWdukREK8+njHgmZmPc67bq6ivVWhxxgxZLztNrT1mZ/SP4VZs0zaOvfp84WUtNsXLvtv3699+rU
z7+Jtt5qURqMnPpctaR1rMSw4ZoK57eNk6xHaJRh97Ltt7lo5Z+L1HAPZvVauZ2nFTSzMTzeJEz8
to6xPfvsZntPZ9rXxabmxzefdrv0j1dXh/BcmstW1qxTHHasR3+b0GPhGl+kWmd64dNEVjf73T7X
y8vy+Ddx6O3iRakxTH5RXrMw1/lX+3Itw2MFIraN48qRHdZi0cUjmmPen9noox1iO0fNzdXEYrTt
stcmd9aX0bJ+HePmiKTitO8TMLZ1cVjrMfqpz6ys4pjfrPRWZ9rXXptUit6zO+23VyaRHEc05L1/
w9J9ys/en1ljqdVbwYw452tlnl3jyjzbmmiMeKtYjpEbLeTXPUU8ee/+qjJpsV5rbkrFqzE1tEbT
DpYNbW21Mnu29fKWna0KbqTdjXXjld0cvQ63ltGHNPSfs2n+HUbS9c2s2UASqAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAOVxPWe99HpP8ArmP4b+r1EabT3yT3iOkesvMVtN7za07zad5l
XV5GmM9vVfEstvDx0jtaVVMlq+UJ18b5cMRvPeSuK87bUt+i2Z3PtG7zXpjkzXt6R+TXyTMzvM7t
ydHqZ+zhv1+Cv/ZuqvPTHMfOYaTMil1a1K2vHSLTELq2v+KWzThGo84rH5rq8JzedqR+ZeI7WnOS
34pYTafWXR/2Pln/AMyrKOCWnvmiPyR6O1y9585lhWJvl557Q6eo4T4dYiMvW3b3UanhldHpJtGX
e09unmjsT7eb1l4trI2t0hsZfrdNO0bzy+nzU20/+NmkzO9esz+TZxWis9dttvPv+Tn21jjaW8zn
26bTG3mp1M/Wzv3t0jyWXiKZJmsTERaZhXXDbNl8WaztWenxZLstPp5pau8frDtVrNMM5cfTfpMf
3aunxxbes9d/R09Dp8ebJi09ptFr3jtt2WyrW9wy1Jx132mK+Xq9PotT0iIU19ntLtExa3T47T+q
6nBaYvsZstZ+cT/LeMnUi0TXffo1s2m8Ws2/OIMWk5Jib5L328rS2t94Sh5TV4ppklpW6PT6rh+P
NbebTHyas8E081mZy5P2W6OFhjxNTE/hr/LoRO0Kvo9dPqctKzMxEx1la5t3tdnjnMs4noievcrO
yZjeFF1OSnNV0OG62cn1GWffj7Mz5w05joovzY7xes7TE7w0xrjPeex6Ua+j1UarBFu1o6Wj0lsN
3JfQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACrU5o0+nvlt92P3BxuM6nxNRGCs+7Tv8
2hToxm1r3m9utrTvMsonqyt7XTmcja0u3O6FMfi5t/u0/lzdJM81p9O3zdvHTwsUR5+bfPqOfX1h
dqV+3O7bs1+T31oqmI3TEM4rvCdkDGIIhlFd2daboS0NXG2bD6bufxXU1vlmu/u4us/N0+L1tTSx
kr9qk7w89j1FNZMV3jxLzvaJ8mer+LSOZqK2xZotbvljfr/89U453rXt9lse081xZtNjx7TGKu0t
DHlrevSevaN5Y6+tJ8c7VRNMt63n3ub+6/R54rERMztDYy4a5omclYmfxKcenrjtHLvtPrCnVmdb
eFe3JXmjy6eS/DrMuLVYsta9Mdt++6qLxO+0dEc8UmInr18iUfReHcXrqccb9Z27Q61Lb13eJ9nc
1Z35rTvE9avY4bTkpG8xEfB05vYxqybc07R281naGMREdoT5JQqy9mply7Q3bV3iXG1eXw7TWSka
c258t7+tpT5/BjT7MfHqndz12Z+M4lMMKyziUJJiN1WSu9fku23RaOgKNJqbaTU1t9yelo+D0cTE
xEx1iXmM1Nt3W4PqvFweDaffx9vjDbGvxz+TP66QDRiAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAOJxzU73rp6z296zsZMkYsdr2naKxvLyObNOfNfJbvad1dXkaeOdpvsc2yuZVzfbfqybutwu
s5s8R92J3dvJb3tnO4HSMegtmt3nfZvYp8SZl0z45NfSK7onH1bNcfRFqnUKJr0Y7dVtq7prjEsK
0XVpEM6028mW20IHK41aPo3J6zs4ODhdcvPnvExFevNXpMOrxi/PlrTee7PLX6Pwa09uaNlKtHg9
dM3z5d7ReOu02nu0JzZMfblrv5R5uvrcdImZ26T1mYhxs1Os7RH93PZ7axuafNfLitvbaYU3yZYt
PXs9NwHhui1HBa5LVicsb81onrEuVqNNSuS8Y67dZ6xPZa59Il9uX41vEitImZme3q2Kxbxora0T
Md/ROSa4Ztkj7c9OafL5LuGYubmyX3iu/TfbdSfVnpvZLT/XZK233+Mbbva1xRXyiPk8pwbH4N6T
adq5a71n0tD1WDL4tPe6Xr0tDpz8YVnJHWEXYxbqlBedoef4tW0XraO09HdyztSZcbUz43C+ee9b
SVMaeOfqq7+jGckQ1Yz7+7v2RN/WXPXZPjci2+2yyJaVMuy+uSJlA2d+pNoVRbeDcSxyTE+TDDlt
pdRXLTynrHrDOyiyZeVFnY9TjvXJjres71tG8MnJ4Nqt4tp7T1jrV1nRL1x2cvABKAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAHJ49qfD09cNZ97JPX5PPw2uI6j6Vrsl/ux7tfk1mWr7dOM8iLdm
vfebREefRsWldw7SxqNbWbR7lPesrn3Vteo7dYjDpMGCvfbeXQ0uLlxRLRxROfUc34p6fCHYrXlr
EejqrjY8uzCYW7MZjdVKqK9VlaxCYrsnYExBMRMJRPZA8/xPHtmpP9W2xx76vhWOInvt/C7ike7N
vwzE9kcapGfhlevTaFbFo8RqJ5vy8/RoW09ek0msxHfp3dzNoLzp4zUmZpMbT8HJyYJi20X2n0lh
ZY1li/RaidBF4w2mK3jrHaFGp1lN+tptPp5IjBkid5mIp16TKu0abBPv33vPlM7z+iPdFNcWXU5I
tkrNce/b1W5db1nTaf3ax9q0fxDW1ebNk2phty1mOu09VOm8W19orEz23j1TwfSeERFuEYMddptW
d43dvBn21eKJ75KbW+cf/JcTgMxXTb3nbljz+TpcPmc2uyZO1KRtVtGVdi0bx07qJnllsRO6rNTe
N4XVamsy8mnvPwc3R2jPwe8TPbdlxXNOPSZfhWWpwO85OFzv57qrODkzeHntSe8Sn6Rv0a3EZ218
8nXekfr1a0ZLVnqx19dWb6demXybOO7lYMvNMdW9S/VVLo0us7tPHdtUtEwJiZU3jq2Jhham8CVG
PNODNTJXvWd3qcWSubFXJWd4tG8PK3pPd1OB6veLaa89Y61/u2xfxh5c/rsgNHOAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAANLimq+i6O0xPv392rdeZ4rq/pOqnlnelOkIt5F8Z7Wj27I2I6sb25YY
V1ImY3dbQ08LRc23vZp2j5OJG+XJWle9p2h6HHtbJXFT7OOIpX+7TxT31j5rycdTh+Dpz+XaG/sw
w18PHWseULN2trBE9UcrJKBhFU7JAQi0dEomegNDUYovM7x3jb5tO1ZvpbaTLtzRExWfWPJ08kbT
Ex5NXWYYyV5omYtHWJieyeDzuizfRs19Jn6TM7Ru1uMcJxZqTkw+5f4ebqa7SV1MR4tdrx2vEfy1
axqsNOTLjnLXytVXi3Xj8+nmsxTLM16d5npPyUzpekTtSK+U7vS6vQ/SYmK1vWPS1HOn2dvvvvE/
tDO5XlcO+LbfHSd/W3o6/BdDOXPTnj3Kz38rS6Wm4FNrRyRzTH3p6RH/AKvR8L4dXSzE3jmtHn5I
mbfqLV+m4dbLSsZInHjr3iI6zLpYaxS01rHuxHRHiT9mv6s67Vj1aqL6326MrWiYa+/Q54BxPaGe
XRZpj8MquB4+Xg8zPnB7SX30to379GxpK1xcHiKz5IS8xr8PLPixH2bftLTy05o6dHYyVjLhy0t1
izjZa3pMVv3iO/qz1G2L+NbSajbNyW7xLsY8kTDz+fJXFqKZN4iZnafi6WHL0iYlStI7OO+7axW2
crFl7dW9jvE9ULN+J3ZbdFGOy+AYWpEqN7afNXLj+1Wd23KrJVMvCzseh0+auow1yU7WhY4fCdV4
OadPefcvPuz6S7jol649Tl4AJVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAV581NPhtkvO0R+4NPi2
r8DB4dJ9+/7Q83Po2NTqLanNbLfvPaPSFDHV66sZ5ET0hRknyW2lTtMyouz0c8usx2n7s7vScKwx
zc1vu/y85p+maJh6Th+SOWeveXR4/wDLm8v+nX5mUWa9bbrInolmu5jdTNkxYFk2Isr3TuCzeGMz
+THdEyDDJO9Ja823rt2XWnya946pGvktDXta0ztWu/ybvLE9dkcoOf4GbJPWK1j49VmLh9JtE33v
Mevb9G7WsW8l1ccREISophiJ2jpDYpijbaOjOuOJ8ujOdqxsgVcsUjaETYvbaFFrgu5lVsm0yUtu
ryg43H5m+GIj1XcJzePoL4pnrWGtxmfchr8JvfHS1622if3QljzTTLes+qrNjrkiYtCzPMxnm095
YZJ6boS5teB49Tqscza97VtvWvlv8V/FOF34RrIxTM2xXjelp/eHoeA6XnzReY3ivX/0dfivDcfE
9HbDbaLx1pb0lOs+jO7K8Lis3cN+0NKcd9PmthzV5clJ2mF9J9GHHVL108dm1SznYr/Ft0tuhLb8
mNohFbMhLWy0mJ3rPXvDvcO1karBG8/WV6Wj+7kWrvDDBlvpdRGSnbzj1hpjX4z8mOx6UYYstc2O
uSk71tG7Ns5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ2jeXneJ62dVl5KT9VTt8Z9W9xbWclPo+O
fft9qfSHEU1pv48ftYST23ZTDC/p0YtlVuvVjMbM5+LCZjYGWGdrTPxiHY4ffaf3cjTxz1v6xMS6
Olty2iXVj/Dk8n+ndrkhnGRo1v8AFdW3RCrZ5uiYsqrboncSu508yjmZRYQt50TfowYTbYGVrKrT
uTZjvukQnYhMIGVY2ZxPVWyrHVCWzXpVXkt3TE7Va+W4K7X3jv1auTNy3jdba0RZpamfroQN7Hk3
6wr1GTaN2OOJiu6Mu98NvgDi8Wy74d/yZ8PiPAiO2zU4nb6qIn1bugjfFE/ASp1ke9u15mbbRDZ1
Mb823kx0Ontn1OOkedoJCvT8I03gaKsz9q/WW+isRWsVjtHRKyrhe0XCfpWL6Vgr9fjjrEfeh5fF
feH0V5Dj3DPoOo+k4a/U5J6xH3ZZ7z3228evytOk7NvFbo0cdols47bSybt7HbddHVqUs2aW3Qnq
xVeu8LILR3SlZw3V/R8nhXn6u0/pLuPMXjeHT4Zruf6jLPvR9mZ8/g1xrvpz+TH7HUAaMAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAABRq9VXSYJyW79qx6yvmdo3l5viGs+maqYrO+OnSvx+KLeLZz2te1rZL2v
ed7WneZYWnZl5K72YV1xEyxmeqJljzIEWlVkszvbZp5soN3h2SJz3pP3odCnuWmPRxuERfJrZmtZ
mtY96fR28kbX3dXj/wAuTyf6bmK+9YX1s0cNtm3Sd4LFY2K23W1s16StiUJW7bp22RW3RluBuruz
mWEgrmCGWyNkoExKE1QlPmsqRDKeyBjaejWy2W3ttDUyz1QKslvehVqKTNosyyTvELabXptIJpaP
B39Ia2mz+JGpr51jdZefDx2hzuHZObNq58poJaGtjxJ2+LoaKP8ADRPo5+T3skx5OhpOmC0fBNQ0
5yTbn+bt8A0u9raiY6RHLVwY62mI6zMvaaHBGn0mPHt1iN5+aYVsACBXqMFNTgviyxvW0bSsAeE1
mkvw7V2w5Ote9besJx2er4rw2nEdNNekZa9aW9JeQjnxZLYskTW9Z2mJY7zz26fHrrdpbZsY7NGt
mxjvso1b9NmUwpx33XRO4K7VUTE1nmrvEx1bVo2VWiJE/XY4frY1WPlt0y17x6/FuPM0m+HJGTHO
1qu9pNVXVYt46Xj7VfRtnXXL5MfzexsALsgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHM4jxOMFJphmJv529Dq
ZLfjDjPEIx450+K3v2+1MeUOHSOWFc3nJkmZnf4yujpVlqunOeFpV2nctLCZUXRM7MJtsWlRkv3Q
ky5NmpWt9RnrixVm17TtEQnJabXisRMzPSIew9n+CRoccajURvqLx5/chfOest642OGcIpoOG2w7
ROW9d72+LQvXevyejcPUU5M+SvpLeOataraw2a0dLbLqTtK1G3Es4lVWWUSoldFtmcXUbpidgXzK
GEW3TuCUSncnsDFMMLSms9EC6J6FpVzbZE5ALy0809ZbFr9GtfrEoFMzuuwz0Ueey3HbaBLDXe7i
tMOfwWnP9I+NZbuttvhs1uBRtXPb4SDm3iIvf57N7Dbl0VrS5+XrltEd+Z1Jx7cNms9N4TURRw3T
+PrcO3WszEvZOD7P6aYiMlvu16S7y1QAIAABxOPcLnUY/pWCv1tI96I+9DtgmXl68Biy7/NtUu3+
O8HnFa2s0tfd75KR5fFyMWTdhrPHVnX9R0cd21S3Rzsdm1iuqs256wrmGcT0RYSx5d047X02SMmO
esd49YRE9WcdSXhZ2O1p89NRji9J+cei1xMc3wXi+KZj1j1dTTaqmor06WjvWW+ddcu8XK8BZmAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAMMmWmKu952UZ9XFZmuP3revlDTtzWnmvO8q3XGmfHb9ZanV3yxtWeWn7y4es
vPNtDqZJ6Ts5mppvdl/XXRMyfGvSNlu/RVvtOzLfoipLT1VTKbSpvfogRkvtDVyZOhkyvQcA4Dzz
XV6yvTvTHMfvK+c9U3rkW+zvA/D21urr789cdZ8vi9KDb45rejl8Rry6iJ/FV1HP4vXbBTJEfYt1
+UpiHM295bXsqrO9l8QkZ0lZEqqLeyBZHZLGvZkhIndADKJ3TMoqWQMZ6pjsxll2jsCLSrmU2lFY
36gieyu0LJk3jbsga0wdqzK20QpyztQGprL/AFMrOE05NLkt6qdVWZxNrSe5o9vWBLiUjnzXn0vL
q555dHt8HOwV928/1z/LpzXxbYccRvzTB+jucOwxh0dI22mY3ltIrHLWIjyjZKyoAAAAACJiJjaY
3iXleM8InR5J1GniZw2n3oj7s/8Ao9Wi9a3rNbRE1mNpifNFnVs65XhcWTdt47bnFuF24dm8TFEz
p7T0/pn0a+HJux1OOrOux08d1ndqY7tillVkzExLOk7yd4YxGwluViJhE45raL0na0dtlWO0+bZr
1TKi+2zptZGTamT3b/tLacvJjiY3XaTWdYxZZ6/dtPm1zrv1z78fPcbwC7EAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABhkyV
xUm152iAZWtFazNp2iGhm1Vss8uP3aevnKrNntqLdelI7VRHRnrX/HRjx/tZREVjZXeybW6KbWZt
pCZ6S08tN7Nmbb7zCrJtyoS5145bSx5mWafelr3tsKmS/o08uXyhlly7RPV2+AcBnPNdZrK+53pS
fP4ytnPVda4y4BwHxOXV6uvu96Unz+MvVxG0bQRG0bR2G0nHLb2gCUDX12LxtFmpHeazt82wT1gH
mMN4tWs+rcr2aEV8DU5sM/cvO3yb+O0csLUTSdrLphRE8tlkZI7Atr2ZMazDJVKTYSCawi7Ksq7z
1QERvLK3ZGPrKbyCrbdnMcsbeaa18/RhvvM7oGEwTG0JmYYTIML22a2e28xELM19oURPNO4lOem+
n3ZY5+prVnMc2GYU4/L4A0a15cNf6rz/AC6fC6+NxCPOuOu/5tHJTbHj+F5/l1+BYumXJMd9o3/d
MRXYASgAAAAAAABhlxUz4rY8lYtS0bTEvH8R4ffhmo6bzhtPu29Pg9mq1Gnx6rDbFmrzVsizq2df
zXkMWTeIbNL7tbXaHLwzUctvexWn3bmPL8WFnHVL326VZ91MfFVjvvVlz79kLrcf2m7j7bNHH3bl
J2SirLQoy4t1++7G0dBC/RanxI8PJPv18/WG241+alovSdrV6w6mDNGfFF4/OPSW2b1zeTPL1aAs
zAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAVZ9RXBTe3WZ7R6iZOpzZq4ac1p+UermZMl89+a/byj0Ra9815ted59PQ32hlrXXRjH
DpCLX6ML5NlNsm/ZRqstfdXzbsZt06sLZNvNB1Za8RDWyZdo7q8udq5Mu/mIMt4md2lmy7JzZuWJ
dHgfBL8RvGo1MTXTxPSPx/8AstJ1XWpIs4BwSdbeNVqq/URPu0n73/s9hEREbRG0QUpWlYrWIisR
tER5JbSccur2gCUAAAAPM8Sry8Uyz67fwuxbzVPGsE49XGbvF42V4M0TEL33ERnktsxpk3sumK2j
admFdPFZ33VS2Mdui2J3UU6LYlFSsN2O5NkCyJ6K7T1TEsbAsxdpReerKkTFGMxvYEz0rsqtbbpC
b2VT1QEzuwtbaGUxspuJU3neWdKoiu8rq12gCI92YatLcublnzbEz1aOptyZqTuDHLfxN6R0+t5X
qdJhjBp6UiPLeXl9NSMnEKxHa1+bb8nrlvxUAAAAAAAAAAABTqtNj1eC2LLXeto/R43VabJw/VTh
ydY+7b1h7ho8V4dXiGlmvbJXrS3xRZ1fGv5rzeHN02bEW3cys3xZJx5ImtqztMS3MeTeGFjqlb2O
8btql3NpbZtYsnSBLeiWfdTjtutid+ghherHS5p0+f3vsX6T8Fkw181d4lMvEWdnHaGnw/UeNh5L
T7+PpPxbjdyWcvAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAo1Oprgr63ntAmTqdRqK4K9etp7Q5d7Wy2m953lNrWyWm953mVd77R0
Za1104xxlN9lV8qnJl2a9s3xUXX2ybsJyRDWtl3YWydEC+2VRkzeW6q+T4tbJm+KRdfK1cmWZnlr
vNp7RC/R6HU8SycmCk7ed57Q9ZwvgOn4fEXtHi5/O9o7fJaZ6z1uRyOEezVstq6jiEbV71xevzer
rWtKxWsRFY6REeSRrJxz22gCUAAAAAANbX6aNVpL0npMRvWfSXlKamsRMVvXm+EvZXjmpaPWHzfL
oNRjzXicfWJ8phfPxFejx72x7xMzK+sXiNoiXlq+Pi6fWV/VfTNqfLJl/WTg9Pji8R70LqvMV1Gq
j/zcv6yz+lanzzZP1lWpelTET6S81Gp1P/Gyf90s412rjtnyfqql6asREdWM9+jz9eJ6yP8Az7uh
odZqMt458tpB1JvEViI3/RhzRt13/R1MNaziiZiJn5K9ZNceKZiIiQcu/WekT+iYrWI3lzdTrs+8
8uW0fJzcur1Np/zsn6g79phVaIeetqNR/wAXJ/3SwnUaj/i5P+6UD0ldonum161h5mNRqP8Ai5P1
lNtRqJjacuT9Qd22WN5aGeZyZd/KHJy59RHbLf8AVq31Gp/4uT9ZEvS8Lr/vSs2npzRtL1z53wK+
oza/HW2XJNd99pmX0Rb8VAAAAAAAAAAAAAAcHj/C5yV+l4I9+v24jzj1cLFk8nu5jeNpeW41wmdL
knU6ev1Vp96sfdn/ANFdTrXG+eq1q5F2LLtbZoY8m8d11bbSydErsYsm+zZrO/zcnBm226uhiyRK
EtrvCrJDOJTeu8A1MWX6Lqq5N/dnpb5O5ExMbx2cPNTeJb/DM/iYPDtPvY+nzhri/jDy5/W6AuwA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAa2p1UYo5adbz+xbxMlvqJ1OqjDHLXree0ejmzNrWm953tPmTPWbWneZ7yoy5YhjrXXTjH8s75N
mtkyxt0VZM2/m175N1V03yTKubMLXVXybeYLLX2VXy7eam+b0bOg4VquJW+rry4/O9uyZOq3UjVm
9r25axMzPaIdvhns1kzbZddM0p5Y47z8/R2+HcF03Doi1a8+Xzvbv+TotJnjDXkt+K8ODHp8cY8N
IpSO0RCwF2YAAAAAAAAACvUZYw6fJkntWN3k8dfHz2vLucdz8mkjFE9bz1+UOZosX1UzPm0nqI/W
MYo9FlcPNklfFGeH/NshLGun+Cz6PtHZtVZWlRLS+jxPkRpIn7rdoupHTdA5s6SI+7H6Mfo+32Y2
+To3neSIiZ7A0IjPXpXLePlMotGW3272t85datKzHZjbTVnsDj+FG/2Y/RlGP4R+jo20u7H6N1Ql
o+H8I/REY957R+jpfReiK6eOYHLtj2tttH6KrY/6Y/R2c+kjeJiFVtLG24hxpw7/AHY/RRkw9O37
O99Hrt1YX0tfOBLjcGp4XF8c+u8fs9c4dcVcGemSI61nd3IneN1orQAAAAAAAAAAAAABFqxes1tE
TE9JiUgPKcX4RbRXnNgiZwWnrH4XPi28PdXpW9JraImsxtMS8pxXhF9DecuGJtgmf+1TWW2N/la1
L7N7T5e3Vy6W3hsYcvLbqzbO9jvvCzvDR0+XeO7crO6FmGSvRThy/RtVXJ92elvk2rRvDUzU7pl4
izsd2J3jeBpcNz+Lg5LT7+Pp+Xk3W7js5eAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADs0NTrN96Yp6edkW8Wzm6+LNTq4pvTHO9vOfRoWtt
1mes95YWvs1s2fZldddOczLPLn2ju0MmebT3YZc2/mpm3qqllN1drsbZIhr3yzvtHf4AsvlYYseb
V5Yx4KTe0+UQ6nDvZ3UazbJqd8OKeu33peq0eh0+hxcmnxxWPOfOfm0mP+steT/ji8N9mKY9suum
L37+HHaPm9DSlaVitKxWsdohI0Y22gAgAAAAAAAAAABXnyRhw3yT92Nwef4xm8bVzET0rPJH5d12
CvLhho3rN9RWs9Z23n5y6O21YhrVYbdGOCfrrLPJRpv863zVS6FS09SvZj3lVZZRdPSqmnSWdrIE
ebOkK4ldTsgW1WKqd1oMZhEVZyRAImOjGI6rJ7IiATNd46qL02bHkiaxaoNGY2n4ImPgtyV2n0Vo
Gvlx7x2beiyTk08RPevSVUxux00+Fn2n7N+n5rRFb4AAAAAAAAAAAAAAACLVres1tETWekxKQHlu
L8InR2nPp43wz3j8P/s5dLveWrFqzW0bxPeJeV4xwmdFec+CJnDM9Y/CrY1xv8qvTZ+WYdbDk5oh
5zHk283U0eo3jaZZ2N5XYjrCnLSJhOK+8d1kxvCqzSwZvousrb7k9LfJ3nB1OLeJdLhufx9LEWn3
6e7LXN9Ofy5/W4AuxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAETaKxMzO0Qi9646Ta07RDmZ9VbPbaOlI7Qi3i+c3TPUaqcu9adKfy0722ZXvFa9
XO1OrjrESxt66ZJmcjPUanlidmhkzTZVfLN5VWvsC2b7R3U3yqrZZtO1esz2h2+F+zWTUcuXXTNM
feKR3n5+iZLVbqRzNJo9TxHLyaekz62ntD1fDOA6fQbZL7Zc/wCKY6R8odLBgxabFGPDSKUjyiFj
SZkYa3aALKAAAAAAAAAAAAAADQ4pl2pTFH3p3n5Q33E12Tn1eSfKscsLZ+orS00eJqbW+Lfnu1tF
XaJnZsz3WpCfsyp00fWSvmPdVYOmSUDd8kR3InoQosy7JmUX7MdwZ17ro7KKT1XRPRAsrO0rYndr
79V1ZBaQiJ6JgCSIJASwrO07MpV2nqBlrv1a1o2bf2qtfLXaQUTO0sb05o3jv3ZXhjS20xEphW5h
yeJjjf7UdJWNKLziyRePsz0lux1SgAQAAAAAAAAAAAAAADG9K5KTS8Rato2mJZAPIcU4ZbQZuekT
OC3afT4NXFkmlntc2GmoxWx5K71tG0vHa/RX0GpmlutJ61t6wrY2xr8dXS5uesN+tt4ef0eaa223
2dnHk3juyreM81OaFGiy/RtZET9jJ7s/2bdutd2jqKeic3iNTsd8a2h1H0jTVtP2o6W+bZbOO+gA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABje9cdJt
adohGTLXFTmvO0fy52bJfU23t0pHaqLeL5xdK9Rnvqb+cUjtCi94xxvK3JetKuHrdZvaa1ljb10y
cnIs1Wt3naJc++TmVWvMz1YWybfMGdsm3eWek0mo4jm8PT0mfW3lDf4V7P5tdMZdRviwfvZ6/TaX
DpMMYsFIpWPTzXmf+steT8jn8L4Dp+HxF77Zc/4pjpHydYGjC3oAAAAAAAAAAAAAAAAADG9opS1p
7RG7zszN6WtPe0zLua+3Joss/wBOzhzG2OsL5+IrY09dsSyYRijbHEMvOChb7KjF0yS2LQ169Mso
S24noyrPVXWejNVKbTuw3T3REdQWU6LYlVvsyiUDPfqupPRr79VuOQX1lZEqoZxIMksd0gT2VT0l
bPZVbuCaW8i8bwr32WxbcGnkjaZa9p2ndv5qbw5+aNugLItF6TEtvTX5sMb969HMpfazc0d9stqe
vVZDdAQAAAAAAAAAAAAAAAADV1+iprtPOO/2u9bektoB4TJTJpNRbHkja1Z6uto8viVht+0HDvpG
H6Tjj6zHHvbecONw7Ltfkmeqmo6Ma69DXbbZTkr1mGWO3RneOaGbZRoM30fVzSelMnT83aef1FZ7
x3h1tBqfpGnjmn369LNc3sc3kzy9bQCzIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAa+q1dNNXr7157VhGp1Xh70x+9f9ocy283m1p5rz3mVbrjXHjt91lz
5c9+fJ1nyjyhdM8lZlOOIiqrUXikd+kMreunnI5XEdX4dZiZcG+XmtNl/F83PeeWWHDOGanieSKY
q+5H2rz2hMzWd1Iqx1yajJXHhrNrW6REeb1nCPZumn2z62Ivl7xTyr/6uhwzhGn4Zj2xxzZJ+1kn
vLoNJnjHW7TbbsAszAAAAAAAAAAAAAAAAAAAAaPFrbaSK/itEOXt0rDf4xb/ACa/GZacRvaF58Q2
IjasQnzPIhCU92tMbZGzHmotG10C6nZkwpPRmipIllEbMIZIE7solgmJBnCyk9VMM6z1BtVllEqK
z0WRILYlluriWcSDJVbusV27gwInaSWM9ECyZ3hqamnSWxFmOSOaqRx725bNnSZNs9J+OynVY+WZ
YYr7TE+nVaIr0Ais81Yn1hKAAAAAAAAAAAAAAAAAABExvG09peU4nov9n66L0j6q/WPg9Y1OJaON
ZpL0+9HWs/EWzeVz9PbmrEtnyc3h9reHy26TWdnSr2YX6657ijLXpLX0+onSamL/AHJ6W+Tbv2aW
ekTv16JzeI1Ox6KJiYiY7Slz+E6jxdN4dp3vj6fl5Og2clnKACAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACZ2jeQRMxEbzO0Q08uqtkma4ulfO3r8lefUePMxWf
cjy9WvlzVxV6T1Z61/x0Y8f7Wc7Ur1lqVy+LqOWJ2hp6rXddon5rOF1tfmz5OkT0qzb8dWbxjp1c
biuuilJ5Z6r+IcQrixzEy8zl1E6rNt1tMztFY81sztU1eRucN4ffi2p5esRM72n0h7rS6XFo8FcO
CkVpX082nwXh3+z9FWLxHi36328vg6TZyW9ABAAAAAAAAAAAAAAAAAAAAAADj8Unm1tK/hqppHvw
y1k8/EMk+m0GOPeafiFpCZYwolnXspvHvLa9mF46gmnZmwozRUiUCBKYYsoBLOFbKAX0llEqqyzi
QXRLOJVRLOOwLIljZMEgrlhKyYYTAK5nZPN0RZjugUanHzVlz6xtLq361c+9eXItPpXX0dubTU+E
bL2lw2++O1fSW6m/VYAISAAAAAAAAAAAAAAAAAp1GbwcfTreelYEydcuMcRrM/L9nnlsV6wqpi2r
tv133mfWVkRyRtEdGFva7MzkYZNoamWN4bV4mYa9qztKIujhVppxGI8r1mJegeZpknBqKZY+7L0t
LRekWrO8TG8Ns/HJ5ZypAWZAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAADS12fp4VJ6z9qVuq1HgUiI+3bpDl589cOKZmevqprXPTbx477rDJlrhr1nq4+s182tMRP
RqaziXiZJrWekNG17ZbxWJ336M5LXRbI3dLTJrs07RMY6fan1dHLrowY+X7MVjt6N3R6Kul0EbWm
s7bz8Z+LnabQX43r7Y53php/mXj+Dnv0f1JO1x/8ZxbUzj02O15mfLtD13AvZqnDds+pmMmo26el
XX0Wh0/D8EYtNjilY7+s/NstpOOTW7QBKgAAAAAAAAAAAAAAAAAAAAAADG88tLW9I3BwJtz6nNf1
vK/DHVqYJ3pzT5y3MPZeojOWMQylEKpTVjZnDCwkqzYQyRRICATCITAJZQxhMAshnEq4ZQC2srKq
qrIBZCWNZZgwswmFloVyCu0dFcx1WyrtCBhv5NTPHXds2U5o3hIz4ffbPt+KHUcTSW5c9Jme0u2v
VYAKpAAAAAAAAAAAAAAAAYZctcVOa35R6tLrltN795/YvknNqrfhpPLH92V5isd9mWq6fHjk6rn0
ZxG8KK5Jm/wbVZiYZtqrmkqL023bkxvCiY3lJHNyRG81mHS4Rn5sNsNp64+3yaWaNrzOzHBl+i6q
mT7s9J+S+ay8mex6EIneN47SNXKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAImYiJme0JafEs3h6fkidrZOn5eaLeJk7eOdm1Hi2vmtPTry/CHmOJcUvmvOPF1n09Pm
6HF9ZGm01qxO3R5vSY7XwzmzTy47zzTEd7en5Mfvt2/PURWdo3tvPrPlKymbktFqTtMTvHzbOLDG
f63JXbFX7FdnoODcDprZpq9TjiMMTvSn4vj8l5fxnrk91saPSa7i2hpOfbTVt5x1m0fLydzR6PDo
dPGHBXasd585n1lsRERG0dIF5OOe6tAEqgAAAAAAAAAAAAAAAAAAAAAAADX11+TRZrf0y2Gjxe22
gtH4piP3TPpXKwxtjhuYo9xq442iIblI2pC1RET2ILd9kxCqRjZmwlCSEohIJAQAAJZISDKGUd2M
MoBnVbVVCyAWVWeSuqyOwIlXZZKue4MJV2WWYT2QKbKL9YlfdRdIo35b7/Hd3KTzUrPrDh27uxpb
c2mpPwX/ABX9XAKpAAAAAAAAAAAAAACekTIp1eTwtJmv+GkyJn1oafeazbfpMzLR4jq/o8b823zX
6XNF8ERCvTcNpxLV5LauvPhx9Irv3lhztdtv8TtaWLicXrt03jzjzb2k1nid56ty3s/w+a7Uwzjn
1raejlarhmbhl/FpbxMO/fzj5p/ixSeXOvTtRfeI280ZI26tfDm3pWe63LaZx7qtGvniJ6tPLvOK
fOa9WzbJvTbza02jl3n5SSljscK1MajSxWZ96nSW88xw/VfQ9XMT9nfa3yemid43jtLeXsce88qQ
EqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADia3UTm1l4j7OP3Y/u
7Vp2rM+kPJW1PhYcmS0+9MzKm/jbwz31weMzbV8UppazPL9q0/BF4rk1GLDSNqxPWPhCnHmnNrtT
qPKteWPm6U6OdHaZvO+SaRNvhv12Ub/q3FhtrNVj0uKOt56z6R5y9zix1w4qY6RtWsREOJ7L6OKa
S2rvX6zNM7T6Vh3mmZyOfya7eACzIAAAAAAAAAAAAAAAAAAAAAAAAAAczjVvqMVfW/8AZ03I41bf
Lp6/OVs/UVrY47NyOzUxd4bUJpEbb3Z7IiOrKIVSjZhMLJYyhKIgmGUQSDESIEbJEgQmCITEAmGU
IiGUAyhZVhDOoM4Wx2VQtqBKuyyWEgqlhKyyuyBVaGtkbNmvk7A15l1eH2300R6TMORPSXT4ZO+O
8fFefEX63gEAAAAAAAAAAAAAAAq1WPxdLlp+Kkx+y1Fvsz8gjhaDauGK8sx07y3OE3m1tT6RaP4c
vU6yMNKUx73zT0ilY3l2eF6a+m0kRl/zbzz3+Ez5M8z26fJruW6wzYq5sV8d43raNpZjRzPPaTmx
5b6bJ9rHO3zb2WJ8GWPEscY9bgzxH2t62n19GWW0eHOzHU5XbjXZ1x8WTnz2iZ7S2M1IjH2+LX0V
KTqs8zO9ot0j8nUthi1J3UaOFMTfLFo6xMbS9BwHWTqdHOO8+/hnln5eTjYMFo1WTH5VnePzXcIm
2k4zlpPSmXy/hfF5eMfJns69OA2cgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAADG/2LfJ874rW845mubliY7bPoto5qzHrDz0+yePNF41OotaJ7RWNtpV1OtfHqZ715fhu
j8adNpcVfeyzE2/vLuanhOu1nEctIxTTFa/+ZPbZ3eHcF0vDbTfFE2yzG03t32+DokynXl9+leDB
TTYKYccbUpWIhYCzEAAAAAAAAAAAAAAAAAAAAAAAAAAAAcXjE/4zDH9M/wAu04XF5/3jj/0f3Wz9
RUYmzDWxS2I7FSyjuzY1ZKpRKEygEwiWUIkGIk2QJNhKQhMIhkCYZQxhlAMoZwwZwgWQshVCyATL
CWc9ldpBhZXLOVdpQK7NfJPRdaWvknoDVvPvOnwuel4+TlXn3nS4VPvXj4QtEV0wAAAAAAAAAAAA
AAAAAVV02CmTxK4qRf8AFFeq0AAAanEsfPpZmO9Ji0NDLfkwdOsulrumiyzHlVzJrz4Ovoy26vB8
cTBa9NffLtMY77Rv8Yegx5ImkKdJoY1HC81Y+3OSbVn0mGGkmbY45u6tnrrTOu2xGO0RxCd+nNVj
qKxTV1vH2pjaGtnyzXXYdo96ZmGXEMk15b7/AGZiVerWPTYckZcNbx5wzc7hGbnxXxzPWk7x8pdF
0S9jh1OXgAlUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAcPjEf4/FP9H93ccXjMf4vDP9Mx+62fqKrx+S+GvibEFSsqyYwlVK
ZYsmIMoRKYJQIPIEiQ2ATCUQygCGUIhMAyhnDCGUIFkLIV1ZxIMpVWWSrsCuyqyyyq09ECq8tfJK
66jJ2Bp5J6upwn7dv9Lk5J951uE/av8AJaIrqAAAAAAAAAAAAAAAAAAAAAAq1Mc2myxPnWf4cmtu
XT9fR0tffk0WSe28bfq5Wbamm3326MtunwfK6PCv/AxPraZ/dz9PO97/AOqf5dHhdZrw7Dv3mOb9
XOxRFM+avpe38mvkPHf/AFWlrKba7Tzt99ZxKkfR7euyNXMTrtPHfa0z+zPiM/UR8Zj+Wbdu8HpN
M2bfzrV13M4dO2pyR61dNvj44/J/oAWZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADj8bj63BPzdhyeNx0wz8ZWz9RWri7Nmv
VrYu0NmqaRZHZlDGGSiwxZSgCEkCBCQSCQBMJRCYgEsoYx3Z17AlMIhlCBnDOGEM4AlhZZKq4KrK
7LLKrIFN2vdfZReAaObu6/CO9vk5OePR1uEd7fJeIrqAIAAAAAAAAAAAAAAAAAAAAGtxCk5NFliI
3mI32+XVyNTyZOHTee946PQKPoeDffw4777eW/yVs60xv+ZxOnr4Okx1t05KRv8Ao41Z5q3yed5m
XY1szXRZ5jvFJ/hxItP0aOSN9q7yrtr4f2tHFM5+KT16Yq/vK/iGSbXw4vO14UcPx5MGfNbPG18m
1oj4THRsTw7VanPXVYpi3gzMcnrvCnG11JOupwuN8+a3pEQ6jT4divjxWnJExa09pbjbM5HHu90A
JUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAHM41H1GOf6nTc/jEf4Ws+lls/UX45uGekNujTwdm5RNIthKIZKLDFlsiQIShIC
EgCUJ7AmGTGO7IDzZQhMSDJMMYZQgZwzhhDOATuqssmVdgVWVWWyqtCBTeVF19lF+wNLNG7q8I+9
8nLyupwnt+S8RXUAQAAAAAAAAAAAAAAAAAAAAAAItWL1mto3iY2lyrcLyUxzix2ia2nvPeK+jrCL
OrTVnxpanhuPPemSs8l6RtE7dJj0ldpNP9GwRSZ3neZmV4cR/Vs4AJQAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANHi1d9H
M+kt5ra+vPoskfDdOfqK4mn7Q3aNHBPZu0W0RdDOGFWcKLCJZeTGQQlCQSgASBsCYZQxhlAJTAmA
TsmAgGcM4YQyjsgRLC3VnaVcgwsrt3Z2V2QK7tbJ1bN5a9waeWO7p8Knt8nNyebpcK8vkvlFdQBA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAK9RXmwZI+ErEWjesx6wQeZwejeo0cccuW8
elpblJaaRGxVnCuss4ZrMvJEgCAASISCQIBlCYYpieoM0wx8k7gzIRueYM4Z79FcSy3QEsLJmWFp
BjaVVpZWlXMoGNmvkXXlr3kGtknu6XCf7OXkl1OEdl8orqgIAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAHmskcmtzV/rls0U62OXiWX4zErcc9GmkRfWVkSqqziWayxCPIANwBIhIJSxS
CRG6dwZwlhEs4BluMdzfqgZxLLdXuy3AmVdpZTKuZBjaVVpWWV2QlhZRdfZRcGpl7urwfrzfJy8r
rcH61vPyWitdMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHA4nHLxKZ9awnH2ZcY
jbW459aq8fZpfiI2IZwrqzhmsz3Ebm4JN0AMhCQSIASndiAziWUSriWcAyRujc80DM3RCfIETLCW
UsZEsJYSslXZAwlTddPZTkBp5e7r8Gj6rJPxhx8k9Xa4PG2C8/FaK10QAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAcfjcbZMFvnDWx9m5x2PqcNvS+zSxT7sNPxH62YZQwqzhRZO6UCB
KUAJTux3SDIRuAncQAmJZRLBMSgZ7iIAZRKd2DICUSlAljLCYWMLIFVukNfI2bNbIDTyT7zu8Ijb
Sz/qcG/2nf4T/wCE/wD2WnxWt4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHL9oL
+Hw2cm28VvEuPptfgyVj6yIn0no7/FtJfW8NzYMe3PaPd39d3iMug1WktNc2C9dvPbeP1aZ9xF+v
T471tHu2iflK2HkqWmvaZj5Surqc9Ps5bx+alTHqYHm68S1Vf/NmfnC2vGNTXvyT84Ql6A3cSvHM
sfaxVn5Ssrxyv3sM/lKB1xza8bwT3pePyWV4tpZ+/MfOEjfGrXiGlt2zV/PotrqcN/s5aT/+wLRj
FontMSlAlKEgndO6IAZQljDIEgeQljLCzOVdkCu/SGrkbF56NPNeKxMzMRHxENe0+89DwuNtHHzl
5PJr8NcnLW3Pbf7r1nCZm2gpae8zMrz4i/W6AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAETETG0xukB4HVaeMHEtRi26RedvkyjBSfX9W77QYvC4xz7dMlYlrU7M929dWJLFc6aPK0q
7YLxPS0S22FlP6q38Zac0yR92s/KVc3tHfFf8tpbcsLRvB/dR/8ALLVnU0r9uL1+dZI1mnmdvGpv
6TOy6ym+Oto2tWJ+cJ/tW+KLK5KW+zes/KU7tG+h01p64qx8Y6NXNo6Y+uPJlp8rLf0rfG7MXtHa
0x8pZxqs9e2a8f8A7Oj7HaTHn0+f6RWM23LETfr6vRW4PoL99NT8ui7F4+vEdXXtnt+fVbXjGsr/
AOZE/OsPS29nuH27YrV+VpeV9pdPXhOtw49NG9Mld55+vXcTPd42I47qo7xSfyWV9oM8d8VJ/VxM
d8l46xWF9cV7en6o/qLfxp2I9ob+eCv/AHMo9op89P8A/wBORGmyT5R+qfo2X8P7n9Q/jTsx7RR5
6ef+4/8AuHftg/8A6cWcOSO9J/WEbWr3pY7Efzp2Lcfv5YK/9zWy8d1E/ZpSv5Oba1/+Hb9lc+LP
bFt87I7E/wAabWbiurvEx4nL/pjZzc2bJkn372t85ZXx55/BX85lucC0vPxnTxlnnjm32mOiZqUu
LJ2p4TwnVavNWaYbRTfre0bQ99pcH0bT0xb78vmtiIiNojaErMwAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAHnfarF7umzRHaZrLjYrdIen9ocPi8JyTt1xzF4eUw23rCm3R4r6bMy
wt6kdTaWLdjswmNoZontsCm0K5XWjopnuDC0dGpqG5bs08/daKV672MjbSaif6oh6Z5f2LtvptRX
0tEvUN3Jfo8f7cYve0eX4zV7B5z20xc/C8eSPuZIRficfXlcPaG7ino08HWIbePpLF2NuiyOyrHK
3fZFSwuovHVfaVF4QK5YWTM9UT0EKry6Ps1Tn4zjn8NZn9nOtLseydObiWW34cf918fWfk+PYANn
KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAq1WKM+ly4p+/WYeBxTNd6zG0xO0
vobw3FcP0bi2em20Tbmj5Srr418V9sa2Z7qKyzi07MXUylhaU7yjqhLCeiq3ddaFNxFYW7NLNG8t
zya+WO6Va9J7FW66mvwidnrXiPY3Ny8RyUn71Jj9Ht3RPjk19HK9pMHj8D1ER3rHN+jqqtTjjNps
uOe16zAifXzfTz7kNyndpYazS9qT0mszDdoxrsi6m8LazMq6zDOsq1ZEyrt1WWlXaUCqyq0rbKbi
Fdp6PReyFd8uqv8ACsfy83aXrPZHHto89/xX2/SP/dpj6y8vx6EBq5gAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAB5n2q03LfDqqx39y39npmlxbS/TOG5se29tuavzgWzeV4mtui2
O3RRSY2hdVhqO2MvI36iu9lUsrSrvDHn6spnmSiq5jooyV6tq1VV69RC32byTh43h8otMx+r6I+Z
aK/g8TwX7bXh9Mid4iW+fjl8n1ICWb57xLBOm4zqse20Tbmj8+qKdnS9q8PhcTw5tumSm0/OHMxz
0Za+uzx3sX1t0Zxurr1ZxvspWiZYWZbsbT0QK7KLrZVZJFaqt5vbezNOTg9J/FaZeJns93wCvLwb
T/GJn92uGHldIBowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADuAPA67F9H4l
qMW20VvO3yRWW97T4fC4rXJHSMtI/WGhVlue3b473K2KzMML4+62tujG9pnozXaOSOVFMnVbmq1t
trJRW5E7wwvUxTvCyY6CHOt7moxz6Wh9PxTzYaT61h8x1MbZK/OH0zTf+Fxf6I/htj45vL9WgLMn
mvbPFvocGWO9L7fq85p5maw9d7VYvE4JkmPu2if3eW0+PasdFNOnxfF1Y2hlykRsmY+LJ0MZjZXa
eq2eyi8oQTO0KLdZWzPRjWu6VaqtHR73g0bcI0sf0Q8Nkq93wqNuFaWP+XDTDDytwBowAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAef9q8HNpcGaI60vtPyl56k9Iew49j8ThGe
PwxFv0l4zH2U26fDfTYiyJljvsjf4sm6vJ1hrXjq2MkqLdZEVbgbMx0auGdmzNt6iHN1Ub5af6of
TdPG2nxx6Vj+HzaaTm1+nx/iyVj930ysbViPRrj45vL9SAuyc7j1efguqj+jd4/T33rD3HEcPj8O
1GP8WOY/Z4TTT7sKadHhbcsZnaCJ3TPZk6VdrKbTutmP0U2nqgrGOsr8deiuI2X09EqKM1dt3uuG
f/jdN/06/wAPE546S9rwud+Gaaf+XH8NMMPK2wGjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAABrcRp4nDtRWPPHP8PCYusPoWSvNjtX1iYfPuWaXtX8MzCuvjfw32siu8ptXoxi
0wy5t4YulReqmazu2skbquURWFInddM7VYRGyL291KFnCcfj8e0le/Lbmn8n0N4b2Ur4nHLWmPsY
5e5a5+OXyXugBZmiY3iY9Xz7NjnTa3Ph/BeYj5PoTxftFg8Hjk2iOmWkW/Psrr418V5WrWd2faFc
V2jdnEMXWxntupmN7NiYU27iWML6dVMVnddjgVqMsdHr+CW5uE6f4Rt+7yuSsTDv+zWXn0WTHP3L
/tK+GHl+O0A1c4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Dn93W56/wDM
t/L3z59qp24jn+OS38lnpr4r7ZxHQ2TEstt3PXUrt27K57rr1VT0BjKnJPRbMqMs7QlV2fYvHvrd
VknyrEfu9m8f7FZI8fVU85iJewbT45NfQBKo817W4eulzxHaZrL0rje09ItwqbfhtBVs3leai8RD
KLw1sduesL606dWFdsZT1jdhNeq6K9DlhCVUU6s4jZnt1YzAhnM71dH2bycmszY/K1d/0c6OzY4R
fwuK4p8rTstn6z8k7HrwGzkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHz3
Vxvr80/8y38voTwGpj/F5/8AqT/JfjTx/WVeyY6FPspc9dZPVXaOq2WEwIUTVRmjo2rNfLHRI3vZ
DJycXtX8dZh7t879nsnhcbwz23tt+r6I2nxyb+gCVBzuPY/E4PqI9K7ui19fTxNBnp60n+Aj5/pJ
3jZu1aOnnltMNussdfXbm+l3ZM9URHREdZVXTuT1Nk7boQiOkJw28PU47/htEp5eivJPLMTCZ9Vv
x7mJ3iJ9UqNHk8XR4b+tIXuhxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD
weqjbWZ4/wCZP8vePCaz/wDIaiP+Zb+UX408f0r9lOxWOifJhXWjfyYWllPRXYQxnrCrJHRd3YZI
6A1NJecHEsN/S0T+76bE7xE+r5dk93LW3pL6ZpMni6PDf8VIn9m2fjm8s9rgFmQxvHNS0esbMiew
PnHLyai9fS0w2aNfUTtrs3+uf5bGPqy068fF227KtSsdFlKqNGMV6myyY6sbdIQI8tlOWOi6Jhhk
j3RD0vA8nicMx9etZmHRcT2Zyb6XNT8N9/2dt0T449T2AJVAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAHhdfG3E9TH9cvdPEcXjk4zqI/q3L8aeP6xr2TsxpLOekMK6mFo6qpXSrm
OqBixvHSVmzC4OfqK7S9/wAByeLwbTW9K7fo8Fqo6Paeyl+fglI/Da0NcMPK7QC7AAB8313TiOf/
AKk/y2MHWrX4jG3E9R/1Lfyv0/aFNOrHxuU7LI7MMayGTVlHWUXhNe6Z6wIUsb9d1m20q7dkDpez
N9tRqKT5xEvRvKez9+Xis1/FSYerb5+OTyf6AFlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAB43j9eXjN/jWJ/Z7J5L2mry8Upb8VIF8f6aGOey2eynHvOy7bowrrYSxZSwQJ2YXZ
92N4BoanrEvVexmTm4blr+HJ/aHltRHSXofYm/1Wrp5RaJaYY+X49WA0c4AD51xONuKan/qW/lbp
+0MOLRtxbU/9SU4J7KadWPjep2WQrr2WRPRk1TvsndXMpiRCb9FNu0rbTuqvKBscCjfi9PhWZeue
V9n434rafTHL1TfPxy+T/QAszAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHmv
avHtfTZfnV6VxPajHzcNrf8ABeJFs/XnMcr4no18c+6vr2YadkY2YM57sEDLyY37Mo7MMnYGlqO0
vQ+xNfqNVb1tEfs87qZ2rL0/sVX/AHdnt65P7Q0wx8vx6UBo5wAHz/jUbcX1PT78qtO2vaCnJxjP
8Zif2amnnspp04+OjWejKJ6MKdmcMmyJn4m5ZHzEVPMwtJv0VZLbQDqezcb8RzT6Y/7vUPM+ytZt
n1OTyiIh6Ztn45N/6AFlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABocbxeLw
nUR5xXm/Rvq8+OMuDJjntaswEeBxT0bNZ6NatZpNqz3rO0rqsdO3PxlaWEMpY+aqWXkryT0ZT2V3
7A0dVPuy9f7G124NM/iyT/Z4zWT7sw957MYfB4Fp4/FE2/WWmGHldcBowAAeM9qKcvFeb8VIly9P
0nq7ntbTbVYL+tJj93CwT76unR4/jo0nozhhTsy3Y1sWljM9Ce7HyQIm3RRlttVbaWrnt0Sh6n2U
x8vD8mSfv3/h3XN4Bi8Lg2nj8Uc36y6TeOPXugCUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAPD8RxeBxXUU26Tbmj8+quro+02Lw+I4ssdslNvzhzazvDPbq8d7GW7Dfqz2VzG
0s2qd+iu/Zn5Ksk9BVztX1mI8930zh2LwOHabH+HHWP2fNYp4+vwYvxXiP3fUqxtWIjyjZtj45/L
faQFmQADzftfj3w6fJ6WmHmsP23rvaqnNwqLfhvEvIYZ+sV038bo0noy36MK9oZQxrdMyrlnMbMZ
QKrS1M07zEestq/RRjr4utwY/wAV4j91p9V18fQdJj8LR4ccfdpEfsuREbREJbuMAAAAAAAAAAAA
BAJAAAAEAJEAJQAJQAJEAJQAJQAJEACUJAQlAJEAJQAJQJAAAEAJEAJBAAAJAABAJEJAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwvanDzaPFmjvjv8A
tLztJ3h7HjGHx+FainnFeaPnHV4vFbeIU038VbHeGF+kso7Mb9mTdhKnLK3dRm7SIrHhGPxeP6Sv
9cT/AHfSnz72Zx+J7Q45/BWZ/Z9BbZ+OXyfQBZQABzeP4/E4NqI9Ii36S8Ng/wAx9C4jTxOH6ivr
jn+Hz3B/mQi/GvjdCnWNlsdI2V07LIlg6USrt2ZzZXMoFV+zPhGLxeOaavpbm/RVltEN72Yx+Jxm
b7dKUmf7L5+s9/HtRA2cqRACRACRACRACUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQCQQCRACRACRCQBCQBCQB
ACRACRACRACRACL1i9LVntMbPATTwdRkxT3pea/u+gPE8Xx+DxrPHlaYt+qNfGvjvtXXsi0dOrKk
dEXjZg6VMtbP2bMtXUdpEV0/Y2nNxbNf8OP+727xvsXH+N1U/wBEfy9k3nxyb+gCVQAGOWvNivX1
rMPnGGOXNNfOJ2fSZ6w+dZKeHxDPX8N7R+6L8a+L63KdoZ7q6zvEMpnowdKJ6ywmWUyqvIKM0vQ+
x+D6rU55+9aKx+TzWa36vbezmDwODYenW+95/Nphj5L6dQBo5wAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAEiAAAEoA
AAAAAAAAAAAAAEAkEAkRuAkQbgkQAkQAkQAkQAl5T2nx8nEMOT8dNv0l6pwfarHvpcGWPu32/WCr
YvK4mOem6b9mGKd4Z3idmFdka0y1c892zfpMtLPaNpEV6D2Kj/Eauf6YeweQ9ieuTVz8K/3evbT4
5NfQBKoAA8FxCvJxrUx/XMvevD8Zry8fz/Haf2RfjTx/6RSOnRMyypHu9kXjowrqVSrvPRnZVl6V
kK0775MsUjvadn0nT4ow6bFijtSsVfPuFYvpPGtNTy54mfy6vorXDm8l9pEC7JIgBIgBIgBIgBIg
BIgBIhIAgBIhIAgBIgBIIBIAAhIAhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAAAAAAAAAAAAA
AAAAAAAAABAJQkAEAAAAAAAAAAjc3BIjdG4Mkbo5kcwMjdhzHMDPc3V8xzAs3N1fMjmBZubq+Y5g
Wbm6vmOYFm5ur5jmBZubq+Y5gWbm6vmOYFm5ur5jmBZubq+Y5gWbm6vmTzAz3N2HMnmBlu5ftFTx
OEZJ/DMW/d0t2rxKni8N1FPWkiZ9eS08e7Cy8dGGn6UhZaJljXZGnmc3UT3dPP2cnUT78xCIV6j2
H/8A9c/6f7vXPI+w8bU1U+vL/d63du5NfUiDcVSIAS8b7RV5eOb/AIqRL2TyXtNX/e2KfXH/AHlF
+NPH/pr4+2xcxx0hFpY11K7R16KM32ZWz3UaidqSgrc9kcPicWyZJjfw6T+727y3sXh2xarN+K0V
h6lvPjj3e0ASqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJQAAAAAkQAkQAkAAAAAAAAAAAAAAA
EgAAAAAAAAAAAAAAAAAAAAAgAAABKDcAN0bgkY8xzAyRux5kcwM9zdXNkTcFm6OZXzMeYFvMibKu
ZHMC2bo51U2RuC2bom6rc3BZzom6sBZzI52ADPnOdggFnMc6skFnMc6rc3BbznOp3RzAv50c6nml
HMC/nOf4qOY5wX85zqOc5wbHOc7X5znBsc6edr85zg2ec52vzpi4NjmY5bROG+/bllVzsNTk5dLl
n0pP8BHmMHWNmzt0aum8obm08vVjfrtnxztR0mXHzTvaZdjVRMTLkZo6yiFen9iZ2pqY/wBP93rN
3kPY+/LfPX1rE/u9XzN3HfqzdO6vmTuIZ7m7Hc3Bnu8t7TR/vHBP9E/y9Pu837SV31umn+if5Rfi
/j/01MMb1hjkrtKzBG0bMsmOZY11tOYamr6Und0LUc7XT7u3rJPqL8er9lcPhcFpbzyWm39v7O00
+FYvA4Zpsc94xxu227jv1IAgAAAAAAAAABKAAAASgASgBIgBIgBIgBIhIAAAAAAAAAAAAAAAAAAC
UACUJAAAAAAAAAAAABIAAAAAAAAAAAAAAAAAAAAg3AEbomQZbo3YzLGbAz3RNlc3YzcFs2YzdVN2
M2Bdzom6nmNwW86JurTAMuY3REJ2BB1ZRVMVBhsbSsiqeUFXLucq3lTygp5TlXcpygp5TlXcpygp
5TlXcqOUFXKjlXcrGYBXysdlswiYBVMdUTCyY6sZBWxlnMMZgGLGZZSwkDdHMiWO4MuY5mEyjcFn
N1OdVzHMC3nTzqeY5gX85zqOZPMC+Lqdbk20eb/RKOZr8QybaK/XvtH7iZ9aGlp2luzT3fg19NHS
OjbmPcYX67XH1XSZ9XIzRvMuzrK7zLkZYmYnciunb9lZ5dTk+OP+71cXeP8AZnJ/ip2nf3J/l6iL
/Fu5L9bMWZczXi6YuIbEWTzKIuyiwLt3nuO25uI4a/hx7/rLuczg8TicvFLbfdpEK6+NPH/phhjo
stLGkctUWnoxrrU3j1cnWTzZq1jzl1clo5Zcu8c+txR63iP3Tn6pv4+g4o5cVI9IiGe7CJ2iE7t3
GyN2O6dwSINwSISAlAAlACRAAlAAlACRACRCQAAAAAAAAAASgASISAAAAAAAAAAAAACQAAAAAAAA
AAAAAASAAAAAAAAAAAAAAAAIAAAQCAJljuljsCJlhMs9mOwMJYys5TkBVsjZdyHICrZPKt5E8oK4
qmKrOVOwMIqyirPY2Bjyp2ZbAI2NmSARsbMgEbI2ZAMdjZICNkbMkSCNmOzJEgx2YyzljMAwlhKy
WEwCuWErJhhMArlhLOWEgxljMpljIImWMyTKJA3N0IBO5vux3NwZbnMx3NwZczT4jf3MdPW27a3a
fJOq1XNP2KdIRfi+J2trSYfcjeF+Wm1OicVeWIiN9kai8xjY12ORqultnI1Ecsujq79XP1FovWYI
rTgeq+j8QrWZ+3Mx+r2UXeC0WG2Ti2kiN5mL807eUREvbzbaejefHJv62Iv8WUXa0WTFhVtRdlF2
rz9WUXBtc7jR9dqc2T1ttHyhvZMvJitb0jdq6XHNcNenWVN3028U99WRj6Kb02be3Tq18/SN2Lpc
3UdN9nOmZrqKX/DaJ/d0svvTLRzV3jomK6+Pd1vvWJj0ZczT0mXxNJht60hfFnQ4qu3N1cWTEgs3
Tur5k7gz3N2O5uDM3Y7m4MtxBuCQASIASIASAAAAAAACRCQAAAAAAAAEoSAAAAAAAAAAAlAAlCQA
AAAAAAAAAAASAAAAAAAAAAAAIASgAAAEJAQJQCNkbMgGOyOVnsAw5TlZ7GwMOVPKy2NgY7GzIBGx
skA2AAAAAAAAAAQkBAEghEskAxYzDPZGwK5hjMLJhjMAqmGEwumrCagomFcw2JqqtUFEsLLrV82F
o7gqljKyYYTGwMZRKUSCAQAboJnaN5Bjkneu0d5W4ccViIiOzHFWbTzNumP1Zarr8eeRMbxDW1Mx
NO67NbkhzNVnmInqzaOZrL93JyZeV0M1++7S02jvxDWxhxx033tPpC8Z6rrezWjmZyazJG2/u03h
2vFibTHoqvamiwVwY+nLGzV0+SZ1Mx8G0/45tOhzJ5lXMc3UVXRdlF1HP+iYsDPLPPy49/tz1+Te
pSIr0ho6ak5Ms5J8o2q6NImOrHV7XX488ypzTtHXo0s9t6zG7c1G1qz6ubeZiZ3UatXJG3yauSO7
cvMTEx5tPLb3prPRMVr0HB8vicNxf0+7+kt+LOJwTJyY/Bnz3tH93X36N58cWvq6LSyiyndMSlC7
mZcymLJiwLosmJVRLKLAtiU7q4lMSCzc3YxJuDMRuAlKAEgAAAlAkAAAAAABKAEgAAAAAJAAAAAA
AAAAAAAEgAAAAAAAAAAAAAkAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAhIAAACAAAASgAAAAAAEAAAA
hGzJAImGMwzQDDZjNVuyNgUTVhNGxysZqDVmiu1G5NN2M4waM0+DCaN2cbGcQNGaMZq3JxMJxA1J
qx2bU4kU09slorWNwa20z02RXHbJbl26QvtFovbHWkxEdJt5y2MOHlr2U1W3jx+1hiw8vSO63lmI
XRTaEWmtY6snRHO1VpmJ+DjavpSZl2s8b7y4HFcnh0n0gha5ebJN55KRM2mdoiPN6fh+kpwXh0Wy
RHj5Otp/s5Ps1p62y31+em9aTMYt/OfVfxTiPjZ52naI7fBrI5t66xz5+a1rW7yx0eSL6iZjtEOX
qNbSletom3lENjh2fbHzbbWt3iVozruc+5ztWubf4M4ybpQ2Oboyrva0Vjza8WdDR4OkXt3n9ldX
kaePP9VtYqctYhdvt5oivTeCZ2YOxXk6ubqMfV0b9mrljfqlFcq88k7z2U5axeItDa1OPessuC8P
ya7XRWYnwqdbT/ZMilvIu4dpslNdixXja8Y5tt85djZdbDWnGOesRtXFtuw6T27No5Kx2OrKYQlC
ExKJgBnEpiyvdlEgsizKLKollFgWxLKJVRLKJBbEp3VxLKJBnuMWQJEbpBIAAAJAAAABIAAAAAAA
lAJAAAAAAAAAAAAAASAAAAAAAAAAAAAJAAAABAJABAlAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAA
AAABAJQAAAAgAABAAI2EoBGyJhkgGPKxmqxAKpownHC+YRMdN5BrTj67R3bOn01o7p01Iv71u89o
b9a7LfBTfS1vWI2jf12VfQPSW8KX2mas+NC2iv6xMNfJpMnLtEbuuxtMRCtzF55NR5rPps1N/ctP
y6uHreE6nXZ4pak48X3rT06fB7fNeI33cbX6mI32R/MWu7XF116aDSRhxbRERs8f499bkyZeeKae
kzE2mdon81/tfxDLGOunwbzlzbx08oaHBvZHJlx48mrvaa94pu04y617576rNGLRRM0397JEd/lu
9Dw/S3x4qxffo6mm4NjwUiKY4iI9Ib1dHFY6QIaNabbrYrLfrpJtaK1rMzPZb/s+05IpP59OyLeJ
k7eNfRaOc1ue32I7fGXYpi5Y77M8OGMeOKxHSFsU3Y29deZMzirl6dlVvhLatCjJHeYQv1rXnps1
8k9/VsW6qLVmZIi1rzitlvFKRvaZ2h6TSaenC9FFY+3brM+sqeG8Prp4+kZ+lvuxPkr1mqm95nfp
DXM459676a2q1dsV7XietvNno78+CJn1cjX6mOeIm0bR33dfRU5NJjidt9t5afjG/V6JZ7I2QMNh
nyo2BhsMuVG3wAhMSbbQRAMolnE+iuGUSCyJZRKuGUSCyJZK4llEgyZMYTuCUsYSCQASISAAAlCQ
AAAAAAEoASCASAAAAAAAAAAAAlACRACQAAAAAAAAAEgCEoASCAAAAAAAAAAAAAAAAAAAAAAABAAA
AAAAAAAISAIAAAAAAQAAACASgAAAQJAQAAhIDHZhln3do7z0WS18mWsajHjmes7pg3dNi5aRMNqO
yvDHTpPRaigHZhN4hHRlaVN59JY3zRENLUavaO+yq0iNVlitJ6vNcR1MVi0zO0era1/Ea0rPvbz5
PM5MWp45qvo2GZrhmfrsnpHpHzTCseEcM/2vrr8Q1Eb4qzy44nziPN63HpYiIiI7LNHoqabBTFii
IpSNohuVxrKtWMEejPwY9G1FFmHB4mWJn7MdfnIM9JpIx15to5pbUaas/a6rqViI7MxPxqX0UT1r
O3wVzpbR2hviP5i03Y5s6a879FNtHljydhExCv8AMTPJXBnRZbz0iG5ptFjwe/l96zctMVamTJtE
yTMibu1VrdTzRMR0j0ed4lr64MVpm0RERvMz5NvX62uOJ69XhOKX1HH9bHDtFvNYnfJeOy0Z2ojX
6jjnEq6fRUmccTvN/J9H0eKcOnx45neaxEbubwHgOHg+milI3vP2resu3Wu0JQmITsmISDHZHKz2
JgFc1RMLJhGwK9iIZ7MZgEdgmAEwyiWCdwWRLKJVxKYsC2JTuriWUSDNlEsIlMAySx3SCRCQSIAS
AAACRACQAAAAAAASIASAAAAAAAAAAAAAAACRACRACQASIAAAAAAAAAAAAAAAAAAAAAAAAQCUAAAA
AAAAAAIAAAAAAAAQAAAAAACBICBICAAEJAQJQCJcLjuS2ny6fPG/LWdpd1o8T0X07SXx/e7wCdJx
Wa0jmneHQpxPDMdZmJfNtZm49weZrh0/j4o7VtSZ2+Uw0/8A7o49k92vBLc/ntFohFW9PqGXimOI
6Tu1L8T3eCx6r2t1O3JwvHjifO99v7t/Bwf2l1PXU6rS6eJ8qUm8x+so5TsekzcSjbvs4mt4rzW5
K2mbT0itesy2cHsvbvqtbmyz5xERWP2jd1tJwrTaONsOKtZ8585+cnDrzmn4Rq+IZObUROHD32n7
Vv8A0ej0uhxaXFGPFSK1j0bkY4jyZRVZVXFGUVWbGwKsk8mObekNrSW3pWf1a2aYjHbm7bNnQ1id
PW0TvuDdhJEbQABMsLW2R0ZTMQrvfbz2YWzVhpanUxEd0dWkW5c8R5uXxDX1w4pnfr5Q19XxKuOJ
2neXltVqtVxbV/RdJ715+1bypANfiOu1HENV9C0MTfNeesx2rD1PAeBYuE6aKx72W3W9/WVnBuB4
eF4dqRzZbdb5J72l160WVK02ZxCYhOwI23TsnY2BGxsnYBjsiYZsZBjMMZZSgGEolMsQDdG6NwZ7
piVe6YkFsSziVMWZRILolMSriWUSCyJTuwhMSDMRCQSI3SAlACRCQAAEoAEoASAAAAAAAAACUACR
ACQAAAAAAAAAAAAASAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAABAAAAAAAAAAAAACBKAAAAAAAQ
JQAAAhICEbJAYTWJ7wx8KvpC0BV4ceieWGewDHlNmWwCNjZICNhIDmcZredBecdpiY69FXCOLW+i
UiZidukulmxxlx2paN4mNng+K4+I8Hy2yaTfl37TXetoCPfRxfp1qi3F48ofKMvtvxak8s6LDv61
rZji9rPaLUf5PC+bfttS0q8q3p9W/wBrRMdpUZuKdN99nzvFqPbTVz7nD8OKs+do2/mW3h4D7Xaq
ZnPrtNpqz35aRaYOHY9Zk4pNt9rR+rl6zi+OnS+WN57Rv1lXp/YrNaYtruL6zNPnGO3hxP6O5w/2
f0HDuun09Yv55Le9afznqcOvO4tBreMTHu30unnva0bWt8on+70nDuE4OHYYx4Kbesz3tPrMuhGO
IjpDOKrK9YVpsyiGUQnYGOyUgI2SlAIEmwMWMs9kTAMJYzDOYRMArmGErZhhMArlHmzmGMwDE3Ts
bAbs4swj5pgFkSziVcM4BZEsolXDKAZwyhjCYBkACQhIAAAAAAAJAAAAAAAAAAAAAAAAAAAShIAA
AAAAAAJAAAAAAAAAAAAAABAJEAAAAAAAAAAAAAAAIEoBKAAAAAAAAAAAAAAABAlAAAAAAAIAAAAA
BAkBAkBAkBAlACEgMZjdjbFW8bWrEx8YWANb6Fp+bfwab+vLDKMFK9qxH5L0bAr8OPRPKz2AY7J2
SbAjYZAI2E7AIEgIEgIEgMdkSy2NgY7MdlmyNoBXsxmFuyNgVTVjNV3KjlBRNTlXTVHKCrlIqt5T
lBhEMohlFerLlBjEMohMVTEARDKCITsAk2AEgAAAkAAAAAAAAAAAAAAAAAAAAAAAASAAAAAAAAD/
2Q==`;
async function warmupBitmap(instance) {
  const b64toBlob = (base64, type = "application/octet-stream") => fetch(`data:${type};base64,${base64}`).then((res2) => res2.blob());
  let blob;
  let res;
  switch (instance.config.warmup) {
    case "face":
      blob = await b64toBlob(face3);
      break;
    case "body":
    case "full":
      blob = await b64toBlob(body3);
      break;
    default:
      blob = null;
  }
  if (blob) {
    const bitmap = await createImageBitmap(blob);
    res = await instance.detect(bitmap, instance.config);
    bitmap.close();
  }
  return res;
}
async function warmupCanvas(instance) {
  return new Promise((resolve) => {
    let src;
    switch (instance.config.warmup) {
      case "face":
        src = "data:image/jpeg;base64," + face3;
        break;
      case "full":
      case "body":
        src = "data:image/jpeg;base64," + body3;
        break;
      default:
        src = "";
    }
    let img;
    if (typeof Image !== "undefined")
      img = new Image();
    else if (env.Image)
      img = new env.Image();
    else {
      resolve(void 0);
      return;
    }
    img.onload = async () => {
      const canvas3 = canvas(img.naturalWidth, img.naturalHeight);
      if (!canvas3) {
        log("Warmup: Canvas not found");
        resolve(void 0);
      } else {
        const ctx = canvas3.getContext("2d");
        if (ctx)
          ctx.drawImage(img, 0, 0);
        const tensor = await instance.image(canvas3, true);
        const res = tensor.tensor ? await instance.detect(tensor.tensor, instance.config) : void 0;
        resolve(res);
      }
    };
    if (src)
      img.src = src;
    else
      resolve(void 0);
  });
}
async function warmupNode(instance) {
  const atob2 = (str) => Buffer.from(str, "base64");
  let img;
  if (instance.config.warmup === "face")
    img = atob2(face3);
  else
    img = atob2(body3);
  let res;
  if ("node" in tfjs_esm_exports && Aie() === "tensorflow") {
    const data = (void 0).decodeJpeg(img);
    const expanded = Fa(data, 0);
    instance.tf.dispose(data);
    res = await instance.detect(expanded, instance.config);
    instance.tf.dispose(expanded);
  } else {
    if (instance.config.debug)
      log("Warmup tfjs-node not loaded");
  }
  return res;
}
async function runInference(instance) {
  let res;
  if (typeof createImageBitmap === "function")
    res = await warmupBitmap(instance);
  else if (typeof Image !== "undefined" || env.Canvas !== void 0)
    res = await warmupCanvas(instance);
  else
    res = await warmupNode(instance);
  return res;
}
async function runCompile(instance) {
  var _a2, _b2, _c2, _d2;
  if (!O().flagRegistry.ENGINE_COMPILE_ONLY)
    return;
  const backendType = Aie();
  const webGLBackend = Oie();
  if (backendType !== "webgl" && backendType !== "humangl" || !(webGLBackend == null ? void 0 : webGLBackend["checkCompileCompletion"])) {
    return;
  }
  O().set("ENGINE_COMPILE_ONLY", true);
  const numTensorsStart = cr().state.numTensors;
  const compiledModels = [];
  for (const [modelName, model23] of Object.entries(instance.models.models)) {
    if (!model23)
      continue;
    const shape = (model23 == null ? void 0 : model23.modelSignature) && ((_b2 = (_a2 = model23 == null ? void 0 : model23.inputs) == null ? void 0 : _a2[0]) == null ? void 0 : _b2.shape) ? [...model23.inputs[0].shape] : [1, 64, 64, 3];
    const dtype = (model23 == null ? void 0 : model23.modelSignature) && ((_d2 = (_c2 = model23 == null ? void 0 : model23.inputs) == null ? void 0 : _c2[0]) == null ? void 0 : _d2.dtype) ? model23.inputs[0].dtype : "float32";
    for (let dim = 0; dim < shape.length; dim++) {
      if (shape[dim] === -1)
        shape[dim] = dim === 0 ? 1 : 64;
    }
    const tensor = Vr(shape, dtype);
    try {
      const res = model23.execute(tensor);
      compiledModels.push(modelName);
      if (Array.isArray(res))
        res.forEach((t6) => Dt(t6));
      else
        Dt(res);
    } catch (e) {
      if (instance.config.debug)
        log("compile fail model:", modelName);
    }
    Dt(tensor);
  }
  const kernels = await webGLBackend["checkCompileCompletionAsync"]();
  webGLBackend["getUniformLocations"]();
  if (instance.config.debug)
    log("compile pass:", { models: compiledModels, kernels: kernels.length });
  O().set("ENGINE_COMPILE_ONLY", false);
  const numTensorsEnd = cr().state.numTensors;
  if (numTensorsEnd - numTensorsStart > 0)
    log("tensor leak:", numTensorsEnd - numTensorsStart);
}
async function warmup(instance, userConfig) {
  await check(instance, false);
  const t0 = now();
  instance.state = "warmup";
  if (userConfig)
    instance.config = mergeDeep(instance.config, userConfig);
  if (!instance.config.warmup || instance.config.warmup.length === 0 || instance.config.warmup === "none") {
    return empty();
  }
  return new Promise(async (resolve) => {
    await instance.models.load();
    await runCompile(instance);
    const res = await runInference(instance);
    const t12 = now();
    if (instance.config.debug)
      log("warmup", instance.config.warmup, Math.round(t12 - t0), "ms");
    instance.emit("warmup");
    resolve(res);
  });
}
var _numTensors;
var _analyzeMemoryLeaks;
var _checkSanity;
var _sanity;
var _loops;
var Human = class {
  constructor(userConfig) {
    __publicField(this, "version");
    __publicField(this, "config");
    __publicField(this, "result");
    __publicField(this, "state");
    __publicField(this, "process");
    __publicField(this, "tf");
    __publicField(this, "env", env);
    __publicField(this, "draw", draw_exports);
    __publicField(this, "match", match_exports);
    __publicField(this, "models");
    __publicField(this, "events");
    __publicField(this, "faceTriangulation");
    __publicField(this, "faceUVMap");
    __publicField(this, "performance");
    __privateAdd(this, _numTensors, void 0);
    __privateAdd(this, _analyzeMemoryLeaks, void 0);
    __privateAdd(this, _checkSanity, void 0);
    __publicField(this, "analyze", (...msg) => {
      if (!__privateGet(this, _analyzeMemoryLeaks))
        return;
      const currentTensors = this.tf.engine().state.numTensors;
      const previousTensors = __privateGet(this, _numTensors);
      __privateSet(this, _numTensors, currentTensors);
      const leaked = currentTensors - previousTensors;
      if (leaked !== 0)
        log(...msg, leaked);
    });
    __privateAdd(this, _sanity, (input) => {
      if (!__privateGet(this, _checkSanity))
        return null;
      if (!input)
        return "input is not defined";
      if (this.env.node && !(input instanceof it))
        return "input must be a tensor";
      try {
        this.tf.getBackend();
      } catch (e) {
        return "backend not loaded";
      }
      return null;
    });
    __publicField(this, "webcam", new WebCam());
    __publicField(this, "emit", (event) => {
      var _a2;
      if ((_a2 = this.events) == null ? void 0 : _a2.dispatchEvent)
        this.events.dispatchEvent(new Event(event));
    });
    __privateAdd(this, _loops, {});
    const tfVersion = (gne.tfjs || xW).replace(/-(.*)/, "");
    config.wasmPath = `https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm@${tfVersion}/dist/`;
    config.modelBasePath = env.browser ? "../models/" : "file://models/";
    this.version = version;
    Object.defineProperty(this, "version", { value: version });
    this.config = JSON.parse(JSON.stringify(config));
    Object.seal(this.config);
    this.config.cacheModels = typeof indexedDB !== "undefined";
    if (userConfig)
      this.config = mergeDeep(this.config, userConfig);
    setModelLoadOptions(this.config);
    this.tf = tfjs_esm_exports;
    this.state = "idle";
    __privateSet(this, _numTensors, 0);
    __privateSet(this, _analyzeMemoryLeaks, false);
    __privateSet(this, _checkSanity, false);
    this.performance = {};
    this.events = typeof EventTarget !== "undefined" ? new EventTarget() : void 0;
    this.models = new Models(this);
    init2();
    this.result = empty();
    this.process = { tensor: null, canvas: null };
    this.faceTriangulation = triangulation;
    this.faceUVMap = uvmap;
    validateModel(this, null, "");
    this.emit("create");
    if (this.config.debug || this.env.browser)
      log(`version: ${this.version}`);
    if (this.config.debug)
      log(`tfjs version: ${this.tf.version["tfjs-core"]}`);
    const envTemp = JSON.parse(JSON.stringify(this.env));
    delete envTemp.kernels;
    delete envTemp.initial;
    delete envTemp.perfadd;
    if (this.config.debug)
      log("environment:", envTemp);
  }
  reset() {
    const currentBackend = this.config.backend;
    this.config = JSON.parse(JSON.stringify(config));
    this.config.backend = currentBackend;
    reset();
    env.initial = true;
  }
  validate(userConfig) {
    const msgs = validate(config, userConfig || this.config);
    if (msgs.length === 0)
      this.config = mergeDeep(this.config, userConfig);
    return msgs;
  }
  now() {
    return now();
  }
  image(input, getTensor = false) {
    return process2(input, this.config, getTensor);
  }
  async segmentation(input, userConfig) {
    var _a2, _b2, _c2;
    if (userConfig)
      this.config = mergeDeep(this.config, userConfig);
    if (!this.config.segmentation.enabled)
      return null;
    const processed = await process2(input, this.config);
    if (!processed.tensor)
      return null;
    let tensor = null;
    if ((_a2 = this.config.segmentation.modelPath) == null ? void 0 : _a2.includes("rvm"))
      tensor = await predict20(processed.tensor, this.config);
    if ((_b2 = this.config.segmentation.modelPath) == null ? void 0 : _b2.includes("meet"))
      tensor = await predict16(processed.tensor, this.config);
    if ((_c2 = this.config.segmentation.modelPath) == null ? void 0 : _c2.includes("selfie"))
      tensor = await predict21(processed.tensor, this.config);
    Dt(processed.tensor);
    return tensor;
  }
  compare(firstImageTensor, secondImageTensor) {
    return compare(this.config, firstImageTensor, secondImageTensor);
  }
  async init() {
    await check(this, true);
    await this.tf.ready();
    reset();
  }
  async load(userConfig) {
    this.state = "load";
    const timeStamp = now();
    const count2 = Object.values(this.models.models).filter((model23) => model23).length;
    if (userConfig)
      this.config = mergeDeep(this.config, userConfig);
    if (this.env.initial) {
      if (!await check(this, false))
        log("error: backend check failed");
      await $ie();
      if (this.env.browser) {
        if (this.config.debug)
          log("configuration:", this.config);
        if (this.config.debug)
          log("tf flags:", this.tf.ENV.flags);
      }
    }
    await this.models.load(this);
    if (this.env.initial && this.config.debug)
      log("tf engine state:", this.tf.engine().state.numBytes, "bytes", this.tf.engine().state.numTensors, "tensors");
    this.env.initial = false;
    const loaded = Object.values(this.models.models).filter((model23) => model23).length;
    if (loaded !== count2) {
      this.models.validate();
      this.emit("load");
    }
    const current = Math.trunc(now() - timeStamp);
    if (current > (this.performance.loadModels || 0))
      this.performance.loadModels = this.env.perfadd ? (this.performance.loadModels || 0) + current : current;
  }
  next(result = this.result) {
    return calc2(result, this.config);
  }
  async warmup(userConfig) {
    const t0 = now();
    const res = await warmup(this, userConfig);
    const t12 = now();
    this.performance.warmup = Math.trunc(t12 - t0);
    return res;
  }
  async profile(input, userConfig) {
    const profile = await this.tf.profile(() => this.detect(input, userConfig));
    const kernels = {};
    let total = 0;
    for (const kernel of profile.kernels) {
      const ms2 = Number(kernel.kernelTimeMs) || 0;
      if (kernels[kernel.name])
        kernels[kernel.name] += ms2;
      else
        kernels[kernel.name] = ms2;
      total += ms2;
    }
    const kernelArr = [];
    Object.entries(kernels).forEach((key) => kernelArr.push({ kernel: key[0], time: key[1], perc: 0 }));
    for (const kernel of kernelArr) {
      kernel.perc = Math.round(1e3 * kernel.time / total) / 1e3;
      kernel.time = Math.round(1e3 * kernel.time) / 1e3;
    }
    kernelArr.sort((a, b) => b.time - a.time);
    kernelArr.length = 20;
    return kernelArr;
  }
  async detect(input, userConfig) {
    this.state = "detect";
    return new Promise(async (resolve) => {
      var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2, _k2, _l2, _m2, _n2, _o2, _p, _q2, _r2, _s2, _t, _u2;
      this.state = "config";
      let timeStamp;
      this.config = mergeDeep(this.config, userConfig);
      this.state = "check";
      const error = __privateGet(this, _sanity).call(this, input);
      if (error) {
        log(error, input);
        this.emit("error");
        resolve(empty(error));
      }
      const timeStart = now();
      await this.load();
      timeStamp = now();
      this.state = "image";
      const img = await process2(input, this.config);
      this.process = img;
      this.performance.inputProcess = this.env.perfadd ? (this.performance.inputProcess || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      this.analyze("Get Image:");
      if (!img.tensor) {
        if (this.config.debug)
          log("could not convert input to tensor");
        this.emit("error");
        resolve(empty("could not convert input to tensor"));
        return;
      }
      this.emit("image");
      timeStamp = now();
      this.config.skipAllowed = await skip(this.config, img.tensor);
      this.config.filter.autoBrightness = (this.config.filter.autoBrightness || false) && this.config.skipAllowed;
      if (!this.performance.totalFrames)
        this.performance.totalFrames = 0;
      if (!this.performance.cachedFrames)
        this.performance.cachedFrames = 0;
      this.performance.totalFrames++;
      if (this.config.skipAllowed)
        this.performance.cachedFrames++;
      this.performance.cacheCheck = this.env.perfadd ? (this.performance.cacheCheck || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      this.analyze("Check Changed:");
      let faceRes = [];
      let bodyRes = [];
      let handRes = [];
      let objectRes = [];
      this.state = "detect:face";
      if (this.config.async) {
        faceRes = this.config.face.enabled ? detectFace(this, img.tensor) : [];
        if (this.performance.face)
          delete this.performance.face;
      } else {
        timeStamp = now();
        faceRes = this.config.face.enabled ? await detectFace(this, img.tensor) : [];
        this.performance.face = this.env.perfadd ? (this.performance.face || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      if (this.config.async && (this.config.body.maxDetected === -1 || this.config.hand.maxDetected === -1))
        faceRes = await faceRes;
      this.analyze("Start Body:");
      this.state = "detect:body";
      const bodyConfig = this.config.body.maxDetected === -1 ? mergeDeep(this.config, { body: { maxDetected: this.config.face.enabled ? 1 * faceRes.length : 1 } }) : this.config;
      if (this.config.async) {
        if ((_a2 = this.config.body.modelPath) == null ? void 0 : _a2.includes("posenet"))
          bodyRes = this.config.body.enabled ? predict19(img.tensor, bodyConfig) : [];
        else if ((_b2 = this.config.body.modelPath) == null ? void 0 : _b2.includes("blazepose"))
          bodyRes = this.config.body.enabled ? predict(img.tensor, bodyConfig) : [];
        else if ((_c2 = this.config.body.modelPath) == null ? void 0 : _c2.includes("efficientpose"))
          bodyRes = this.config.body.enabled ? predict3(img.tensor, bodyConfig) : [];
        else if ((_d2 = this.config.body.modelPath) == null ? void 0 : _d2.includes("movenet"))
          bodyRes = this.config.body.enabled ? predict17(img.tensor, bodyConfig) : [];
        if (this.performance.body)
          delete this.performance.body;
      } else {
        timeStamp = now();
        if ((_e2 = this.config.body.modelPath) == null ? void 0 : _e2.includes("posenet"))
          bodyRes = this.config.body.enabled ? await predict19(img.tensor, bodyConfig) : [];
        else if ((_f2 = this.config.body.modelPath) == null ? void 0 : _f2.includes("blazepose"))
          bodyRes = this.config.body.enabled ? await predict(img.tensor, bodyConfig) : [];
        else if ((_g2 = this.config.body.modelPath) == null ? void 0 : _g2.includes("efficientpose"))
          bodyRes = this.config.body.enabled ? await predict3(img.tensor, bodyConfig) : [];
        else if ((_h2 = this.config.body.modelPath) == null ? void 0 : _h2.includes("movenet"))
          bodyRes = this.config.body.enabled ? await predict17(img.tensor, bodyConfig) : [];
        this.performance.body = this.env.perfadd ? (this.performance.body || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      this.analyze("End Body:");
      this.analyze("Start Hand:");
      this.state = "detect:hand";
      const handConfig = this.config.hand.maxDetected === -1 ? mergeDeep(this.config, { hand: { maxDetected: this.config.face.enabled ? 2 * faceRes.length : 1 } }) : this.config;
      if (this.config.async) {
        if ((_j2 = (_i2 = this.config.hand.detector) == null ? void 0 : _i2.modelPath) == null ? void 0 : _j2.includes("handdetect"))
          handRes = this.config.hand.enabled ? predict14(img.tensor, handConfig) : [];
        else if ((_l2 = (_k2 = this.config.hand.detector) == null ? void 0 : _k2.modelPath) == null ? void 0 : _l2.includes("handtrack"))
          handRes = this.config.hand.enabled ? predict15(img.tensor, handConfig) : [];
        if (this.performance.hand)
          delete this.performance.hand;
      } else {
        timeStamp = now();
        if ((_n2 = (_m2 = this.config.hand.detector) == null ? void 0 : _m2.modelPath) == null ? void 0 : _n2.includes("handdetect"))
          handRes = this.config.hand.enabled ? await predict14(img.tensor, handConfig) : [];
        else if ((_p = (_o2 = this.config.hand.detector) == null ? void 0 : _o2.modelPath) == null ? void 0 : _p.includes("handtrack"))
          handRes = this.config.hand.enabled ? await predict15(img.tensor, handConfig) : [];
        this.performance.hand = this.env.perfadd ? (this.performance.hand || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      this.analyze("End Hand:");
      this.analyze("Start Object:");
      this.state = "detect:object";
      if (this.config.async) {
        if ((_q2 = this.config.object.modelPath) == null ? void 0 : _q2.includes("nanodet"))
          objectRes = this.config.object.enabled ? predict18(img.tensor, this.config) : [];
        else if ((_r2 = this.config.object.modelPath) == null ? void 0 : _r2.includes("centernet"))
          objectRes = this.config.object.enabled ? predict2(img.tensor, this.config) : [];
        if (this.performance.object)
          delete this.performance.object;
      } else {
        timeStamp = now();
        if ((_s2 = this.config.object.modelPath) == null ? void 0 : _s2.includes("nanodet"))
          objectRes = this.config.object.enabled ? await predict18(img.tensor, this.config) : [];
        else if ((_t = this.config.object.modelPath) == null ? void 0 : _t.includes("centernet"))
          objectRes = this.config.object.enabled ? await predict2(img.tensor, this.config) : [];
        this.performance.object = this.env.perfadd ? (this.performance.object || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
      }
      this.analyze("End Object:");
      this.state = "detect:await";
      if (this.config.async)
        [faceRes, bodyRes, handRes, objectRes] = await Promise.all([faceRes, bodyRes, handRes, objectRes]);
      this.state = "detect:gesture";
      let gestureRes = [];
      if (this.config.gesture.enabled) {
        timeStamp = now();
        gestureRes = [...face2(faceRes), ...body2(bodyRes), ...hand2(handRes), ...iris2(faceRes)];
        if (!this.config.async)
          this.performance.gesture = this.env.perfadd ? (this.performance.gesture || 0) + Math.trunc(now() - timeStamp) : Math.trunc(now() - timeStamp);
        else if (this.performance.gesture)
          delete this.performance.gesture;
      }
      this.performance.total = this.env.perfadd ? (this.performance.total || 0) + Math.trunc(now() - timeStart) : Math.trunc(now() - timeStart);
      const shape = ((_u2 = this.process.tensor) == null ? void 0 : _u2.shape) || [0, 0, 0, 0];
      this.result = {
        face: faceRes,
        body: bodyRes,
        hand: handRes,
        gesture: gestureRes,
        object: objectRes,
        performance: this.performance,
        canvas: this.process.canvas,
        timestamp: Date.now(),
        error: null,
        width: shape[2],
        height: shape[1],
        get persons() {
          return join2(faceRes, bodyRes, handRes, gestureRes, shape);
        }
      };
      Dt(img.tensor);
      this.emit("detect");
      this.state = "idle";
      resolve(this.result);
    });
  }
  async sleep(ms2) {
    return new Promise((resolve) => {
      setTimeout(resolve, ms2);
    });
  }
  async video(element, run = true, delay = 0) {
    if (run) {
      if (!__privateGet(this, _loops)[element.id]) {
        if (this.config.debug)
          log("video start", element.id);
        __privateGet(this, _loops)[element.id] = true;
      }
      if (!element.paused && __privateGet(this, _loops)[element.id] && element.readyState >= 2)
        await this.detect(element);
      if (delay > 0)
        await this.sleep(delay);
      if (__privateGet(this, _loops)[element.id])
        requestAnimationFrame(() => this.video(element, run, delay));
    } else {
      if (this.config.debug)
        log("video stop", element.id);
      __privateGet(this, _loops)[element.id] = false;
    }
  }
};
_numTensors = /* @__PURE__ */ new WeakMap();
_analyzeMemoryLeaks = /* @__PURE__ */ new WeakMap();
_checkSanity = /* @__PURE__ */ new WeakMap();
_sanity = /* @__PURE__ */ new WeakMap();
_loops = /* @__PURE__ */ new WeakMap();

// src/worker.ts
var human;
onmessage = async (msg) => {
  if (!human) {
    human = new Human(msg.data.config);
    await human.validate(msg.data.config);
    await human.init();
    await human.load();
    const models3 = Object.values(human.models).filter((m) => m).map((m) => m.modelUrl);
    postMessage({ state: JSON.stringify(human.tf.engine().state), models: models3 });
  }
  let result;
  if (msg.data.image) {
    const tensor = human.tf.tensor(msg.data.image, [1, human.config.filter.height, human.config.filter.width, 3], "float32");
    result = await human.detect(tensor, msg.data.config);
    human.tf.dispose(tensor);
    postMessage({ result });
  } else {
    await human.warmup();
    postMessage({ warmup: true });
  }
};
//# sourceMappingURL=worker.js.map
